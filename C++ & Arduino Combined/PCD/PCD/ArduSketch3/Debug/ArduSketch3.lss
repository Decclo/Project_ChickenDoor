
ArduSketch3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ca  00800100  00002cfc  00002d90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002cfc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b1  008001ca  008001ca  00002e5a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002e5a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002e8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000838  00000000  00000000  00002ed0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011698  00000000  00000000  00003708  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000322c  00000000  00000000  00014da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000049e7  00000000  00000000  00017fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001838  00000000  00000000  0001c9b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003c00  00000000  00000000  0001e1ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000086a0  00000000  00000000  00021dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007e0  00000000  00000000  0002a48c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__ctors_end>
       4:	0c 94 9f 0a 	jmp	0x153e	; 0x153e <__vector_1>
       8:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <__vector_2>
       c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      10:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      14:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      18:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      1c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      20:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      24:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      28:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      2c:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__vector_11>
      30:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      34:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      38:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      3c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      40:	0c 94 ed 0a 	jmp	0x15da	; 0x15da <__vector_16>
      44:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      48:	0c 94 08 09 	jmp	0x1210	; 0x1210 <__vector_18>
      4c:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__vector_19>
      50:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      54:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      58:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      5c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      60:	0c 94 bb 14 	jmp	0x2976	; 0x2976 <__vector_24>
      64:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      68:	b3 03       	fmuls	r19, r19
      6a:	22 04       	cpc	r2, r2
      6c:	8d 04       	cpc	r8, r13
      6e:	02 05       	cpc	r16, r2
      70:	72 05       	cpc	r23, r2
      72:	8d 06       	cpc	r8, r29
      74:	8d 06       	cpc	r8, r29
      76:	8d 06       	cpc	r8, r29
      78:	8d 06       	cpc	r8, r29
      7a:	8d 06       	cpc	r8, r29
      7c:	b9 05       	cpc	r27, r9
      7e:	37 06       	cpc	r3, r23
      80:	f6 04       	cpc	r15, r6
      82:	9b 06       	cpc	r9, r27
      84:	7e 06       	cpc	r7, r30
      86:	8d 06       	cpc	r8, r29
      88:	8d 06       	cpc	r8, r29
      8a:	8d 06       	cpc	r8, r29
      8c:	8d 06       	cpc	r8, r29
      8e:	8d 06       	cpc	r8, r29
      90:	9b 06       	cpc	r9, r27
      92:	9b 06       	cpc	r9, r27
      94:	9b 06       	cpc	r9, r27
      96:	9b 06       	cpc	r9, r27
      98:	9b 06       	cpc	r9, r27

0000009a <__trampolines_end>:
      9a:	00 00       	nop
      9c:	00 08       	sbc	r0, r0
      9e:	00 02       	muls	r16, r16
      a0:	01 00       	.word	0x0001	; ????
      a2:	00 03       	mulsu	r16, r16
      a4:	04 07       	cpc	r16, r20
	...

000000ae <digital_pin_to_bit_mask_PGM>:
      ae:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      be:	04 08 10 20                                         ... 

000000c2 <digital_pin_to_port_PGM>:
      c2:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      d2:	03 03 03 03                                         ....

000000d6 <port_to_output_PGM>:
      d6:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000e0 <port_to_mode_PGM>:
      e0:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000ea <_ZL17monthShortNames_P>:
      ea:	45 72 72 4a 61 6e 46 65 62 4d 61 72 41 70 72 4d     ErrJanFebMarAprM
      fa:	61 79 4a 75 6e 4a 75 6c 41 75 67 53 65 70 4f 63     ayJunJulAugSepOc
     10a:	74 4e 6f 76 44 65 63 00                             tNovDec.

00000112 <__ctors_start>:
     112:	b7 07       	cpc	r27, r23
     114:	60 09       	sbc	r22, r0
     116:	97 0c       	add	r9, r7
     118:	c2 13       	cpse	r28, r18

0000011a <__ctors_end>:
     11a:	11 24       	eor	r1, r1
     11c:	1f be       	out	0x3f, r1	; 63
     11e:	cf ef       	ldi	r28, 0xFF	; 255
     120:	d8 e0       	ldi	r29, 0x08	; 8
     122:	de bf       	out	0x3e, r29	; 62
     124:	cd bf       	out	0x3d, r28	; 61

00000126 <__do_copy_data>:
     126:	11 e0       	ldi	r17, 0x01	; 1
     128:	a0 e0       	ldi	r26, 0x00	; 0
     12a:	b1 e0       	ldi	r27, 0x01	; 1
     12c:	ec ef       	ldi	r30, 0xFC	; 252
     12e:	fc e2       	ldi	r31, 0x2C	; 44
     130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x10>
     132:	05 90       	lpm	r0, Z+
     134:	0d 92       	st	X+, r0
     136:	aa 3c       	cpi	r26, 0xCA	; 202
     138:	b1 07       	cpc	r27, r17
     13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0xc>

0000013c <__do_clear_bss>:
     13c:	23 e0       	ldi	r18, 0x03	; 3
     13e:	aa ec       	ldi	r26, 0xCA	; 202
     140:	b1 e0       	ldi	r27, 0x01	; 1
     142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
     144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
     146:	ab 37       	cpi	r26, 0x7B	; 123
     148:	b2 07       	cpc	r27, r18
     14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>

0000014c <__do_global_ctors>:
     14c:	10 e0       	ldi	r17, 0x00	; 0
     14e:	cd e8       	ldi	r28, 0x8D	; 141
     150:	d0 e0       	ldi	r29, 0x00	; 0
     152:	04 c0       	rjmp	.+8      	; 0x15c <__do_global_ctors+0x10>
     154:	21 97       	sbiw	r28, 0x01	; 1
     156:	fe 01       	movw	r30, r28
     158:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <__tablejump2__>
     15c:	c9 38       	cpi	r28, 0x89	; 137
     15e:	d1 07       	cpc	r29, r17
     160:	c9 f7       	brne	.-14     	; 0x154 <__do_global_ctors+0x8>
     162:	0e 94 2e 07 	call	0xe5c	; 0xe5c <main>
     166:	0c 94 7c 16 	jmp	0x2cf8	; 0x2cf8 <_exit>

0000016a <__bad_interrupt>:
     16a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000016e <_Z8alarmIsrv>:
		eeprom_write_byte((uint8_t *)alarm2_addr+i, u.byte_array[0+i]);
	}
}


liftRelayArray::liftRelayArray()
     16e:	81 e0       	ldi	r24, 0x01	; 1
     170:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <alarmIsrWasCalled>
     174:	08 95       	ret

00000176 <_ZlsR5PrintRK6_BASED>:
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	ec 01       	movw	r28, r24
     17c:	fb 01       	movw	r30, r22
     17e:	24 81       	ldd	r18, Z+4	; 0x04
     180:	35 81       	ldd	r19, Z+5	; 0x05
     182:	40 81       	ld	r20, Z
     184:	51 81       	ldd	r21, Z+1	; 0x01
     186:	62 81       	ldd	r22, Z+2	; 0x02
     188:	73 81       	ldd	r23, Z+3	; 0x03
     18a:	0e 94 36 0a 	call	0x146c	; 0x146c <_ZN5Print5printEli>
     18e:	ce 01       	movw	r24, r28
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t>:
     196:	ef 92       	push	r14
     198:	ff 92       	push	r15
     19a:	0f 93       	push	r16
     19c:	1f 93       	push	r17
     19e:	cf 93       	push	r28
     1a0:	df 93       	push	r29
     1a2:	cd b7       	in	r28, 0x3d	; 61
     1a4:	de b7       	in	r29, 0x3e	; 62
     1a6:	27 97       	sbiw	r28, 0x07	; 7
     1a8:	0f b6       	in	r0, 0x3f	; 63
     1aa:	f8 94       	cli
     1ac:	de bf       	out	0x3e, r29	; 62
     1ae:	0f be       	out	0x3f, r0	; 63
     1b0:	cd bf       	out	0x3d, r28	; 61
     1b2:	5e 83       	std	Y+6, r21	; 0x06
     1b4:	f2 2e       	mov	r15, r18
     1b6:	e4 2e       	mov	r14, r20
     1b8:	89 e0       	ldi	r24, 0x09	; 9
     1ba:	84 17       	cp	r24, r20
     1bc:	18 f4       	brcc	.+6      	; 0x1c4 <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0x2e>
     1be:	62 e9       	ldi	r22, 0x92	; 146
     1c0:	71 e0       	ldi	r23, 0x01	; 1
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0x32>
     1c4:	66 e0       	ldi	r22, 0x06	; 6
     1c6:	71 e0       	ldi	r23, 0x01	; 1
     1c8:	8e ef       	ldi	r24, 0xFE	; 254
     1ca:	91 e0       	ldi	r25, 0x01	; 1
     1cc:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     1d0:	4a e0       	ldi	r20, 0x0A	; 10
     1d2:	50 e0       	ldi	r21, 0x00	; 0
     1d4:	6e 2d       	mov	r22, r14
     1d6:	8e ef       	ldi	r24, 0xFE	; 254
     1d8:	91 e0       	ldi	r25, 0x01	; 1
     1da:	0e 94 2f 0a 	call	0x145e	; 0x145e <_ZN5Print5printEhi>
     1de:	60 e2       	ldi	r22, 0x20	; 32
     1e0:	8e ef       	ldi	r24, 0xFE	; 254
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	0e 94 ce 09 	call	0x139c	; 0x139c <_ZN5Print5printEc>
     1e8:	8e 81       	ldd	r24, Y+6	; 0x06
     1ea:	0e 94 84 10 	call	0x2108	; 0x2108 <_Z13monthShortStrh>
     1ee:	bc 01       	movw	r22, r24
     1f0:	8e ef       	ldi	r24, 0xFE	; 254
     1f2:	91 e0       	ldi	r25, 0x01	; 1
     1f4:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     1f8:	60 e2       	ldi	r22, 0x20	; 32
     1fa:	8e ef       	ldi	r24, 0xFE	; 254
     1fc:	91 e0       	ldi	r25, 0x01	; 1
     1fe:	0e 94 ce 09 	call	0x139c	; 0x139c <_ZN5Print5printEc>
     202:	89 e0       	ldi	r24, 0x09	; 9
     204:	8f 15       	cp	r24, r15
     206:	18 f4       	brcc	.+6      	; 0x20e <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0x78>
     208:	62 e9       	ldi	r22, 0x92	; 146
     20a:	71 e0       	ldi	r23, 0x01	; 1
     20c:	02 c0       	rjmp	.+4      	; 0x212 <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0x7c>
     20e:	66 e0       	ldi	r22, 0x06	; 6
     210:	71 e0       	ldi	r23, 0x01	; 1
     212:	8e ef       	ldi	r24, 0xFE	; 254
     214:	91 e0       	ldi	r25, 0x01	; 1
     216:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     21a:	4a e0       	ldi	r20, 0x0A	; 10
     21c:	50 e0       	ldi	r21, 0x00	; 0
     21e:	6f 2d       	mov	r22, r15
     220:	8e ef       	ldi	r24, 0xFE	; 254
     222:	91 e0       	ldi	r25, 0x01	; 1
     224:	0e 94 2f 0a 	call	0x145e	; 0x145e <_ZN5Print5printEhi>
     228:	6a e3       	ldi	r22, 0x3A	; 58
     22a:	8e ef       	ldi	r24, 0xFE	; 254
     22c:	91 e0       	ldi	r25, 0x01	; 1
     22e:	0e 94 ce 09 	call	0x139c	; 0x139c <_ZN5Print5printEc>
     232:	1a 30       	cpi	r17, 0x0A	; 10
     234:	18 f0       	brcs	.+6      	; 0x23c <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0xa6>
     236:	62 e9       	ldi	r22, 0x92	; 146
     238:	71 e0       	ldi	r23, 0x01	; 1
     23a:	02 c0       	rjmp	.+4      	; 0x240 <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0xaa>
     23c:	66 e0       	ldi	r22, 0x06	; 6
     23e:	71 e0       	ldi	r23, 0x01	; 1
     240:	8e ef       	ldi	r24, 0xFE	; 254
     242:	91 e0       	ldi	r25, 0x01	; 1
     244:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     248:	4a e0       	ldi	r20, 0x0A	; 10
     24a:	50 e0       	ldi	r21, 0x00	; 0
     24c:	61 2f       	mov	r22, r17
     24e:	8e ef       	ldi	r24, 0xFE	; 254
     250:	91 e0       	ldi	r25, 0x01	; 1
     252:	0e 94 2f 0a 	call	0x145e	; 0x145e <_ZN5Print5printEhi>
     256:	6a e3       	ldi	r22, 0x3A	; 58
     258:	8e ef       	ldi	r24, 0xFE	; 254
     25a:	91 e0       	ldi	r25, 0x01	; 1
     25c:	0e 94 ce 09 	call	0x139c	; 0x139c <_ZN5Print5printEc>
     260:	0a 30       	cpi	r16, 0x0A	; 10
     262:	18 f0       	brcs	.+6      	; 0x26a <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0xd4>
     264:	62 e9       	ldi	r22, 0x92	; 146
     266:	71 e0       	ldi	r23, 0x01	; 1
     268:	02 c0       	rjmp	.+4      	; 0x26e <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0xd8>
     26a:	66 e0       	ldi	r22, 0x06	; 6
     26c:	71 e0       	ldi	r23, 0x01	; 1
     26e:	8e ef       	ldi	r24, 0xFE	; 254
     270:	91 e0       	ldi	r25, 0x01	; 1
     272:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     276:	4a e0       	ldi	r20, 0x0A	; 10
     278:	50 e0       	ldi	r21, 0x00	; 0
     27a:	60 2f       	mov	r22, r16
     27c:	8e ef       	ldi	r24, 0xFE	; 254
     27e:	91 e0       	ldi	r25, 0x01	; 1
     280:	0e 94 2f 0a 	call	0x145e	; 0x145e <_ZN5Print5printEhi>
     284:	8e ef       	ldi	r24, 0xFE	; 254
     286:	91 e0       	ldi	r25, 0x01	; 1
     288:	27 96       	adiw	r28, 0x07	; 7
     28a:	0f b6       	in	r0, 0x3f	; 63
     28c:	f8 94       	cli
     28e:	de bf       	out	0x3e, r29	; 62
     290:	0f be       	out	0x3f, r0	; 63
     292:	cd bf       	out	0x3d, r28	; 61
     294:	df 91       	pop	r29
     296:	cf 91       	pop	r28
     298:	1f 91       	pop	r17
     29a:	0f 91       	pop	r16
     29c:	ff 90       	pop	r15
     29e:	ef 90       	pop	r14
     2a0:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <_ZN5Print7printlnEv>

000002a4 <_ZN23Human_Machine_Interface13printDateTimeEm>:
     2a4:	cf 92       	push	r12
     2a6:	df 92       	push	r13
     2a8:	ef 92       	push	r14
     2aa:	ff 92       	push	r15
     2ac:	0f 93       	push	r16
     2ae:	1f 93       	push	r17
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	00 d0       	rcall	.+0      	; 0x2b6 <_ZN23Human_Machine_Interface13printDateTimeEm+0x12>
     2b6:	00 d0       	rcall	.+0      	; 0x2b8 <_ZN23Human_Machine_Interface13printDateTimeEm+0x14>
     2b8:	00 d0       	rcall	.+0      	; 0x2ba <_ZN23Human_Machine_Interface13printDateTimeEm+0x16>
     2ba:	cd b7       	in	r28, 0x3d	; 61
     2bc:	de b7       	in	r29, 0x3e	; 62
     2be:	6a 01       	movw	r12, r20
     2c0:	7b 01       	movw	r14, r22
     2c2:	cb 01       	movw	r24, r22
     2c4:	ba 01       	movw	r22, r20
     2c6:	0e 94 b8 11 	call	0x2370	; 0x2370 <_Z3daym>
     2ca:	09 2e       	mov	r0, r25
     2cc:	00 0c       	add	r0, r0
     2ce:	aa 0b       	sbc	r26, r26
     2d0:	bb 0b       	sbc	r27, r27
     2d2:	89 83       	std	Y+1, r24	; 0x01
     2d4:	9a 83       	std	Y+2, r25	; 0x02
     2d6:	ab 83       	std	Y+3, r26	; 0x03
     2d8:	bc 83       	std	Y+4, r27	; 0x04
     2da:	8a e0       	ldi	r24, 0x0A	; 10
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	9e 83       	std	Y+6, r25	; 0x06
     2e0:	8d 83       	std	Y+5, r24	; 0x05
     2e2:	c7 01       	movw	r24, r14
     2e4:	b6 01       	movw	r22, r12
     2e6:	0e 94 b8 11 	call	0x2370	; 0x2370 <_Z3daym>
     2ea:	0a 97       	sbiw	r24, 0x0a	; 10
     2ec:	1c f0       	brlt	.+6      	; 0x2f4 <_ZN23Human_Machine_Interface13printDateTimeEm+0x50>
     2ee:	62 e9       	ldi	r22, 0x92	; 146
     2f0:	71 e0       	ldi	r23, 0x01	; 1
     2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <_ZN23Human_Machine_Interface13printDateTimeEm+0x54>
     2f4:	66 e0       	ldi	r22, 0x06	; 6
     2f6:	71 e0       	ldi	r23, 0x01	; 1
     2f8:	8e ef       	ldi	r24, 0xFE	; 254
     2fa:	91 e0       	ldi	r25, 0x01	; 1
     2fc:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     300:	be 01       	movw	r22, r28
     302:	6f 5f       	subi	r22, 0xFF	; 255
     304:	7f 4f       	sbci	r23, 0xFF	; 255
     306:	8e ef       	ldi	r24, 0xFE	; 254
     308:	91 e0       	ldi	r25, 0x01	; 1
     30a:	0e 94 bb 00 	call	0x176	; 0x176 <_ZlsR5PrintRK6_BASED>
     30e:	60 e2       	ldi	r22, 0x20	; 32
     310:	0e 94 ce 09 	call	0x139c	; 0x139c <_ZN5Print5printEc>
     314:	c7 01       	movw	r24, r14
     316:	b6 01       	movw	r22, r12
     318:	0e 94 c4 11 	call	0x2388	; 0x2388 <_Z4yearm>
     31c:	09 2e       	mov	r0, r25
     31e:	00 0c       	add	r0, r0
     320:	aa 0b       	sbc	r26, r26
     322:	bb 0b       	sbc	r27, r27
     324:	89 83       	std	Y+1, r24	; 0x01
     326:	9a 83       	std	Y+2, r25	; 0x02
     328:	ab 83       	std	Y+3, r26	; 0x03
     32a:	bc 83       	std	Y+4, r27	; 0x04
     32c:	0a e0       	ldi	r16, 0x0A	; 10
     32e:	10 e0       	ldi	r17, 0x00	; 0
     330:	1e 83       	std	Y+6, r17	; 0x06
     332:	0d 83       	std	Y+5, r16	; 0x05
     334:	c7 01       	movw	r24, r14
     336:	b6 01       	movw	r22, r12
     338:	0e 94 be 11 	call	0x237c	; 0x237c <_Z5monthm>
     33c:	0e 94 84 10 	call	0x2108	; 0x2108 <_Z13monthShortStrh>
     340:	bc 01       	movw	r22, r24
     342:	8e ef       	ldi	r24, 0xFE	; 254
     344:	91 e0       	ldi	r25, 0x01	; 1
     346:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     34a:	60 e6       	ldi	r22, 0x60	; 96
     34c:	71 e0       	ldi	r23, 0x01	; 1
     34e:	8e ef       	ldi	r24, 0xFE	; 254
     350:	91 e0       	ldi	r25, 0x01	; 1
     352:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     356:	be 01       	movw	r22, r28
     358:	6f 5f       	subi	r22, 0xFF	; 255
     35a:	7f 4f       	sbci	r23, 0xFF	; 255
     35c:	8e ef       	ldi	r24, 0xFE	; 254
     35e:	91 e0       	ldi	r25, 0x01	; 1
     360:	0e 94 bb 00 	call	0x176	; 0x176 <_ZlsR5PrintRK6_BASED>
     364:	60 e2       	ldi	r22, 0x20	; 32
     366:	0e 94 ce 09 	call	0x139c	; 0x139c <_ZN5Print5printEc>
     36a:	c7 01       	movw	r24, r14
     36c:	b6 01       	movw	r22, r12
     36e:	0e 94 a6 11 	call	0x234c	; 0x234c <_Z4hourm>
     372:	09 2e       	mov	r0, r25
     374:	00 0c       	add	r0, r0
     376:	aa 0b       	sbc	r26, r26
     378:	bb 0b       	sbc	r27, r27
     37a:	89 83       	std	Y+1, r24	; 0x01
     37c:	9a 83       	std	Y+2, r25	; 0x02
     37e:	ab 83       	std	Y+3, r26	; 0x03
     380:	bc 83       	std	Y+4, r27	; 0x04
     382:	1e 83       	std	Y+6, r17	; 0x06
     384:	0d 83       	std	Y+5, r16	; 0x05
     386:	c7 01       	movw	r24, r14
     388:	b6 01       	movw	r22, r12
     38a:	0e 94 a6 11 	call	0x234c	; 0x234c <_Z4hourm>
     38e:	0a 97       	sbiw	r24, 0x0a	; 10
     390:	1c f0       	brlt	.+6      	; 0x398 <_ZN23Human_Machine_Interface13printDateTimeEm+0xf4>
     392:	62 e9       	ldi	r22, 0x92	; 146
     394:	71 e0       	ldi	r23, 0x01	; 1
     396:	02 c0       	rjmp	.+4      	; 0x39c <_ZN23Human_Machine_Interface13printDateTimeEm+0xf8>
     398:	66 e0       	ldi	r22, 0x06	; 6
     39a:	71 e0       	ldi	r23, 0x01	; 1
     39c:	8e ef       	ldi	r24, 0xFE	; 254
     39e:	91 e0       	ldi	r25, 0x01	; 1
     3a0:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     3a4:	be 01       	movw	r22, r28
     3a6:	6f 5f       	subi	r22, 0xFF	; 255
     3a8:	7f 4f       	sbci	r23, 0xFF	; 255
     3aa:	8e ef       	ldi	r24, 0xFE	; 254
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	0e 94 bb 00 	call	0x176	; 0x176 <_ZlsR5PrintRK6_BASED>
     3b2:	6a e3       	ldi	r22, 0x3A	; 58
     3b4:	0e 94 ce 09 	call	0x139c	; 0x139c <_ZN5Print5printEc>
     3b8:	c7 01       	movw	r24, r14
     3ba:	b6 01       	movw	r22, r12
     3bc:	0e 94 ac 11 	call	0x2358	; 0x2358 <_Z6minutem>
     3c0:	09 2e       	mov	r0, r25
     3c2:	00 0c       	add	r0, r0
     3c4:	aa 0b       	sbc	r26, r26
     3c6:	bb 0b       	sbc	r27, r27
     3c8:	89 83       	std	Y+1, r24	; 0x01
     3ca:	9a 83       	std	Y+2, r25	; 0x02
     3cc:	ab 83       	std	Y+3, r26	; 0x03
     3ce:	bc 83       	std	Y+4, r27	; 0x04
     3d0:	8a e0       	ldi	r24, 0x0A	; 10
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	9e 83       	std	Y+6, r25	; 0x06
     3d6:	8d 83       	std	Y+5, r24	; 0x05
     3d8:	c7 01       	movw	r24, r14
     3da:	b6 01       	movw	r22, r12
     3dc:	0e 94 ac 11 	call	0x2358	; 0x2358 <_Z6minutem>
     3e0:	0a 97       	sbiw	r24, 0x0a	; 10
     3e2:	1c f0       	brlt	.+6      	; 0x3ea <_ZN23Human_Machine_Interface13printDateTimeEm+0x146>
     3e4:	62 e9       	ldi	r22, 0x92	; 146
     3e6:	71 e0       	ldi	r23, 0x01	; 1
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <_ZN23Human_Machine_Interface13printDateTimeEm+0x14a>
     3ea:	66 e0       	ldi	r22, 0x06	; 6
     3ec:	71 e0       	ldi	r23, 0x01	; 1
     3ee:	8e ef       	ldi	r24, 0xFE	; 254
     3f0:	91 e0       	ldi	r25, 0x01	; 1
     3f2:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     3f6:	be 01       	movw	r22, r28
     3f8:	6f 5f       	subi	r22, 0xFF	; 255
     3fa:	7f 4f       	sbci	r23, 0xFF	; 255
     3fc:	8e ef       	ldi	r24, 0xFE	; 254
     3fe:	91 e0       	ldi	r25, 0x01	; 1
     400:	0e 94 bb 00 	call	0x176	; 0x176 <_ZlsR5PrintRK6_BASED>
     404:	6a e3       	ldi	r22, 0x3A	; 58
     406:	0e 94 ce 09 	call	0x139c	; 0x139c <_ZN5Print5printEc>
     40a:	c7 01       	movw	r24, r14
     40c:	b6 01       	movw	r22, r12
     40e:	0e 94 b2 11 	call	0x2364	; 0x2364 <_Z6secondm>
     412:	09 2e       	mov	r0, r25
     414:	00 0c       	add	r0, r0
     416:	aa 0b       	sbc	r26, r26
     418:	bb 0b       	sbc	r27, r27
     41a:	89 83       	std	Y+1, r24	; 0x01
     41c:	9a 83       	std	Y+2, r25	; 0x02
     41e:	ab 83       	std	Y+3, r26	; 0x03
     420:	bc 83       	std	Y+4, r27	; 0x04
     422:	8a e0       	ldi	r24, 0x0A	; 10
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	9e 83       	std	Y+6, r25	; 0x06
     428:	8d 83       	std	Y+5, r24	; 0x05
     42a:	c7 01       	movw	r24, r14
     42c:	b6 01       	movw	r22, r12
     42e:	0e 94 b2 11 	call	0x2364	; 0x2364 <_Z6secondm>
     432:	0a 97       	sbiw	r24, 0x0a	; 10
     434:	1c f0       	brlt	.+6      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     436:	62 e9       	ldi	r22, 0x92	; 146
     438:	71 e0       	ldi	r23, 0x01	; 1
     43a:	02 c0       	rjmp	.+4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     43c:	66 e0       	ldi	r22, 0x06	; 6
     43e:	71 e0       	ldi	r23, 0x01	; 1
     440:	8e ef       	ldi	r24, 0xFE	; 254
     442:	91 e0       	ldi	r25, 0x01	; 1
     444:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     448:	be 01       	movw	r22, r28
     44a:	6f 5f       	subi	r22, 0xFF	; 255
     44c:	7f 4f       	sbci	r23, 0xFF	; 255
     44e:	8e ef       	ldi	r24, 0xFE	; 254
     450:	91 e0       	ldi	r25, 0x01	; 1
     452:	0e 94 bb 00 	call	0x176	; 0x176 <_ZlsR5PrintRK6_BASED>
     456:	26 96       	adiw	r28, 0x06	; 6
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	f8 94       	cli
     45c:	de bf       	out	0x3e, r29	; 62
     45e:	0f be       	out	0x3f, r0	; 63
     460:	cd bf       	out	0x3d, r28	; 61
     462:	df 91       	pop	r29
     464:	cf 91       	pop	r28
     466:	1f 91       	pop	r17
     468:	0f 91       	pop	r16
     46a:	ff 90       	pop	r15
     46c:	ef 90       	pop	r14
     46e:	df 90       	pop	r13
     470:	cf 90       	pop	r12
     472:	08 95       	ret

00000474 <_ZN23Human_Machine_Interface8ConvTotmEm>:
     474:	9f 92       	push	r9
     476:	af 92       	push	r10
     478:	bf 92       	push	r11
     47a:	cf 92       	push	r12
     47c:	df 92       	push	r13
     47e:	ef 92       	push	r14
     480:	ff 92       	push	r15
     482:	0f 93       	push	r16
     484:	1f 93       	push	r17
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	cd b7       	in	r28, 0x3d	; 61
     48c:	de b7       	in	r29, 0x3e	; 62
     48e:	27 97       	sbiw	r28, 0x07	; 7
     490:	0f b6       	in	r0, 0x3f	; 63
     492:	f8 94       	cli
     494:	de bf       	out	0x3e, r29	; 62
     496:	0f be       	out	0x3f, r0	; 63
     498:	cd bf       	out	0x3d, r28	; 61
     49a:	6a 01       	movw	r12, r20
     49c:	7b 01       	movw	r14, r22
     49e:	cb 01       	movw	r24, r22
     4a0:	ba 01       	movw	r22, r20
     4a2:	0e 94 c4 11 	call	0x2388	; 0x2388 <_Z4yearm>
     4a6:	18 2f       	mov	r17, r24
     4a8:	c7 01       	movw	r24, r14
     4aa:	b6 01       	movw	r22, r12
     4ac:	0e 94 b8 11 	call	0x2370	; 0x2370 <_Z3daym>
     4b0:	b8 2e       	mov	r11, r24
     4b2:	c7 01       	movw	r24, r14
     4b4:	b6 01       	movw	r22, r12
     4b6:	0e 94 be 11 	call	0x237c	; 0x237c <_Z5monthm>
     4ba:	08 2f       	mov	r16, r24
     4bc:	c7 01       	movw	r24, r14
     4be:	b6 01       	movw	r22, r12
     4c0:	0e 94 a6 11 	call	0x234c	; 0x234c <_Z4hourm>
     4c4:	a8 2e       	mov	r10, r24
     4c6:	c7 01       	movw	r24, r14
     4c8:	b6 01       	movw	r22, r12
     4ca:	0e 94 ac 11 	call	0x2358	; 0x2358 <_Z6minutem>
     4ce:	98 2e       	mov	r9, r24
     4d0:	c7 01       	movw	r24, r14
     4d2:	b6 01       	movw	r22, r12
     4d4:	0e 94 b2 11 	call	0x2364	; 0x2364 <_Z6secondm>
     4d8:	5c 81       	ldd	r21, Y+4	; 0x04
     4da:	28 2f       	mov	r18, r24
     4dc:	39 2d       	mov	r19, r9
     4de:	4a 2d       	mov	r20, r10
     4e0:	6b 2d       	mov	r22, r11
     4e2:	70 2f       	mov	r23, r16
     4e4:	81 2f       	mov	r24, r17
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	27 96       	adiw	r28, 0x07	; 7
     4ea:	0f b6       	in	r0, 0x3f	; 63
     4ec:	f8 94       	cli
     4ee:	de bf       	out	0x3e, r29	; 62
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	cd bf       	out	0x3d, r28	; 61
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	1f 91       	pop	r17
     4fa:	0f 91       	pop	r16
     4fc:	ff 90       	pop	r15
     4fe:	ef 90       	pop	r14
     500:	df 90       	pop	r13
     502:	cf 90       	pop	r12
     504:	bf 90       	pop	r11
     506:	af 90       	pop	r10
     508:	9f 90       	pop	r9
     50a:	08 95       	ret

0000050c <_ZN23Human_Machine_InterfaceC1Ev>:
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	ec 01       	movw	r28, r24
     512:	18 82       	st	Y, r1
     514:	40 e0       	ldi	r20, 0x00	; 0
     516:	50 e0       	ldi	r21, 0x00	; 0
     518:	ba 01       	movw	r22, r20
     51a:	81 ef       	ldi	r24, 0xF1	; 241
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN23Human_Machine_Interface8ConvTotmEm>
     522:	29 83       	std	Y+1, r18	; 0x01
     524:	5c 83       	std	Y+4, r21	; 0x04
     526:	6d 83       	std	Y+5, r22	; 0x05
     528:	7e 83       	std	Y+6, r23	; 0x06
     52a:	8f 83       	std	Y+7, r24	; 0x07
     52c:	88 e0       	ldi	r24, 0x08	; 8
     52e:	8b 83       	std	Y+3, r24	; 0x03
     530:	8e e1       	ldi	r24, 0x1E	; 30
     532:	8a 83       	std	Y+2, r24	; 0x02
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	08 95       	ret

0000053a <_ZN23Human_Machine_Interface16read_LCD_buttonsEv>:
     53a:	8e e0       	ldi	r24, 0x0E	; 14
     53c:	0e 94 de 0b 	call	0x17bc	; 0x17bc <analogRead>
     540:	9c 01       	movw	r18, r24
     542:	2b 31       	cpi	r18, 0x1B	; 27
     544:	84 e0       	ldi	r24, 0x04	; 4
     546:	38 07       	cpc	r19, r24
     548:	a4 f4       	brge	.+40     	; 0x572 <_ZN23Human_Machine_Interface16read_LCD_buttonsEv+0x38>
     54a:	22 33       	cpi	r18, 0x32	; 50
     54c:	31 05       	cpc	r19, r1
     54e:	9c f0       	brlt	.+38     	; 0x576 <_ZN23Human_Machine_Interface16read_LCD_buttonsEv+0x3c>
     550:	2a 3f       	cpi	r18, 0xFA	; 250
     552:	31 05       	cpc	r19, r1
     554:	94 f0       	brlt	.+36     	; 0x57a <_ZN23Human_Machine_Interface16read_LCD_buttonsEv+0x40>
     556:	22 3c       	cpi	r18, 0xC2	; 194
     558:	91 e0       	ldi	r25, 0x01	; 1
     55a:	39 07       	cpc	r19, r25
     55c:	84 f0       	brlt	.+32     	; 0x57e <_ZN23Human_Machine_Interface16read_LCD_buttonsEv+0x44>
     55e:	2a 38       	cpi	r18, 0x8A	; 138
     560:	82 e0       	ldi	r24, 0x02	; 2
     562:	38 07       	cpc	r19, r24
     564:	74 f0       	brlt	.+28     	; 0x582 <_ZN23Human_Machine_Interface16read_LCD_buttonsEv+0x48>
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	22 35       	cpi	r18, 0x52	; 82
     56a:	33 40       	sbci	r19, 0x03	; 3
     56c:	5c f0       	brlt	.+22     	; 0x584 <_ZN23Human_Machine_Interface16read_LCD_buttonsEv+0x4a>
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	08 95       	ret
     572:	82 e0       	ldi	r24, 0x02	; 2
     574:	08 95       	ret
     576:	83 e0       	ldi	r24, 0x03	; 3
     578:	08 95       	ret
     57a:	84 e0       	ldi	r24, 0x04	; 4
     57c:	08 95       	ret
     57e:	85 e0       	ldi	r24, 0x05	; 5
     580:	08 95       	ret
     582:	86 e0       	ldi	r24, 0x06	; 6
     584:	08 95       	ret

00000586 <_ZN16DS3231RTC_Alarms11init_alarmsEv>:
     586:	ef 92       	push	r14
     588:	ff 92       	push	r15
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	ec 01       	movw	r28, r24
     594:	52 98       	cbi	0x0a, 2	; 10
     596:	5a 9a       	sbi	0x0b, 2	; 11
     598:	42 e0       	ldi	r20, 0x02	; 2
     59a:	50 e0       	ldi	r21, 0x00	; 0
     59c:	67 eb       	ldi	r22, 0xB7	; 183
     59e:	70 e0       	ldi	r23, 0x00	; 0
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <attachInterrupt>
     5a6:	64 e0       	ldi	r22, 0x04	; 4
     5a8:	84 ea       	ldi	r24, 0xA4	; 164
     5aa:	92 e0       	ldi	r25, 0x02	; 2
     5ac:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <_ZN9DS3232RTC10squareWaveE14SQWAVE_FREQS_t>
     5b0:	61 e0       	ldi	r22, 0x01	; 1
     5b2:	84 ea       	ldi	r24, 0xA4	; 164
     5b4:	92 e0       	ldi	r25, 0x02	; 2
     5b6:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <_ZN9DS3232RTC5alarmEh>
     5ba:	41 e0       	ldi	r20, 0x01	; 1
     5bc:	61 e0       	ldi	r22, 0x01	; 1
     5be:	84 ea       	ldi	r24, 0xA4	; 164
     5c0:	92 e0       	ldi	r25, 0x02	; 2
     5c2:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <_ZN9DS3232RTC14alarmInterruptEhb>
     5c6:	62 e0       	ldi	r22, 0x02	; 2
     5c8:	84 ea       	ldi	r24, 0xA4	; 164
     5ca:	92 e0       	ldi	r25, 0x02	; 2
     5cc:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <_ZN9DS3232RTC5alarmEh>
     5d0:	41 e0       	ldi	r20, 0x01	; 1
     5d2:	62 e0       	ldi	r22, 0x02	; 2
     5d4:	84 ea       	ldi	r24, 0xA4	; 164
     5d6:	92 e0       	ldi	r25, 0x02	; 2
     5d8:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <_ZN9DS3232RTC14alarmInterruptEhb>
     5dc:	00 91 f9 01 	lds	r16, 0x01F9	; 0x8001f9 <alarm1_addr>
     5e0:	10 e0       	ldi	r17, 0x00	; 0
     5e2:	7e 01       	movw	r14, r28
     5e4:	87 e0       	ldi	r24, 0x07	; 7
     5e6:	e8 0e       	add	r14, r24
     5e8:	f1 1c       	adc	r15, r1
     5ea:	0c 1b       	sub	r16, r28
     5ec:	1d 0b       	sbc	r17, r29
     5ee:	c8 01       	movw	r24, r16
     5f0:	8c 0f       	add	r24, r28
     5f2:	9d 1f       	adc	r25, r29
     5f4:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <eeprom_read_byte>
     5f8:	89 93       	st	Y+, r24
     5fa:	ce 15       	cp	r28, r14
     5fc:	df 05       	cpc	r29, r15
     5fe:	b9 f7       	brne	.-18     	; 0x5ee <_ZN16DS3231RTC_Alarms11init_alarmsEv+0x68>
     600:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__data_start>
     604:	10 e0       	ldi	r17, 0x00	; 0
     606:	c0 e0       	ldi	r28, 0x00	; 0
     608:	d0 e0       	ldi	r29, 0x00	; 0
     60a:	ce 01       	movw	r24, r28
     60c:	80 0f       	add	r24, r16
     60e:	91 1f       	adc	r25, r17
     610:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <eeprom_read_byte>
     614:	f7 01       	movw	r30, r14
     616:	81 93       	st	Z+, r24
     618:	7f 01       	movw	r14, r30
     61a:	21 96       	adiw	r28, 0x01	; 1
     61c:	c7 30       	cpi	r28, 0x07	; 7
     61e:	d1 05       	cpc	r29, r1
     620:	a1 f7       	brne	.-24     	; 0x60a <_ZN16DS3231RTC_Alarms11init_alarmsEv+0x84>
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	1f 91       	pop	r17
     628:	0f 91       	pop	r16
     62a:	ff 90       	pop	r15
     62c:	ef 90       	pop	r14
     62e:	08 95       	ret

00000630 <_ZN16DS3231RTC_Alarms11alarm_CheckEPh>:
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <alarmIsrWasCalled>
     638:	88 23       	and	r24, r24
     63a:	b1 f0       	breq	.+44     	; 0x668 <_ZN16DS3231RTC_Alarms11alarm_CheckEPh+0x38>
     63c:	eb 01       	movw	r28, r22
     63e:	61 e0       	ldi	r22, 0x01	; 1
     640:	84 ea       	ldi	r24, 0xA4	; 164
     642:	92 e0       	ldi	r25, 0x02	; 2
     644:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <_ZN9DS3232RTC5alarmEh>
     648:	88 23       	and	r24, r24
     64a:	11 f0       	breq	.+4      	; 0x650 <_ZN16DS3231RTC_Alarms11alarm_CheckEPh+0x20>
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	08 c0       	rjmp	.+16     	; 0x660 <_ZN16DS3231RTC_Alarms11alarm_CheckEPh+0x30>
     650:	62 e0       	ldi	r22, 0x02	; 2
     652:	84 ea       	ldi	r24, 0xA4	; 164
     654:	92 e0       	ldi	r25, 0x02	; 2
     656:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <_ZN9DS3232RTC5alarmEh>
     65a:	88 23       	and	r24, r24
     65c:	11 f0       	breq	.+4      	; 0x662 <_ZN16DS3231RTC_Alarms11alarm_CheckEPh+0x32>
     65e:	82 e0       	ldi	r24, 0x02	; 2
     660:	88 83       	st	Y, r24
     662:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <alarmIsrWasCalled>
     666:	02 c0       	rjmp	.+4      	; 0x66c <_ZN16DS3231RTC_Alarms11alarm_CheckEPh+0x3c>
     668:	fb 01       	movw	r30, r22
     66a:	10 82       	st	Z, r1
     66c:	df 91       	pop	r29
     66e:	cf 91       	pop	r28
     670:	08 95       	ret

00000672 <_ZN16DS3231RTC_Alarms10alarm1_setE12tmElements_t>:
     672:	ef 92       	push	r14
     674:	ff 92       	push	r15
     676:	0f 93       	push	r16
     678:	1f 93       	push	r17
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
     67e:	cd b7       	in	r28, 0x3d	; 61
     680:	de b7       	in	r29, 0x3e	; 62
     682:	2e 97       	sbiw	r28, 0x0e	; 14
     684:	0f b6       	in	r0, 0x3f	; 63
     686:	f8 94       	cli
     688:	de bf       	out	0x3e, r29	; 62
     68a:	0f be       	out	0x3f, r0	; 63
     68c:	cd bf       	out	0x3d, r28	; 61
     68e:	80 2f       	mov	r24, r16
     690:	08 87       	std	Y+8, r16	; 0x08
     692:	19 87       	std	Y+9, r17	; 0x09
     694:	02 2f       	mov	r16, r18
     696:	2a 87       	std	Y+10, r18	; 0x0a
     698:	3b 87       	std	Y+11, r19	; 0x0b
     69a:	4c 87       	std	Y+12, r20	; 0x0c
     69c:	5d 87       	std	Y+13, r21	; 0x0d
     69e:	6e 87       	std	Y+14, r22	; 0x0e
     6a0:	ee 24       	eor	r14, r14
     6a2:	e3 94       	inc	r14
     6a4:	21 2f       	mov	r18, r17
     6a6:	48 2f       	mov	r20, r24
     6a8:	68 e0       	ldi	r22, 0x08	; 8
     6aa:	84 ea       	ldi	r24, 0xA4	; 164
     6ac:	92 e0       	ldi	r25, 0x02	; 2
     6ae:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <_ZN9DS3232RTC8setAlarmE13ALARM_TYPES_thhhh>
     6b2:	61 e0       	ldi	r22, 0x01	; 1
     6b4:	84 ea       	ldi	r24, 0xA4	; 164
     6b6:	92 e0       	ldi	r25, 0x02	; 2
     6b8:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <_ZN9DS3232RTC5alarmEh>
     6bc:	41 e0       	ldi	r20, 0x01	; 1
     6be:	61 e0       	ldi	r22, 0x01	; 1
     6c0:	84 ea       	ldi	r24, 0xA4	; 164
     6c2:	92 e0       	ldi	r25, 0x02	; 2
     6c4:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <_ZN9DS3232RTC14alarmInterruptEhb>
     6c8:	ce 01       	movw	r24, r28
     6ca:	08 96       	adiw	r24, 0x08	; 8
     6cc:	0e 94 cc 11 	call	0x2398	; 0x2398 <_Z8makeTimeR12tmElements_t>
     6d0:	69 83       	std	Y+1, r22	; 0x01
     6d2:	7a 83       	std	Y+2, r23	; 0x02
     6d4:	8b 83       	std	Y+3, r24	; 0x03
     6d6:	9c 83       	std	Y+4, r25	; 0x04
     6d8:	9e 01       	movw	r18, r28
     6da:	2f 5f       	subi	r18, 0xFF	; 255
     6dc:	3f 4f       	sbci	r19, 0xFF	; 255
     6de:	79 01       	movw	r14, r18
     6e0:	00 e0       	ldi	r16, 0x00	; 0
     6e2:	10 e0       	ldi	r17, 0x00	; 0
     6e4:	f7 01       	movw	r30, r14
     6e6:	61 91       	ld	r22, Z+
     6e8:	7f 01       	movw	r14, r30
     6ea:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <alarm1_addr>
     6ee:	98 01       	movw	r18, r16
     6f0:	28 0f       	add	r18, r24
     6f2:	31 1d       	adc	r19, r1
     6f4:	c9 01       	movw	r24, r18
     6f6:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <eeprom_write_byte>
     6fa:	0f 5f       	subi	r16, 0xFF	; 255
     6fc:	1f 4f       	sbci	r17, 0xFF	; 255
     6fe:	07 30       	cpi	r16, 0x07	; 7
     700:	11 05       	cpc	r17, r1
     702:	81 f7       	brne	.-32     	; 0x6e4 <_ZN16DS3231RTC_Alarms10alarm1_setE12tmElements_t+0x72>
     704:	2e 96       	adiw	r28, 0x0e	; 14
     706:	0f b6       	in	r0, 0x3f	; 63
     708:	f8 94       	cli
     70a:	de bf       	out	0x3e, r29	; 62
     70c:	0f be       	out	0x3f, r0	; 63
     70e:	cd bf       	out	0x3d, r28	; 61
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	1f 91       	pop	r17
     716:	0f 91       	pop	r16
     718:	ff 90       	pop	r15
     71a:	ef 90       	pop	r14
     71c:	08 95       	ret

0000071e <_ZN23Human_Machine_Interface8UIupdateEv>:
     71e:	bf 92       	push	r11
     720:	cf 92       	push	r12
     722:	df 92       	push	r13
     724:	ef 92       	push	r14
     726:	ff 92       	push	r15
     728:	0f 93       	push	r16
     72a:	1f 93       	push	r17
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
     730:	cd b7       	in	r28, 0x3d	; 61
     732:	de b7       	in	r29, 0x3e	; 62
     734:	27 97       	sbiw	r28, 0x07	; 7
     736:	0f b6       	in	r0, 0x3f	; 63
     738:	f8 94       	cli
     73a:	de bf       	out	0x3e, r29	; 62
     73c:	0f be       	out	0x3f, r0	; 63
     73e:	cd bf       	out	0x3d, r28	; 61
     740:	7c 01       	movw	r14, r24
     742:	81 ef       	ldi	r24, 0xF1	; 241
     744:	91 e0       	ldi	r25, 0x01	; 1
     746:	0e 94 9d 02 	call	0x53a	; 0x53a <_ZN23Human_Machine_Interface16read_LCD_buttonsEv>
     74a:	18 2f       	mov	r17, r24
     74c:	d7 01       	movw	r26, r14
     74e:	ec 91       	ld	r30, X
     750:	8e 2f       	mov	r24, r30
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	89 31       	cpi	r24, 0x19	; 25
     756:	91 05       	cpc	r25, r1
     758:	08 f0       	brcs	.+2      	; 0x75c <_ZN23Human_Machine_Interface8UIupdateEv+0x3e>
     75a:	df c2       	rjmp	.+1470   	; 0xd1a <__stack+0x41b>
     75c:	fc 01       	movw	r30, r24
     75e:	ec 5c       	subi	r30, 0xCC	; 204
     760:	ff 4f       	sbci	r31, 0xFF	; 255
     762:	0c 94 2a 16 	jmp	0x2c54	; 0x2c54 <__tablejump2__>
     766:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <_ZN9DS3232RTC3getEv>
     76a:	ab 01       	movw	r20, r22
     76c:	bc 01       	movw	r22, r24
     76e:	81 ef       	ldi	r24, 0xF1	; 241
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN23Human_Machine_Interface8ConvTotmEm>
     776:	f7 01       	movw	r30, r14
     778:	21 83       	std	Z+1, r18	; 0x01
     77a:	32 83       	std	Z+2, r19	; 0x02
     77c:	43 83       	std	Z+3, r20	; 0x03
     77e:	54 83       	std	Z+4, r21	; 0x04
     780:	65 83       	std	Z+5, r22	; 0x05
     782:	76 83       	std	Z+6, r23	; 0x06
     784:	87 83       	std	Z+7, r24	; 0x07
     786:	8a ec       	ldi	r24, 0xCA	; 202
     788:	91 e0       	ldi	r25, 0x01	; 1
     78a:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN13LiquidCrystal5clearEv>
     78e:	40 e0       	ldi	r20, 0x00	; 0
     790:	60 e0       	ldi	r22, 0x00	; 0
     792:	8a ec       	ldi	r24, 0xCA	; 202
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_ZN13LiquidCrystal9setCursorEhh>
     79a:	68 e0       	ldi	r22, 0x08	; 8
     79c:	71 e0       	ldi	r23, 0x01	; 1
     79e:	8a ec       	ldi	r24, 0xCA	; 202
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     7a6:	41 e0       	ldi	r20, 0x01	; 1
     7a8:	60 e0       	ldi	r22, 0x00	; 0
     7aa:	8a ec       	ldi	r24, 0xCA	; 202
     7ac:	91 e0       	ldi	r25, 0x01	; 1
     7ae:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_ZN13LiquidCrystal9setCursorEhh>
     7b2:	d7 01       	movw	r26, r14
     7b4:	12 96       	adiw	r26, 0x02	; 2
     7b6:	0c 91       	ld	r16, X
     7b8:	0a 30       	cpi	r16, 0x0A	; 10
     7ba:	28 f0       	brcs	.+10     	; 0x7c6 <_ZN23Human_Machine_Interface8UIupdateEv+0xa8>
     7bc:	f2 e9       	ldi	r31, 0x92	; 146
     7be:	cf 2e       	mov	r12, r31
     7c0:	f1 e0       	ldi	r31, 0x01	; 1
     7c2:	df 2e       	mov	r13, r31
     7c4:	04 c0       	rjmp	.+8      	; 0x7ce <_ZN23Human_Machine_Interface8UIupdateEv+0xb0>
     7c6:	e6 e0       	ldi	r30, 0x06	; 6
     7c8:	ce 2e       	mov	r12, r30
     7ca:	e1 e0       	ldi	r30, 0x01	; 1
     7cc:	de 2e       	mov	r13, r30
     7ce:	f7 01       	movw	r30, r14
     7d0:	b3 80       	ldd	r11, Z+3	; 0x03
     7d2:	f9 e0       	ldi	r31, 0x09	; 9
     7d4:	fb 15       	cp	r31, r11
     7d6:	18 f4       	brcc	.+6      	; 0x7de <_ZN23Human_Machine_Interface8UIupdateEv+0xc0>
     7d8:	62 e9       	ldi	r22, 0x92	; 146
     7da:	71 e0       	ldi	r23, 0x01	; 1
     7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <_ZN23Human_Machine_Interface8UIupdateEv+0xc4>
     7de:	66 e0       	ldi	r22, 0x06	; 6
     7e0:	71 e0       	ldi	r23, 0x01	; 1
     7e2:	8a ec       	ldi	r24, 0xCA	; 202
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     7ea:	4a e0       	ldi	r20, 0x0A	; 10
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	6b 2d       	mov	r22, r11
     7f0:	8a ec       	ldi	r24, 0xCA	; 202
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	0e 94 2f 0a 	call	0x145e	; 0x145e <_ZN5Print5printEhi>
     7f8:	64 e1       	ldi	r22, 0x14	; 20
     7fa:	71 e0       	ldi	r23, 0x01	; 1
     7fc:	8a ec       	ldi	r24, 0xCA	; 202
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     804:	b6 01       	movw	r22, r12
     806:	8a ec       	ldi	r24, 0xCA	; 202
     808:	91 e0       	ldi	r25, 0x01	; 1
     80a:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     80e:	4a e0       	ldi	r20, 0x0A	; 10
     810:	50 e0       	ldi	r21, 0x00	; 0
     812:	60 2f       	mov	r22, r16
     814:	8a ec       	ldi	r24, 0xCA	; 202
     816:	91 e0       	ldi	r25, 0x01	; 1
     818:	0e 94 2f 0a 	call	0x145e	; 0x145e <_ZN5Print5printEhi>
     81c:	62 e9       	ldi	r22, 0x92	; 146
     81e:	71 e0       	ldi	r23, 0x01	; 1
     820:	8a ec       	ldi	r24, 0xCA	; 202
     822:	91 e0       	ldi	r25, 0x01	; 1
     824:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     828:	13 30       	cpi	r17, 0x03	; 3
     82a:	51 f0       	breq	.+20     	; 0x840 <_ZN23Human_Machine_Interface8UIupdateEv+0x122>
     82c:	16 30       	cpi	r17, 0x06	; 6
     82e:	31 f0       	breq	.+12     	; 0x83c <_ZN23Human_Machine_Interface8UIupdateEv+0x11e>
     830:	11 30       	cpi	r17, 0x01	; 1
     832:	09 f0       	breq	.+2      	; 0x836 <_ZN23Human_Machine_Interface8UIupdateEv+0x118>
     834:	80 c2       	rjmp	.+1280   	; 0xd36 <__stack+0x437>
     836:	d7 01       	movw	r26, r14
     838:	1c 93       	st	X, r17
     83a:	7d c2       	rjmp	.+1274   	; 0xd36 <__stack+0x437>
     83c:	84 e1       	ldi	r24, 0x14	; 20
     83e:	72 c1       	rjmp	.+740    	; 0xb24 <__stack+0x225>
     840:	8a e0       	ldi	r24, 0x0A	; 10
     842:	59 c2       	rjmp	.+1202   	; 0xcf6 <__stack+0x3f7>
     844:	8a ec       	ldi	r24, 0xCA	; 202
     846:	91 e0       	ldi	r25, 0x01	; 1
     848:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN13LiquidCrystal5clearEv>
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	8a ec       	ldi	r24, 0xCA	; 202
     852:	91 e0       	ldi	r25, 0x01	; 1
     854:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_ZN13LiquidCrystal9setCursorEhh>
     858:	66 e1       	ldi	r22, 0x16	; 22
     85a:	71 e0       	ldi	r23, 0x01	; 1
     85c:	8a ec       	ldi	r24, 0xCA	; 202
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     864:	41 e0       	ldi	r20, 0x01	; 1
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	8a ec       	ldi	r24, 0xCA	; 202
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_ZN13LiquidCrystal9setCursorEhh>
     870:	f7 01       	movw	r30, r14
     872:	02 81       	ldd	r16, Z+2	; 0x02
     874:	0a 30       	cpi	r16, 0x0A	; 10
     876:	28 f0       	brcs	.+10     	; 0x882 <_ZN23Human_Machine_Interface8UIupdateEv+0x164>
     878:	72 e9       	ldi	r23, 0x92	; 146
     87a:	c7 2e       	mov	r12, r23
     87c:	71 e0       	ldi	r23, 0x01	; 1
     87e:	d7 2e       	mov	r13, r23
     880:	04 c0       	rjmp	.+8      	; 0x88a <_ZN23Human_Machine_Interface8UIupdateEv+0x16c>
     882:	66 e0       	ldi	r22, 0x06	; 6
     884:	c6 2e       	mov	r12, r22
     886:	61 e0       	ldi	r22, 0x01	; 1
     888:	d6 2e       	mov	r13, r22
     88a:	d7 01       	movw	r26, r14
     88c:	13 96       	adiw	r26, 0x03	; 3
     88e:	bc 90       	ld	r11, X
     890:	b9 e0       	ldi	r27, 0x09	; 9
     892:	bb 15       	cp	r27, r11
     894:	18 f4       	brcc	.+6      	; 0x89c <_ZN23Human_Machine_Interface8UIupdateEv+0x17e>
     896:	62 e9       	ldi	r22, 0x92	; 146
     898:	71 e0       	ldi	r23, 0x01	; 1
     89a:	02 c0       	rjmp	.+4      	; 0x8a0 <_ZN23Human_Machine_Interface8UIupdateEv+0x182>
     89c:	66 e0       	ldi	r22, 0x06	; 6
     89e:	71 e0       	ldi	r23, 0x01	; 1
     8a0:	8a ec       	ldi	r24, 0xCA	; 202
     8a2:	91 e0       	ldi	r25, 0x01	; 1
     8a4:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     8a8:	4a e0       	ldi	r20, 0x0A	; 10
     8aa:	50 e0       	ldi	r21, 0x00	; 0
     8ac:	6b 2d       	mov	r22, r11
     8ae:	8a ec       	ldi	r24, 0xCA	; 202
     8b0:	91 e0       	ldi	r25, 0x01	; 1
     8b2:	0e 94 2f 0a 	call	0x145e	; 0x145e <_ZN5Print5printEhi>
     8b6:	64 e1       	ldi	r22, 0x14	; 20
     8b8:	71 e0       	ldi	r23, 0x01	; 1
     8ba:	8a ec       	ldi	r24, 0xCA	; 202
     8bc:	91 e0       	ldi	r25, 0x01	; 1
     8be:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     8c2:	b6 01       	movw	r22, r12
     8c4:	8a ec       	ldi	r24, 0xCA	; 202
     8c6:	91 e0       	ldi	r25, 0x01	; 1
     8c8:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     8cc:	4a e0       	ldi	r20, 0x0A	; 10
     8ce:	50 e0       	ldi	r21, 0x00	; 0
     8d0:	60 2f       	mov	r22, r16
     8d2:	8a ec       	ldi	r24, 0xCA	; 202
     8d4:	91 e0       	ldi	r25, 0x01	; 1
     8d6:	0e 94 2f 0a 	call	0x145e	; 0x145e <_ZN5Print5printEhi>
     8da:	62 e9       	ldi	r22, 0x92	; 146
     8dc:	71 e0       	ldi	r23, 0x01	; 1
     8de:	8a ec       	ldi	r24, 0xCA	; 202
     8e0:	91 e0       	ldi	r25, 0x01	; 1
     8e2:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     8e6:	14 30       	cpi	r17, 0x04	; 4
     8e8:	09 f4       	brne	.+2      	; 0x8ec <_ZN23Human_Machine_Interface8UIupdateEv+0x1ce>
     8ea:	e6 c1       	rjmp	.+972    	; 0xcb8 <__stack+0x3b9>
     8ec:	20 f4       	brcc	.+8      	; 0x8f6 <_ZN23Human_Machine_Interface8UIupdateEv+0x1d8>
     8ee:	13 30       	cpi	r17, 0x03	; 3
     8f0:	09 f4       	brne	.+2      	; 0x8f4 <_ZN23Human_Machine_Interface8UIupdateEv+0x1d6>
     8f2:	f6 c0       	rjmp	.+492    	; 0xae0 <__stack+0x1e1>
     8f4:	20 c2       	rjmp	.+1088   	; 0xd36 <__stack+0x437>
     8f6:	15 30       	cpi	r17, 0x05	; 5
     8f8:	21 f0       	breq	.+8      	; 0x902 <__stack+0x3>
     8fa:	16 30       	cpi	r17, 0x06	; 6
     8fc:	09 f4       	brne	.+2      	; 0x900 <__stack+0x1>
     8fe:	b2 c1       	rjmp	.+868    	; 0xc64 <__stack+0x365>
     900:	1a c2       	rjmp	.+1076   	; 0xd36 <__stack+0x437>
     902:	f7 01       	movw	r30, r14
     904:	83 81       	ldd	r24, Z+3	; 0x03
     906:	81 11       	cpse	r24, r1
     908:	03 c0       	rjmp	.+6      	; 0x910 <__stack+0x11>
     90a:	84 e1       	ldi	r24, 0x14	; 20
     90c:	83 83       	std	Z+3, r24	; 0x03
     90e:	13 c2       	rjmp	.+1062   	; 0xd36 <__stack+0x437>
     910:	86 ef       	ldi	r24, 0xF6	; 246
     912:	d7 01       	movw	r26, r14
     914:	13 96       	adiw	r26, 0x03	; 3
     916:	8c 93       	st	X, r24
     918:	0e c2       	rjmp	.+1052   	; 0xd36 <__stack+0x437>
     91a:	8a ec       	ldi	r24, 0xCA	; 202
     91c:	91 e0       	ldi	r25, 0x01	; 1
     91e:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN13LiquidCrystal5clearEv>
     922:	40 e0       	ldi	r20, 0x00	; 0
     924:	60 e0       	ldi	r22, 0x00	; 0
     926:	8a ec       	ldi	r24, 0xCA	; 202
     928:	91 e0       	ldi	r25, 0x01	; 1
     92a:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_ZN13LiquidCrystal9setCursorEhh>
     92e:	66 e1       	ldi	r22, 0x16	; 22
     930:	71 e0       	ldi	r23, 0x01	; 1
     932:	8a ec       	ldi	r24, 0xCA	; 202
     934:	91 e0       	ldi	r25, 0x01	; 1
     936:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     93a:	41 e0       	ldi	r20, 0x01	; 1
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	8a ec       	ldi	r24, 0xCA	; 202
     940:	91 e0       	ldi	r25, 0x01	; 1
     942:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_ZN13LiquidCrystal9setCursorEhh>
     946:	f7 01       	movw	r30, r14
     948:	02 81       	ldd	r16, Z+2	; 0x02
     94a:	0a 30       	cpi	r16, 0x0A	; 10
     94c:	28 f0       	brcs	.+10     	; 0x958 <__stack+0x59>
     94e:	52 e9       	ldi	r21, 0x92	; 146
     950:	c5 2e       	mov	r12, r21
     952:	51 e0       	ldi	r21, 0x01	; 1
     954:	d5 2e       	mov	r13, r21
     956:	04 c0       	rjmp	.+8      	; 0x960 <__stack+0x61>
     958:	46 e0       	ldi	r20, 0x06	; 6
     95a:	c4 2e       	mov	r12, r20
     95c:	41 e0       	ldi	r20, 0x01	; 1
     95e:	d4 2e       	mov	r13, r20
     960:	d7 01       	movw	r26, r14
     962:	13 96       	adiw	r26, 0x03	; 3
     964:	bc 90       	ld	r11, X
     966:	b9 e0       	ldi	r27, 0x09	; 9
     968:	bb 15       	cp	r27, r11
     96a:	18 f4       	brcc	.+6      	; 0x972 <__stack+0x73>
     96c:	62 e9       	ldi	r22, 0x92	; 146
     96e:	71 e0       	ldi	r23, 0x01	; 1
     970:	02 c0       	rjmp	.+4      	; 0x976 <__stack+0x77>
     972:	66 e0       	ldi	r22, 0x06	; 6
     974:	71 e0       	ldi	r23, 0x01	; 1
     976:	8a ec       	ldi	r24, 0xCA	; 202
     978:	91 e0       	ldi	r25, 0x01	; 1
     97a:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     97e:	4a e0       	ldi	r20, 0x0A	; 10
     980:	50 e0       	ldi	r21, 0x00	; 0
     982:	6b 2d       	mov	r22, r11
     984:	8a ec       	ldi	r24, 0xCA	; 202
     986:	91 e0       	ldi	r25, 0x01	; 1
     988:	0e 94 2f 0a 	call	0x145e	; 0x145e <_ZN5Print5printEhi>
     98c:	64 e1       	ldi	r22, 0x14	; 20
     98e:	71 e0       	ldi	r23, 0x01	; 1
     990:	8a ec       	ldi	r24, 0xCA	; 202
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     998:	b6 01       	movw	r22, r12
     99a:	8a ec       	ldi	r24, 0xCA	; 202
     99c:	91 e0       	ldi	r25, 0x01	; 1
     99e:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     9a2:	4a e0       	ldi	r20, 0x0A	; 10
     9a4:	50 e0       	ldi	r21, 0x00	; 0
     9a6:	60 2f       	mov	r22, r16
     9a8:	8a ec       	ldi	r24, 0xCA	; 202
     9aa:	91 e0       	ldi	r25, 0x01	; 1
     9ac:	0e 94 2f 0a 	call	0x145e	; 0x145e <_ZN5Print5printEhi>
     9b0:	62 e9       	ldi	r22, 0x92	; 146
     9b2:	71 e0       	ldi	r23, 0x01	; 1
     9b4:	8a ec       	ldi	r24, 0xCA	; 202
     9b6:	91 e0       	ldi	r25, 0x01	; 1
     9b8:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     9bc:	14 30       	cpi	r17, 0x04	; 4
     9be:	71 f0       	breq	.+28     	; 0x9dc <__stack+0xdd>
     9c0:	30 f4       	brcc	.+12     	; 0x9ce <__stack+0xcf>
     9c2:	13 30       	cpi	r17, 0x03	; 3
     9c4:	09 f0       	breq	.+2      	; 0x9c8 <__stack+0xc9>
     9c6:	b7 c1       	rjmp	.+878    	; 0xd36 <__stack+0x437>
     9c8:	f7 01       	movw	r30, r14
     9ca:	10 83       	st	Z, r17
     9cc:	b4 c1       	rjmp	.+872    	; 0xd36 <__stack+0x437>
     9ce:	15 30       	cpi	r17, 0x05	; 5
     9d0:	81 f0       	breq	.+32     	; 0x9f2 <__stack+0xf3>
     9d2:	16 30       	cpi	r17, 0x06	; 6
     9d4:	09 f0       	breq	.+2      	; 0x9d8 <__stack+0xd9>
     9d6:	af c1       	rjmp	.+862    	; 0xd36 <__stack+0x437>
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	8d c1       	rjmp	.+794    	; 0xcf6 <__stack+0x3f7>
     9dc:	f7 01       	movw	r30, r14
     9de:	83 81       	ldd	r24, Z+3	; 0x03
     9e0:	88 31       	cpi	r24, 0x18	; 24
     9e2:	10 f0       	brcs	.+4      	; 0x9e8 <__stack+0xe9>
     9e4:	8d ef       	ldi	r24, 0xFD	; 253
     9e6:	92 cf       	rjmp	.-220    	; 0x90c <__stack+0xd>
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	93 cf       	rjmp	.-218    	; 0x912 <__stack+0x13>
     9ec:	14 30       	cpi	r17, 0x04	; 4
     9ee:	09 f0       	breq	.+2      	; 0x9f2 <__stack+0xf3>
     9f0:	72 c1       	rjmp	.+740    	; 0xcd6 <__stack+0x3d7>
     9f2:	f7 01       	movw	r30, r14
     9f4:	83 81       	ldd	r24, Z+3	; 0x03
     9f6:	81 11       	cpse	r24, r1
     9f8:	02 c0       	rjmp	.+4      	; 0x9fe <__stack+0xff>
     9fa:	89 e0       	ldi	r24, 0x09	; 9
     9fc:	8a cf       	rjmp	.-236    	; 0x912 <__stack+0x13>
     9fe:	8f ef       	ldi	r24, 0xFF	; 255
     a00:	f7 01       	movw	r30, r14
     a02:	84 cf       	rjmp	.-248    	; 0x90c <__stack+0xd>
     a04:	8a ec       	ldi	r24, 0xCA	; 202
     a06:	91 e0       	ldi	r25, 0x01	; 1
     a08:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN13LiquidCrystal5clearEv>
     a0c:	40 e0       	ldi	r20, 0x00	; 0
     a0e:	60 e0       	ldi	r22, 0x00	; 0
     a10:	8a ec       	ldi	r24, 0xCA	; 202
     a12:	91 e0       	ldi	r25, 0x01	; 1
     a14:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_ZN13LiquidCrystal9setCursorEhh>
     a18:	66 e1       	ldi	r22, 0x16	; 22
     a1a:	71 e0       	ldi	r23, 0x01	; 1
     a1c:	8a ec       	ldi	r24, 0xCA	; 202
     a1e:	91 e0       	ldi	r25, 0x01	; 1
     a20:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     a24:	41 e0       	ldi	r20, 0x01	; 1
     a26:	60 e0       	ldi	r22, 0x00	; 0
     a28:	8a ec       	ldi	r24, 0xCA	; 202
     a2a:	91 e0       	ldi	r25, 0x01	; 1
     a2c:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_ZN13LiquidCrystal9setCursorEhh>
     a30:	d7 01       	movw	r26, r14
     a32:	12 96       	adiw	r26, 0x02	; 2
     a34:	0c 91       	ld	r16, X
     a36:	0a 30       	cpi	r16, 0x0A	; 10
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__stack+0x145>
     a3a:	32 e9       	ldi	r19, 0x92	; 146
     a3c:	c3 2e       	mov	r12, r19
     a3e:	31 e0       	ldi	r19, 0x01	; 1
     a40:	d3 2e       	mov	r13, r19
     a42:	04 c0       	rjmp	.+8      	; 0xa4c <__stack+0x14d>
     a44:	26 e0       	ldi	r18, 0x06	; 6
     a46:	c2 2e       	mov	r12, r18
     a48:	21 e0       	ldi	r18, 0x01	; 1
     a4a:	d2 2e       	mov	r13, r18
     a4c:	f7 01       	movw	r30, r14
     a4e:	b3 80       	ldd	r11, Z+3	; 0x03
     a50:	f9 e0       	ldi	r31, 0x09	; 9
     a52:	fb 15       	cp	r31, r11
     a54:	18 f4       	brcc	.+6      	; 0xa5c <__stack+0x15d>
     a56:	62 e9       	ldi	r22, 0x92	; 146
     a58:	71 e0       	ldi	r23, 0x01	; 1
     a5a:	02 c0       	rjmp	.+4      	; 0xa60 <__stack+0x161>
     a5c:	66 e0       	ldi	r22, 0x06	; 6
     a5e:	71 e0       	ldi	r23, 0x01	; 1
     a60:	8a ec       	ldi	r24, 0xCA	; 202
     a62:	91 e0       	ldi	r25, 0x01	; 1
     a64:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     a68:	4a e0       	ldi	r20, 0x0A	; 10
     a6a:	50 e0       	ldi	r21, 0x00	; 0
     a6c:	6b 2d       	mov	r22, r11
     a6e:	8a ec       	ldi	r24, 0xCA	; 202
     a70:	91 e0       	ldi	r25, 0x01	; 1
     a72:	0e 94 2f 0a 	call	0x145e	; 0x145e <_ZN5Print5printEhi>
     a76:	64 e1       	ldi	r22, 0x14	; 20
     a78:	71 e0       	ldi	r23, 0x01	; 1
     a7a:	8a ec       	ldi	r24, 0xCA	; 202
     a7c:	91 e0       	ldi	r25, 0x01	; 1
     a7e:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     a82:	b6 01       	movw	r22, r12
     a84:	8a ec       	ldi	r24, 0xCA	; 202
     a86:	91 e0       	ldi	r25, 0x01	; 1
     a88:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     a8c:	4a e0       	ldi	r20, 0x0A	; 10
     a8e:	50 e0       	ldi	r21, 0x00	; 0
     a90:	60 2f       	mov	r22, r16
     a92:	8a ec       	ldi	r24, 0xCA	; 202
     a94:	91 e0       	ldi	r25, 0x01	; 1
     a96:	0e 94 2f 0a 	call	0x145e	; 0x145e <_ZN5Print5printEhi>
     a9a:	62 e9       	ldi	r22, 0x92	; 146
     a9c:	71 e0       	ldi	r23, 0x01	; 1
     a9e:	8a ec       	ldi	r24, 0xCA	; 202
     aa0:	91 e0       	ldi	r25, 0x01	; 1
     aa2:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     aa6:	14 30       	cpi	r17, 0x04	; 4
     aa8:	59 f0       	breq	.+22     	; 0xac0 <__stack+0x1c1>
     aaa:	28 f4       	brcc	.+10     	; 0xab6 <__stack+0x1b7>
     aac:	13 30       	cpi	r17, 0x03	; 3
     aae:	09 f0       	breq	.+2      	; 0xab2 <__stack+0x1b3>
     ab0:	42 c1       	rjmp	.+644    	; 0xd36 <__stack+0x437>
     ab2:	84 e0       	ldi	r24, 0x04	; 4
     ab4:	37 c0       	rjmp	.+110    	; 0xb24 <__stack+0x225>
     ab6:	15 30       	cpi	r17, 0x05	; 5
     ab8:	69 f0       	breq	.+26     	; 0xad4 <__stack+0x1d5>
     aba:	16 30       	cpi	r17, 0x06	; 6
     abc:	89 f0       	breq	.+34     	; 0xae0 <__stack+0x1e1>
     abe:	3b c1       	rjmp	.+630    	; 0xd36 <__stack+0x437>
     ac0:	d7 01       	movw	r26, r14
     ac2:	13 96       	adiw	r26, 0x03	; 3
     ac4:	8c 91       	ld	r24, X
     ac6:	13 97       	sbiw	r26, 0x03	; 3
     ac8:	8b 33       	cpi	r24, 0x3B	; 59
     aca:	10 f4       	brcc	.+4      	; 0xad0 <__stack+0x1d1>
     acc:	8a e0       	ldi	r24, 0x0A	; 10
     ace:	21 cf       	rjmp	.-446    	; 0x912 <__stack+0x13>
     ad0:	8e ec       	ldi	r24, 0xCE	; 206
     ad2:	20 cf       	rjmp	.-448    	; 0x914 <__stack+0x15>
     ad4:	f7 01       	movw	r30, r14
     ad6:	83 81       	ldd	r24, Z+3	; 0x03
     ad8:	81 11       	cpse	r24, r1
     ada:	1a cf       	rjmp	.-460    	; 0x910 <__stack+0x11>
     adc:	82 e3       	ldi	r24, 0x32	; 50
     ade:	16 cf       	rjmp	.-468    	; 0x90c <__stack+0xd>
     ae0:	82 e0       	ldi	r24, 0x02	; 2
     ae2:	09 c1       	rjmp	.+530    	; 0xcf6 <__stack+0x3f7>
     ae4:	8a ec       	ldi	r24, 0xCA	; 202
     ae6:	91 e0       	ldi	r25, 0x01	; 1
     ae8:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN13LiquidCrystal5clearEv>
     aec:	40 e0       	ldi	r20, 0x00	; 0
     aee:	60 e0       	ldi	r22, 0x00	; 0
     af0:	8a ec       	ldi	r24, 0xCA	; 202
     af2:	91 e0       	ldi	r25, 0x01	; 1
     af4:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_ZN13LiquidCrystal9setCursorEhh>
     af8:	66 e1       	ldi	r22, 0x16	; 22
     afa:	71 e0       	ldi	r23, 0x01	; 1
     afc:	8a ec       	ldi	r24, 0xCA	; 202
     afe:	91 e0       	ldi	r25, 0x01	; 1
     b00:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	60 e0       	ldi	r22, 0x00	; 0
     b08:	8a ec       	ldi	r24, 0xCA	; 202
     b0a:	91 e0       	ldi	r25, 0x01	; 1
     b0c:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_ZN13LiquidCrystal9setCursorEhh>
     b10:	14 30       	cpi	r17, 0x04	; 4
     b12:	41 f1       	breq	.+80     	; 0xb64 <__stack+0x265>
     b14:	50 f0       	brcs	.+20     	; 0xb2a <__stack+0x22b>
     b16:	15 30       	cpi	r17, 0x05	; 5
     b18:	09 f4       	brne	.+2      	; 0xb1c <__stack+0x21d>
     b1a:	e9 c0       	rjmp	.+466    	; 0xcee <__stack+0x3ef>
     b1c:	16 30       	cpi	r17, 0x06	; 6
     b1e:	09 f0       	breq	.+2      	; 0xb22 <__stack+0x223>
     b20:	0a c1       	rjmp	.+532    	; 0xd36 <__stack+0x437>
     b22:	83 e0       	ldi	r24, 0x03	; 3
     b24:	f7 01       	movw	r30, r14
     b26:	80 83       	st	Z, r24
     b28:	06 c1       	rjmp	.+524    	; 0xd36 <__stack+0x437>
     b2a:	11 30       	cpi	r17, 0x01	; 1
     b2c:	09 f0       	breq	.+2      	; 0xb30 <__stack+0x231>
     b2e:	03 c1       	rjmp	.+518    	; 0xd36 <__stack+0x437>
     b30:	d7 01       	movw	r26, r14
     b32:	1d 92       	st	X+, r1
     b34:	cd 01       	movw	r24, r26
     b36:	0e 94 cc 11 	call	0x2398	; 0x2398 <_Z8makeTimeR12tmElements_t>
     b3a:	ab 01       	movw	r20, r22
     b3c:	bc 01       	movw	r22, r24
     b3e:	84 ea       	ldi	r24, 0xA4	; 164
     b40:	92 e0       	ldi	r25, 0x02	; 2
     b42:	27 96       	adiw	r28, 0x07	; 7
     b44:	0f b6       	in	r0, 0x3f	; 63
     b46:	f8 94       	cli
     b48:	de bf       	out	0x3e, r29	; 62
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	cd bf       	out	0x3d, r28	; 61
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	1f 91       	pop	r17
     b54:	0f 91       	pop	r16
     b56:	ff 90       	pop	r15
     b58:	ef 90       	pop	r14
     b5a:	df 90       	pop	r13
     b5c:	cf 90       	pop	r12
     b5e:	bf 90       	pop	r11
     b60:	0c 94 74 0e 	jmp	0x1ce8	; 0x1ce8 <_ZN9DS3232RTC3setEm>
     b64:	f7 01       	movw	r30, r14
     b66:	83 81       	ldd	r24, Z+3	; 0x03
     b68:	8b 33       	cpi	r24, 0x3B	; 59
     b6a:	08 f4       	brcc	.+2      	; 0xb6e <__stack+0x26f>
     b6c:	3d cf       	rjmp	.-390    	; 0x9e8 <__stack+0xe9>
     b6e:	87 ef       	ldi	r24, 0xF7	; 247
     b70:	cd ce       	rjmp	.-614    	; 0x90c <__stack+0xd>
     b72:	8a ec       	ldi	r24, 0xCA	; 202
     b74:	91 e0       	ldi	r25, 0x01	; 1
     b76:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN13LiquidCrystal5clearEv>
     b7a:	40 e0       	ldi	r20, 0x00	; 0
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	8a ec       	ldi	r24, 0xCA	; 202
     b80:	91 e0       	ldi	r25, 0x01	; 1
     b82:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_ZN13LiquidCrystal9setCursorEhh>
     b86:	67 e2       	ldi	r22, 0x27	; 39
     b88:	71 e0       	ldi	r23, 0x01	; 1
     b8a:	8a ec       	ldi	r24, 0xCA	; 202
     b8c:	91 e0       	ldi	r25, 0x01	; 1
     b8e:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     b92:	41 e0       	ldi	r20, 0x01	; 1
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	8a ec       	ldi	r24, 0xCA	; 202
     b98:	91 e0       	ldi	r25, 0x01	; 1
     b9a:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_ZN13LiquidCrystal9setCursorEhh>
     b9e:	40 91 e3 01 	lds	r20, 0x01E3	; 0x8001e3 <RTC_alarm>
     ba2:	50 91 e4 01 	lds	r21, 0x01E4	; 0x8001e4 <RTC_alarm+0x1>
     ba6:	60 91 e5 01 	lds	r22, 0x01E5	; 0x8001e5 <RTC_alarm+0x2>
     baa:	70 91 e6 01 	lds	r23, 0x01E6	; 0x8001e6 <RTC_alarm+0x3>
     bae:	81 ef       	ldi	r24, 0xF1	; 241
     bb0:	91 e0       	ldi	r25, 0x01	; 1
     bb2:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN23Human_Machine_Interface8ConvTotmEm>
     bb6:	03 2f       	mov	r16, r19
     bb8:	d7 01       	movw	r26, r14
     bba:	11 96       	adiw	r26, 0x01	; 1
     bbc:	2c 93       	st	X, r18
     bbe:	11 97       	sbiw	r26, 0x01	; 1
     bc0:	12 96       	adiw	r26, 0x02	; 2
     bc2:	3c 93       	st	X, r19
     bc4:	12 97       	sbiw	r26, 0x02	; 2
     bc6:	13 96       	adiw	r26, 0x03	; 3
     bc8:	4c 93       	st	X, r20
     bca:	13 97       	sbiw	r26, 0x03	; 3
     bcc:	14 96       	adiw	r26, 0x04	; 4
     bce:	5c 93       	st	X, r21
     bd0:	14 97       	sbiw	r26, 0x04	; 4
     bd2:	15 96       	adiw	r26, 0x05	; 5
     bd4:	6c 93       	st	X, r22
     bd6:	15 97       	sbiw	r26, 0x05	; 5
     bd8:	16 96       	adiw	r26, 0x06	; 6
     bda:	7c 93       	st	X, r23
     bdc:	16 97       	sbiw	r26, 0x06	; 6
     bde:	17 96       	adiw	r26, 0x07	; 7
     be0:	8c 93       	st	X, r24
     be2:	3a 30       	cpi	r19, 0x0A	; 10
     be4:	28 f0       	brcs	.+10     	; 0xbf0 <__stack+0x2f1>
     be6:	92 e9       	ldi	r25, 0x92	; 146
     be8:	c9 2e       	mov	r12, r25
     bea:	91 e0       	ldi	r25, 0x01	; 1
     bec:	d9 2e       	mov	r13, r25
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__stack+0x2f9>
     bf0:	86 e0       	ldi	r24, 0x06	; 6
     bf2:	c8 2e       	mov	r12, r24
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	d8 2e       	mov	r13, r24
     bf8:	f7 01       	movw	r30, r14
     bfa:	b3 80       	ldd	r11, Z+3	; 0x03
     bfc:	f9 e0       	ldi	r31, 0x09	; 9
     bfe:	fb 15       	cp	r31, r11
     c00:	18 f4       	brcc	.+6      	; 0xc08 <__stack+0x309>
     c02:	62 e9       	ldi	r22, 0x92	; 146
     c04:	71 e0       	ldi	r23, 0x01	; 1
     c06:	02 c0       	rjmp	.+4      	; 0xc0c <__stack+0x30d>
     c08:	66 e0       	ldi	r22, 0x06	; 6
     c0a:	71 e0       	ldi	r23, 0x01	; 1
     c0c:	8a ec       	ldi	r24, 0xCA	; 202
     c0e:	91 e0       	ldi	r25, 0x01	; 1
     c10:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     c14:	4a e0       	ldi	r20, 0x0A	; 10
     c16:	50 e0       	ldi	r21, 0x00	; 0
     c18:	6b 2d       	mov	r22, r11
     c1a:	8a ec       	ldi	r24, 0xCA	; 202
     c1c:	91 e0       	ldi	r25, 0x01	; 1
     c1e:	0e 94 2f 0a 	call	0x145e	; 0x145e <_ZN5Print5printEhi>
     c22:	64 e1       	ldi	r22, 0x14	; 20
     c24:	71 e0       	ldi	r23, 0x01	; 1
     c26:	8a ec       	ldi	r24, 0xCA	; 202
     c28:	91 e0       	ldi	r25, 0x01	; 1
     c2a:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     c2e:	b6 01       	movw	r22, r12
     c30:	8a ec       	ldi	r24, 0xCA	; 202
     c32:	91 e0       	ldi	r25, 0x01	; 1
     c34:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     c38:	4a e0       	ldi	r20, 0x0A	; 10
     c3a:	50 e0       	ldi	r21, 0x00	; 0
     c3c:	60 2f       	mov	r22, r16
     c3e:	8a ec       	ldi	r24, 0xCA	; 202
     c40:	91 e0       	ldi	r25, 0x01	; 1
     c42:	0e 94 2f 0a 	call	0x145e	; 0x145e <_ZN5Print5printEhi>
     c46:	62 e9       	ldi	r22, 0x92	; 146
     c48:	71 e0       	ldi	r23, 0x01	; 1
     c4a:	8a ec       	ldi	r24, 0xCA	; 202
     c4c:	91 e0       	ldi	r25, 0x01	; 1
     c4e:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     c52:	13 30       	cpi	r17, 0x03	; 3
     c54:	51 f0       	breq	.+20     	; 0xc6a <__stack+0x36b>
     c56:	16 30       	cpi	r17, 0x06	; 6
     c58:	29 f0       	breq	.+10     	; 0xc64 <__stack+0x365>
     c5a:	11 30       	cpi	r17, 0x01	; 1
     c5c:	09 f0       	breq	.+2      	; 0xc60 <__stack+0x361>
     c5e:	6b c0       	rjmp	.+214    	; 0xd36 <__stack+0x437>
     c60:	8b e0       	ldi	r24, 0x0B	; 11
     c62:	49 c0       	rjmp	.+146    	; 0xcf6 <__stack+0x3f7>
     c64:	f7 01       	movw	r30, r14
     c66:	10 82       	st	Z, r1
     c68:	66 c0       	rjmp	.+204    	; 0xd36 <__stack+0x437>
     c6a:	84 e1       	ldi	r24, 0x14	; 20
     c6c:	44 c0       	rjmp	.+136    	; 0xcf6 <__stack+0x3f7>
     c6e:	8a ec       	ldi	r24, 0xCA	; 202
     c70:	91 e0       	ldi	r25, 0x01	; 1
     c72:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN13LiquidCrystal5clearEv>
     c76:	40 e0       	ldi	r20, 0x00	; 0
     c78:	60 e0       	ldi	r22, 0x00	; 0
     c7a:	8a ec       	ldi	r24, 0xCA	; 202
     c7c:	91 e0       	ldi	r25, 0x01	; 1
     c7e:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_ZN13LiquidCrystal9setCursorEhh>
     c82:	65 e3       	ldi	r22, 0x35	; 53
     c84:	71 e0       	ldi	r23, 0x01	; 1
     c86:	8a ec       	ldi	r24, 0xCA	; 202
     c88:	91 e0       	ldi	r25, 0x01	; 1
     c8a:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     c8e:	41 e0       	ldi	r20, 0x01	; 1
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	8a ec       	ldi	r24, 0xCA	; 202
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_ZN13LiquidCrystal9setCursorEhh>
     c9a:	14 30       	cpi	r17, 0x04	; 4
     c9c:	69 f0       	breq	.+26     	; 0xcb8 <__stack+0x3b9>
     c9e:	28 f4       	brcc	.+10     	; 0xcaa <__stack+0x3ab>
     ca0:	13 30       	cpi	r17, 0x03	; 3
     ca2:	09 f0       	breq	.+2      	; 0xca6 <__stack+0x3a7>
     ca4:	48 c0       	rjmp	.+144    	; 0xd36 <__stack+0x437>
     ca6:	8c e0       	ldi	r24, 0x0C	; 12
     ca8:	26 c0       	rjmp	.+76     	; 0xcf6 <__stack+0x3f7>
     caa:	15 30       	cpi	r17, 0x05	; 5
     cac:	61 f0       	breq	.+24     	; 0xcc6 <__stack+0x3c7>
     cae:	16 30       	cpi	r17, 0x06	; 6
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <__stack+0x3b5>
     cb2:	41 c0       	rjmp	.+130    	; 0xd36 <__stack+0x437>
     cb4:	8a e0       	ldi	r24, 0x0A	; 10
     cb6:	36 cf       	rjmp	.-404    	; 0xb24 <__stack+0x225>
     cb8:	f7 01       	movw	r30, r14
     cba:	83 81       	ldd	r24, Z+3	; 0x03
     cbc:	88 31       	cpi	r24, 0x18	; 24
     cbe:	08 f4       	brcc	.+2      	; 0xcc2 <__stack+0x3c3>
     cc0:	05 cf       	rjmp	.-502    	; 0xacc <__stack+0x1cd>
     cc2:	8c ee       	ldi	r24, 0xEC	; 236
     cc4:	23 ce       	rjmp	.-954    	; 0x90c <__stack+0xd>
     cc6:	d7 01       	movw	r26, r14
     cc8:	13 96       	adiw	r26, 0x03	; 3
     cca:	8c 91       	ld	r24, X
     ccc:	13 97       	sbiw	r26, 0x03	; 3
     cce:	81 11       	cpse	r24, r1
     cd0:	1f ce       	rjmp	.-962    	; 0x910 <__stack+0x11>
     cd2:	84 e1       	ldi	r24, 0x14	; 20
     cd4:	1f ce       	rjmp	.-962    	; 0x914 <__stack+0x15>
     cd6:	15 30       	cpi	r17, 0x05	; 5
     cd8:	20 f4       	brcc	.+8      	; 0xce2 <__stack+0x3e3>
     cda:	13 30       	cpi	r17, 0x03	; 3
     cdc:	61 f5       	brne	.+88     	; 0xd36 <__stack+0x437>
     cde:	8d e0       	ldi	r24, 0x0D	; 13
     ce0:	0a c0       	rjmp	.+20     	; 0xcf6 <__stack+0x3f7>
     ce2:	15 30       	cpi	r17, 0x05	; 5
     ce4:	21 f0       	breq	.+8      	; 0xcee <__stack+0x3ef>
     ce6:	16 30       	cpi	r17, 0x06	; 6
     ce8:	31 f5       	brne	.+76     	; 0xd36 <__stack+0x437>
     cea:	8b e0       	ldi	r24, 0x0B	; 11
     cec:	1b cf       	rjmp	.-458    	; 0xb24 <__stack+0x225>
     cee:	d7 01       	movw	r26, r14
     cf0:	13 96       	adiw	r26, 0x03	; 3
     cf2:	8c 91       	ld	r24, X
     cf4:	80 ce       	rjmp	.-768    	; 0x9f6 <__stack+0xf7>
     cf6:	d7 01       	movw	r26, r14
     cf8:	8c 93       	st	X, r24
     cfa:	1d c0       	rjmp	.+58     	; 0xd36 <__stack+0x437>
     cfc:	11 30       	cpi	r17, 0x01	; 1
     cfe:	d9 f4       	brne	.+54     	; 0xd36 <__stack+0x437>
     d00:	f7 01       	movw	r30, r14
     d02:	01 81       	ldd	r16, Z+1	; 0x01
     d04:	12 81       	ldd	r17, Z+2	; 0x02
     d06:	23 81       	ldd	r18, Z+3	; 0x03
     d08:	34 81       	ldd	r19, Z+4	; 0x04
     d0a:	45 81       	ldd	r20, Z+5	; 0x05
     d0c:	56 81       	ldd	r21, Z+6	; 0x06
     d0e:	67 81       	ldd	r22, Z+7	; 0x07
     d10:	83 ee       	ldi	r24, 0xE3	; 227
     d12:	91 e0       	ldi	r25, 0x01	; 1
     d14:	0e 94 39 03 	call	0x672	; 0x672 <_ZN16DS3231RTC_Alarms10alarm1_setE12tmElements_t>
     d18:	0e c0       	rjmp	.+28     	; 0xd36 <__stack+0x437>
     d1a:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <_ZN9DS3232RTC3getEv>
     d1e:	ab 01       	movw	r20, r22
     d20:	bc 01       	movw	r22, r24
     d22:	c7 01       	movw	r24, r14
     d24:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN23Human_Machine_Interface8ConvTotmEm>
     d28:	89 01       	movw	r16, r18
     d2a:	9a 01       	movw	r18, r20
     d2c:	ab 01       	movw	r20, r22
     d2e:	68 2f       	mov	r22, r24
     d30:	c7 01       	movw	r24, r14
     d32:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t>
     d36:	27 96       	adiw	r28, 0x07	; 7
     d38:	0f b6       	in	r0, 0x3f	; 63
     d3a:	f8 94       	cli
     d3c:	de bf       	out	0x3e, r29	; 62
     d3e:	0f be       	out	0x3f, r0	; 63
     d40:	cd bf       	out	0x3d, r28	; 61
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	1f 91       	pop	r17
     d48:	0f 91       	pop	r16
     d4a:	ff 90       	pop	r15
     d4c:	ef 90       	pop	r14
     d4e:	df 90       	pop	r13
     d50:	cf 90       	pop	r12
     d52:	bf 90       	pop	r11
     d54:	08 95       	ret

00000d56 <_ZN14liftRelayArray14relayArrayInitEv>:
}

void liftRelayArray::relayArrayInit(void)
{
	// Initialize Buttons
	DDRD |= (1 << ARControl1) | (1 << ARControl2) | (1 << ARControl3) | (1 << ARControl4);		// Marks pins as output.
     d56:	8a b1       	in	r24, 0x0a	; 10
     d58:	80 6f       	ori	r24, 0xF0	; 240
     d5a:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1 << ARControl1) & ~(1 << ARControl2) & ~(1 << ARControl3) & ~(1 << ARControl4);	// Puts pins into off state.
     d5c:	8b b1       	in	r24, 0x0b	; 11
     d5e:	8f 70       	andi	r24, 0x0F	; 15
     d60:	8b b9       	out	0x0b, r24	; 11
	PORTC |= (1 << DDC1);	// Make PC1 = 1 (on)
	PORTC &= ~(1 << DDC1);	// Puts PC1 = 0 (off).
	*/

	// setup timer1 to make an interrupt every 1 ms
	noInterrupts();           // disable all interrupts
     d62:	f8 94       	cli
	TCCR1A = 0;
     d64:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0;
     d68:	e1 e8       	ldi	r30, 0x81	; 129
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	10 82       	st	Z, r1
	TCNT1  = 0;
     d6e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     d72:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

	OCR1A = 16000;            // compare match register 16MHz/1000
     d76:	80 e8       	ldi	r24, 0x80	; 128
     d78:	9e e3       	ldi	r25, 0x3E	; 62
     d7a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     d7e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1B |= (1 << WGM12);   // CTC mode
     d82:	80 81       	ld	r24, Z
     d84:	88 60       	ori	r24, 0x08	; 8
     d86:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS10);    // No prescaler
     d88:	80 81       	ld	r24, Z
     d8a:	81 60       	ori	r24, 0x01	; 1
     d8c:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);  // enable timer compare interrupt
     d8e:	ef e6       	ldi	r30, 0x6F	; 111
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	82 60       	ori	r24, 0x02	; 2
     d96:	80 83       	st	Z, r24
	interrupts();             // enable all interrupts
     d98:	78 94       	sei
     d9a:	08 95       	ret

00000d9c <_ZN14liftRelayArray17relayArrayCommandEh>:
}

void liftRelayArray::relayArrayCommand(uint8_t cmd)
{
	switch (cmd)
     d9c:	61 30       	cpi	r22, 0x01	; 1
     d9e:	29 f0       	breq	.+10     	; 0xdaa <_ZN14liftRelayArray17relayArrayCommandEh+0xe>
     da0:	62 30       	cpi	r22, 0x02	; 2
     da2:	39 f4       	brne	.+14     	; 0xdb2 <_ZN14liftRelayArray17relayArrayCommandEh+0x16>
			PORTD |= (1 << ARControl1);
			PORTD &= ~(1 << ARControl2);
			PORTD |= (1 << ARControl3);
		break;
		case liftCCW:
			PORTD |= (1 << ARControl1);
     da4:	5c 9a       	sbi	0x0b, 4	; 11
			PORTD |= (1 << ARControl2);
     da6:	5d 9a       	sbi	0x0b, 5	; 11
     da8:	02 c0       	rjmp	.+4      	; 0xdae <_ZN14liftRelayArray17relayArrayCommandEh+0x12>
void liftRelayArray::relayArrayCommand(uint8_t cmd)
{
	switch (cmd)
	{
		case liftCW:
			PORTD |= (1 << ARControl1);
     daa:	5c 9a       	sbi	0x0b, 4	; 11
			PORTD &= ~(1 << ARControl2);
     dac:	5d 98       	cbi	0x0b, 5	; 11
			PORTD |= (1 << ARControl3);
		break;
		case liftCCW:
			PORTD |= (1 << ARControl1);
			PORTD |= (1 << ARControl2);
			PORTD |= (1 << ARControl3);
     dae:	5e 9a       	sbi	0x0b, 6	; 11
		break;
     db0:	08 95       	ret
		default:	// default, aka. liftSTOP
			PORTD &= ~(1 << ARControl1);
     db2:	5c 98       	cbi	0x0b, 4	; 11
			PORTD &= ~(1 << ARControl2);
     db4:	5d 98       	cbi	0x0b, 5	; 11
			PORTD &= ~(1 << ARControl3);
     db6:	5e 98       	cbi	0x0b, 6	; 11
     db8:	08 95       	ret

00000dba <__vector_11>:
	}
}


ISR(TIMER1_COMPA_vect)          // timer compare interrupt service routine
{
     dba:	1f 92       	push	r1
     dbc:	0f 92       	push	r0
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	0f 92       	push	r0
     dc2:	11 24       	eor	r1, r1
     dc4:	2f 93       	push	r18
     dc6:	3f 93       	push	r19
     dc8:	4f 93       	push	r20
     dca:	5f 93       	push	r21
     dcc:	6f 93       	push	r22
     dce:	7f 93       	push	r23
     dd0:	8f 93       	push	r24
     dd2:	9f 93       	push	r25
     dd4:	af 93       	push	r26
     dd6:	bf 93       	push	r27
     dd8:	cf 93       	push	r28
     dda:	ef 93       	push	r30
     ddc:	ff 93       	push	r31
	if (T1Timer >= 500)
     dde:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <T1Timer>
     de2:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <T1Timer+0x1>
     de6:	84 3f       	cpi	r24, 0xF4	; 244
     de8:	91 40       	sbci	r25, 0x01	; 1
     dea:	e8 f0       	brcs	.+58     	; 0xe26 <__vector_11+0x6c>
	{
		test++;
     dec:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <test>
     df0:	8f 5f       	subi	r24, 0xFF	; 255
     df2:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <test>
		T1Timer = 0;
     df6:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <T1Timer+0x1>
     dfa:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <T1Timer>

		Serial << "Test is: " << test << endl;
     dfe:	c0 91 fa 01 	lds	r28, 0x01FA	; 0x8001fa <test>
#define STREAMING_LIBRARY_VERSION 5

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     e02:	66 e4       	ldi	r22, 0x46	; 70
     e04:	71 e0       	ldi	r23, 0x01	; 1
     e06:	8e ef       	ldi	r24, 0xFE	; 254
     e08:	91 e0       	ldi	r25, 0x01	; 1
     e0a:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
     e0e:	4a e0       	ldi	r20, 0x0A	; 10
     e10:	50 e0       	ldi	r21, 0x00	; 0
     e12:	6c 2f       	mov	r22, r28
     e14:	8e ef       	ldi	r24, 0xFE	; 254
     e16:	91 e0       	ldi	r25, 0x01	; 1
     e18:	0e 94 2f 0a 	call	0x145e	; 0x145e <_ZN5Print5printEhi>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
     e1c:	8e ef       	ldi	r24, 0xFE	; 254
     e1e:	91 e0       	ldi	r25, 0x01	; 1
     e20:	0e 94 d5 09 	call	0x13aa	; 0x13aa <_ZN5Print7printlnEv>
     e24:	09 c0       	rjmp	.+18     	; 0xe38 <__vector_11+0x7e>
	}
	else
	{
		T1Timer++;
     e26:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <T1Timer>
     e2a:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <T1Timer+0x1>
     e2e:	01 96       	adiw	r24, 0x01	; 1
     e30:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <T1Timer+0x1>
     e34:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <T1Timer>
	}
}
     e38:	ff 91       	pop	r31
     e3a:	ef 91       	pop	r30
     e3c:	cf 91       	pop	r28
     e3e:	bf 91       	pop	r27
     e40:	af 91       	pop	r26
     e42:	9f 91       	pop	r25
     e44:	8f 91       	pop	r24
     e46:	7f 91       	pop	r23
     e48:	6f 91       	pop	r22
     e4a:	5f 91       	pop	r21
     e4c:	4f 91       	pop	r20
     e4e:	3f 91       	pop	r19
     e50:	2f 91       	pop	r18
     e52:	0f 90       	pop	r0
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	0f 90       	pop	r0
     e58:	1f 90       	pop	r1
     e5a:	18 95       	reti

00000e5c <main>:
  */
LiquidCrystal lcd(13, 12, 8, 9, 10, 11);


int main(void)
{
     e5c:	cf 93       	push	r28
     e5e:	df 93       	push	r29
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
     e64:	28 97       	sbiw	r28, 0x08	; 8
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	cd bf       	out	0x3d, r28	; 61
	init();						// Initializes the Arduino Core.
     e70:	0e 94 a3 0b 	call	0x1746	; 0x1746 <init>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     e74:	26 e0       	ldi	r18, 0x06	; 6
     e76:	40 e8       	ldi	r20, 0x80	; 128
     e78:	55 e2       	ldi	r21, 0x25	; 37
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	8e ef       	ldi	r24, 0xFE	; 254
     e80:	91 e0       	ldi	r25, 0x01	; 1
     e82:	0e 94 9f 08 	call	0x113e	; 0x113e <_ZN14HardwareSerial5beginEmh>
	Serial.begin(9600);			// Start the serial communication at 9600 a baud rate.
	lcd.begin(16, 2);			// Start LCD.
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	42 e0       	ldi	r20, 0x02	; 2
     e8a:	60 e1       	ldi	r22, 0x10	; 16
     e8c:	8a ec       	ldi	r24, 0xCA	; 202
     e8e:	91 e0       	ldi	r25, 0x01	; 1
     e90:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <_ZN13LiquidCrystal5beginEhhh>
	RTC_alarm.init_alarms();	// Start the alarms.
     e94:	83 ee       	ldi	r24, 0xE3	; 227
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	0e 94 c3 02 	call	0x586	; 0x586 <_ZN16DS3231RTC_Alarms11init_alarmsEv>
	relayArray.relayArrayInit();
     e9c:	82 ee       	ldi	r24, 0xE2	; 226
     e9e:	91 e0       	ldi	r25, 0x01	; 1
     ea0:	0e 94 ab 06 	call	0xd56	; 0xd56 <_ZN14liftRelayArray14relayArrayInitEv>
	
	// Local Variables:
	uint8_t alarm_stat = 0;
     ea4:	18 86       	std	Y+8, r1	; 0x08
#define STREAMING_LIBRARY_VERSION 5

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     ea6:	60 e5       	ldi	r22, 0x50	; 80
     ea8:	71 e0       	ldi	r23, 0x01	; 1
     eaa:	8e ef       	ldi	r24, 0xFE	; 254
     eac:	91 e0       	ldi	r25, 0x01	; 1
     eae:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
	
	
	// print he current time:
	Serial << "Current time is: ";
	HMI.printDateTime(RTC.get());
     eb2:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <_ZN9DS3232RTC3getEv>
     eb6:	ab 01       	movw	r20, r22
     eb8:	bc 01       	movw	r22, r24
     eba:	81 ef       	ldi	r24, 0xF1	; 241
     ebc:	91 e0       	ldi	r25, 0x01	; 1
     ebe:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN23Human_Machine_Interface13printDateTimeEm>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
     ec2:	8e ef       	ldi	r24, 0xFE	; 254
     ec4:	91 e0       	ldi	r25, 0x01	; 1
     ec6:	0e 94 d5 09 	call	0x13aa	; 0x13aa <_ZN5Print7printlnEv>
	Serial << endl;

	tmElements_t tidtemp = HMI.ConvTotm(RTC.get());
     eca:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <_ZN9DS3232RTC3getEv>
     ece:	ab 01       	movw	r20, r22
     ed0:	bc 01       	movw	r22, r24
     ed2:	81 ef       	ldi	r24, 0xF1	; 241
     ed4:	91 e0       	ldi	r25, 0x01	; 1
     ed6:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN23Human_Machine_Interface8ConvTotmEm>
	HMI.printDateTime(tidtemp);
     eda:	89 01       	movw	r16, r18
     edc:	9a 01       	movw	r18, r20
     ede:	ab 01       	movw	r20, r22
     ee0:	68 2f       	mov	r22, r24
     ee2:	81 ef       	ldi	r24, 0xF1	; 241
     ee4:	91 e0       	ldi	r25, 0x01	; 1
     ee6:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t>
	
	while (1)
	{
		RTC_alarm.alarm_Check(&alarm_stat);	// get the alarm status.
     eea:	be 01       	movw	r22, r28
     eec:	68 5f       	subi	r22, 0xF8	; 248
     eee:	7f 4f       	sbci	r23, 0xFF	; 255
     ef0:	83 ee       	ldi	r24, 0xE3	; 227
     ef2:	91 e0       	ldi	r25, 0x01	; 1
     ef4:	0e 94 18 03 	call	0x630	; 0x630 <_ZN16DS3231RTC_Alarms11alarm_CheckEPh>
		
		switch(alarm_stat)					// switch statement to decide what should happen if alarm has happened.
     ef8:	88 85       	ldd	r24, Y+8	; 0x08
     efa:	81 30       	cpi	r24, 0x01	; 1
     efc:	b1 f0       	breq	.+44     	; 0xf2a <main+0xce>
     efe:	82 30       	cpi	r24, 0x02	; 2
     f00:	59 f5       	brne	.+86     	; 0xf58 <main+0xfc>
//  				lcd << " --> Alarm 1!";
				relayArray.relayArrayCommand(liftCW);
			break;
			
			case 2:							// alarm1:
				HMI.printDateTime( RTC.get() );
     f02:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <_ZN9DS3232RTC3getEv>
     f06:	ab 01       	movw	r20, r22
     f08:	bc 01       	movw	r22, r24
     f0a:	81 ef       	ldi	r24, 0xF1	; 241
     f0c:	91 e0       	ldi	r25, 0x01	; 1
     f0e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN23Human_Machine_Interface13printDateTimeEm>
#define STREAMING_LIBRARY_VERSION 5

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     f12:	60 e7       	ldi	r22, 0x70	; 112
     f14:	71 e0       	ldi	r23, 0x01	; 1
     f16:	8e ef       	ldi	r24, 0xFE	; 254
     f18:	91 e0       	ldi	r25, 0x01	; 1
     f1a:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
     f1e:	8e ef       	ldi	r24, 0xFE	; 254
     f20:	91 e0       	ldi	r25, 0x01	; 1
     f22:	0e 94 d5 09 	call	0x13aa	; 0x13aa <_ZN5Print7printlnEv>
				Serial << " --> Alarm 2!" << endl;
//  				lcd.clear();
//  				lcd << " --> Alarm 2!";
				relayArray.relayArrayCommand(liftCCW);
     f26:	62 e0       	ldi	r22, 0x02	; 2
     f28:	13 c0       	rjmp	.+38     	; 0xf50 <main+0xf4>
		RTC_alarm.alarm_Check(&alarm_stat);	// get the alarm status.
		
		switch(alarm_stat)					// switch statement to decide what should happen if alarm has happened.
		{
			case 1:							// alarm1:
				HMI.printDateTime( RTC.get() );
     f2a:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <_ZN9DS3232RTC3getEv>
     f2e:	ab 01       	movw	r20, r22
     f30:	bc 01       	movw	r22, r24
     f32:	81 ef       	ldi	r24, 0xF1	; 241
     f34:	91 e0       	ldi	r25, 0x01	; 1
     f36:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN23Human_Machine_Interface13printDateTimeEm>
#define STREAMING_LIBRARY_VERSION 5

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     f3a:	62 e6       	ldi	r22, 0x62	; 98
     f3c:	71 e0       	ldi	r23, 0x01	; 1
     f3e:	8e ef       	ldi	r24, 0xFE	; 254
     f40:	91 e0       	ldi	r25, 0x01	; 1
     f42:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN5Print5printEPKc>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
     f46:	8e ef       	ldi	r24, 0xFE	; 254
     f48:	91 e0       	ldi	r25, 0x01	; 1
     f4a:	0e 94 d5 09 	call	0x13aa	; 0x13aa <_ZN5Print7printlnEv>
				Serial << " --> Alarm 1!" << endl;
//  				lcd.clear();
//  				lcd << " --> Alarm 1!";
				relayArray.relayArrayCommand(liftCW);
     f4e:	61 e0       	ldi	r22, 0x01	; 1
			case 2:							// alarm1:
				HMI.printDateTime( RTC.get() );
				Serial << " --> Alarm 2!" << endl;
//  				lcd.clear();
//  				lcd << " --> Alarm 2!";
				relayArray.relayArrayCommand(liftCCW);
     f50:	82 ee       	ldi	r24, 0xE2	; 226
     f52:	91 e0       	ldi	r25, 0x01	; 1
     f54:	0e 94 ce 06 	call	0xd9c	; 0xd9c <_ZN14liftRelayArray17relayArrayCommandEh>
				
			default:						// if there was no alarm:
				
			break;
		}
		HMI.UIupdate();
     f58:	81 ef       	ldi	r24, 0xF1	; 241
     f5a:	91 e0       	ldi	r25, 0x01	; 1
     f5c:	0e 94 8f 03 	call	0x71e	; 0x71e <_ZN23Human_Machine_Interface8UIupdateEv>
		delay(100);	// small delay
     f60:	64 e6       	ldi	r22, 0x64	; 100
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <delay>
	Serial << endl;

	tmElements_t tidtemp = HMI.ConvTotm(RTC.get());
	HMI.printDateTime(tidtemp);
	
	while (1)
     f6c:	be cf       	rjmp	.-132    	; 0xeea <main+0x8e>

00000f6e <_GLOBAL__sub_I_alarmIsrWasCalled>:
			break;
		}
		HMI.UIupdate();
		delay(100);	// small delay
	}
}
     f6e:	cf 92       	push	r12
     f70:	ef 92       	push	r14
     f72:	0f 93       	push	r16
private:
};


// make objects of the classes:
Human_Machine_Interface HMI;// Make a object of the 'class Human_Machine_Interface' named 'HMI'
     f74:	81 ef       	ldi	r24, 0xF1	; 241
     f76:	91 e0       	ldi	r25, 0x01	; 1
     f78:	0e 94 86 02 	call	0x50c	; 0x50c <_ZN23Human_Machine_InterfaceC1Ev>
}


DS3231RTC_Alarms::DS3231RTC_Alarms()
{
	alarm1_time.long_time = 0;
     f7c:	e3 ee       	ldi	r30, 0xE3	; 227
     f7e:	f1 e0       	ldi	r31, 0x01	; 1
     f80:	10 82       	st	Z, r1
     f82:	11 82       	std	Z+1, r1	; 0x01
     f84:	12 82       	std	Z+2, r1	; 0x02
     f86:	13 82       	std	Z+3, r1	; 0x03
	alarm2_time.long_time = 0;
     f88:	17 82       	std	Z+7, r1	; 0x07
     f8a:	10 86       	std	Z+8, r1	; 0x08
     f8c:	11 86       	std	Z+9, r1	; 0x09
     f8e:	12 86       	std	Z+10, r1	; 0x0a
  * LCD VSS pin to ground
  * LCD VCC pin to 5V
  * 10K resistor: Mounted
  * ends to +5V and ground
  */
LiquidCrystal lcd(13, 12, 8, 9, 10, 11);
     f90:	8b e0       	ldi	r24, 0x0B	; 11
     f92:	c8 2e       	mov	r12, r24
     f94:	9a e0       	ldi	r25, 0x0A	; 10
     f96:	e9 2e       	mov	r14, r25
     f98:	09 e0       	ldi	r16, 0x09	; 9
     f9a:	28 e0       	ldi	r18, 0x08	; 8
     f9c:	4c e0       	ldi	r20, 0x0C	; 12
     f9e:	6d e0       	ldi	r22, 0x0D	; 13
     fa0:	8a ec       	ldi	r24, 0xCA	; 202
     fa2:	91 e0       	ldi	r25, 0x01	; 1
     fa4:	0e 94 5e 10 	call	0x20bc	; 0x20bc <_ZN13LiquidCrystalC1Ehhhhhh>
			break;
		}
		HMI.UIupdate();
		delay(100);	// small delay
	}
}
     fa8:	0f 91       	pop	r16
     faa:	ef 90       	pop	r14
     fac:	cf 90       	pop	r12
     fae:	08 95       	ret

00000fb0 <_ZN14HardwareSerial9availableEv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     fb0:	fc 01       	movw	r30, r24
     fb2:	91 8d       	ldd	r25, Z+25	; 0x19
     fb4:	22 8d       	ldd	r18, Z+26	; 0x1a
     fb6:	89 2f       	mov	r24, r25
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	80 5c       	subi	r24, 0xC0	; 192
     fbc:	9f 4f       	sbci	r25, 0xFF	; 255
     fbe:	82 1b       	sub	r24, r18
     fc0:	91 09       	sbc	r25, r1
     fc2:	8f 73       	andi	r24, 0x3F	; 63
     fc4:	99 27       	eor	r25, r25
     fc6:	08 95       	ret

00000fc8 <_ZN14HardwareSerial4peekEv>:
     fc8:	fc 01       	movw	r30, r24
     fca:	91 8d       	ldd	r25, Z+25	; 0x19
     fcc:	82 8d       	ldd	r24, Z+26	; 0x1a
     fce:	98 17       	cp	r25, r24
     fd0:	31 f0       	breq	.+12     	; 0xfde <_ZN14HardwareSerial4peekEv+0x16>
     fd2:	82 8d       	ldd	r24, Z+26	; 0x1a
     fd4:	e8 0f       	add	r30, r24
     fd6:	f1 1d       	adc	r31, r1
     fd8:	85 8d       	ldd	r24, Z+29	; 0x1d
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	08 95       	ret
     fde:	8f ef       	ldi	r24, 0xFF	; 255
     fe0:	9f ef       	ldi	r25, 0xFF	; 255
     fe2:	08 95       	ret

00000fe4 <_ZN14HardwareSerial4readEv>:
     fe4:	fc 01       	movw	r30, r24
     fe6:	91 8d       	ldd	r25, Z+25	; 0x19
     fe8:	82 8d       	ldd	r24, Z+26	; 0x1a
     fea:	98 17       	cp	r25, r24
     fec:	61 f0       	breq	.+24     	; 0x1006 <_ZN14HardwareSerial4readEv+0x22>
     fee:	82 8d       	ldd	r24, Z+26	; 0x1a
     ff0:	df 01       	movw	r26, r30
     ff2:	a8 0f       	add	r26, r24
     ff4:	b1 1d       	adc	r27, r1
     ff6:	5d 96       	adiw	r26, 0x1d	; 29
     ff8:	8c 91       	ld	r24, X
     ffa:	92 8d       	ldd	r25, Z+26	; 0x1a
     ffc:	9f 5f       	subi	r25, 0xFF	; 255
     ffe:	9f 73       	andi	r25, 0x3F	; 63
    1000:	92 8f       	std	Z+26, r25	; 0x1a
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	08 95       	ret
    1006:	8f ef       	ldi	r24, 0xFF	; 255
    1008:	9f ef       	ldi	r25, 0xFF	; 255
    100a:	08 95       	ret

0000100c <_ZN14HardwareSerial17availableForWriteEv>:
    100c:	fc 01       	movw	r30, r24
    100e:	53 8d       	ldd	r21, Z+27	; 0x1b
    1010:	44 8d       	ldd	r20, Z+28	; 0x1c
    1012:	25 2f       	mov	r18, r21
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	84 2f       	mov	r24, r20
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	82 1b       	sub	r24, r18
    101c:	93 0b       	sbc	r25, r19
    101e:	54 17       	cp	r21, r20
    1020:	10 f0       	brcs	.+4      	; 0x1026 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1022:	cf 96       	adiw	r24, 0x3f	; 63
    1024:	08 95       	ret
    1026:	01 97       	sbiw	r24, 0x01	; 1
    1028:	08 95       	ret

0000102a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    102a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    102c:	84 8d       	ldd	r24, Z+28	; 0x1c
    102e:	df 01       	movw	r26, r30
    1030:	a8 0f       	add	r26, r24
    1032:	b1 1d       	adc	r27, r1
    1034:	a3 5a       	subi	r26, 0xA3	; 163
    1036:	bf 4f       	sbci	r27, 0xFF	; 255
    1038:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    103a:	84 8d       	ldd	r24, Z+28	; 0x1c
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	01 96       	adiw	r24, 0x01	; 1
    1040:	8f 73       	andi	r24, 0x3F	; 63
    1042:	99 27       	eor	r25, r25
    1044:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1046:	a6 89       	ldd	r26, Z+22	; 0x16
    1048:	b7 89       	ldd	r27, Z+23	; 0x17
    104a:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    104c:	a0 89       	ldd	r26, Z+16	; 0x10
    104e:	b1 89       	ldd	r27, Z+17	; 0x11
    1050:	8c 91       	ld	r24, X
    1052:	80 64       	ori	r24, 0x40	; 64
    1054:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1056:	93 8d       	ldd	r25, Z+27	; 0x1b
    1058:	84 8d       	ldd	r24, Z+28	; 0x1c
    105a:	98 13       	cpse	r25, r24
    105c:	06 c0       	rjmp	.+12     	; 0x106a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    105e:	02 88       	ldd	r0, Z+18	; 0x12
    1060:	f3 89       	ldd	r31, Z+19	; 0x13
    1062:	e0 2d       	mov	r30, r0
    1064:	80 81       	ld	r24, Z
    1066:	8f 7d       	andi	r24, 0xDF	; 223
    1068:	80 83       	st	Z, r24
    106a:	08 95       	ret

0000106c <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    106c:	ef 92       	push	r14
    106e:	ff 92       	push	r15
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	ec 01       	movw	r28, r24
  _written = true;
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    107e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1080:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1082:	98 13       	cpse	r25, r24
    1084:	05 c0       	rjmp	.+10     	; 0x1090 <_ZN14HardwareSerial5writeEh+0x24>
    1086:	e8 89       	ldd	r30, Y+16	; 0x10
    1088:	f9 89       	ldd	r31, Y+17	; 0x11
    108a:	80 81       	ld	r24, Z
    108c:	85 fd       	sbrc	r24, 5
    108e:	24 c0       	rjmp	.+72     	; 0x10d8 <_ZN14HardwareSerial5writeEh+0x6c>
    1090:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1092:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1094:	10 e0       	ldi	r17, 0x00	; 0
    1096:	0f 5f       	subi	r16, 0xFF	; 255
    1098:	1f 4f       	sbci	r17, 0xFF	; 255
    109a:	0f 73       	andi	r16, 0x3F	; 63
    109c:	11 27       	eor	r17, r17
    109e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    10a0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    10a2:	e8 12       	cpse	r14, r24
    10a4:	0c c0       	rjmp	.+24     	; 0x10be <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	07 fc       	sbrc	r0, 7
    10aa:	fa cf       	rjmp	.-12     	; 0x10a0 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    10ac:	e8 89       	ldd	r30, Y+16	; 0x10
    10ae:	f9 89       	ldd	r31, Y+17	; 0x11
    10b0:	80 81       	ld	r24, Z
    10b2:	85 ff       	sbrs	r24, 5
    10b4:	f5 cf       	rjmp	.-22     	; 0x10a0 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    10b6:	ce 01       	movw	r24, r28
    10b8:	0e 94 15 08 	call	0x102a	; 0x102a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    10bc:	f1 cf       	rjmp	.-30     	; 0x10a0 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    10be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10c0:	fe 01       	movw	r30, r28
    10c2:	e8 0f       	add	r30, r24
    10c4:	f1 1d       	adc	r31, r1
    10c6:	e3 5a       	subi	r30, 0xA3	; 163
    10c8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ca:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    10cc:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    10ce:	ea 89       	ldd	r30, Y+18	; 0x12
    10d0:	fb 89       	ldd	r31, Y+19	; 0x13
    10d2:	80 81       	ld	r24, Z
    10d4:	80 62       	ori	r24, 0x20	; 32
    10d6:	07 c0       	rjmp	.+14     	; 0x10e6 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    10d8:	ee 89       	ldd	r30, Y+22	; 0x16
    10da:	ff 89       	ldd	r31, Y+23	; 0x17
    10dc:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    10de:	e8 89       	ldd	r30, Y+16	; 0x10
    10e0:	f9 89       	ldd	r31, Y+17	; 0x11
    10e2:	80 81       	ld	r24, Z
    10e4:	80 64       	ori	r24, 0x40	; 64
    10e6:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	1f 91       	pop	r17
    10f2:	0f 91       	pop	r16
    10f4:	ff 90       	pop	r15
    10f6:	ef 90       	pop	r14
    10f8:	08 95       	ret

000010fa <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    10fa:	cf 93       	push	r28
    10fc:	df 93       	push	r29
    10fe:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1100:	88 8d       	ldd	r24, Y+24	; 0x18
    1102:	88 23       	and	r24, r24
    1104:	c9 f0       	breq	.+50     	; 0x1138 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1106:	ea 89       	ldd	r30, Y+18	; 0x12
    1108:	fb 89       	ldd	r31, Y+19	; 0x13
    110a:	80 81       	ld	r24, Z
    110c:	85 fd       	sbrc	r24, 5
    110e:	05 c0       	rjmp	.+10     	; 0x111a <_ZN14HardwareSerial5flushEv+0x20>
    1110:	a8 89       	ldd	r26, Y+16	; 0x10
    1112:	b9 89       	ldd	r27, Y+17	; 0x11
    1114:	8c 91       	ld	r24, X
    1116:	86 fd       	sbrc	r24, 6
    1118:	0f c0       	rjmp	.+30     	; 0x1138 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	07 fc       	sbrc	r0, 7
    111e:	f5 cf       	rjmp	.-22     	; 0x110a <_ZN14HardwareSerial5flushEv+0x10>
    1120:	80 81       	ld	r24, Z
    1122:	85 ff       	sbrs	r24, 5
    1124:	f2 cf       	rjmp	.-28     	; 0x110a <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1126:	a8 89       	ldd	r26, Y+16	; 0x10
    1128:	b9 89       	ldd	r27, Y+17	; 0x11
    112a:	8c 91       	ld	r24, X
    112c:	85 ff       	sbrs	r24, 5
    112e:	ed cf       	rjmp	.-38     	; 0x110a <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1130:	ce 01       	movw	r24, r28
    1132:	0e 94 15 08 	call	0x102a	; 0x102a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1136:	e7 cf       	rjmp	.-50     	; 0x1106 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	08 95       	ret

0000113e <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    113e:	cf 92       	push	r12
    1140:	df 92       	push	r13
    1142:	ef 92       	push	r14
    1144:	ff 92       	push	r15
    1146:	1f 93       	push	r17
    1148:	cf 93       	push	r28
    114a:	df 93       	push	r29
    114c:	ec 01       	movw	r28, r24
    114e:	6a 01       	movw	r12, r20
    1150:	7b 01       	movw	r14, r22
    1152:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1154:	e8 89       	ldd	r30, Y+16	; 0x10
    1156:	f9 89       	ldd	r31, Y+17	; 0x11
    1158:	82 e0       	ldi	r24, 0x02	; 2
    115a:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    115c:	41 15       	cp	r20, r1
    115e:	51 4e       	sbci	r21, 0xE1	; 225
    1160:	61 05       	cpc	r22, r1
    1162:	71 05       	cpc	r23, r1
    1164:	b1 f0       	breq	.+44     	; 0x1192 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1166:	60 e0       	ldi	r22, 0x00	; 0
    1168:	79 e0       	ldi	r23, 0x09	; 9
    116a:	8d e3       	ldi	r24, 0x3D	; 61
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	a7 01       	movw	r20, r14
    1170:	96 01       	movw	r18, r12
    1172:	0e 94 08 16 	call	0x2c10	; 0x2c10 <__udivmodsi4>
    1176:	da 01       	movw	r26, r20
    1178:	c9 01       	movw	r24, r18
    117a:	01 97       	sbiw	r24, 0x01	; 1
    117c:	a1 09       	sbc	r26, r1
    117e:	b1 09       	sbc	r27, r1
    1180:	b6 95       	lsr	r27
    1182:	a7 95       	ror	r26
    1184:	97 95       	ror	r25
    1186:	87 95       	ror	r24
    1188:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    118a:	21 15       	cp	r18, r1
    118c:	80 e1       	ldi	r24, 0x10	; 16
    118e:	38 07       	cpc	r19, r24
    1190:	a8 f0       	brcs	.+42     	; 0x11bc <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1192:	e8 89       	ldd	r30, Y+16	; 0x10
    1194:	f9 89       	ldd	r31, Y+17	; 0x11
    1196:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1198:	60 e8       	ldi	r22, 0x80	; 128
    119a:	74 e8       	ldi	r23, 0x84	; 132
    119c:	8e e1       	ldi	r24, 0x1E	; 30
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	a7 01       	movw	r20, r14
    11a2:	96 01       	movw	r18, r12
    11a4:	0e 94 08 16 	call	0x2c10	; 0x2c10 <__udivmodsi4>
    11a8:	da 01       	movw	r26, r20
    11aa:	c9 01       	movw	r24, r18
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	a1 09       	sbc	r26, r1
    11b0:	b1 09       	sbc	r27, r1
    11b2:	b6 95       	lsr	r27
    11b4:	a7 95       	ror	r26
    11b6:	97 95       	ror	r25
    11b8:	87 95       	ror	r24
    11ba:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    11bc:	ec 85       	ldd	r30, Y+12	; 0x0c
    11be:	fd 85       	ldd	r31, Y+13	; 0x0d
    11c0:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    11c2:	ee 85       	ldd	r30, Y+14	; 0x0e
    11c4:	ff 85       	ldd	r31, Y+15	; 0x0f
    11c6:	20 83       	st	Z, r18

  _written = false;
    11c8:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    11ca:	ec 89       	ldd	r30, Y+20	; 0x14
    11cc:	fd 89       	ldd	r31, Y+21	; 0x15
    11ce:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    11d0:	ea 89       	ldd	r30, Y+18	; 0x12
    11d2:	fb 89       	ldd	r31, Y+19	; 0x13
    11d4:	80 81       	ld	r24, Z
    11d6:	80 61       	ori	r24, 0x10	; 16
    11d8:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    11da:	ea 89       	ldd	r30, Y+18	; 0x12
    11dc:	fb 89       	ldd	r31, Y+19	; 0x13
    11de:	80 81       	ld	r24, Z
    11e0:	88 60       	ori	r24, 0x08	; 8
    11e2:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    11e4:	ea 89       	ldd	r30, Y+18	; 0x12
    11e6:	fb 89       	ldd	r31, Y+19	; 0x13
    11e8:	80 81       	ld	r24, Z
    11ea:	80 68       	ori	r24, 0x80	; 128
    11ec:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    11ee:	ea 89       	ldd	r30, Y+18	; 0x12
    11f0:	fb 89       	ldd	r31, Y+19	; 0x13
    11f2:	80 81       	ld	r24, Z
    11f4:	8f 7d       	andi	r24, 0xDF	; 223
    11f6:	80 83       	st	Z, r24
}
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	1f 91       	pop	r17
    11fe:	ff 90       	pop	r15
    1200:	ef 90       	pop	r14
    1202:	df 90       	pop	r13
    1204:	cf 90       	pop	r12
    1206:	08 95       	ret

00001208 <_ZN5Print17availableForWriteEv>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	08 95       	ret

0000120e <_ZN5Print5flushEv>:
    120e:	08 95       	ret

00001210 <__vector_18>:
    1210:	1f 92       	push	r1
    1212:	0f 92       	push	r0
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	0f 92       	push	r0
    1218:	11 24       	eor	r1, r1
    121a:	2f 93       	push	r18
    121c:	8f 93       	push	r24
    121e:	9f 93       	push	r25
    1220:	ef 93       	push	r30
    1222:	ff 93       	push	r31
    1224:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <Serial+0x10>
    1228:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <Serial+0x11>
    122c:	80 81       	ld	r24, Z
    122e:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <Serial+0x16>
    1232:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <Serial+0x17>
    1236:	82 fd       	sbrc	r24, 2
    1238:	12 c0       	rjmp	.+36     	; 0x125e <__vector_18+0x4e>
    123a:	90 81       	ld	r25, Z
    123c:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <Serial+0x19>
    1240:	8f 5f       	subi	r24, 0xFF	; 255
    1242:	8f 73       	andi	r24, 0x3F	; 63
    1244:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <Serial+0x1a>
    1248:	82 17       	cp	r24, r18
    124a:	51 f0       	breq	.+20     	; 0x1260 <__vector_18+0x50>
    124c:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <Serial+0x19>
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	e2 50       	subi	r30, 0x02	; 2
    1254:	fe 4f       	sbci	r31, 0xFE	; 254
    1256:	95 8f       	std	Z+29, r25	; 0x1d
    1258:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <Serial+0x19>
    125c:	01 c0       	rjmp	.+2      	; 0x1260 <__vector_18+0x50>
    125e:	80 81       	ld	r24, Z
    1260:	ff 91       	pop	r31
    1262:	ef 91       	pop	r30
    1264:	9f 91       	pop	r25
    1266:	8f 91       	pop	r24
    1268:	2f 91       	pop	r18
    126a:	0f 90       	pop	r0
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	0f 90       	pop	r0
    1270:	1f 90       	pop	r1
    1272:	18 95       	reti

00001274 <__vector_19>:
    1274:	1f 92       	push	r1
    1276:	0f 92       	push	r0
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	0f 92       	push	r0
    127c:	11 24       	eor	r1, r1
    127e:	2f 93       	push	r18
    1280:	3f 93       	push	r19
    1282:	4f 93       	push	r20
    1284:	5f 93       	push	r21
    1286:	6f 93       	push	r22
    1288:	7f 93       	push	r23
    128a:	8f 93       	push	r24
    128c:	9f 93       	push	r25
    128e:	af 93       	push	r26
    1290:	bf 93       	push	r27
    1292:	ef 93       	push	r30
    1294:	ff 93       	push	r31
    1296:	8e ef       	ldi	r24, 0xFE	; 254
    1298:	91 e0       	ldi	r25, 0x01	; 1
    129a:	0e 94 15 08 	call	0x102a	; 0x102a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    129e:	ff 91       	pop	r31
    12a0:	ef 91       	pop	r30
    12a2:	bf 91       	pop	r27
    12a4:	af 91       	pop	r26
    12a6:	9f 91       	pop	r25
    12a8:	8f 91       	pop	r24
    12aa:	7f 91       	pop	r23
    12ac:	6f 91       	pop	r22
    12ae:	5f 91       	pop	r21
    12b0:	4f 91       	pop	r20
    12b2:	3f 91       	pop	r19
    12b4:	2f 91       	pop	r18
    12b6:	0f 90       	pop	r0
    12b8:	0f be       	out	0x3f, r0	; 63
    12ba:	0f 90       	pop	r0
    12bc:	1f 90       	pop	r1
    12be:	18 95       	reti

000012c0 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    12c0:	ee ef       	ldi	r30, 0xFE	; 254
    12c2:	f1 e0       	ldi	r31, 0x01	; 1
    12c4:	13 82       	std	Z+3, r1	; 0x03
    12c6:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    12c8:	88 ee       	ldi	r24, 0xE8	; 232
    12ca:	93 e0       	ldi	r25, 0x03	; 3
    12cc:	a0 e0       	ldi	r26, 0x00	; 0
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	84 83       	std	Z+4, r24	; 0x04
    12d2:	95 83       	std	Z+5, r25	; 0x05
    12d4:	a6 83       	std	Z+6, r26	; 0x06
    12d6:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    12d8:	82 e8       	ldi	r24, 0x82	; 130
    12da:	91 e0       	ldi	r25, 0x01	; 1
    12dc:	91 83       	std	Z+1, r25	; 0x01
    12de:	80 83       	st	Z, r24
    12e0:	85 ec       	ldi	r24, 0xC5	; 197
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	95 87       	std	Z+13, r25	; 0x0d
    12e6:	84 87       	std	Z+12, r24	; 0x0c
    12e8:	84 ec       	ldi	r24, 0xC4	; 196
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	97 87       	std	Z+15, r25	; 0x0f
    12ee:	86 87       	std	Z+14, r24	; 0x0e
    12f0:	80 ec       	ldi	r24, 0xC0	; 192
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	91 8b       	std	Z+17, r25	; 0x11
    12f6:	80 8b       	std	Z+16, r24	; 0x10
    12f8:	81 ec       	ldi	r24, 0xC1	; 193
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	93 8b       	std	Z+19, r25	; 0x13
    12fe:	82 8b       	std	Z+18, r24	; 0x12
    1300:	82 ec       	ldi	r24, 0xC2	; 194
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	95 8b       	std	Z+21, r25	; 0x15
    1306:	84 8b       	std	Z+20, r24	; 0x14
    1308:	86 ec       	ldi	r24, 0xC6	; 198
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	97 8b       	std	Z+23, r25	; 0x17
    130e:	86 8b       	std	Z+22, r24	; 0x16
    1310:	11 8e       	std	Z+25, r1	; 0x19
    1312:	12 8e       	std	Z+26, r1	; 0x1a
    1314:	13 8e       	std	Z+27, r1	; 0x1b
    1316:	14 8e       	std	Z+28, r1	; 0x1c
    1318:	08 95       	ret

0000131a <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    131a:	cf 92       	push	r12
    131c:	df 92       	push	r13
    131e:	ef 92       	push	r14
    1320:	ff 92       	push	r15
    1322:	0f 93       	push	r16
    1324:	1f 93       	push	r17
    1326:	cf 93       	push	r28
    1328:	df 93       	push	r29
    132a:	6c 01       	movw	r12, r24
    132c:	7a 01       	movw	r14, r20
    132e:	8b 01       	movw	r16, r22
    1330:	c0 e0       	ldi	r28, 0x00	; 0
    1332:	d0 e0       	ldi	r29, 0x00	; 0
    1334:	ce 15       	cp	r28, r14
    1336:	df 05       	cpc	r29, r15
    1338:	81 f0       	breq	.+32     	; 0x135a <_ZN5Print5writeEPKhj+0x40>
    133a:	d8 01       	movw	r26, r16
    133c:	6d 91       	ld	r22, X+
    133e:	8d 01       	movw	r16, r26
    1340:	d6 01       	movw	r26, r12
    1342:	ed 91       	ld	r30, X+
    1344:	fc 91       	ld	r31, X
    1346:	01 90       	ld	r0, Z+
    1348:	f0 81       	ld	r31, Z
    134a:	e0 2d       	mov	r30, r0
    134c:	c6 01       	movw	r24, r12
    134e:	09 95       	icall
    1350:	89 2b       	or	r24, r25
    1352:	11 f0       	breq	.+4      	; 0x1358 <_ZN5Print5writeEPKhj+0x3e>
    1354:	21 96       	adiw	r28, 0x01	; 1
    1356:	ee cf       	rjmp	.-36     	; 0x1334 <_ZN5Print5writeEPKhj+0x1a>
    1358:	7e 01       	movw	r14, r28
    135a:	c7 01       	movw	r24, r14
    135c:	df 91       	pop	r29
    135e:	cf 91       	pop	r28
    1360:	1f 91       	pop	r17
    1362:	0f 91       	pop	r16
    1364:	ff 90       	pop	r15
    1366:	ef 90       	pop	r14
    1368:	df 90       	pop	r13
    136a:	cf 90       	pop	r12
    136c:	08 95       	ret

0000136e <_ZN5Print5writeEPKc>:
    136e:	61 15       	cp	r22, r1
    1370:	71 05       	cpc	r23, r1
    1372:	79 f0       	breq	.+30     	; 0x1392 <_ZN5Print5writeEPKc+0x24>
    1374:	fb 01       	movw	r30, r22
    1376:	01 90       	ld	r0, Z+
    1378:	00 20       	and	r0, r0
    137a:	e9 f7       	brne	.-6      	; 0x1376 <_ZN5Print5writeEPKc+0x8>
    137c:	31 97       	sbiw	r30, 0x01	; 1
    137e:	af 01       	movw	r20, r30
    1380:	46 1b       	sub	r20, r22
    1382:	57 0b       	sbc	r21, r23
    1384:	dc 01       	movw	r26, r24
    1386:	ed 91       	ld	r30, X+
    1388:	fc 91       	ld	r31, X
    138a:	02 80       	ldd	r0, Z+2	; 0x02
    138c:	f3 81       	ldd	r31, Z+3	; 0x03
    138e:	e0 2d       	mov	r30, r0
    1390:	09 94       	ijmp
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	08 95       	ret

00001398 <_ZN5Print5printEPKc>:
    1398:	0c 94 b7 09 	jmp	0x136e	; 0x136e <_ZN5Print5writeEPKc>

0000139c <_ZN5Print5printEc>:
    139c:	dc 01       	movw	r26, r24
    139e:	ed 91       	ld	r30, X+
    13a0:	fc 91       	ld	r31, X
    13a2:	01 90       	ld	r0, Z+
    13a4:	f0 81       	ld	r31, Z
    13a6:	e0 2d       	mov	r30, r0
    13a8:	09 94       	ijmp

000013aa <_ZN5Print7printlnEv>:
    13aa:	60 e9       	ldi	r22, 0x90	; 144
    13ac:	71 e0       	ldi	r23, 0x01	; 1
    13ae:	0c 94 b7 09 	jmp	0x136e	; 0x136e <_ZN5Print5writeEPKc>

000013b2 <_ZN5Print11printNumberEmh>:
    13b2:	8f 92       	push	r8
    13b4:	9f 92       	push	r9
    13b6:	af 92       	push	r10
    13b8:	bf 92       	push	r11
    13ba:	ef 92       	push	r14
    13bc:	ff 92       	push	r15
    13be:	0f 93       	push	r16
    13c0:	1f 93       	push	r17
    13c2:	cf 93       	push	r28
    13c4:	df 93       	push	r29
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
    13ca:	a1 97       	sbiw	r28, 0x21	; 33
    13cc:	0f b6       	in	r0, 0x3f	; 63
    13ce:	f8 94       	cli
    13d0:	de bf       	out	0x3e, r29	; 62
    13d2:	0f be       	out	0x3f, r0	; 63
    13d4:	cd bf       	out	0x3d, r28	; 61
    13d6:	7c 01       	movw	r14, r24
    13d8:	fa 01       	movw	r30, r20
    13da:	cb 01       	movw	r24, r22
    13dc:	19 a2       	std	Y+33, r1	; 0x21
    13de:	22 30       	cpi	r18, 0x02	; 2
    13e0:	08 f4       	brcc	.+2      	; 0x13e4 <_ZN5Print11printNumberEmh+0x32>
    13e2:	2a e0       	ldi	r18, 0x0A	; 10
    13e4:	8e 01       	movw	r16, r28
    13e6:	0f 5d       	subi	r16, 0xDF	; 223
    13e8:	1f 4f       	sbci	r17, 0xFF	; 255
    13ea:	82 2e       	mov	r8, r18
    13ec:	91 2c       	mov	r9, r1
    13ee:	a1 2c       	mov	r10, r1
    13f0:	b1 2c       	mov	r11, r1
    13f2:	bf 01       	movw	r22, r30
    13f4:	a5 01       	movw	r20, r10
    13f6:	94 01       	movw	r18, r8
    13f8:	0e 94 08 16 	call	0x2c10	; 0x2c10 <__udivmodsi4>
    13fc:	f9 01       	movw	r30, r18
    13fe:	ca 01       	movw	r24, r20
    1400:	01 50       	subi	r16, 0x01	; 1
    1402:	11 09       	sbc	r17, r1
    1404:	6a 30       	cpi	r22, 0x0A	; 10
    1406:	10 f4       	brcc	.+4      	; 0x140c <_ZN5Print11printNumberEmh+0x5a>
    1408:	60 5d       	subi	r22, 0xD0	; 208
    140a:	01 c0       	rjmp	.+2      	; 0x140e <_ZN5Print11printNumberEmh+0x5c>
    140c:	69 5c       	subi	r22, 0xC9	; 201
    140e:	d8 01       	movw	r26, r16
    1410:	6c 93       	st	X, r22
    1412:	23 2b       	or	r18, r19
    1414:	24 2b       	or	r18, r20
    1416:	25 2b       	or	r18, r21
    1418:	61 f7       	brne	.-40     	; 0x13f2 <_ZN5Print11printNumberEmh+0x40>
    141a:	b8 01       	movw	r22, r16
    141c:	c7 01       	movw	r24, r14
    141e:	0e 94 b7 09 	call	0x136e	; 0x136e <_ZN5Print5writeEPKc>
    1422:	a1 96       	adiw	r28, 0x21	; 33
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	f8 94       	cli
    1428:	de bf       	out	0x3e, r29	; 62
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	cd bf       	out	0x3d, r28	; 61
    142e:	df 91       	pop	r29
    1430:	cf 91       	pop	r28
    1432:	1f 91       	pop	r17
    1434:	0f 91       	pop	r16
    1436:	ff 90       	pop	r15
    1438:	ef 90       	pop	r14
    143a:	bf 90       	pop	r11
    143c:	af 90       	pop	r10
    143e:	9f 90       	pop	r9
    1440:	8f 90       	pop	r8
    1442:	08 95       	ret

00001444 <_ZN5Print5printEmi>:
    1444:	21 15       	cp	r18, r1
    1446:	31 05       	cpc	r19, r1
    1448:	41 f4       	brne	.+16     	; 0x145a <_ZN5Print5printEmi+0x16>
    144a:	dc 01       	movw	r26, r24
    144c:	ed 91       	ld	r30, X+
    144e:	fc 91       	ld	r31, X
    1450:	01 90       	ld	r0, Z+
    1452:	f0 81       	ld	r31, Z
    1454:	e0 2d       	mov	r30, r0
    1456:	64 2f       	mov	r22, r20
    1458:	09 94       	ijmp
    145a:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <_ZN5Print11printNumberEmh>

0000145e <_ZN5Print5printEhi>:
    145e:	9a 01       	movw	r18, r20
    1460:	46 2f       	mov	r20, r22
    1462:	50 e0       	ldi	r21, 0x00	; 0
    1464:	60 e0       	ldi	r22, 0x00	; 0
    1466:	70 e0       	ldi	r23, 0x00	; 0
    1468:	0c 94 22 0a 	jmp	0x1444	; 0x1444 <_ZN5Print5printEmi>

0000146c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    146c:	cf 92       	push	r12
    146e:	df 92       	push	r13
    1470:	ef 92       	push	r14
    1472:	ff 92       	push	r15
    1474:	0f 93       	push	r16
    1476:	1f 93       	push	r17
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
  if (base == 0) {
    147c:	21 15       	cp	r18, r1
    147e:	31 05       	cpc	r19, r1
    1480:	81 f4       	brne	.+32     	; 0x14a2 <_ZN5Print5printEli+0x36>
    return write(n);
    1482:	dc 01       	movw	r26, r24
    1484:	ed 91       	ld	r30, X+
    1486:	fc 91       	ld	r31, X
    1488:	01 90       	ld	r0, Z+
    148a:	f0 81       	ld	r31, Z
    148c:	e0 2d       	mov	r30, r0
    148e:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    1490:	df 91       	pop	r29
    1492:	cf 91       	pop	r28
    1494:	1f 91       	pop	r17
    1496:	0f 91       	pop	r16
    1498:	ff 90       	pop	r15
    149a:	ef 90       	pop	r14
    149c:	df 90       	pop	r13
    149e:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    14a0:	09 94       	ijmp
  } else if (base == 10) {
    14a2:	2a 30       	cpi	r18, 0x0A	; 10
    14a4:	31 05       	cpc	r19, r1
    14a6:	01 f5       	brne	.+64     	; 0x14e8 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    14a8:	77 ff       	sbrs	r23, 7
    14aa:	1d c0       	rjmp	.+58     	; 0x14e6 <_ZN5Print5printEli+0x7a>
    14ac:	6a 01       	movw	r12, r20
    14ae:	7b 01       	movw	r14, r22
    14b0:	ec 01       	movw	r28, r24
      int t = print('-');
    14b2:	6d e2       	ldi	r22, 0x2D	; 45
    14b4:	0e 94 ce 09 	call	0x139c	; 0x139c <_ZN5Print5printEc>
    14b8:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    14ba:	44 27       	eor	r20, r20
    14bc:	55 27       	eor	r21, r21
    14be:	ba 01       	movw	r22, r20
    14c0:	4c 19       	sub	r20, r12
    14c2:	5d 09       	sbc	r21, r13
    14c4:	6e 09       	sbc	r22, r14
    14c6:	7f 09       	sbc	r23, r15
    14c8:	2a e0       	ldi	r18, 0x0A	; 10
    14ca:	ce 01       	movw	r24, r28
    14cc:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <_ZN5Print11printNumberEmh>
    14d0:	80 0f       	add	r24, r16
    14d2:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    14d4:	df 91       	pop	r29
    14d6:	cf 91       	pop	r28
    14d8:	1f 91       	pop	r17
    14da:	0f 91       	pop	r16
    14dc:	ff 90       	pop	r15
    14de:	ef 90       	pop	r14
    14e0:	df 90       	pop	r13
    14e2:	cf 90       	pop	r12
    14e4:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    14e6:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    14e8:	df 91       	pop	r29
    14ea:	cf 91       	pop	r28
    14ec:	1f 91       	pop	r17
    14ee:	0f 91       	pop	r16
    14f0:	ff 90       	pop	r15
    14f2:	ef 90       	pop	r14
    14f4:	df 90       	pop	r13
    14f6:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    14f8:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <_ZN5Print11printNumberEmh>

000014fc <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    14fc:	08 95       	ret

000014fe <attachInterrupt>:
    14fe:	82 30       	cpi	r24, 0x02	; 2
    1500:	e8 f4       	brcc	.+58     	; 0x153c <attachInterrupt+0x3e>
    1502:	e8 2f       	mov	r30, r24
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	ee 0f       	add	r30, r30
    1508:	ff 1f       	adc	r31, r31
    150a:	ef 5f       	subi	r30, 0xFF	; 255
    150c:	fe 4f       	sbci	r31, 0xFE	; 254
    150e:	71 83       	std	Z+1, r23	; 0x01
    1510:	60 83       	st	Z, r22
    1512:	81 30       	cpi	r24, 0x01	; 1
    1514:	41 f0       	breq	.+16     	; 0x1526 <attachInterrupt+0x28>
    1516:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    151a:	8c 7f       	andi	r24, 0xFC	; 252
    151c:	48 2b       	or	r20, r24
    151e:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    1522:	e8 9a       	sbi	0x1d, 0	; 29
    1524:	08 95       	ret
    1526:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    152a:	83 7f       	andi	r24, 0xF3	; 243
    152c:	44 0f       	add	r20, r20
    152e:	55 1f       	adc	r21, r21
    1530:	44 0f       	add	r20, r20
    1532:	55 1f       	adc	r21, r21
    1534:	48 2b       	or	r20, r24
    1536:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    153a:	e9 9a       	sbi	0x1d, 1	; 29
    153c:	08 95       	ret

0000153e <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    153e:	1f 92       	push	r1
    1540:	0f 92       	push	r0
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	0f 92       	push	r0
    1546:	11 24       	eor	r1, r1
    1548:	2f 93       	push	r18
    154a:	3f 93       	push	r19
    154c:	4f 93       	push	r20
    154e:	5f 93       	push	r21
    1550:	6f 93       	push	r22
    1552:	7f 93       	push	r23
    1554:	8f 93       	push	r24
    1556:	9f 93       	push	r25
    1558:	af 93       	push	r26
    155a:	bf 93       	push	r27
    155c:	ef 93       	push	r30
    155e:	ff 93       	push	r31
    1560:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <intFunc>
    1564:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <intFunc+0x1>
    1568:	09 95       	icall
    156a:	ff 91       	pop	r31
    156c:	ef 91       	pop	r30
    156e:	bf 91       	pop	r27
    1570:	af 91       	pop	r26
    1572:	9f 91       	pop	r25
    1574:	8f 91       	pop	r24
    1576:	7f 91       	pop	r23
    1578:	6f 91       	pop	r22
    157a:	5f 91       	pop	r21
    157c:	4f 91       	pop	r20
    157e:	3f 91       	pop	r19
    1580:	2f 91       	pop	r18
    1582:	0f 90       	pop	r0
    1584:	0f be       	out	0x3f, r0	; 63
    1586:	0f 90       	pop	r0
    1588:	1f 90       	pop	r1
    158a:	18 95       	reti

0000158c <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    158c:	1f 92       	push	r1
    158e:	0f 92       	push	r0
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	0f 92       	push	r0
    1594:	11 24       	eor	r1, r1
    1596:	2f 93       	push	r18
    1598:	3f 93       	push	r19
    159a:	4f 93       	push	r20
    159c:	5f 93       	push	r21
    159e:	6f 93       	push	r22
    15a0:	7f 93       	push	r23
    15a2:	8f 93       	push	r24
    15a4:	9f 93       	push	r25
    15a6:	af 93       	push	r26
    15a8:	bf 93       	push	r27
    15aa:	ef 93       	push	r30
    15ac:	ff 93       	push	r31
    15ae:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <intFunc+0x2>
    15b2:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <intFunc+0x3>
    15b6:	09 95       	icall
    15b8:	ff 91       	pop	r31
    15ba:	ef 91       	pop	r30
    15bc:	bf 91       	pop	r27
    15be:	af 91       	pop	r26
    15c0:	9f 91       	pop	r25
    15c2:	8f 91       	pop	r24
    15c4:	7f 91       	pop	r23
    15c6:	6f 91       	pop	r22
    15c8:	5f 91       	pop	r21
    15ca:	4f 91       	pop	r20
    15cc:	3f 91       	pop	r19
    15ce:	2f 91       	pop	r18
    15d0:	0f 90       	pop	r0
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	0f 90       	pop	r0
    15d6:	1f 90       	pop	r1
    15d8:	18 95       	reti

000015da <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    15da:	1f 92       	push	r1
    15dc:	0f 92       	push	r0
    15de:	0f b6       	in	r0, 0x3f	; 63
    15e0:	0f 92       	push	r0
    15e2:	11 24       	eor	r1, r1
    15e4:	2f 93       	push	r18
    15e6:	3f 93       	push	r19
    15e8:	8f 93       	push	r24
    15ea:	9f 93       	push	r25
    15ec:	af 93       	push	r26
    15ee:	bf 93       	push	r27
    15f0:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <timer0_millis>
    15f4:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <timer0_millis+0x1>
    15f8:	a0 91 9e 02 	lds	r26, 0x029E	; 0x80029e <timer0_millis+0x2>
    15fc:	b0 91 9f 02 	lds	r27, 0x029F	; 0x80029f <timer0_millis+0x3>
    1600:	30 91 9b 02 	lds	r19, 0x029B	; 0x80029b <timer0_fract>
    1604:	23 e0       	ldi	r18, 0x03	; 3
    1606:	23 0f       	add	r18, r19
    1608:	2d 37       	cpi	r18, 0x7D	; 125
    160a:	20 f4       	brcc	.+8      	; 0x1614 <__vector_16+0x3a>
    160c:	01 96       	adiw	r24, 0x01	; 1
    160e:	a1 1d       	adc	r26, r1
    1610:	b1 1d       	adc	r27, r1
    1612:	05 c0       	rjmp	.+10     	; 0x161e <__vector_16+0x44>
    1614:	26 e8       	ldi	r18, 0x86	; 134
    1616:	23 0f       	add	r18, r19
    1618:	02 96       	adiw	r24, 0x02	; 2
    161a:	a1 1d       	adc	r26, r1
    161c:	b1 1d       	adc	r27, r1
    161e:	20 93 9b 02 	sts	0x029B, r18	; 0x80029b <timer0_fract>
    1622:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <timer0_millis>
    1626:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <timer0_millis+0x1>
    162a:	a0 93 9e 02 	sts	0x029E, r26	; 0x80029e <timer0_millis+0x2>
    162e:	b0 93 9f 02 	sts	0x029F, r27	; 0x80029f <timer0_millis+0x3>
    1632:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <timer0_overflow_count>
    1636:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <timer0_overflow_count+0x1>
    163a:	a0 91 a2 02 	lds	r26, 0x02A2	; 0x8002a2 <timer0_overflow_count+0x2>
    163e:	b0 91 a3 02 	lds	r27, 0x02A3	; 0x8002a3 <timer0_overflow_count+0x3>
    1642:	01 96       	adiw	r24, 0x01	; 1
    1644:	a1 1d       	adc	r26, r1
    1646:	b1 1d       	adc	r27, r1
    1648:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <timer0_overflow_count>
    164c:	90 93 a1 02 	sts	0x02A1, r25	; 0x8002a1 <timer0_overflow_count+0x1>
    1650:	a0 93 a2 02 	sts	0x02A2, r26	; 0x8002a2 <timer0_overflow_count+0x2>
    1654:	b0 93 a3 02 	sts	0x02A3, r27	; 0x8002a3 <timer0_overflow_count+0x3>
    1658:	bf 91       	pop	r27
    165a:	af 91       	pop	r26
    165c:	9f 91       	pop	r25
    165e:	8f 91       	pop	r24
    1660:	3f 91       	pop	r19
    1662:	2f 91       	pop	r18
    1664:	0f 90       	pop	r0
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	0f 90       	pop	r0
    166a:	1f 90       	pop	r1
    166c:	18 95       	reti

0000166e <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    166e:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    1670:	f8 94       	cli
	m = timer0_overflow_count;
    1672:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <timer0_overflow_count>
    1676:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <timer0_overflow_count+0x1>
    167a:	a0 91 a2 02 	lds	r26, 0x02A2	; 0x8002a2 <timer0_overflow_count+0x2>
    167e:	b0 91 a3 02 	lds	r27, 0x02A3	; 0x8002a3 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    1682:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1684:	a8 9b       	sbis	0x15, 0	; 21
    1686:	05 c0       	rjmp	.+10     	; 0x1692 <micros+0x24>
    1688:	2f 3f       	cpi	r18, 0xFF	; 255
    168a:	19 f0       	breq	.+6      	; 0x1692 <micros+0x24>
		m++;
    168c:	01 96       	adiw	r24, 0x01	; 1
    168e:	a1 1d       	adc	r26, r1
    1690:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1692:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    1694:	ba 2f       	mov	r27, r26
    1696:	a9 2f       	mov	r26, r25
    1698:	98 2f       	mov	r25, r24
    169a:	88 27       	eor	r24, r24
    169c:	82 0f       	add	r24, r18
    169e:	91 1d       	adc	r25, r1
    16a0:	a1 1d       	adc	r26, r1
    16a2:	b1 1d       	adc	r27, r1
    16a4:	bc 01       	movw	r22, r24
    16a6:	cd 01       	movw	r24, r26
    16a8:	42 e0       	ldi	r20, 0x02	; 2
    16aa:	66 0f       	add	r22, r22
    16ac:	77 1f       	adc	r23, r23
    16ae:	88 1f       	adc	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	4a 95       	dec	r20
    16b4:	d1 f7       	brne	.-12     	; 0x16aa <micros+0x3c>
}
    16b6:	08 95       	ret

000016b8 <delay>:

void delay(unsigned long ms)
{
    16b8:	8f 92       	push	r8
    16ba:	9f 92       	push	r9
    16bc:	af 92       	push	r10
    16be:	bf 92       	push	r11
    16c0:	cf 92       	push	r12
    16c2:	df 92       	push	r13
    16c4:	ef 92       	push	r14
    16c6:	ff 92       	push	r15
    16c8:	6b 01       	movw	r12, r22
    16ca:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    16cc:	0e 94 37 0b 	call	0x166e	; 0x166e <micros>
    16d0:	4b 01       	movw	r8, r22
    16d2:	5c 01       	movw	r10, r24

	while (ms > 0) {
    16d4:	c1 14       	cp	r12, r1
    16d6:	d1 04       	cpc	r13, r1
    16d8:	e1 04       	cpc	r14, r1
    16da:	f1 04       	cpc	r15, r1
    16dc:	01 f1       	breq	.+64     	; 0x171e <delay+0x66>
		yield();
    16de:	0e 94 c6 13 	call	0x278c	; 0x278c <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    16e2:	0e 94 37 0b 	call	0x166e	; 0x166e <micros>
    16e6:	dc 01       	movw	r26, r24
    16e8:	cb 01       	movw	r24, r22
    16ea:	88 19       	sub	r24, r8
    16ec:	99 09       	sbc	r25, r9
    16ee:	aa 09       	sbc	r26, r10
    16f0:	bb 09       	sbc	r27, r11
    16f2:	88 3e       	cpi	r24, 0xE8	; 232
    16f4:	93 40       	sbci	r25, 0x03	; 3
    16f6:	a1 05       	cpc	r26, r1
    16f8:	b1 05       	cpc	r27, r1
    16fa:	60 f3       	brcs	.-40     	; 0x16d4 <delay+0x1c>
			ms--;
    16fc:	21 e0       	ldi	r18, 0x01	; 1
    16fe:	c2 1a       	sub	r12, r18
    1700:	d1 08       	sbc	r13, r1
    1702:	e1 08       	sbc	r14, r1
    1704:	f1 08       	sbc	r15, r1
			start += 1000;
    1706:	88 ee       	ldi	r24, 0xE8	; 232
    1708:	88 0e       	add	r8, r24
    170a:	83 e0       	ldi	r24, 0x03	; 3
    170c:	98 1e       	adc	r9, r24
    170e:	a1 1c       	adc	r10, r1
    1710:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    1712:	c1 14       	cp	r12, r1
    1714:	d1 04       	cpc	r13, r1
    1716:	e1 04       	cpc	r14, r1
    1718:	f1 04       	cpc	r15, r1
    171a:	19 f7       	brne	.-58     	; 0x16e2 <delay+0x2a>
    171c:	db cf       	rjmp	.-74     	; 0x16d4 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    171e:	ff 90       	pop	r15
    1720:	ef 90       	pop	r14
    1722:	df 90       	pop	r13
    1724:	cf 90       	pop	r12
    1726:	bf 90       	pop	r11
    1728:	af 90       	pop	r10
    172a:	9f 90       	pop	r9
    172c:	8f 90       	pop	r8
    172e:	08 95       	ret

00001730 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    1730:	82 30       	cpi	r24, 0x02	; 2
    1732:	91 05       	cpc	r25, r1
    1734:	38 f0       	brcs	.+14     	; 0x1744 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    173e:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1740:	01 97       	sbiw	r24, 0x01	; 1
    1742:	f1 f7       	brne	.-4      	; 0x1740 <delayMicroseconds+0x10>
    1744:	08 95       	ret

00001746 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1746:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1748:	84 b5       	in	r24, 0x24	; 36
    174a:	82 60       	ori	r24, 0x02	; 2
    174c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    174e:	84 b5       	in	r24, 0x24	; 36
    1750:	81 60       	ori	r24, 0x01	; 1
    1752:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1754:	85 b5       	in	r24, 0x25	; 37
    1756:	82 60       	ori	r24, 0x02	; 2
    1758:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    175a:	85 b5       	in	r24, 0x25	; 37
    175c:	81 60       	ori	r24, 0x01	; 1
    175e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1760:	ee e6       	ldi	r30, 0x6E	; 110
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	81 60       	ori	r24, 0x01	; 1
    1768:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    176a:	e1 e8       	ldi	r30, 0x81	; 129
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1770:	80 81       	ld	r24, Z
    1772:	82 60       	ori	r24, 0x02	; 2
    1774:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1776:	80 81       	ld	r24, Z
    1778:	81 60       	ori	r24, 0x01	; 1
    177a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    177c:	e0 e8       	ldi	r30, 0x80	; 128
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	81 60       	ori	r24, 0x01	; 1
    1784:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1786:	e1 eb       	ldi	r30, 0xB1	; 177
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	84 60       	ori	r24, 0x04	; 4
    178e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1790:	e0 eb       	ldi	r30, 0xB0	; 176
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	81 60       	ori	r24, 0x01	; 1
    1798:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    179a:	ea e7       	ldi	r30, 0x7A	; 122
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	84 60       	ori	r24, 0x04	; 4
    17a2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    17a4:	80 81       	ld	r24, Z
    17a6:	82 60       	ori	r24, 0x02	; 2
    17a8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    17aa:	80 81       	ld	r24, Z
    17ac:	81 60       	ori	r24, 0x01	; 1
    17ae:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    17b0:	80 81       	ld	r24, Z
    17b2:	80 68       	ori	r24, 0x80	; 128
    17b4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    17b6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    17ba:	08 95       	ret

000017bc <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    17bc:	8e 30       	cpi	r24, 0x0E	; 14
    17be:	08 f0       	brcs	.+2      	; 0x17c2 <analogRead+0x6>
    17c0:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    17c2:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <analog_reference>
    17c6:	90 e4       	ldi	r25, 0x40	; 64
    17c8:	29 9f       	mul	r18, r25
    17ca:	90 01       	movw	r18, r0
    17cc:	11 24       	eor	r1, r1
    17ce:	87 70       	andi	r24, 0x07	; 7
    17d0:	82 2b       	or	r24, r18
    17d2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    17d6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    17da:	80 64       	ori	r24, 0x40	; 64
    17dc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    17e0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    17e4:	86 fd       	sbrc	r24, 6
    17e6:	fc cf       	rjmp	.-8      	; 0x17e0 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    17e8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    17ec:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    17f0:	90 e0       	ldi	r25, 0x00	; 0
}
    17f2:	92 2b       	or	r25, r18
    17f4:	08 95       	ret

000017f6 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    17f6:	83 30       	cpi	r24, 0x03	; 3
    17f8:	81 f0       	breq	.+32     	; 0x181a <turnOffPWM+0x24>
    17fa:	28 f4       	brcc	.+10     	; 0x1806 <turnOffPWM+0x10>
    17fc:	81 30       	cpi	r24, 0x01	; 1
    17fe:	99 f0       	breq	.+38     	; 0x1826 <turnOffPWM+0x30>
    1800:	82 30       	cpi	r24, 0x02	; 2
    1802:	a1 f0       	breq	.+40     	; 0x182c <turnOffPWM+0x36>
    1804:	08 95       	ret
    1806:	87 30       	cpi	r24, 0x07	; 7
    1808:	a9 f0       	breq	.+42     	; 0x1834 <turnOffPWM+0x3e>
    180a:	88 30       	cpi	r24, 0x08	; 8
    180c:	b9 f0       	breq	.+46     	; 0x183c <turnOffPWM+0x46>
    180e:	84 30       	cpi	r24, 0x04	; 4
    1810:	d1 f4       	brne	.+52     	; 0x1846 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1812:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1816:	8f 7d       	andi	r24, 0xDF	; 223
    1818:	03 c0       	rjmp	.+6      	; 0x1820 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    181a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    181e:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1820:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1824:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1826:	84 b5       	in	r24, 0x24	; 36
    1828:	8f 77       	andi	r24, 0x7F	; 127
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    182c:	84 b5       	in	r24, 0x24	; 36
    182e:	8f 7d       	andi	r24, 0xDF	; 223
    1830:	84 bd       	out	0x24, r24	; 36
    1832:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1834:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1838:	8f 77       	andi	r24, 0x7F	; 127
    183a:	03 c0       	rjmp	.+6      	; 0x1842 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    183c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1840:	8f 7d       	andi	r24, 0xDF	; 223
    1842:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1846:	08 95       	ret

00001848 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1848:	cf 93       	push	r28
    184a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	fc 01       	movw	r30, r24
    1850:	e2 55       	subi	r30, 0x52	; 82
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1856:	fc 01       	movw	r30, r24
    1858:	ee 53       	subi	r30, 0x3E	; 62
    185a:	ff 4f       	sbci	r31, 0xFF	; 255
    185c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    185e:	88 23       	and	r24, r24
    1860:	61 f1       	breq	.+88     	; 0x18ba <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	88 0f       	add	r24, r24
    1866:	99 1f       	adc	r25, r25
    1868:	fc 01       	movw	r30, r24
    186a:	e0 52       	subi	r30, 0x20	; 32
    186c:	ff 4f       	sbci	r31, 0xFF	; 255
    186e:	c5 91       	lpm	r28, Z+
    1870:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1872:	fc 01       	movw	r30, r24
    1874:	ea 52       	subi	r30, 0x2A	; 42
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    1878:	a5 91       	lpm	r26, Z+
    187a:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    187c:	61 11       	cpse	r22, r1
    187e:	09 c0       	rjmp	.+18     	; 0x1892 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1880:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1882:	f8 94       	cli
		*reg &= ~bit;
    1884:	88 81       	ld	r24, Y
    1886:	20 95       	com	r18
    1888:	82 23       	and	r24, r18
    188a:	88 83       	st	Y, r24
		*out &= ~bit;
    188c:	ec 91       	ld	r30, X
    188e:	2e 23       	and	r18, r30
    1890:	0b c0       	rjmp	.+22     	; 0x18a8 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1892:	62 30       	cpi	r22, 0x02	; 2
    1894:	61 f4       	brne	.+24     	; 0x18ae <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1896:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1898:	f8 94       	cli
		*reg &= ~bit;
    189a:	88 81       	ld	r24, Y
    189c:	32 2f       	mov	r19, r18
    189e:	30 95       	com	r19
    18a0:	83 23       	and	r24, r19
    18a2:	88 83       	st	Y, r24
		*out |= bit;
    18a4:	ec 91       	ld	r30, X
    18a6:	2e 2b       	or	r18, r30
    18a8:	2c 93       	st	X, r18
		SREG = oldSREG;
    18aa:	9f bf       	out	0x3f, r25	; 63
    18ac:	06 c0       	rjmp	.+12     	; 0x18ba <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    18ae:	8f b7       	in	r24, 0x3f	; 63
                cli();
    18b0:	f8 94       	cli
		*reg |= bit;
    18b2:	e8 81       	ld	r30, Y
    18b4:	2e 2b       	or	r18, r30
    18b6:	28 83       	st	Y, r18
		SREG = oldSREG;
    18b8:	8f bf       	out	0x3f, r24	; 63
	}
}
    18ba:	df 91       	pop	r29
    18bc:	cf 91       	pop	r28
    18be:	08 95       	ret

000018c0 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    18c0:	1f 93       	push	r17
    18c2:	cf 93       	push	r28
    18c4:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    18c6:	28 2f       	mov	r18, r24
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	f9 01       	movw	r30, r18
    18cc:	e6 56       	subi	r30, 0x66	; 102
    18ce:	ff 4f       	sbci	r31, 0xFF	; 255
    18d0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    18d2:	f9 01       	movw	r30, r18
    18d4:	e2 55       	subi	r30, 0x52	; 82
    18d6:	ff 4f       	sbci	r31, 0xFF	; 255
    18d8:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    18da:	f9 01       	movw	r30, r18
    18dc:	ee 53       	subi	r30, 0x3E	; 62
    18de:	ff 4f       	sbci	r31, 0xFF	; 255
    18e0:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    18e2:	cc 23       	and	r28, r28
    18e4:	c1 f0       	breq	.+48     	; 0x1916 <digitalWrite+0x56>
    18e6:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    18e8:	81 11       	cpse	r24, r1
    18ea:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <turnOffPWM>

	out = portOutputRegister(port);
    18ee:	ec 2f       	mov	r30, r28
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	ee 0f       	add	r30, r30
    18f4:	ff 1f       	adc	r31, r31
    18f6:	ea 52       	subi	r30, 0x2A	; 42
    18f8:	ff 4f       	sbci	r31, 0xFF	; 255
    18fa:	a5 91       	lpm	r26, Z+
    18fc:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    18fe:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1900:	f8 94       	cli

	if (val == LOW) {
    1902:	11 11       	cpse	r17, r1
    1904:	04 c0       	rjmp	.+8      	; 0x190e <digitalWrite+0x4e>
		*out &= ~bit;
    1906:	8c 91       	ld	r24, X
    1908:	d0 95       	com	r29
    190a:	d8 23       	and	r29, r24
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <digitalWrite+0x52>
	} else {
		*out |= bit;
    190e:	ec 91       	ld	r30, X
    1910:	de 2b       	or	r29, r30
    1912:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1914:	9f bf       	out	0x3f, r25	; 63
}
    1916:	df 91       	pop	r29
    1918:	cf 91       	pop	r28
    191a:	1f 91       	pop	r17
    191c:	08 95       	ret

0000191e <_ZN9DS3232RTC7bcd2decEh>:
 * is set to zero. (Alarm 2 has no seconds register.)                   *
 *----------------------------------------------------------------------*/
void DS3232RTC::setAlarm(ALARM_TYPES_t alarmType, byte minutes, byte hours, byte daydate)
{
    setAlarm(alarmType, 0, minutes, hours, daydate);
}
    191e:	98 2f       	mov	r25, r24
    1920:	92 95       	swap	r25
    1922:	9f 70       	andi	r25, 0x0F	; 15
    1924:	2a ef       	ldi	r18, 0xFA	; 250
    1926:	92 9f       	mul	r25, r18
    1928:	80 0d       	add	r24, r0
    192a:	11 24       	eor	r1, r1
    192c:	08 95       	ret

0000192e <_GLOBAL__sub_I__ZN9DS3232RTC7errCodeE>:
    192e:	8b eb       	ldi	r24, 0xBB	; 187
    1930:	92 e0       	ldi	r25, 0x02	; 2
    1932:	0c 94 2c 13 	jmp	0x2658	; 0x2658 <_ZN7TwoWire5beginEv>

00001936 <_ZN9DS3232RTC8writeRTCEhPhh>:
    1936:	ff 92       	push	r15
    1938:	0f 93       	push	r16
    193a:	1f 93       	push	r17
    193c:	cf 93       	push	r28
    193e:	df 93       	push	r29
    1940:	c6 2f       	mov	r28, r22
    1942:	f4 2e       	mov	r15, r20
    1944:	05 2f       	mov	r16, r21
    1946:	12 2f       	mov	r17, r18
    1948:	68 e6       	ldi	r22, 0x68	; 104
    194a:	70 e0       	ldi	r23, 0x00	; 0
    194c:	8b eb       	ldi	r24, 0xBB	; 187
    194e:	92 e0       	ldi	r25, 0x02	; 2
    1950:	0e 94 40 13 	call	0x2680	; 0x2680 <_ZN7TwoWire17beginTransmissionEi>
    1954:	6c 2f       	mov	r22, r28
    1956:	8b eb       	ldi	r24, 0xBB	; 187
    1958:	92 e0       	ldi	r25, 0x02	; 2
    195a:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7TwoWire5writeEh>
    195e:	cf 2d       	mov	r28, r15
    1960:	d0 2f       	mov	r29, r16
    1962:	ce 01       	movw	r24, r28
    1964:	81 0f       	add	r24, r17
    1966:	91 1d       	adc	r25, r1
    1968:	8c 01       	movw	r16, r24
    196a:	c0 17       	cp	r28, r16
    196c:	d1 07       	cpc	r29, r17
    196e:	31 f0       	breq	.+12     	; 0x197c <_ZN9DS3232RTC8writeRTCEhPhh+0x46>
    1970:	69 91       	ld	r22, Y+
    1972:	8b eb       	ldi	r24, 0xBB	; 187
    1974:	92 e0       	ldi	r25, 0x02	; 2
    1976:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7TwoWire5writeEh>
    197a:	f7 cf       	rjmp	.-18     	; 0x196a <_ZN9DS3232RTC8writeRTCEhPhh+0x34>
    197c:	8b eb       	ldi	r24, 0xBB	; 187
    197e:	92 e0       	ldi	r25, 0x02	; 2
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	1f 91       	pop	r17
    1986:	0f 91       	pop	r16
    1988:	ff 90       	pop	r15
    198a:	0c 94 bf 13 	jmp	0x277e	; 0x277e <_ZN7TwoWire15endTransmissionEv>

0000198e <_ZN9DS3232RTC8writeRTCEhh>:
    198e:	cf 93       	push	r28
    1990:	df 93       	push	r29
    1992:	1f 92       	push	r1
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
    1998:	49 83       	std	Y+1, r20	; 0x01
    199a:	21 e0       	ldi	r18, 0x01	; 1
    199c:	ae 01       	movw	r20, r28
    199e:	4f 5f       	subi	r20, 0xFF	; 255
    19a0:	5f 4f       	sbci	r21, 0xFF	; 255
    19a2:	0e 94 9b 0c 	call	0x1936	; 0x1936 <_ZN9DS3232RTC8writeRTCEhPhh>
    19a6:	0f 90       	pop	r0
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	08 95       	ret

000019ae <_ZN9DS3232RTC8setAlarmE13ALARM_TYPES_thhhh>:
    19ae:	cf 92       	push	r12
    19b0:	df 92       	push	r13
    19b2:	ef 92       	push	r14
    19b4:	0f 93       	push	r16
    19b6:	1f 93       	push	r17
    19b8:	cf 93       	push	r28
    19ba:	df 93       	push	r29
    19bc:	6c 01       	movw	r12, r24
    19be:	36 2f       	mov	r19, r22
    19c0:	5a e0       	ldi	r21, 0x0A	; 10
    19c2:	84 2f       	mov	r24, r20
    19c4:	65 2f       	mov	r22, r21
    19c6:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__udivmodqi4>
    19ca:	98 2f       	mov	r25, r24
    19cc:	99 0f       	add	r25, r25
    19ce:	89 0f       	add	r24, r25
    19d0:	88 0f       	add	r24, r24
    19d2:	48 0f       	add	r20, r24
    19d4:	82 2f       	mov	r24, r18
    19d6:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__udivmodqi4>
    19da:	c8 2f       	mov	r28, r24
    19dc:	cc 0f       	add	r28, r28
    19de:	8c 0f       	add	r24, r28
    19e0:	88 0f       	add	r24, r24
    19e2:	c2 2f       	mov	r28, r18
    19e4:	c8 0f       	add	r28, r24
    19e6:	80 2f       	mov	r24, r16
    19e8:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__udivmodqi4>
    19ec:	98 2f       	mov	r25, r24
    19ee:	99 0f       	add	r25, r25
    19f0:	89 0f       	add	r24, r25
    19f2:	88 0f       	add	r24, r24
    19f4:	08 0f       	add	r16, r24
    19f6:	8e 2d       	mov	r24, r14
    19f8:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__udivmodqi4>
    19fc:	d8 2f       	mov	r29, r24
    19fe:	dd 0f       	add	r29, r29
    1a00:	d8 0f       	add	r29, r24
    1a02:	dd 0f       	add	r29, r29
    1a04:	de 0d       	add	r29, r14
    1a06:	30 fd       	sbrc	r19, 0
    1a08:	40 68       	ori	r20, 0x80	; 128
    1a0a:	31 fd       	sbrc	r19, 1
    1a0c:	c0 68       	ori	r28, 0x80	; 128
    1a0e:	32 fd       	sbrc	r19, 2
    1a10:	00 68       	ori	r16, 0x80	; 128
    1a12:	34 fd       	sbrc	r19, 4
    1a14:	d0 64       	ori	r29, 0x40	; 64
    1a16:	33 fd       	sbrc	r19, 3
    1a18:	d0 68       	ori	r29, 0x80	; 128
    1a1a:	37 fd       	sbrc	r19, 7
    1a1c:	06 c0       	rjmp	.+12     	; 0x1a2a <_ZN9DS3232RTC8setAlarmE13ALARM_TYPES_thhhh+0x7c>
    1a1e:	67 e0       	ldi	r22, 0x07	; 7
    1a20:	c6 01       	movw	r24, r12
    1a22:	0e 94 c7 0c 	call	0x198e	; 0x198e <_ZN9DS3232RTC8writeRTCEhh>
    1a26:	18 e0       	ldi	r17, 0x08	; 8
    1a28:	01 c0       	rjmp	.+2      	; 0x1a2c <_ZN9DS3232RTC8setAlarmE13ALARM_TYPES_thhhh+0x7e>
    1a2a:	1b e0       	ldi	r17, 0x0B	; 11
    1a2c:	4c 2f       	mov	r20, r28
    1a2e:	61 2f       	mov	r22, r17
    1a30:	c6 01       	movw	r24, r12
    1a32:	0e 94 c7 0c 	call	0x198e	; 0x198e <_ZN9DS3232RTC8writeRTCEhh>
    1a36:	61 e0       	ldi	r22, 0x01	; 1
    1a38:	61 0f       	add	r22, r17
    1a3a:	40 2f       	mov	r20, r16
    1a3c:	c6 01       	movw	r24, r12
    1a3e:	0e 94 c7 0c 	call	0x198e	; 0x198e <_ZN9DS3232RTC8writeRTCEhh>
    1a42:	62 e0       	ldi	r22, 0x02	; 2
    1a44:	61 0f       	add	r22, r17
    1a46:	4d 2f       	mov	r20, r29
    1a48:	c6 01       	movw	r24, r12
    1a4a:	df 91       	pop	r29
    1a4c:	cf 91       	pop	r28
    1a4e:	1f 91       	pop	r17
    1a50:	0f 91       	pop	r16
    1a52:	ef 90       	pop	r14
    1a54:	df 90       	pop	r13
    1a56:	cf 90       	pop	r12
    1a58:	0c 94 c7 0c 	jmp	0x198e	; 0x198e <_ZN9DS3232RTC8writeRTCEhh>

00001a5c <_ZN9DS3232RTC4readER12tmElements_t>:
/*----------------------------------------------------------------------*
 * Reads the current time from the RTC and returns it in a tmElements_t *
 * structure. Returns the I2C status (zero if successful).              *
 *----------------------------------------------------------------------*/
byte DS3232RTC::read(tmElements_t &tm)
{
    1a5c:	cf 93       	push	r28
    1a5e:	df 93       	push	r29
    1a60:	ec 01       	movw	r28, r24
    i2cBeginTransmission(RTC_ADDR);
    1a62:	68 e6       	ldi	r22, 0x68	; 104
    1a64:	70 e0       	ldi	r23, 0x00	; 0
    1a66:	8b eb       	ldi	r24, 0xBB	; 187
    1a68:	92 e0       	ldi	r25, 0x02	; 2
    1a6a:	0e 94 40 13 	call	0x2680	; 0x2680 <_ZN7TwoWire17beginTransmissionEi>
    i2cWrite((uint8_t)RTC_SECONDS);
    1a6e:	60 e0       	ldi	r22, 0x00	; 0
    1a70:	8b eb       	ldi	r24, 0xBB	; 187
    1a72:	92 e0       	ldi	r25, 0x02	; 2
    1a74:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7TwoWire5writeEh>
    if ( byte e = i2cEndTransmission() ) { errCode = e; return e; }
    1a78:	8b eb       	ldi	r24, 0xBB	; 187
    1a7a:	92 e0       	ldi	r25, 0x02	; 2
    1a7c:	0e 94 bf 13 	call	0x277e	; 0x277e <_ZN7TwoWire15endTransmissionEv>
    1a80:	88 23       	and	r24, r24
    1a82:	19 f0       	breq	.+6      	; 0x1a8a <_ZN9DS3232RTC4readER12tmElements_t+0x2e>
    1a84:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <_ZN9DS3232RTC7errCodeE>
    1a88:	3c c0       	rjmp	.+120    	; 0x1b02 <_ZN9DS3232RTC4readER12tmElements_t+0xa6>
    //request 7 bytes (secs, min, hr, dow, date, mth, yr)
    i2cRequestFrom(RTC_ADDR, tmNbrFields);
    1a8a:	47 e0       	ldi	r20, 0x07	; 7
    1a8c:	50 e0       	ldi	r21, 0x00	; 0
    1a8e:	68 e6       	ldi	r22, 0x68	; 104
    1a90:	70 e0       	ldi	r23, 0x00	; 0
    1a92:	8b eb       	ldi	r24, 0xBB	; 187
    1a94:	92 e0       	ldi	r25, 0x02	; 2
    1a96:	0e 94 bc 13 	call	0x2778	; 0x2778 <_ZN7TwoWire11requestFromEii>
    tm.Second = bcd2dec(i2cRead() & ~_BV(DS1307_CH));   
    1a9a:	8b eb       	ldi	r24, 0xBB	; 187
    1a9c:	92 e0       	ldi	r25, 0x02	; 2
    1a9e:	0e 94 9c 12 	call	0x2538	; 0x2538 <_ZN7TwoWire4readEv>
    1aa2:	8f 77       	andi	r24, 0x7F	; 127
    1aa4:	0e 94 8f 0c 	call	0x191e	; 0x191e <_ZN9DS3232RTC7bcd2decEh>
    1aa8:	88 83       	st	Y, r24
    tm.Minute = bcd2dec(i2cRead());
    1aaa:	8b eb       	ldi	r24, 0xBB	; 187
    1aac:	92 e0       	ldi	r25, 0x02	; 2
    1aae:	0e 94 9c 12 	call	0x2538	; 0x2538 <_ZN7TwoWire4readEv>
    1ab2:	0e 94 8f 0c 	call	0x191e	; 0x191e <_ZN9DS3232RTC7bcd2decEh>
    1ab6:	89 83       	std	Y+1, r24	; 0x01
    tm.Hour = bcd2dec(i2cRead() & ~_BV(HR1224));    //assumes 24hr clock
    1ab8:	8b eb       	ldi	r24, 0xBB	; 187
    1aba:	92 e0       	ldi	r25, 0x02	; 2
    1abc:	0e 94 9c 12 	call	0x2538	; 0x2538 <_ZN7TwoWire4readEv>
    1ac0:	8f 7b       	andi	r24, 0xBF	; 191
    1ac2:	0e 94 8f 0c 	call	0x191e	; 0x191e <_ZN9DS3232RTC7bcd2decEh>
    1ac6:	8a 83       	std	Y+2, r24	; 0x02
    tm.Wday = i2cRead();
    1ac8:	8b eb       	ldi	r24, 0xBB	; 187
    1aca:	92 e0       	ldi	r25, 0x02	; 2
    1acc:	0e 94 9c 12 	call	0x2538	; 0x2538 <_ZN7TwoWire4readEv>
    1ad0:	8b 83       	std	Y+3, r24	; 0x03
    tm.Day = bcd2dec(i2cRead());
    1ad2:	8b eb       	ldi	r24, 0xBB	; 187
    1ad4:	92 e0       	ldi	r25, 0x02	; 2
    1ad6:	0e 94 9c 12 	call	0x2538	; 0x2538 <_ZN7TwoWire4readEv>
    1ada:	0e 94 8f 0c 	call	0x191e	; 0x191e <_ZN9DS3232RTC7bcd2decEh>
    1ade:	8c 83       	std	Y+4, r24	; 0x04
    tm.Month = bcd2dec(i2cRead() & ~_BV(CENTURY));  //don't use the Century bit
    1ae0:	8b eb       	ldi	r24, 0xBB	; 187
    1ae2:	92 e0       	ldi	r25, 0x02	; 2
    1ae4:	0e 94 9c 12 	call	0x2538	; 0x2538 <_ZN7TwoWire4readEv>
    1ae8:	8f 77       	andi	r24, 0x7F	; 127
    1aea:	0e 94 8f 0c 	call	0x191e	; 0x191e <_ZN9DS3232RTC7bcd2decEh>
    1aee:	8d 83       	std	Y+5, r24	; 0x05
    tm.Year = y2kYearToTm(bcd2dec(i2cRead()));
    1af0:	8b eb       	ldi	r24, 0xBB	; 187
    1af2:	92 e0       	ldi	r25, 0x02	; 2
    1af4:	0e 94 9c 12 	call	0x2538	; 0x2538 <_ZN7TwoWire4readEv>
    1af8:	0e 94 8f 0c 	call	0x191e	; 0x191e <_ZN9DS3232RTC7bcd2decEh>
    1afc:	82 5e       	subi	r24, 0xE2	; 226
    1afe:	8e 83       	std	Y+6, r24	; 0x06
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    return 0;
}
    1b02:	df 91       	pop	r29
    1b04:	cf 91       	pop	r28
    1b06:	08 95       	ret

00001b08 <_ZN9DS3232RTC3getEv>:
 * Reads the current time from the RTC and returns it as a time_t       *
 * value. Returns a zero value if an I2C error occurred (e.g. RTC       *
 * not present).                                                        *
 *----------------------------------------------------------------------*/
time_t DS3232RTC::get()
{
    1b08:	cf 93       	push	r28
    1b0a:	df 93       	push	r29
    1b0c:	cd b7       	in	r28, 0x3d	; 61
    1b0e:	de b7       	in	r29, 0x3e	; 62
    1b10:	27 97       	sbiw	r28, 0x07	; 7
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	f8 94       	cli
    1b16:	de bf       	out	0x3e, r29	; 62
    1b18:	0f be       	out	0x3f, r0	; 63
    1b1a:	cd bf       	out	0x3d, r28	; 61
    tmElements_t tm;
    
    if ( read(tm) ) return 0;
    1b1c:	ce 01       	movw	r24, r28
    1b1e:	01 96       	adiw	r24, 0x01	; 1
    1b20:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <_ZN9DS3232RTC4readER12tmElements_t>
    1b24:	81 11       	cpse	r24, r1
    1b26:	05 c0       	rjmp	.+10     	; 0x1b32 <_ZN9DS3232RTC3getEv+0x2a>
    return( makeTime(tm) );
    1b28:	ce 01       	movw	r24, r28
    1b2a:	01 96       	adiw	r24, 0x01	; 1
    1b2c:	0e 94 cc 11 	call	0x2398	; 0x2398 <_Z8makeTimeR12tmElements_t>
    1b30:	03 c0       	rjmp	.+6      	; 0x1b38 <_ZN9DS3232RTC3getEv+0x30>
 *----------------------------------------------------------------------*/
time_t DS3232RTC::get()
{
    tmElements_t tm;
    
    if ( read(tm) ) return 0;
    1b32:	60 e0       	ldi	r22, 0x00	; 0
    1b34:	70 e0       	ldi	r23, 0x00	; 0
    1b36:	cb 01       	movw	r24, r22
    return( makeTime(tm) );
}
    1b38:	27 96       	adiw	r28, 0x07	; 7
    1b3a:	0f b6       	in	r0, 0x3f	; 63
    1b3c:	f8 94       	cli
    1b3e:	de bf       	out	0x3e, r29	; 62
    1b40:	0f be       	out	0x3f, r0	; 63
    1b42:	cd bf       	out	0x3d, r28	; 61
    1b44:	df 91       	pop	r29
    1b46:	cf 91       	pop	r28
    1b48:	08 95       	ret

00001b4a <_ZN9DS3232RTC7readRTCEhPhh>:
 * Number of bytes (nBytes) must be between 1 and 32 (Wire library      *
 * limitation).                                                         *
 * Returns the I2C status (zero if successful).                         *
 *----------------------------------------------------------------------*/
byte DS3232RTC::readRTC(byte addr, byte *values, byte nBytes)
{
    1b4a:	ff 92       	push	r15
    1b4c:	0f 93       	push	r16
    1b4e:	1f 93       	push	r17
    1b50:	cf 93       	push	r28
    1b52:	df 93       	push	r29
    1b54:	c6 2f       	mov	r28, r22
    1b56:	f4 2e       	mov	r15, r20
    1b58:	05 2f       	mov	r16, r21
    1b5a:	12 2f       	mov	r17, r18
    i2cBeginTransmission(RTC_ADDR);
    1b5c:	68 e6       	ldi	r22, 0x68	; 104
    1b5e:	70 e0       	ldi	r23, 0x00	; 0
    1b60:	8b eb       	ldi	r24, 0xBB	; 187
    1b62:	92 e0       	ldi	r25, 0x02	; 2
    1b64:	0e 94 40 13 	call	0x2680	; 0x2680 <_ZN7TwoWire17beginTransmissionEi>
    i2cWrite(addr);
    1b68:	6c 2f       	mov	r22, r28
    1b6a:	8b eb       	ldi	r24, 0xBB	; 187
    1b6c:	92 e0       	ldi	r25, 0x02	; 2
    1b6e:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7TwoWire5writeEh>
    if ( byte e = i2cEndTransmission() ) return e;
    1b72:	8b eb       	ldi	r24, 0xBB	; 187
    1b74:	92 e0       	ldi	r25, 0x02	; 2
    1b76:	0e 94 bf 13 	call	0x277e	; 0x277e <_ZN7TwoWire15endTransmissionEv>
    1b7a:	81 11       	cpse	r24, r1
    1b7c:	16 c0       	rjmp	.+44     	; 0x1baa <_ZN9DS3232RTC7readRTCEhPhh+0x60>
    i2cRequestFrom( (uint8_t)RTC_ADDR, nBytes );
    1b7e:	41 2f       	mov	r20, r17
    1b80:	68 e6       	ldi	r22, 0x68	; 104
    1b82:	8b eb       	ldi	r24, 0xBB	; 187
    1b84:	92 e0       	ldi	r25, 0x02	; 2
    1b86:	0e 94 b9 13 	call	0x2772	; 0x2772 <_ZN7TwoWire11requestFromEhh>
    1b8a:	cf 2d       	mov	r28, r15
    1b8c:	d0 2f       	mov	r29, r16
    1b8e:	ce 01       	movw	r24, r28
    1b90:	81 0f       	add	r24, r17
    1b92:	91 1d       	adc	r25, r1
    1b94:	8c 01       	movw	r16, r24
    for (byte i=0; i<nBytes; i++) values[i] = i2cRead();
    1b96:	c0 17       	cp	r28, r16
    1b98:	d1 07       	cpc	r29, r17
    1b9a:	31 f0       	breq	.+12     	; 0x1ba8 <_ZN9DS3232RTC7readRTCEhPhh+0x5e>
    1b9c:	8b eb       	ldi	r24, 0xBB	; 187
    1b9e:	92 e0       	ldi	r25, 0x02	; 2
    1ba0:	0e 94 9c 12 	call	0x2538	; 0x2538 <_ZN7TwoWire4readEv>
    1ba4:	89 93       	st	Y+, r24
    1ba6:	f7 cf       	rjmp	.-18     	; 0x1b96 <_ZN9DS3232RTC7readRTCEhPhh+0x4c>
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    return 0;
}
    1baa:	df 91       	pop	r29
    1bac:	cf 91       	pop	r28
    1bae:	1f 91       	pop	r17
    1bb0:	0f 91       	pop	r16
    1bb2:	ff 90       	pop	r15
    1bb4:	08 95       	ret

00001bb6 <_ZN9DS3232RTC7readRTCEh>:
/*----------------------------------------------------------------------*
 * Read a single byte from RTC RAM.                                     *
 * Valid address range is 0x00 - 0xFF, no checking.                     *
 *----------------------------------------------------------------------*/
byte DS3232RTC::readRTC(byte addr)
{
    1bb6:	cf 93       	push	r28
    1bb8:	df 93       	push	r29
    1bba:	1f 92       	push	r1
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
    byte b;
    
    readRTC(addr, &b, 1);
    1bc0:	21 e0       	ldi	r18, 0x01	; 1
    1bc2:	ae 01       	movw	r20, r28
    1bc4:	4f 5f       	subi	r20, 0xFF	; 255
    1bc6:	5f 4f       	sbci	r21, 0xFF	; 255
    1bc8:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <_ZN9DS3232RTC7readRTCEhPhh>
    return b;
}
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	0f 90       	pop	r0
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	08 95       	ret

00001bd6 <_ZN9DS3232RTC5writeER12tmElements_t>:
 * Sets the RTC's time from a tmElements_t structure and clears the     *
 * oscillator stop flag (OSF) in the Control/Status register.           *
 * Returns the I2C status (zero if successful).                         *
 *----------------------------------------------------------------------*/
byte DS3232RTC::write(tmElements_t &tm)
{
    1bd6:	ff 92       	push	r15
    1bd8:	0f 93       	push	r16
    1bda:	1f 93       	push	r17
    1bdc:	cf 93       	push	r28
    1bde:	df 93       	push	r29
    1be0:	8c 01       	movw	r16, r24
    1be2:	eb 01       	movw	r28, r22
    i2cBeginTransmission(RTC_ADDR);
    1be4:	68 e6       	ldi	r22, 0x68	; 104
    1be6:	70 e0       	ldi	r23, 0x00	; 0
    1be8:	8b eb       	ldi	r24, 0xBB	; 187
    1bea:	92 e0       	ldi	r25, 0x02	; 2
    1bec:	0e 94 40 13 	call	0x2680	; 0x2680 <_ZN7TwoWire17beginTransmissionEi>
    i2cWrite((uint8_t)RTC_SECONDS);
    1bf0:	60 e0       	ldi	r22, 0x00	; 0
    1bf2:	8b eb       	ldi	r24, 0xBB	; 187
    1bf4:	92 e0       	ldi	r25, 0x02	; 2
    1bf6:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7TwoWire5writeEh>
    i2cWrite(dec2bcd(tm.Second));
    1bfa:	28 81       	ld	r18, Y
    1bfc:	8a e0       	ldi	r24, 0x0A	; 10
    1bfe:	f8 2e       	mov	r15, r24
    1c00:	82 2f       	mov	r24, r18
    1c02:	6f 2d       	mov	r22, r15
    1c04:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__udivmodqi4>
    1c08:	68 2f       	mov	r22, r24
    1c0a:	66 0f       	add	r22, r22
    1c0c:	86 0f       	add	r24, r22
    1c0e:	88 0f       	add	r24, r24
    1c10:	68 2f       	mov	r22, r24
    1c12:	62 0f       	add	r22, r18
    1c14:	8b eb       	ldi	r24, 0xBB	; 187
    1c16:	92 e0       	ldi	r25, 0x02	; 2
    1c18:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7TwoWire5writeEh>
    i2cWrite(dec2bcd(tm.Minute));
    1c1c:	29 81       	ldd	r18, Y+1	; 0x01
    1c1e:	82 2f       	mov	r24, r18
    1c20:	6f 2d       	mov	r22, r15
    1c22:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__udivmodqi4>
    1c26:	68 2f       	mov	r22, r24
    1c28:	66 0f       	add	r22, r22
    1c2a:	86 0f       	add	r24, r22
    1c2c:	88 0f       	add	r24, r24
    1c2e:	68 2f       	mov	r22, r24
    1c30:	62 0f       	add	r22, r18
    1c32:	8b eb       	ldi	r24, 0xBB	; 187
    1c34:	92 e0       	ldi	r25, 0x02	; 2
    1c36:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7TwoWire5writeEh>
    i2cWrite(dec2bcd(tm.Hour));         //sets 24 hour format (Bit 6 == 0)
    1c3a:	2a 81       	ldd	r18, Y+2	; 0x02
    1c3c:	82 2f       	mov	r24, r18
    1c3e:	6f 2d       	mov	r22, r15
    1c40:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__udivmodqi4>
    1c44:	68 2f       	mov	r22, r24
    1c46:	66 0f       	add	r22, r22
    1c48:	86 0f       	add	r24, r22
    1c4a:	88 0f       	add	r24, r24
    1c4c:	68 2f       	mov	r22, r24
    1c4e:	62 0f       	add	r22, r18
    1c50:	8b eb       	ldi	r24, 0xBB	; 187
    1c52:	92 e0       	ldi	r25, 0x02	; 2
    1c54:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7TwoWire5writeEh>
    i2cWrite(tm.Wday);
    1c58:	6b 81       	ldd	r22, Y+3	; 0x03
    1c5a:	8b eb       	ldi	r24, 0xBB	; 187
    1c5c:	92 e0       	ldi	r25, 0x02	; 2
    1c5e:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7TwoWire5writeEh>
    i2cWrite(dec2bcd(tm.Day));
    1c62:	2c 81       	ldd	r18, Y+4	; 0x04
    1c64:	82 2f       	mov	r24, r18
    1c66:	6f 2d       	mov	r22, r15
    1c68:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__udivmodqi4>
    1c6c:	68 2f       	mov	r22, r24
    1c6e:	66 0f       	add	r22, r22
    1c70:	86 0f       	add	r24, r22
    1c72:	88 0f       	add	r24, r24
    1c74:	68 2f       	mov	r22, r24
    1c76:	62 0f       	add	r22, r18
    1c78:	8b eb       	ldi	r24, 0xBB	; 187
    1c7a:	92 e0       	ldi	r25, 0x02	; 2
    1c7c:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7TwoWire5writeEh>
    i2cWrite(dec2bcd(tm.Month));
    1c80:	2d 81       	ldd	r18, Y+5	; 0x05
    1c82:	82 2f       	mov	r24, r18
    1c84:	6f 2d       	mov	r22, r15
    1c86:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__udivmodqi4>
    1c8a:	68 2f       	mov	r22, r24
    1c8c:	66 0f       	add	r22, r22
    1c8e:	86 0f       	add	r24, r22
    1c90:	88 0f       	add	r24, r24
    1c92:	68 2f       	mov	r22, r24
    1c94:	62 0f       	add	r22, r18
    1c96:	8b eb       	ldi	r24, 0xBB	; 187
    1c98:	92 e0       	ldi	r25, 0x02	; 2
    1c9a:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7TwoWire5writeEh>
    i2cWrite(dec2bcd(tmYearToY2k(tm.Year))); 
    1c9e:	2e 81       	ldd	r18, Y+6	; 0x06
    1ca0:	2e 51       	subi	r18, 0x1E	; 30
    1ca2:	82 2f       	mov	r24, r18
    1ca4:	6f 2d       	mov	r22, r15
    1ca6:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__udivmodqi4>
    1caa:	68 2f       	mov	r22, r24
    1cac:	66 0f       	add	r22, r22
    1cae:	68 0f       	add	r22, r24
    1cb0:	66 0f       	add	r22, r22
    1cb2:	62 0f       	add	r22, r18
    1cb4:	8b eb       	ldi	r24, 0xBB	; 187
    1cb6:	92 e0       	ldi	r25, 0x02	; 2
    1cb8:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7TwoWire5writeEh>
    byte ret = i2cEndTransmission();
    1cbc:	8b eb       	ldi	r24, 0xBB	; 187
    1cbe:	92 e0       	ldi	r25, 0x02	; 2
    1cc0:	0e 94 bf 13 	call	0x277e	; 0x277e <_ZN7TwoWire15endTransmissionEv>
    1cc4:	c8 2f       	mov	r28, r24
    uint8_t s = readRTC(RTC_STATUS);        //read the status register
    1cc6:	6f e0       	ldi	r22, 0x0F	; 15
    1cc8:	c8 01       	movw	r24, r16
    1cca:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <_ZN9DS3232RTC7readRTCEh>
    writeRTC( RTC_STATUS, s & ~_BV(OSF) );  //clear the Oscillator Stop Flag
    1cce:	48 2f       	mov	r20, r24
    1cd0:	4f 77       	andi	r20, 0x7F	; 127
    1cd2:	6f e0       	ldi	r22, 0x0F	; 15
    1cd4:	c8 01       	movw	r24, r16
    1cd6:	0e 94 c7 0c 	call	0x198e	; 0x198e <_ZN9DS3232RTC8writeRTCEhh>
    return ret;
}
    1cda:	8c 2f       	mov	r24, r28
    1cdc:	df 91       	pop	r29
    1cde:	cf 91       	pop	r28
    1ce0:	1f 91       	pop	r17
    1ce2:	0f 91       	pop	r16
    1ce4:	ff 90       	pop	r15
    1ce6:	08 95       	ret

00001ce8 <_ZN9DS3232RTC3setEm>:
 * Sets the RTC to the given time_t value and clears the                *
 * oscillator stop flag (OSF) in the Control/Status register.           *
 * Returns the I2C status (zero if successful).                         *
 *----------------------------------------------------------------------*/
byte DS3232RTC::set(time_t t)
{
    1ce8:	0f 93       	push	r16
    1cea:	1f 93       	push	r17
    1cec:	cf 93       	push	r28
    1cee:	df 93       	push	r29
    1cf0:	cd b7       	in	r28, 0x3d	; 61
    1cf2:	de b7       	in	r29, 0x3e	; 62
    1cf4:	27 97       	sbiw	r28, 0x07	; 7
    1cf6:	0f b6       	in	r0, 0x3f	; 63
    1cf8:	f8 94       	cli
    1cfa:	de bf       	out	0x3e, r29	; 62
    1cfc:	0f be       	out	0x3f, r0	; 63
    1cfe:	cd bf       	out	0x3d, r28	; 61
    1d00:	8c 01       	movw	r16, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	ba 01       	movw	r22, r20
    tmElements_t tm;

    breakTime(t, tm);
    1d06:	ae 01       	movw	r20, r28
    1d08:	4f 5f       	subi	r20, 0xFF	; 255
    1d0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d0c:	0e 94 9d 10 	call	0x213a	; 0x213a <_Z9breakTimemR12tmElements_t>
    return ( write(tm) );
    1d10:	be 01       	movw	r22, r28
    1d12:	6f 5f       	subi	r22, 0xFF	; 255
    1d14:	7f 4f       	sbci	r23, 0xFF	; 255
    1d16:	c8 01       	movw	r24, r16
    1d18:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <_ZN9DS3232RTC5writeER12tmElements_t>
}
    1d1c:	27 96       	adiw	r28, 0x07	; 7
    1d1e:	0f b6       	in	r0, 0x3f	; 63
    1d20:	f8 94       	cli
    1d22:	de bf       	out	0x3e, r29	; 62
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	cd bf       	out	0x3d, r28	; 61
    1d28:	df 91       	pop	r29
    1d2a:	cf 91       	pop	r28
    1d2c:	1f 91       	pop	r17
    1d2e:	0f 91       	pop	r16
    1d30:	08 95       	ret

00001d32 <_ZN9DS3232RTC14alarmInterruptEhb>:
/*----------------------------------------------------------------------*
 * Enable or disable an alarm "interrupt" which asserts the INT pin     *
 * on the RTC.                                                          *
 *----------------------------------------------------------------------*/
void DS3232RTC::alarmInterrupt(byte alarmNumber, bool interruptEnabled)
{
    1d32:	0f 93       	push	r16
    1d34:	1f 93       	push	r17
    1d36:	cf 93       	push	r28
    1d38:	df 93       	push	r29
    1d3a:	8c 01       	movw	r16, r24
    1d3c:	c6 2f       	mov	r28, r22
    1d3e:	d4 2f       	mov	r29, r20
    uint8_t controlReg, mask;
    
    controlReg = readRTC(RTC_CONTROL);
    1d40:	6e e0       	ldi	r22, 0x0E	; 14
    1d42:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <_ZN9DS3232RTC7readRTCEh>
    mask = _BV(A1IE) << (alarmNumber - 1);
    1d46:	c1 50       	subi	r28, 0x01	; 1
    1d48:	21 e0       	ldi	r18, 0x01	; 1
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	01 c0       	rjmp	.+2      	; 0x1d50 <_ZN9DS3232RTC14alarmInterruptEhb+0x1e>
    1d4e:	22 0f       	add	r18, r18
    1d50:	ca 95       	dec	r28
    1d52:	ea f7       	brpl	.-6      	; 0x1d4e <_ZN9DS3232RTC14alarmInterruptEhb+0x1c>
    if (interruptEnabled)
    1d54:	dd 23       	and	r29, r29
    1d56:	19 f0       	breq	.+6      	; 0x1d5e <_ZN9DS3232RTC14alarmInterruptEhb+0x2c>
        controlReg |= mask;
    1d58:	48 2f       	mov	r20, r24
    1d5a:	42 2b       	or	r20, r18
    1d5c:	03 c0       	rjmp	.+6      	; 0x1d64 <_ZN9DS3232RTC14alarmInterruptEhb+0x32>
    else
        controlReg &= ~mask;
    1d5e:	20 95       	com	r18
    1d60:	42 2f       	mov	r20, r18
    1d62:	48 23       	and	r20, r24
    writeRTC(RTC_CONTROL, controlReg); 
    1d64:	6e e0       	ldi	r22, 0x0E	; 14
    1d66:	c8 01       	movw	r24, r16
}
    1d68:	df 91       	pop	r29
    1d6a:	cf 91       	pop	r28
    1d6c:	1f 91       	pop	r17
    1d6e:	0f 91       	pop	r16
    mask = _BV(A1IE) << (alarmNumber - 1);
    if (interruptEnabled)
        controlReg |= mask;
    else
        controlReg &= ~mask;
    writeRTC(RTC_CONTROL, controlReg); 
    1d70:	0c 94 c7 0c 	jmp	0x198e	; 0x198e <_ZN9DS3232RTC8writeRTCEhh>

00001d74 <_ZN9DS3232RTC5alarmEh>:
/*----------------------------------------------------------------------*
 * Returns true or false depending on whether the given alarm has been  *
 * triggered, and resets the alarm flag bit.                            *
 *----------------------------------------------------------------------*/
bool DS3232RTC::alarm(byte alarmNumber)
{
    1d74:	0f 93       	push	r16
    1d76:	1f 93       	push	r17
    1d78:	cf 93       	push	r28
    1d7a:	8c 01       	movw	r16, r24
    1d7c:	c6 2f       	mov	r28, r22
    uint8_t statusReg, mask;
    
    statusReg = readRTC(RTC_STATUS);
    1d7e:	6f e0       	ldi	r22, 0x0F	; 15
    1d80:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <_ZN9DS3232RTC7readRTCEh>
    mask = _BV(A1F) << (alarmNumber - 1);
    1d84:	c1 50       	subi	r28, 0x01	; 1
    1d86:	21 e0       	ldi	r18, 0x01	; 1
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	01 c0       	rjmp	.+2      	; 0x1d8e <_ZN9DS3232RTC5alarmEh+0x1a>
    1d8c:	22 0f       	add	r18, r18
    1d8e:	ca 95       	dec	r28
    1d90:	ea f7       	brpl	.-6      	; 0x1d8c <_ZN9DS3232RTC5alarmEh+0x18>
    if (statusReg & mask) {
    1d92:	98 2f       	mov	r25, r24
    1d94:	92 23       	and	r25, r18
    1d96:	49 f0       	breq	.+18     	; 0x1daa <_ZN9DS3232RTC5alarmEh+0x36>
        statusReg &= ~mask;
    1d98:	20 95       	com	r18
    1d9a:	42 2f       	mov	r20, r18
    1d9c:	48 23       	and	r20, r24
        writeRTC(RTC_STATUS, statusReg);
    1d9e:	6f e0       	ldi	r22, 0x0F	; 15
    1da0:	c8 01       	movw	r24, r16
    1da2:	0e 94 c7 0c 	call	0x198e	; 0x198e <_ZN9DS3232RTC8writeRTCEhh>
        return true;
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	01 c0       	rjmp	.+2      	; 0x1dac <_ZN9DS3232RTC5alarmEh+0x38>
    }
    else {
        return false;
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    1dac:	cf 91       	pop	r28
    1dae:	1f 91       	pop	r17
    1db0:	0f 91       	pop	r16
    1db2:	08 95       	ret

00001db4 <_ZN9DS3232RTC10squareWaveE14SQWAVE_FREQS_t>:
/*----------------------------------------------------------------------*
 * Enable or disable the square wave output.                            *
 * Use a value from the SQWAVE_FREQS_t enumeration for the parameter.   *
 *----------------------------------------------------------------------*/
void DS3232RTC::squareWave(SQWAVE_FREQS_t freq)
{
    1db4:	0f 93       	push	r16
    1db6:	1f 93       	push	r17
    1db8:	cf 93       	push	r28
    1dba:	8c 01       	movw	r16, r24
    1dbc:	c6 2f       	mov	r28, r22
    uint8_t controlReg;

    controlReg = readRTC(RTC_CONTROL);
    1dbe:	6e e0       	ldi	r22, 0x0E	; 14
    1dc0:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <_ZN9DS3232RTC7readRTCEh>
    if (freq >= SQWAVE_NONE) {
        controlReg |= _BV(INTCN);
    1dc4:	48 2f       	mov	r20, r24
void DS3232RTC::squareWave(SQWAVE_FREQS_t freq)
{
    uint8_t controlReg;

    controlReg = readRTC(RTC_CONTROL);
    if (freq >= SQWAVE_NONE) {
    1dc6:	c4 30       	cpi	r28, 0x04	; 4
    1dc8:	10 f0       	brcs	.+4      	; 0x1dce <_ZN9DS3232RTC10squareWaveE14SQWAVE_FREQS_t+0x1a>
        controlReg |= _BV(INTCN);
    1dca:	44 60       	ori	r20, 0x04	; 4
    1dcc:	06 c0       	rjmp	.+12     	; 0x1dda <_ZN9DS3232RTC10squareWaveE14SQWAVE_FREQS_t+0x26>
    }
    else {
        controlReg = (controlReg & 0xE3) | (freq << RS1);
    1dce:	43 7e       	andi	r20, 0xE3	; 227
    1dd0:	88 e0       	ldi	r24, 0x08	; 8
    1dd2:	c8 9f       	mul	r28, r24
    1dd4:	b0 01       	movw	r22, r0
    1dd6:	11 24       	eor	r1, r1
    1dd8:	46 2b       	or	r20, r22
    }
    writeRTC(RTC_CONTROL, controlReg);
    1dda:	6e e0       	ldi	r22, 0x0E	; 14
    1ddc:	c8 01       	movw	r24, r16
}
    1dde:	cf 91       	pop	r28
    1de0:	1f 91       	pop	r17
    1de2:	0f 91       	pop	r16
        controlReg |= _BV(INTCN);
    }
    else {
        controlReg = (controlReg & 0xE3) | (freq << RS1);
    }
    writeRTC(RTC_CONTROL, controlReg);
    1de4:	0c 94 c7 0c 	jmp	0x198e	; 0x198e <_ZN9DS3232RTC8writeRTCEhh>

00001de8 <_ZN13LiquidCrystal11pulseEnableEv>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
    1de8:	cf 93       	push	r28
    1dea:	df 93       	push	r29
    1dec:	ec 01       	movw	r28, r24
    1dee:	60 e0       	ldi	r22, 0x00	; 0
    1df0:	8e 81       	ldd	r24, Y+6	; 0x06
    1df2:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <digitalWrite>
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	0e 94 98 0b 	call	0x1730	; 0x1730 <delayMicroseconds>
    1dfe:	61 e0       	ldi	r22, 0x01	; 1
    1e00:	8e 81       	ldd	r24, Y+6	; 0x06
    1e02:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <digitalWrite>
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	0e 94 98 0b 	call	0x1730	; 0x1730 <delayMicroseconds>
    1e0e:	60 e0       	ldi	r22, 0x00	; 0
    1e10:	8e 81       	ldd	r24, Y+6	; 0x06
    1e12:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <digitalWrite>
    1e16:	84 e6       	ldi	r24, 0x64	; 100
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	df 91       	pop	r29
    1e1c:	cf 91       	pop	r28
    1e1e:	0c 94 98 0b 	jmp	0x1730	; 0x1730 <delayMicroseconds>

00001e22 <_ZN13LiquidCrystal10write4bitsEh>:
    1e22:	cf 92       	push	r12
    1e24:	df 92       	push	r13
    1e26:	ef 92       	push	r14
    1e28:	ff 92       	push	r15
    1e2a:	0f 93       	push	r16
    1e2c:	1f 93       	push	r17
    1e2e:	cf 93       	push	r28
    1e30:	df 93       	push	r29
    1e32:	6c 01       	movw	r12, r24
    1e34:	7c 01       	movw	r14, r24
    1e36:	87 e0       	ldi	r24, 0x07	; 7
    1e38:	e8 0e       	add	r14, r24
    1e3a:	f1 1c       	adc	r15, r1
    1e3c:	c0 e0       	ldi	r28, 0x00	; 0
    1e3e:	d0 e0       	ldi	r29, 0x00	; 0
    1e40:	06 2f       	mov	r16, r22
    1e42:	10 e0       	ldi	r17, 0x00	; 0
    1e44:	b8 01       	movw	r22, r16
    1e46:	0c 2e       	mov	r0, r28
    1e48:	02 c0       	rjmp	.+4      	; 0x1e4e <_ZN13LiquidCrystal10write4bitsEh+0x2c>
    1e4a:	75 95       	asr	r23
    1e4c:	67 95       	ror	r22
    1e4e:	0a 94       	dec	r0
    1e50:	e2 f7       	brpl	.-8      	; 0x1e4a <_ZN13LiquidCrystal10write4bitsEh+0x28>
    1e52:	61 70       	andi	r22, 0x01	; 1
    1e54:	f7 01       	movw	r30, r14
    1e56:	81 91       	ld	r24, Z+
    1e58:	7f 01       	movw	r14, r30
    1e5a:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <digitalWrite>
    1e5e:	21 96       	adiw	r28, 0x01	; 1
    1e60:	c4 30       	cpi	r28, 0x04	; 4
    1e62:	d1 05       	cpc	r29, r1
    1e64:	79 f7       	brne	.-34     	; 0x1e44 <_ZN13LiquidCrystal10write4bitsEh+0x22>
    1e66:	c6 01       	movw	r24, r12
    1e68:	df 91       	pop	r29
    1e6a:	cf 91       	pop	r28
    1e6c:	1f 91       	pop	r17
    1e6e:	0f 91       	pop	r16
    1e70:	ff 90       	pop	r15
    1e72:	ef 90       	pop	r14
    1e74:	df 90       	pop	r13
    1e76:	cf 90       	pop	r12
    1e78:	0c 94 f4 0e 	jmp	0x1de8	; 0x1de8 <_ZN13LiquidCrystal11pulseEnableEv>

00001e7c <_ZN13LiquidCrystal10write8bitsEh>:
    1e7c:	cf 92       	push	r12
    1e7e:	df 92       	push	r13
    1e80:	ef 92       	push	r14
    1e82:	ff 92       	push	r15
    1e84:	0f 93       	push	r16
    1e86:	1f 93       	push	r17
    1e88:	cf 93       	push	r28
    1e8a:	df 93       	push	r29
    1e8c:	6c 01       	movw	r12, r24
    1e8e:	7c 01       	movw	r14, r24
    1e90:	87 e0       	ldi	r24, 0x07	; 7
    1e92:	e8 0e       	add	r14, r24
    1e94:	f1 1c       	adc	r15, r1
    1e96:	c0 e0       	ldi	r28, 0x00	; 0
    1e98:	d0 e0       	ldi	r29, 0x00	; 0
    1e9a:	06 2f       	mov	r16, r22
    1e9c:	10 e0       	ldi	r17, 0x00	; 0
    1e9e:	b8 01       	movw	r22, r16
    1ea0:	0c 2e       	mov	r0, r28
    1ea2:	02 c0       	rjmp	.+4      	; 0x1ea8 <_ZN13LiquidCrystal10write8bitsEh+0x2c>
    1ea4:	75 95       	asr	r23
    1ea6:	67 95       	ror	r22
    1ea8:	0a 94       	dec	r0
    1eaa:	e2 f7       	brpl	.-8      	; 0x1ea4 <_ZN13LiquidCrystal10write8bitsEh+0x28>
    1eac:	61 70       	andi	r22, 0x01	; 1
    1eae:	f7 01       	movw	r30, r14
    1eb0:	81 91       	ld	r24, Z+
    1eb2:	7f 01       	movw	r14, r30
    1eb4:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <digitalWrite>
    1eb8:	21 96       	adiw	r28, 0x01	; 1
    1eba:	c8 30       	cpi	r28, 0x08	; 8
    1ebc:	d1 05       	cpc	r29, r1
    1ebe:	79 f7       	brne	.-34     	; 0x1e9e <_ZN13LiquidCrystal10write8bitsEh+0x22>
    1ec0:	c6 01       	movw	r24, r12
    1ec2:	df 91       	pop	r29
    1ec4:	cf 91       	pop	r28
    1ec6:	1f 91       	pop	r17
    1ec8:	0f 91       	pop	r16
    1eca:	ff 90       	pop	r15
    1ecc:	ef 90       	pop	r14
    1ece:	df 90       	pop	r13
    1ed0:	cf 90       	pop	r12
    1ed2:	0c 94 f4 0e 	jmp	0x1de8	; 0x1de8 <_ZN13LiquidCrystal11pulseEnableEv>

00001ed6 <_ZN13LiquidCrystal4sendEhh>:
    1ed6:	1f 93       	push	r17
    1ed8:	cf 93       	push	r28
    1eda:	df 93       	push	r29
    1edc:	ec 01       	movw	r28, r24
    1ede:	16 2f       	mov	r17, r22
    1ee0:	64 2f       	mov	r22, r20
    1ee2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee4:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <digitalWrite>
    1ee8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eea:	8f 3f       	cpi	r24, 0xFF	; 255
    1eec:	19 f0       	breq	.+6      	; 0x1ef4 <_ZN13LiquidCrystal4sendEhh+0x1e>
    1eee:	60 e0       	ldi	r22, 0x00	; 0
    1ef0:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <digitalWrite>
    1ef4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ef6:	61 2f       	mov	r22, r17
    1ef8:	84 ff       	sbrs	r24, 4
    1efa:	06 c0       	rjmp	.+12     	; 0x1f08 <_ZN13LiquidCrystal4sendEhh+0x32>
    1efc:	ce 01       	movw	r24, r28
    1efe:	df 91       	pop	r29
    1f00:	cf 91       	pop	r28
    1f02:	1f 91       	pop	r17
    1f04:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <_ZN13LiquidCrystal10write8bitsEh>
    1f08:	70 e0       	ldi	r23, 0x00	; 0
    1f0a:	84 e0       	ldi	r24, 0x04	; 4
    1f0c:	75 95       	asr	r23
    1f0e:	67 95       	ror	r22
    1f10:	8a 95       	dec	r24
    1f12:	e1 f7       	brne	.-8      	; 0x1f0c <_ZN13LiquidCrystal4sendEhh+0x36>
    1f14:	ce 01       	movw	r24, r28
    1f16:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <_ZN13LiquidCrystal10write4bitsEh>
    1f1a:	61 2f       	mov	r22, r17
    1f1c:	ce 01       	movw	r24, r28
    1f1e:	df 91       	pop	r29
    1f20:	cf 91       	pop	r28
    1f22:	1f 91       	pop	r17
    1f24:	0c 94 11 0f 	jmp	0x1e22	; 0x1e22 <_ZN13LiquidCrystal10write4bitsEh>

00001f28 <_ZN13LiquidCrystal7commandEh>:
    1f28:	40 e0       	ldi	r20, 0x00	; 0
    1f2a:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <_ZN13LiquidCrystal4sendEhh>

00001f2e <_ZN13LiquidCrystal5clearEv>:
    1f2e:	61 e0       	ldi	r22, 0x01	; 1
    1f30:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <_ZN13LiquidCrystal7commandEh>
    1f34:	80 ed       	ldi	r24, 0xD0	; 208
    1f36:	97 e0       	ldi	r25, 0x07	; 7
    1f38:	0c 94 98 0b 	jmp	0x1730	; 0x1730 <delayMicroseconds>

00001f3c <_ZN13LiquidCrystal9setCursorEhh>:
    1f3c:	fc 01       	movw	r30, r24
    1f3e:	44 30       	cpi	r20, 0x04	; 4
    1f40:	08 f0       	brcs	.+2      	; 0x1f44 <_ZN13LiquidCrystal9setCursorEhh+0x8>
    1f42:	43 e0       	ldi	r20, 0x03	; 3
    1f44:	83 89       	ldd	r24, Z+19	; 0x13
    1f46:	48 17       	cp	r20, r24
    1f48:	10 f0       	brcs	.+4      	; 0x1f4e <_ZN13LiquidCrystal9setCursorEhh+0x12>
    1f4a:	4f ef       	ldi	r20, 0xFF	; 255
    1f4c:	48 0f       	add	r20, r24
    1f4e:	df 01       	movw	r26, r30
    1f50:	a4 0f       	add	r26, r20
    1f52:	b1 1d       	adc	r27, r1
    1f54:	54 96       	adiw	r26, 0x14	; 20
    1f56:	9c 91       	ld	r25, X
    1f58:	69 0f       	add	r22, r25
    1f5a:	60 68       	ori	r22, 0x80	; 128
    1f5c:	cf 01       	movw	r24, r30
    1f5e:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <_ZN13LiquidCrystal7commandEh>

00001f62 <_ZN13LiquidCrystal7displayEv>:
    1f62:	fc 01       	movw	r30, r24
    1f64:	60 89       	ldd	r22, Z+16	; 0x10
    1f66:	26 2f       	mov	r18, r22
    1f68:	24 60       	ori	r18, 0x04	; 4
    1f6a:	20 8b       	std	Z+16, r18	; 0x10
    1f6c:	6c 60       	ori	r22, 0x0C	; 12
    1f6e:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <_ZN13LiquidCrystal7commandEh>

00001f72 <_ZN13LiquidCrystal5beginEhhh>:
    1f72:	ef 92       	push	r14
    1f74:	ff 92       	push	r15
    1f76:	0f 93       	push	r16
    1f78:	1f 93       	push	r17
    1f7a:	cf 93       	push	r28
    1f7c:	df 93       	push	r29
    1f7e:	ec 01       	movw	r28, r24
    1f80:	42 30       	cpi	r20, 0x02	; 2
    1f82:	18 f0       	brcs	.+6      	; 0x1f8a <_ZN13LiquidCrystal5beginEhhh+0x18>
    1f84:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f86:	88 60       	ori	r24, 0x08	; 8
    1f88:	8f 87       	std	Y+15, r24	; 0x0f
    1f8a:	4b 8b       	std	Y+19, r20	; 0x13
    1f8c:	1c 8a       	std	Y+20, r1	; 0x14
    1f8e:	80 e4       	ldi	r24, 0x40	; 64
    1f90:	8d 8b       	std	Y+21, r24	; 0x15
    1f92:	6e 8b       	std	Y+22, r22	; 0x16
    1f94:	70 e0       	ldi	r23, 0x00	; 0
    1f96:	60 5c       	subi	r22, 0xC0	; 192
    1f98:	7f 4f       	sbci	r23, 0xFF	; 255
    1f9a:	6f 8b       	std	Y+23, r22	; 0x17
    1f9c:	22 23       	and	r18, r18
    1f9e:	29 f0       	breq	.+10     	; 0x1faa <_ZN13LiquidCrystal5beginEhhh+0x38>
    1fa0:	41 30       	cpi	r20, 0x01	; 1
    1fa2:	19 f4       	brne	.+6      	; 0x1faa <_ZN13LiquidCrystal5beginEhhh+0x38>
    1fa4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fa6:	84 60       	ori	r24, 0x04	; 4
    1fa8:	8f 87       	std	Y+15, r24	; 0x0f
    1faa:	61 e0       	ldi	r22, 0x01	; 1
    1fac:	8c 81       	ldd	r24, Y+4	; 0x04
    1fae:	0e 94 24 0c 	call	0x1848	; 0x1848 <pinMode>
    1fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb4:	8f 3f       	cpi	r24, 0xFF	; 255
    1fb6:	19 f0       	breq	.+6      	; 0x1fbe <_ZN13LiquidCrystal5beginEhhh+0x4c>
    1fb8:	61 e0       	ldi	r22, 0x01	; 1
    1fba:	0e 94 24 0c 	call	0x1848	; 0x1848 <pinMode>
    1fbe:	61 e0       	ldi	r22, 0x01	; 1
    1fc0:	8e 81       	ldd	r24, Y+6	; 0x06
    1fc2:	0e 94 24 0c 	call	0x1848	; 0x1848 <pinMode>
    1fc6:	7e 01       	movw	r14, r28
    1fc8:	87 e0       	ldi	r24, 0x07	; 7
    1fca:	e8 0e       	add	r14, r24
    1fcc:	f1 1c       	adc	r15, r1
    1fce:	00 e0       	ldi	r16, 0x00	; 0
    1fd0:	10 e0       	ldi	r17, 0x00	; 0
    1fd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fd4:	84 fd       	sbrc	r24, 4
    1fd6:	03 c0       	rjmp	.+6      	; 0x1fde <_ZN13LiquidCrystal5beginEhhh+0x6c>
    1fd8:	84 e0       	ldi	r24, 0x04	; 4
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	02 c0       	rjmp	.+4      	; 0x1fe2 <_ZN13LiquidCrystal5beginEhhh+0x70>
    1fde:	88 e0       	ldi	r24, 0x08	; 8
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	08 17       	cp	r16, r24
    1fe4:	19 07       	cpc	r17, r25
    1fe6:	4c f4       	brge	.+18     	; 0x1ffa <_ZN13LiquidCrystal5beginEhhh+0x88>
    1fe8:	61 e0       	ldi	r22, 0x01	; 1
    1fea:	f7 01       	movw	r30, r14
    1fec:	81 91       	ld	r24, Z+
    1fee:	7f 01       	movw	r14, r30
    1ff0:	0e 94 24 0c 	call	0x1848	; 0x1848 <pinMode>
    1ff4:	0f 5f       	subi	r16, 0xFF	; 255
    1ff6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff8:	ec cf       	rjmp	.-40     	; 0x1fd2 <_ZN13LiquidCrystal5beginEhhh+0x60>
    1ffa:	80 e5       	ldi	r24, 0x50	; 80
    1ffc:	93 ec       	ldi	r25, 0xC3	; 195
    1ffe:	0e 94 98 0b 	call	0x1730	; 0x1730 <delayMicroseconds>
    2002:	60 e0       	ldi	r22, 0x00	; 0
    2004:	8c 81       	ldd	r24, Y+4	; 0x04
    2006:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <digitalWrite>
    200a:	60 e0       	ldi	r22, 0x00	; 0
    200c:	8e 81       	ldd	r24, Y+6	; 0x06
    200e:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <digitalWrite>
    2012:	8d 81       	ldd	r24, Y+5	; 0x05
    2014:	8f 3f       	cpi	r24, 0xFF	; 255
    2016:	19 f0       	breq	.+6      	; 0x201e <_ZN13LiquidCrystal5beginEhhh+0xac>
    2018:	60 e0       	ldi	r22, 0x00	; 0
    201a:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <digitalWrite>
    201e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2020:	64 fd       	sbrc	r22, 4
    2022:	1d c0       	rjmp	.+58     	; 0x205e <_ZN13LiquidCrystal5beginEhhh+0xec>
    2024:	63 e0       	ldi	r22, 0x03	; 3
    2026:	ce 01       	movw	r24, r28
    2028:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <_ZN13LiquidCrystal10write4bitsEh>
    202c:	84 e9       	ldi	r24, 0x94	; 148
    202e:	91 e1       	ldi	r25, 0x11	; 17
    2030:	0e 94 98 0b 	call	0x1730	; 0x1730 <delayMicroseconds>
    2034:	63 e0       	ldi	r22, 0x03	; 3
    2036:	ce 01       	movw	r24, r28
    2038:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <_ZN13LiquidCrystal10write4bitsEh>
    203c:	84 e9       	ldi	r24, 0x94	; 148
    203e:	91 e1       	ldi	r25, 0x11	; 17
    2040:	0e 94 98 0b 	call	0x1730	; 0x1730 <delayMicroseconds>
    2044:	63 e0       	ldi	r22, 0x03	; 3
    2046:	ce 01       	movw	r24, r28
    2048:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <_ZN13LiquidCrystal10write4bitsEh>
    204c:	86 e9       	ldi	r24, 0x96	; 150
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	0e 94 98 0b 	call	0x1730	; 0x1730 <delayMicroseconds>
    2054:	62 e0       	ldi	r22, 0x02	; 2
    2056:	ce 01       	movw	r24, r28
    2058:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <_ZN13LiquidCrystal10write4bitsEh>
    205c:	16 c0       	rjmp	.+44     	; 0x208a <_ZN13LiquidCrystal5beginEhhh+0x118>
    205e:	60 62       	ori	r22, 0x20	; 32
    2060:	ce 01       	movw	r24, r28
    2062:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <_ZN13LiquidCrystal7commandEh>
    2066:	84 e9       	ldi	r24, 0x94	; 148
    2068:	91 e1       	ldi	r25, 0x11	; 17
    206a:	0e 94 98 0b 	call	0x1730	; 0x1730 <delayMicroseconds>
    206e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2070:	60 62       	ori	r22, 0x20	; 32
    2072:	ce 01       	movw	r24, r28
    2074:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <_ZN13LiquidCrystal7commandEh>
    2078:	86 e9       	ldi	r24, 0x96	; 150
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	0e 94 98 0b 	call	0x1730	; 0x1730 <delayMicroseconds>
    2080:	6f 85       	ldd	r22, Y+15	; 0x0f
    2082:	60 62       	ori	r22, 0x20	; 32
    2084:	ce 01       	movw	r24, r28
    2086:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <_ZN13LiquidCrystal7commandEh>
    208a:	6f 85       	ldd	r22, Y+15	; 0x0f
    208c:	60 62       	ori	r22, 0x20	; 32
    208e:	ce 01       	movw	r24, r28
    2090:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <_ZN13LiquidCrystal7commandEh>
    2094:	84 e0       	ldi	r24, 0x04	; 4
    2096:	88 8b       	std	Y+16, r24	; 0x10
    2098:	ce 01       	movw	r24, r28
    209a:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <_ZN13LiquidCrystal7displayEv>
    209e:	ce 01       	movw	r24, r28
    20a0:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN13LiquidCrystal5clearEv>
    20a4:	82 e0       	ldi	r24, 0x02	; 2
    20a6:	89 8b       	std	Y+17, r24	; 0x11
    20a8:	66 e0       	ldi	r22, 0x06	; 6
    20aa:	ce 01       	movw	r24, r28
    20ac:	df 91       	pop	r29
    20ae:	cf 91       	pop	r28
    20b0:	1f 91       	pop	r17
    20b2:	0f 91       	pop	r16
    20b4:	ff 90       	pop	r15
    20b6:	ef 90       	pop	r14
    20b8:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <_ZN13LiquidCrystal7commandEh>

000020bc <_ZN13LiquidCrystalC1Ehhhhhh>:
    20bc:	cf 92       	push	r12
    20be:	ef 92       	push	r14
    20c0:	0f 93       	push	r16
    20c2:	fc 01       	movw	r30, r24
    20c4:	13 82       	std	Z+3, r1	; 0x03
    20c6:	12 82       	std	Z+2, r1	; 0x02
    20c8:	83 ea       	ldi	r24, 0xA3	; 163
    20ca:	91 e0       	ldi	r25, 0x01	; 1
    20cc:	91 83       	std	Z+1, r25	; 0x01
    20ce:	80 83       	st	Z, r24
    20d0:	64 83       	std	Z+4, r22	; 0x04
    20d2:	8f ef       	ldi	r24, 0xFF	; 255
    20d4:	85 83       	std	Z+5, r24	; 0x05
    20d6:	46 83       	std	Z+6, r20	; 0x06
    20d8:	27 83       	std	Z+7, r18	; 0x07
    20da:	00 87       	std	Z+8, r16	; 0x08
    20dc:	e1 86       	std	Z+9, r14	; 0x09
    20de:	c2 86       	std	Z+10, r12	; 0x0a
    20e0:	13 86       	std	Z+11, r1	; 0x0b
    20e2:	14 86       	std	Z+12, r1	; 0x0c
    20e4:	15 86       	std	Z+13, r1	; 0x0d
    20e6:	16 86       	std	Z+14, r1	; 0x0e
    20e8:	17 86       	std	Z+15, r1	; 0x0f
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	41 e0       	ldi	r20, 0x01	; 1
    20ee:	60 e1       	ldi	r22, 0x10	; 16
    20f0:	cf 01       	movw	r24, r30
    20f2:	0f 91       	pop	r16
    20f4:	ef 90       	pop	r14
    20f6:	cf 90       	pop	r12
    20f8:	0c 94 b9 0f 	jmp	0x1f72	; 0x1f72 <_ZN13LiquidCrystal5beginEhhh>

000020fc <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
    20fc:	41 e0       	ldi	r20, 0x01	; 1
    20fe:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	08 95       	ret

00002108 <_Z13monthShortStrh>:
}

char* monthShortStr(uint8_t month)
{
   for (int i=0; i < dt_SHORT_STR_LEN; i++)      
      buffer[i] = pgm_read_byte(&(monthShortNames_P[i+ (month*dt_SHORT_STR_LEN)]));  
    2108:	23 e0       	ldi	r18, 0x03	; 3
    210a:	82 9f       	mul	r24, r18
    210c:	c0 01       	movw	r24, r0
    210e:	11 24       	eor	r1, r1
    2110:	a6 ea       	ldi	r26, 0xA6	; 166
    2112:	b2 e0       	ldi	r27, 0x02	; 2
    return buffer;
}

char* monthShortStr(uint8_t month)
{
   for (int i=0; i < dt_SHORT_STR_LEN; i++)      
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
      buffer[i] = pgm_read_byte(&(monthShortNames_P[i+ (month*dt_SHORT_STR_LEN)]));  
    2118:	fc 01       	movw	r30, r24
    211a:	e2 0f       	add	r30, r18
    211c:	f3 1f       	adc	r31, r19
    211e:	e6 51       	subi	r30, 0x16	; 22
    2120:	ff 4f       	sbci	r31, 0xFF	; 255
    2122:	e4 91       	lpm	r30, Z
    2124:	ed 93       	st	X+, r30
    return buffer;
}

char* monthShortStr(uint8_t month)
{
   for (int i=0; i < dt_SHORT_STR_LEN; i++)      
    2126:	2f 5f       	subi	r18, 0xFF	; 255
    2128:	3f 4f       	sbci	r19, 0xFF	; 255
    212a:	23 30       	cpi	r18, 0x03	; 3
    212c:	31 05       	cpc	r19, r1
    212e:	a1 f7       	brne	.-24     	; 0x2118 <_Z13monthShortStrh+0x10>
      buffer[i] = pgm_read_byte(&(monthShortNames_P[i+ (month*dt_SHORT_STR_LEN)]));  
   buffer[dt_SHORT_STR_LEN] = 0;
    2130:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <_ZL6buffer+0x3>
   return buffer;
}
    2134:	86 ea       	ldi	r24, 0xA6	; 166
    2136:	92 e0       	ldi	r25, 0x02	; 2
    2138:	08 95       	ret

0000213a <_Z9breakTimemR12tmElements_t>:
}

int weekday(time_t t) {
  refreshCache(t);
  return tm.Wday;
}
    213a:	6f 92       	push	r6
    213c:	7f 92       	push	r7
    213e:	8f 92       	push	r8
    2140:	9f 92       	push	r9
    2142:	af 92       	push	r10
    2144:	bf 92       	push	r11
    2146:	cf 92       	push	r12
    2148:	df 92       	push	r13
    214a:	ef 92       	push	r14
    214c:	ff 92       	push	r15
    214e:	0f 93       	push	r16
    2150:	1f 93       	push	r17
    2152:	cf 93       	push	r28
    2154:	df 93       	push	r29
    2156:	6b 01       	movw	r12, r22
    2158:	7c 01       	movw	r14, r24
    215a:	ea 01       	movw	r28, r20
    215c:	8c e3       	ldi	r24, 0x3C	; 60
    215e:	88 2e       	mov	r8, r24
    2160:	91 2c       	mov	r9, r1
    2162:	a1 2c       	mov	r10, r1
    2164:	b1 2c       	mov	r11, r1
    2166:	c7 01       	movw	r24, r14
    2168:	b6 01       	movw	r22, r12
    216a:	a5 01       	movw	r20, r10
    216c:	94 01       	movw	r18, r8
    216e:	0e 94 08 16 	call	0x2c10	; 0x2c10 <__udivmodsi4>
    2172:	68 83       	st	Y, r22
    2174:	ca 01       	movw	r24, r20
    2176:	b9 01       	movw	r22, r18
    2178:	a5 01       	movw	r20, r10
    217a:	94 01       	movw	r18, r8
    217c:	0e 94 08 16 	call	0x2c10	; 0x2c10 <__udivmodsi4>
    2180:	69 83       	std	Y+1, r22	; 0x01
    2182:	c7 01       	movw	r24, r14
    2184:	b6 01       	movw	r22, r12
    2186:	20 e1       	ldi	r18, 0x10	; 16
    2188:	3e e0       	ldi	r19, 0x0E	; 14
    218a:	40 e0       	ldi	r20, 0x00	; 0
    218c:	50 e0       	ldi	r21, 0x00	; 0
    218e:	0e 94 08 16 	call	0x2c10	; 0x2c10 <__udivmodsi4>
    2192:	ca 01       	movw	r24, r20
    2194:	b9 01       	movw	r22, r18
    2196:	28 e1       	ldi	r18, 0x18	; 24
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	40 e0       	ldi	r20, 0x00	; 0
    219c:	50 e0       	ldi	r21, 0x00	; 0
    219e:	0e 94 08 16 	call	0x2c10	; 0x2c10 <__udivmodsi4>
    21a2:	6a 83       	std	Y+2, r22	; 0x02
    21a4:	c7 01       	movw	r24, r14
    21a6:	b6 01       	movw	r22, r12
    21a8:	20 e8       	ldi	r18, 0x80	; 128
    21aa:	31 e5       	ldi	r19, 0x51	; 81
    21ac:	41 e0       	ldi	r20, 0x01	; 1
    21ae:	50 e0       	ldi	r21, 0x00	; 0
    21b0:	0e 94 08 16 	call	0x2c10	; 0x2c10 <__udivmodsi4>
    21b4:	69 01       	movw	r12, r18
    21b6:	7a 01       	movw	r14, r20
    21b8:	ca 01       	movw	r24, r20
    21ba:	b9 01       	movw	r22, r18
    21bc:	6c 5f       	subi	r22, 0xFC	; 252
    21be:	7f 4f       	sbci	r23, 0xFF	; 255
    21c0:	8f 4f       	sbci	r24, 0xFF	; 255
    21c2:	9f 4f       	sbci	r25, 0xFF	; 255
    21c4:	27 e0       	ldi	r18, 0x07	; 7
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	40 e0       	ldi	r20, 0x00	; 0
    21ca:	50 e0       	ldi	r21, 0x00	; 0
    21cc:	0e 94 08 16 	call	0x2c10	; 0x2c10 <__udivmodsi4>
    21d0:	6f 5f       	subi	r22, 0xFF	; 255
    21d2:	6b 83       	std	Y+3, r22	; 0x03
    21d4:	81 2c       	mov	r8, r1
    21d6:	91 2c       	mov	r9, r1
    21d8:	54 01       	movw	r10, r8
    21da:	40 e0       	ldi	r20, 0x00	; 0
    21dc:	94 e6       	ldi	r25, 0x64	; 100
    21de:	69 2e       	mov	r6, r25
    21e0:	71 2c       	mov	r7, r1
    21e2:	00 e9       	ldi	r16, 0x90	; 144
    21e4:	11 e0       	ldi	r17, 0x01	; 1
    21e6:	24 2f       	mov	r18, r20
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	2e 54       	subi	r18, 0x4E	; 78
    21ec:	38 4f       	sbci	r19, 0xF8	; 248
    21ee:	f9 01       	movw	r30, r18
    21f0:	e3 70       	andi	r30, 0x03	; 3
    21f2:	ff 27       	eor	r31, r31
    21f4:	30 97       	sbiw	r30, 0x00	; 0
    21f6:	89 f4       	brne	.+34     	; 0x221a <_Z9breakTimemR12tmElements_t+0xe0>
    21f8:	c9 01       	movw	r24, r18
    21fa:	b3 01       	movw	r22, r6
    21fc:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <__divmodhi4>
    2200:	89 2b       	or	r24, r25
    2202:	31 f4       	brne	.+12     	; 0x2210 <_Z9breakTimemR12tmElements_t+0xd6>
    2204:	c9 01       	movw	r24, r18
    2206:	b8 01       	movw	r22, r16
    2208:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <__divmodhi4>
    220c:	89 2b       	or	r24, r25
    220e:	29 f4       	brne	.+10     	; 0x221a <_Z9breakTimemR12tmElements_t+0xe0>
    2210:	8e e6       	ldi	r24, 0x6E	; 110
    2212:	91 e0       	ldi	r25, 0x01	; 1
    2214:	a0 e0       	ldi	r26, 0x00	; 0
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	04 c0       	rjmp	.+8      	; 0x2222 <_Z9breakTimemR12tmElements_t+0xe8>
    221a:	8d e6       	ldi	r24, 0x6D	; 109
    221c:	91 e0       	ldi	r25, 0x01	; 1
    221e:	a0 e0       	ldi	r26, 0x00	; 0
    2220:	b0 e0       	ldi	r27, 0x00	; 0
    2222:	88 0e       	add	r8, r24
    2224:	99 1e       	adc	r9, r25
    2226:	aa 1e       	adc	r10, r26
    2228:	bb 1e       	adc	r11, r27
    222a:	d5 01       	movw	r26, r10
    222c:	c4 01       	movw	r24, r8
    222e:	aa 27       	eor	r26, r26
    2230:	bb 27       	eor	r27, r27
    2232:	c8 16       	cp	r12, r24
    2234:	d9 06       	cpc	r13, r25
    2236:	ea 06       	cpc	r14, r26
    2238:	fb 06       	cpc	r15, r27
    223a:	10 f0       	brcs	.+4      	; 0x2240 <_Z9breakTimemR12tmElements_t+0x106>
    223c:	4f 5f       	subi	r20, 0xFF	; 255
    223e:	d3 cf       	rjmp	.-90     	; 0x21e6 <_Z9breakTimemR12tmElements_t+0xac>
    2240:	4e 83       	std	Y+6, r20	; 0x06
    2242:	30 97       	sbiw	r30, 0x00	; 0
    2244:	99 f4       	brne	.+38     	; 0x226c <_Z9breakTimemR12tmElements_t+0x132>
    2246:	c9 01       	movw	r24, r18
    2248:	64 e6       	ldi	r22, 0x64	; 100
    224a:	70 e0       	ldi	r23, 0x00	; 0
    224c:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <__divmodhi4>
    2250:	89 2b       	or	r24, r25
    2252:	39 f4       	brne	.+14     	; 0x2262 <_Z9breakTimemR12tmElements_t+0x128>
    2254:	c9 01       	movw	r24, r18
    2256:	60 e9       	ldi	r22, 0x90	; 144
    2258:	71 e0       	ldi	r23, 0x01	; 1
    225a:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <__divmodhi4>
    225e:	89 2b       	or	r24, r25
    2260:	29 f4       	brne	.+10     	; 0x226c <_Z9breakTimemR12tmElements_t+0x132>
    2262:	8e e6       	ldi	r24, 0x6E	; 110
    2264:	91 e0       	ldi	r25, 0x01	; 1
    2266:	a0 e0       	ldi	r26, 0x00	; 0
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	04 c0       	rjmp	.+8      	; 0x2274 <_Z9breakTimemR12tmElements_t+0x13a>
    226c:	8d e6       	ldi	r24, 0x6D	; 109
    226e:	91 e0       	ldi	r25, 0x01	; 1
    2270:	a0 e0       	ldi	r26, 0x00	; 0
    2272:	b0 e0       	ldi	r27, 0x00	; 0
    2274:	88 1a       	sub	r8, r24
    2276:	99 0a       	sbc	r9, r25
    2278:	aa 0a       	sbc	r10, r26
    227a:	bb 0a       	sbc	r11, r27
    227c:	c8 18       	sub	r12, r8
    227e:	d9 08       	sbc	r13, r9
    2280:	ea 08       	sbc	r14, r10
    2282:	fb 08       	sbc	r15, r11
    2284:	c9 01       	movw	r24, r18
    2286:	64 e6       	ldi	r22, 0x64	; 100
    2288:	70 e0       	ldi	r23, 0x00	; 0
    228a:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <__divmodhi4>
    228e:	8c 01       	movw	r16, r24
    2290:	c9 01       	movw	r24, r18
    2292:	60 e9       	ldi	r22, 0x90	; 144
    2294:	71 e0       	ldi	r23, 0x01	; 1
    2296:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <__divmodhi4>
    229a:	ab ea       	ldi	r26, 0xAB	; 171
    229c:	b1 e0       	ldi	r27, 0x01	; 1
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	21 30       	cpi	r18, 0x01	; 1
    22a2:	41 f4       	brne	.+16     	; 0x22b4 <_Z9breakTimemR12tmElements_t+0x17a>
    22a4:	30 97       	sbiw	r30, 0x00	; 0
    22a6:	51 f4       	brne	.+20     	; 0x22bc <_Z9breakTimemR12tmElements_t+0x182>
    22a8:	01 15       	cp	r16, r1
    22aa:	11 05       	cpc	r17, r1
    22ac:	29 f4       	brne	.+10     	; 0x22b8 <_Z9breakTimemR12tmElements_t+0x17e>
    22ae:	00 97       	sbiw	r24, 0x00	; 0
    22b0:	29 f4       	brne	.+10     	; 0x22bc <_Z9breakTimemR12tmElements_t+0x182>
    22b2:	02 c0       	rjmp	.+4      	; 0x22b8 <_Z9breakTimemR12tmElements_t+0x17e>
    22b4:	4c 91       	ld	r20, X
    22b6:	03 c0       	rjmp	.+6      	; 0x22be <_Z9breakTimemR12tmElements_t+0x184>
    22b8:	4d e1       	ldi	r20, 0x1D	; 29
    22ba:	01 c0       	rjmp	.+2      	; 0x22be <_Z9breakTimemR12tmElements_t+0x184>
    22bc:	4c e1       	ldi	r20, 0x1C	; 28
    22be:	50 e0       	ldi	r21, 0x00	; 0
    22c0:	60 e0       	ldi	r22, 0x00	; 0
    22c2:	70 e0       	ldi	r23, 0x00	; 0
    22c4:	c4 16       	cp	r12, r20
    22c6:	d5 06       	cpc	r13, r21
    22c8:	e6 06       	cpc	r14, r22
    22ca:	f7 06       	cpc	r15, r23
    22cc:	40 f0       	brcs	.+16     	; 0x22de <_Z9breakTimemR12tmElements_t+0x1a4>
    22ce:	c4 1a       	sub	r12, r20
    22d0:	d5 0a       	sbc	r13, r21
    22d2:	e6 0a       	sbc	r14, r22
    22d4:	f7 0a       	sbc	r15, r23
    22d6:	2f 5f       	subi	r18, 0xFF	; 255
    22d8:	11 96       	adiw	r26, 0x01	; 1
    22da:	2c 30       	cpi	r18, 0x0C	; 12
    22dc:	09 f7       	brne	.-62     	; 0x22a0 <_Z9breakTimemR12tmElements_t+0x166>
    22de:	2f 5f       	subi	r18, 0xFF	; 255
    22e0:	2d 83       	std	Y+5, r18	; 0x05
    22e2:	c3 94       	inc	r12
    22e4:	cc 82       	std	Y+4, r12	; 0x04
    22e6:	df 91       	pop	r29
    22e8:	cf 91       	pop	r28
    22ea:	1f 91       	pop	r17
    22ec:	0f 91       	pop	r16
    22ee:	ff 90       	pop	r15
    22f0:	ef 90       	pop	r14
    22f2:	df 90       	pop	r13
    22f4:	cf 90       	pop	r12
    22f6:	bf 90       	pop	r11
    22f8:	af 90       	pop	r10
    22fa:	9f 90       	pop	r9
    22fc:	8f 90       	pop	r8
    22fe:	7f 90       	pop	r7
    2300:	6f 90       	pop	r6
    2302:	08 95       	ret

00002304 <_Z12refreshCachem>:
    2304:	cf 92       	push	r12
    2306:	df 92       	push	r13
    2308:	ef 92       	push	r14
    230a:	ff 92       	push	r15
    230c:	c0 90 b0 02 	lds	r12, 0x02B0	; 0x8002b0 <_ZL9cacheTime>
    2310:	d0 90 b1 02 	lds	r13, 0x02B1	; 0x8002b1 <_ZL9cacheTime+0x1>
    2314:	e0 90 b2 02 	lds	r14, 0x02B2	; 0x8002b2 <_ZL9cacheTime+0x2>
    2318:	f0 90 b3 02 	lds	r15, 0x02B3	; 0x8002b3 <_ZL9cacheTime+0x3>
    231c:	c6 16       	cp	r12, r22
    231e:	d7 06       	cpc	r13, r23
    2320:	e8 06       	cpc	r14, r24
    2322:	f9 06       	cpc	r15, r25
    2324:	71 f0       	breq	.+28     	; 0x2342 <_Z12refreshCachem+0x3e>
    2326:	6b 01       	movw	r12, r22
    2328:	7c 01       	movw	r14, r24
    232a:	44 eb       	ldi	r20, 0xB4	; 180
    232c:	52 e0       	ldi	r21, 0x02	; 2
    232e:	0e 94 9d 10 	call	0x213a	; 0x213a <_Z9breakTimemR12tmElements_t>
    2332:	c0 92 b0 02 	sts	0x02B0, r12	; 0x8002b0 <_ZL9cacheTime>
    2336:	d0 92 b1 02 	sts	0x02B1, r13	; 0x8002b1 <_ZL9cacheTime+0x1>
    233a:	e0 92 b2 02 	sts	0x02B2, r14	; 0x8002b2 <_ZL9cacheTime+0x2>
    233e:	f0 92 b3 02 	sts	0x02B3, r15	; 0x8002b3 <_ZL9cacheTime+0x3>
    2342:	ff 90       	pop	r15
    2344:	ef 90       	pop	r14
    2346:	df 90       	pop	r13
    2348:	cf 90       	pop	r12
    234a:	08 95       	ret

0000234c <_Z4hourm>:
    234c:	0e 94 82 11 	call	0x2304	; 0x2304 <_Z12refreshCachem>
    2350:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <_ZL2tm+0x2>
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	08 95       	ret

00002358 <_Z6minutem>:
    2358:	0e 94 82 11 	call	0x2304	; 0x2304 <_Z12refreshCachem>
    235c:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <_ZL2tm+0x1>
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	08 95       	ret

00002364 <_Z6secondm>:
    2364:	0e 94 82 11 	call	0x2304	; 0x2304 <_Z12refreshCachem>
    2368:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <_ZL2tm>
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	08 95       	ret

00002370 <_Z3daym>:
    2370:	0e 94 82 11 	call	0x2304	; 0x2304 <_Z12refreshCachem>
    2374:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <_ZL2tm+0x4>
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	08 95       	ret

0000237c <_Z5monthm>:
int month(){
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
  refreshCache(t);
    237c:	0e 94 82 11 	call	0x2304	; 0x2304 <_Z12refreshCachem>
  return tm.Month;
    2380:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <_ZL2tm+0x5>
}
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	08 95       	ret

00002388 <_Z4yearm>:
int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
    2388:	0e 94 82 11 	call	0x2304	; 0x2304 <_Z12refreshCachem>
  return tmYearToCalendar(tm.Year);
    238c:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <_ZL2tm+0x6>
    2390:	90 e0       	ldi	r25, 0x00	; 0
}
    2392:	8e 54       	subi	r24, 0x4E	; 78
    2394:	98 4f       	sbci	r25, 0xF8	; 248
    2396:	08 95       	ret

00002398 <_Z8makeTimeR12tmElements_t>:
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
}

time_t makeTime(tmElements_t &tm){   
    2398:	4f 92       	push	r4
    239a:	5f 92       	push	r5
    239c:	6f 92       	push	r6
    239e:	7f 92       	push	r7
    23a0:	8f 92       	push	r8
    23a2:	9f 92       	push	r9
    23a4:	af 92       	push	r10
    23a6:	bf 92       	push	r11
    23a8:	cf 92       	push	r12
    23aa:	df 92       	push	r13
    23ac:	ef 92       	push	r14
    23ae:	ff 92       	push	r15
    23b0:	0f 93       	push	r16
    23b2:	1f 93       	push	r17
    23b4:	cf 93       	push	r28
    23b6:	df 93       	push	r29
    23b8:	fc 01       	movw	r30, r24
  
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
    23ba:	16 81       	ldd	r17, Z+6	; 0x06
    23bc:	a1 2f       	mov	r26, r17
    23be:	b0 e0       	ldi	r27, 0x00	; 0
    23c0:	20 e8       	ldi	r18, 0x80	; 128
    23c2:	33 e3       	ldi	r19, 0x33	; 51
    23c4:	41 ee       	ldi	r20, 0xE1	; 225
    23c6:	51 e0       	ldi	r21, 0x01	; 1
    23c8:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <__muluhisi3>
    23cc:	4b 01       	movw	r8, r22
    23ce:	5c 01       	movw	r10, r24
    23d0:	c2 eb       	ldi	r28, 0xB2	; 178
    23d2:	d7 e0       	ldi	r29, 0x07	; 7
  for (i = 0; i < tm.Year; i++) {
    23d4:	9d 01       	movw	r18, r26
    if (LEAP_YEAR(i)) {
    23d6:	04 e6       	ldi	r16, 0x64	; 100
    23d8:	10 e0       	ldi	r17, 0x00	; 0
    23da:	80 e9       	ldi	r24, 0x90	; 144
    23dc:	e8 2e       	mov	r14, r24
    23de:	ff 24       	eor	r15, r15
    23e0:	f3 94       	inc	r15
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    23e2:	ce 01       	movw	r24, r28
    23e4:	82 5b       	subi	r24, 0xB2	; 178
    23e6:	97 40       	sbci	r25, 0x07	; 7
    23e8:	82 17       	cp	r24, r18
    23ea:	93 07       	cpc	r25, r19
    23ec:	d4 f4       	brge	.+52     	; 0x2422 <_Z8makeTimeR12tmElements_t+0x8a>
    if (LEAP_YEAR(i)) {
    23ee:	ce 01       	movw	r24, r28
    23f0:	83 70       	andi	r24, 0x03	; 3
    23f2:	99 27       	eor	r25, r25
    23f4:	89 2b       	or	r24, r25
    23f6:	99 f4       	brne	.+38     	; 0x241e <_Z8makeTimeR12tmElements_t+0x86>
    23f8:	ce 01       	movw	r24, r28
    23fa:	b8 01       	movw	r22, r16
    23fc:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <__divmodhi4>
    2400:	89 2b       	or	r24, r25
    2402:	31 f4       	brne	.+12     	; 0x2410 <_Z8makeTimeR12tmElements_t+0x78>
    2404:	ce 01       	movw	r24, r28
    2406:	b7 01       	movw	r22, r14
    2408:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <__divmodhi4>
    240c:	89 2b       	or	r24, r25
    240e:	39 f4       	brne	.+14     	; 0x241e <_Z8makeTimeR12tmElements_t+0x86>
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    2410:	80 e8       	ldi	r24, 0x80	; 128
    2412:	88 0e       	add	r8, r24
    2414:	81 e5       	ldi	r24, 0x51	; 81
    2416:	98 1e       	adc	r9, r24
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	a8 1e       	adc	r10, r24
    241c:	b1 1c       	adc	r11, r1
    241e:	21 96       	adiw	r28, 0x01	; 1
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    2420:	e0 cf       	rjmp	.-64     	; 0x23e2 <_Z8makeTimeR12tmElements_t+0x4a>
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    2422:	45 80       	ldd	r4, Z+5	; 0x05
    2424:	51 2c       	mov	r5, r1
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    2426:	2e 54       	subi	r18, 0x4E	; 78
    2428:	38 4f       	sbci	r19, 0xF8	; 248
    242a:	c9 01       	movw	r24, r18
    242c:	64 e6       	ldi	r22, 0x64	; 100
    242e:	70 e0       	ldi	r23, 0x00	; 0
    2430:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <__divmodhi4>
    2434:	7c 01       	movw	r14, r24
    2436:	c9 01       	movw	r24, r18
    2438:	60 e9       	ldi	r22, 0x90	; 144
    243a:	71 e0       	ldi	r23, 0x01	; 1
    243c:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <__divmodhi4>
    2440:	6c 01       	movw	r12, r24
    2442:	0b ea       	ldi	r16, 0xAB	; 171
    2444:	11 e0       	ldi	r17, 0x01	; 1
    2446:	c1 e0       	ldi	r28, 0x01	; 1
    2448:	d0 e0       	ldi	r29, 0x00	; 0
    244a:	39 01       	movw	r6, r18
    244c:	a3 e0       	ldi	r26, 0x03	; 3
    244e:	6a 22       	and	r6, r26
    2450:	77 24       	eor	r7, r7
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    2452:	c4 15       	cp	r28, r4
    2454:	d5 05       	cpc	r29, r5
    2456:	34 f5       	brge	.+76     	; 0x24a4 <_Z8makeTimeR12tmElements_t+0x10c>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    2458:	c2 30       	cpi	r28, 0x02	; 2
    245a:	d1 05       	cpc	r29, r1
    245c:	89 f4       	brne	.+34     	; 0x2480 <_Z8makeTimeR12tmElements_t+0xe8>
    245e:	61 14       	cp	r6, r1
    2460:	71 04       	cpc	r7, r1
    2462:	71 f4       	brne	.+28     	; 0x2480 <_Z8makeTimeR12tmElements_t+0xe8>
    2464:	e1 14       	cp	r14, r1
    2466:	f1 04       	cpc	r15, r1
    2468:	19 f4       	brne	.+6      	; 0x2470 <_Z8makeTimeR12tmElements_t+0xd8>
    246a:	c1 14       	cp	r12, r1
    246c:	d1 04       	cpc	r13, r1
    246e:	41 f4       	brne	.+16     	; 0x2480 <_Z8makeTimeR12tmElements_t+0xe8>
      seconds += SECS_PER_DAY * 29;
    2470:	b0 e8       	ldi	r27, 0x80	; 128
    2472:	8b 0e       	add	r8, r27
    2474:	bb e3       	ldi	r27, 0x3B	; 59
    2476:	9b 1e       	adc	r9, r27
    2478:	b6 e2       	ldi	r27, 0x26	; 38
    247a:	ab 1e       	adc	r10, r27
    247c:	b1 1c       	adc	r11, r1
    247e:	0e c0       	rjmp	.+28     	; 0x249c <_Z8makeTimeR12tmElements_t+0x104>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    2480:	d8 01       	movw	r26, r16
    2482:	8c 91       	ld	r24, X
    2484:	a8 2f       	mov	r26, r24
    2486:	b0 e0       	ldi	r27, 0x00	; 0
    2488:	20 e8       	ldi	r18, 0x80	; 128
    248a:	31 e5       	ldi	r19, 0x51	; 81
    248c:	41 e0       	ldi	r20, 0x01	; 1
    248e:	50 e0       	ldi	r21, 0x00	; 0
    2490:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <__muluhisi3>
    2494:	86 0e       	add	r8, r22
    2496:	97 1e       	adc	r9, r23
    2498:	a8 1e       	adc	r10, r24
    249a:	b9 1e       	adc	r11, r25
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    249c:	21 96       	adiw	r28, 0x01	; 1
    249e:	0f 5f       	subi	r16, 0xFF	; 255
    24a0:	1f 4f       	sbci	r17, 0xFF	; 255
    24a2:	d7 cf       	rjmp	.-82     	; 0x2452 <_Z8makeTimeR12tmElements_t+0xba>
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    }
  }
  seconds+= (tm.Day-1) * SECS_PER_DAY;
  seconds+= tm.Hour * SECS_PER_HOUR;
  seconds+= tm.Minute * SECS_PER_MIN;
    24a4:	41 81       	ldd	r20, Z+1	; 0x01
  seconds+= tm.Second;
  return (time_t)seconds; 
    24a6:	22 81       	ldd	r18, Z+2	; 0x02
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	a0 e1       	ldi	r26, 0x10	; 16
    24ac:	be e0       	ldi	r27, 0x0E	; 14
    24ae:	0e 94 30 16 	call	0x2c60	; 0x2c60 <__umulhisi3>
    24b2:	6b 01       	movw	r12, r22
    24b4:	7c 01       	movw	r14, r24
    24b6:	24 2f       	mov	r18, r20
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	ac e3       	ldi	r26, 0x3C	; 60
    24bc:	b0 e0       	ldi	r27, 0x00	; 0
    24be:	0e 94 30 16 	call	0x2c60	; 0x2c60 <__umulhisi3>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	8c 0d       	add	r24, r12
    24c8:	9d 1d       	adc	r25, r13
    24ca:	ae 1d       	adc	r26, r14
    24cc:	bf 1d       	adc	r27, r15
    24ce:	20 81       	ld	r18, Z
    24d0:	6c 01       	movw	r12, r24
    24d2:	7d 01       	movw	r14, r26
    24d4:	c2 0e       	add	r12, r18
    24d6:	d1 1c       	adc	r13, r1
    24d8:	e1 1c       	adc	r14, r1
    24da:	f1 1c       	adc	r15, r1
    24dc:	a4 81       	ldd	r26, Z+4	; 0x04
    24de:	b0 e0       	ldi	r27, 0x00	; 0
    24e0:	11 97       	sbiw	r26, 0x01	; 1
    24e2:	20 e8       	ldi	r18, 0x80	; 128
    24e4:	31 e5       	ldi	r19, 0x51	; 81
    24e6:	41 e0       	ldi	r20, 0x01	; 1
    24e8:	50 e0       	ldi	r21, 0x00	; 0
    24ea:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__mulshisi3>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	8c 0d       	add	r24, r12
    24f4:	9d 1d       	adc	r25, r13
    24f6:	ae 1d       	adc	r26, r14
    24f8:	bf 1d       	adc	r27, r15
    24fa:	bc 01       	movw	r22, r24
    24fc:	cd 01       	movw	r24, r26
    24fe:	68 0d       	add	r22, r8
    2500:	79 1d       	adc	r23, r9
    2502:	8a 1d       	adc	r24, r10
    2504:	9b 1d       	adc	r25, r11
}
    2506:	df 91       	pop	r29
    2508:	cf 91       	pop	r28
    250a:	1f 91       	pop	r17
    250c:	0f 91       	pop	r16
    250e:	ff 90       	pop	r15
    2510:	ef 90       	pop	r14
    2512:	df 90       	pop	r13
    2514:	cf 90       	pop	r12
    2516:	bf 90       	pop	r11
    2518:	af 90       	pop	r10
    251a:	9f 90       	pop	r9
    251c:	8f 90       	pop	r8
    251e:	7f 90       	pop	r7
    2520:	6f 90       	pop	r6
    2522:	5f 90       	pop	r5
    2524:	4f 90       	pop	r4
    2526:	08 95       	ret

00002528 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2528:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <_ZN7TwoWire14rxBufferLengthE>
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	20 91 ec 02 	lds	r18, 0x02EC	; 0x8002ec <_ZN7TwoWire13rxBufferIndexE>
    2532:	82 1b       	sub	r24, r18
    2534:	91 09       	sbc	r25, r1
    2536:	08 95       	ret

00002538 <_ZN7TwoWire4readEv>:
    2538:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <_ZN7TwoWire13rxBufferIndexE>
    253c:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <_ZN7TwoWire14rxBufferLengthE>
    2540:	98 17       	cp	r25, r24
    2542:	50 f4       	brcc	.+20     	; 0x2558 <_ZN7TwoWire4readEv+0x20>
    2544:	e9 2f       	mov	r30, r25
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	e3 51       	subi	r30, 0x13	; 19
    254a:	fd 4f       	sbci	r31, 0xFD	; 253
    254c:	20 81       	ld	r18, Z
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	9f 5f       	subi	r25, 0xFF	; 255
    2552:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <_ZN7TwoWire13rxBufferIndexE>
    2556:	02 c0       	rjmp	.+4      	; 0x255c <_ZN7TwoWire4readEv+0x24>
    2558:	2f ef       	ldi	r18, 0xFF	; 255
    255a:	3f ef       	ldi	r19, 0xFF	; 255
    255c:	c9 01       	movw	r24, r18
    255e:	08 95       	ret

00002560 <_ZN7TwoWire4peekEv>:
    2560:	e0 91 ec 02 	lds	r30, 0x02EC	; 0x8002ec <_ZN7TwoWire13rxBufferIndexE>
    2564:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <_ZN7TwoWire14rxBufferLengthE>
    2568:	e8 17       	cp	r30, r24
    256a:	30 f4       	brcc	.+12     	; 0x2578 <_ZN7TwoWire4peekEv+0x18>
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	e3 51       	subi	r30, 0x13	; 19
    2570:	fd 4f       	sbci	r31, 0xFD	; 253
    2572:	80 81       	ld	r24, Z
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	08 95       	ret
    2578:	8f ef       	ldi	r24, 0xFF	; 255
    257a:	9f ef       	ldi	r25, 0xFF	; 255
    257c:	08 95       	ret

0000257e <_ZN7TwoWire5flushEv>:
    257e:	08 95       	ret

00002580 <_ZN7TwoWire5writeEPKhj>:
    2580:	cf 92       	push	r12
    2582:	df 92       	push	r13
    2584:	ef 92       	push	r14
    2586:	ff 92       	push	r15
    2588:	0f 93       	push	r16
    258a:	1f 93       	push	r17
    258c:	cf 93       	push	r28
    258e:	df 93       	push	r29
    2590:	7c 01       	movw	r14, r24
    2592:	cb 01       	movw	r24, r22
    2594:	8a 01       	movw	r16, r20
    2596:	20 91 c7 02 	lds	r18, 0x02C7	; 0x8002c7 <_ZN7TwoWire12transmittingE>
    259a:	22 23       	and	r18, r18
    259c:	89 f0       	breq	.+34     	; 0x25c0 <_ZN7TwoWire5writeEPKhj+0x40>
    259e:	eb 01       	movw	r28, r22
    25a0:	6b 01       	movw	r12, r22
    25a2:	c4 0e       	add	r12, r20
    25a4:	d5 1e       	adc	r13, r21
    25a6:	cc 15       	cp	r28, r12
    25a8:	dd 05       	cpc	r29, r13
    25aa:	69 f0       	breq	.+26     	; 0x25c6 <_ZN7TwoWire5writeEPKhj+0x46>
    25ac:	69 91       	ld	r22, Y+
    25ae:	d7 01       	movw	r26, r14
    25b0:	ed 91       	ld	r30, X+
    25b2:	fc 91       	ld	r31, X
    25b4:	01 90       	ld	r0, Z+
    25b6:	f0 81       	ld	r31, Z
    25b8:	e0 2d       	mov	r30, r0
    25ba:	c7 01       	movw	r24, r14
    25bc:	09 95       	icall
    25be:	f3 cf       	rjmp	.-26     	; 0x25a6 <_ZN7TwoWire5writeEPKhj+0x26>
    25c0:	64 2f       	mov	r22, r20
    25c2:	0e 94 83 14 	call	0x2906	; 0x2906 <twi_transmit>
    25c6:	c8 01       	movw	r24, r16
    25c8:	df 91       	pop	r29
    25ca:	cf 91       	pop	r28
    25cc:	1f 91       	pop	r17
    25ce:	0f 91       	pop	r16
    25d0:	ff 90       	pop	r15
    25d2:	ef 90       	pop	r14
    25d4:	df 90       	pop	r13
    25d6:	cf 90       	pop	r12
    25d8:	08 95       	ret

000025da <_ZN7TwoWire5writeEh>:
    25da:	cf 93       	push	r28
    25dc:	df 93       	push	r29
    25de:	1f 92       	push	r1
    25e0:	cd b7       	in	r28, 0x3d	; 61
    25e2:	de b7       	in	r29, 0x3e	; 62
    25e4:	69 83       	std	Y+1, r22	; 0x01
    25e6:	20 91 c7 02 	lds	r18, 0x02C7	; 0x8002c7 <_ZN7TwoWire12transmittingE>
    25ea:	22 23       	and	r18, r18
    25ec:	d1 f0       	breq	.+52     	; 0x2622 <_ZN7TwoWire5writeEh+0x48>
    25ee:	20 91 c8 02 	lds	r18, 0x02C8	; 0x8002c8 <_ZN7TwoWire14txBufferLengthE>
    25f2:	20 32       	cpi	r18, 0x20	; 32
    25f4:	40 f0       	brcs	.+16     	; 0x2606 <_ZN7TwoWire5writeEh+0x2c>
    25f6:	21 e0       	ldi	r18, 0x01	; 1
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	fc 01       	movw	r30, r24
    25fc:	33 83       	std	Z+3, r19	; 0x03
    25fe:	22 83       	std	Z+2, r18	; 0x02
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	15 c0       	rjmp	.+42     	; 0x2630 <_ZN7TwoWire5writeEh+0x56>
    2606:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <_ZN7TwoWire13txBufferIndexE>
    260a:	e8 2f       	mov	r30, r24
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	e6 53       	subi	r30, 0x36	; 54
    2610:	fd 4f       	sbci	r31, 0xFD	; 253
    2612:	99 81       	ldd	r25, Y+1	; 0x01
    2614:	90 83       	st	Z, r25
    2616:	8f 5f       	subi	r24, 0xFF	; 255
    2618:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <_ZN7TwoWire13txBufferIndexE>
    261c:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <_ZN7TwoWire14txBufferLengthE>
    2620:	05 c0       	rjmp	.+10     	; 0x262c <_ZN7TwoWire5writeEh+0x52>
    2622:	61 e0       	ldi	r22, 0x01	; 1
    2624:	ce 01       	movw	r24, r28
    2626:	01 96       	adiw	r24, 0x01	; 1
    2628:	0e 94 83 14 	call	0x2906	; 0x2906 <twi_transmit>
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	0f 90       	pop	r0
    2632:	df 91       	pop	r29
    2634:	cf 91       	pop	r28
    2636:	08 95       	ret

00002638 <_ZN7TwoWireC1Ev>:
    2638:	fc 01       	movw	r30, r24
    263a:	13 82       	std	Z+3, r1	; 0x03
    263c:	12 82       	std	Z+2, r1	; 0x02
    263e:	88 ee       	ldi	r24, 0xE8	; 232
    2640:	93 e0       	ldi	r25, 0x03	; 3
    2642:	a0 e0       	ldi	r26, 0x00	; 0
    2644:	b0 e0       	ldi	r27, 0x00	; 0
    2646:	84 83       	std	Z+4, r24	; 0x04
    2648:	95 83       	std	Z+5, r25	; 0x05
    264a:	a6 83       	std	Z+6, r26	; 0x06
    264c:	b7 83       	std	Z+7, r27	; 0x07
    264e:	8b eb       	ldi	r24, 0xBB	; 187
    2650:	91 e0       	ldi	r25, 0x01	; 1
    2652:	91 83       	std	Z+1, r25	; 0x01
    2654:	80 83       	st	Z, r24
    2656:	08 95       	ret

00002658 <_ZN7TwoWire5beginEv>:
    2658:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <_ZN7TwoWire13rxBufferIndexE>
    265c:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <_ZN7TwoWire14rxBufferLengthE>
    2660:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <_ZN7TwoWire13txBufferIndexE>
    2664:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <_ZN7TwoWire14txBufferLengthE>
    2668:	0c 94 c7 13 	jmp	0x278e	; 0x278e <twi_init>

0000266c <_ZN7TwoWire17beginTransmissionEh>:
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <_ZN7TwoWire12transmittingE>
    2672:	60 93 ea 02 	sts	0x02EA, r22	; 0x8002ea <_ZN7TwoWire9txAddressE>
    2676:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <_ZN7TwoWire13txBufferIndexE>
    267a:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <_ZN7TwoWire14txBufferLengthE>
    267e:	08 95       	ret

00002680 <_ZN7TwoWire17beginTransmissionEi>:
    2680:	0c 94 36 13 	jmp	0x266c	; 0x266c <_ZN7TwoWire17beginTransmissionEh>

00002684 <_ZN7TwoWire15endTransmissionEh>:
    2684:	0f 93       	push	r16
    2686:	06 2f       	mov	r16, r22
    2688:	21 e0       	ldi	r18, 0x01	; 1
    268a:	40 91 c8 02 	lds	r20, 0x02C8	; 0x8002c8 <_ZN7TwoWire14txBufferLengthE>
    268e:	6a ec       	ldi	r22, 0xCA	; 202
    2690:	72 e0       	ldi	r23, 0x02	; 2
    2692:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <_ZN7TwoWire9txAddressE>
    2696:	0e 94 2d 14 	call	0x285a	; 0x285a <twi_writeTo>
    269a:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <_ZN7TwoWire13txBufferIndexE>
    269e:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <_ZN7TwoWire14txBufferLengthE>
    26a2:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <_ZN7TwoWire12transmittingE>
    26a6:	0f 91       	pop	r16
    26a8:	08 95       	ret

000026aa <_ZN7TwoWire11requestFromEhhmhh>:
    26aa:	4f 92       	push	r4
    26ac:	5f 92       	push	r5
    26ae:	6f 92       	push	r6
    26b0:	7f 92       	push	r7
    26b2:	af 92       	push	r10
    26b4:	bf 92       	push	r11
    26b6:	cf 92       	push	r12
    26b8:	ef 92       	push	r14
    26ba:	ff 92       	push	r15
    26bc:	0f 93       	push	r16
    26be:	1f 93       	push	r17
    26c0:	cf 93       	push	r28
    26c2:	df 93       	push	r29
    26c4:	5c 01       	movw	r10, r24
    26c6:	f6 2e       	mov	r15, r22
    26c8:	d4 2f       	mov	r29, r20
    26ca:	28 01       	movw	r4, r16
    26cc:	39 01       	movw	r6, r18
    26ce:	ee 20       	and	r14, r14
    26d0:	21 f1       	breq	.+72     	; 0x271a <_ZN7TwoWire11requestFromEhhmhh+0x70>
    26d2:	0e 94 36 13 	call	0x266c	; 0x266c <_ZN7TwoWire17beginTransmissionEh>
    26d6:	ce 2d       	mov	r28, r14
    26d8:	c4 30       	cpi	r28, 0x04	; 4
    26da:	08 f0       	brcs	.+2      	; 0x26de <_ZN7TwoWire11requestFromEhhmhh+0x34>
    26dc:	c3 e0       	ldi	r28, 0x03	; 3
    26de:	c1 50       	subi	r28, 0x01	; 1
    26e0:	c0 f0       	brcs	.+48     	; 0x2712 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    26e2:	28 e0       	ldi	r18, 0x08	; 8
    26e4:	c2 9f       	mul	r28, r18
    26e6:	c0 01       	movw	r24, r0
    26e8:	11 24       	eor	r1, r1
    26ea:	a3 01       	movw	r20, r6
    26ec:	92 01       	movw	r18, r4
    26ee:	04 c0       	rjmp	.+8      	; 0x26f8 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    26f0:	56 95       	lsr	r21
    26f2:	47 95       	ror	r20
    26f4:	37 95       	ror	r19
    26f6:	27 95       	ror	r18
    26f8:	8a 95       	dec	r24
    26fa:	d2 f7       	brpl	.-12     	; 0x26f0 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    26fc:	ca 01       	movw	r24, r20
    26fe:	b9 01       	movw	r22, r18
    2700:	d5 01       	movw	r26, r10
    2702:	ed 91       	ld	r30, X+
    2704:	fc 91       	ld	r31, X
    2706:	01 90       	ld	r0, Z+
    2708:	f0 81       	ld	r31, Z
    270a:	e0 2d       	mov	r30, r0
    270c:	c5 01       	movw	r24, r10
    270e:	09 95       	icall
    2710:	e6 cf       	rjmp	.-52     	; 0x26de <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2712:	60 e0       	ldi	r22, 0x00	; 0
    2714:	c5 01       	movw	r24, r10
    2716:	0e 94 42 13 	call	0x2684	; 0x2684 <_ZN7TwoWire15endTransmissionEh>
    271a:	4d 2f       	mov	r20, r29
    271c:	d1 32       	cpi	r29, 0x21	; 33
    271e:	08 f0       	brcs	.+2      	; 0x2722 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    2720:	40 e2       	ldi	r20, 0x20	; 32
    2722:	2c 2d       	mov	r18, r12
    2724:	6d ee       	ldi	r22, 0xED	; 237
    2726:	72 e0       	ldi	r23, 0x02	; 2
    2728:	8f 2d       	mov	r24, r15
    272a:	0e 94 e5 13 	call	0x27ca	; 0x27ca <twi_readFrom>
    272e:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <_ZN7TwoWire13rxBufferIndexE>
    2732:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <_ZN7TwoWire14rxBufferLengthE>
    2736:	df 91       	pop	r29
    2738:	cf 91       	pop	r28
    273a:	1f 91       	pop	r17
    273c:	0f 91       	pop	r16
    273e:	ff 90       	pop	r15
    2740:	ef 90       	pop	r14
    2742:	cf 90       	pop	r12
    2744:	bf 90       	pop	r11
    2746:	af 90       	pop	r10
    2748:	7f 90       	pop	r7
    274a:	6f 90       	pop	r6
    274c:	5f 90       	pop	r5
    274e:	4f 90       	pop	r4
    2750:	08 95       	ret

00002752 <_ZN7TwoWire11requestFromEhhh>:
    2752:	cf 92       	push	r12
    2754:	ef 92       	push	r14
    2756:	0f 93       	push	r16
    2758:	1f 93       	push	r17
    275a:	c2 2e       	mov	r12, r18
    275c:	e1 2c       	mov	r14, r1
    275e:	00 e0       	ldi	r16, 0x00	; 0
    2760:	10 e0       	ldi	r17, 0x00	; 0
    2762:	98 01       	movw	r18, r16
    2764:	0e 94 55 13 	call	0x26aa	; 0x26aa <_ZN7TwoWire11requestFromEhhmhh>
    2768:	1f 91       	pop	r17
    276a:	0f 91       	pop	r16
    276c:	ef 90       	pop	r14
    276e:	cf 90       	pop	r12
    2770:	08 95       	ret

00002772 <_ZN7TwoWire11requestFromEhh>:
    2772:	21 e0       	ldi	r18, 0x01	; 1
    2774:	0c 94 a9 13 	jmp	0x2752	; 0x2752 <_ZN7TwoWire11requestFromEhhh>

00002778 <_ZN7TwoWire11requestFromEii>:
    2778:	21 e0       	ldi	r18, 0x01	; 1
    277a:	0c 94 a9 13 	jmp	0x2752	; 0x2752 <_ZN7TwoWire11requestFromEhhh>

0000277e <_ZN7TwoWire15endTransmissionEv>:
    277e:	61 e0       	ldi	r22, 0x01	; 1
    2780:	0c 94 42 13 	jmp	0x2684	; 0x2684 <_ZN7TwoWire15endTransmissionEh>

00002784 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2784:	8b eb       	ldi	r24, 0xBB	; 187
    2786:	92 e0       	ldi	r25, 0x02	; 2
    2788:	0c 94 1c 13 	jmp	0x2638	; 0x2638 <_ZN7TwoWireC1Ev>

0000278c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    278c:	08 95       	ret

0000278e <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    278e:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <twi_state>
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <twi_sendStop>
    2798:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <twi_inRepStart>
    279c:	61 e0       	ldi	r22, 0x01	; 1
    279e:	82 e1       	ldi	r24, 0x12	; 18
    27a0:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <digitalWrite>
    27a4:	61 e0       	ldi	r22, 0x01	; 1
    27a6:	83 e1       	ldi	r24, 0x13	; 19
    27a8:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <digitalWrite>
    27ac:	e9 eb       	ldi	r30, 0xB9	; 185
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	80 81       	ld	r24, Z
    27b2:	8e 7f       	andi	r24, 0xFE	; 254
    27b4:	80 83       	st	Z, r24
    27b6:	80 81       	ld	r24, Z
    27b8:	8d 7f       	andi	r24, 0xFD	; 253
    27ba:	80 83       	st	Z, r24
    27bc:	88 e4       	ldi	r24, 0x48	; 72
    27be:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    27c2:	85 e4       	ldi	r24, 0x45	; 69
    27c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    27c8:	08 95       	ret

000027ca <twi_readFrom>:
    27ca:	41 32       	cpi	r20, 0x21	; 33
    27cc:	08 f0       	brcs	.+2      	; 0x27d0 <twi_readFrom+0x6>
    27ce:	43 c0       	rjmp	.+134    	; 0x2856 <twi_readFrom+0x8c>
    27d0:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <twi_state>
    27d4:	91 11       	cpse	r25, r1
    27d6:	fc cf       	rjmp	.-8      	; 0x27d0 <twi_readFrom+0x6>
    27d8:	91 e0       	ldi	r25, 0x01	; 1
    27da:	90 93 7a 03 	sts	0x037A, r25	; 0x80037a <twi_state>
    27de:	20 93 78 03 	sts	0x0378, r18	; 0x800378 <twi_sendStop>
    27e2:	2f ef       	ldi	r18, 0xFF	; 255
    27e4:	20 93 0d 03 	sts	0x030D, r18	; 0x80030d <twi_error>
    27e8:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <twi_masterBufferIndex>
    27ec:	24 0f       	add	r18, r20
    27ee:	20 93 51 03 	sts	0x0351, r18	; 0x800351 <twi_masterBufferLength>
    27f2:	90 93 79 03 	sts	0x0379, r25	; 0x800379 <twi_slarw>
    27f6:	90 91 79 03 	lds	r25, 0x0379	; 0x800379 <twi_slarw>
    27fa:	88 0f       	add	r24, r24
    27fc:	89 2b       	or	r24, r25
    27fe:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <twi_slarw>
    2802:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <twi_inRepStart>
    2806:	81 30       	cpi	r24, 0x01	; 1
    2808:	61 f4       	brne	.+24     	; 0x2822 <twi_readFrom+0x58>
    280a:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <twi_inRepStart>
    280e:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <twi_slarw>
    2812:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2816:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    281a:	83 fd       	sbrc	r24, 3
    281c:	f8 cf       	rjmp	.-16     	; 0x280e <twi_readFrom+0x44>
    281e:	85 ec       	ldi	r24, 0xC5	; 197
    2820:	01 c0       	rjmp	.+2      	; 0x2824 <twi_readFrom+0x5a>
    2822:	85 ee       	ldi	r24, 0xE5	; 229
    2824:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2828:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <twi_state>
    282c:	81 30       	cpi	r24, 0x01	; 1
    282e:	e1 f3       	breq	.-8      	; 0x2828 <twi_readFrom+0x5e>
    2830:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <twi_masterBufferIndex>
    2834:	84 17       	cp	r24, r20
    2836:	10 f4       	brcc	.+4      	; 0x283c <twi_readFrom+0x72>
    2838:	40 91 52 03 	lds	r20, 0x0352	; 0x800352 <twi_masterBufferIndex>
    283c:	a3 e5       	ldi	r26, 0x53	; 83
    283e:	b3 e0       	ldi	r27, 0x03	; 3
    2840:	96 2f       	mov	r25, r22
    2842:	fb 01       	movw	r30, r22
    2844:	8e 2f       	mov	r24, r30
    2846:	89 1b       	sub	r24, r25
    2848:	84 17       	cp	r24, r20
    284a:	18 f4       	brcc	.+6      	; 0x2852 <twi_readFrom+0x88>
    284c:	8d 91       	ld	r24, X+
    284e:	81 93       	st	Z+, r24
    2850:	f9 cf       	rjmp	.-14     	; 0x2844 <twi_readFrom+0x7a>
    2852:	84 2f       	mov	r24, r20
    2854:	08 95       	ret
    2856:	80 e0       	ldi	r24, 0x00	; 0
    2858:	08 95       	ret

0000285a <twi_writeTo>:
    285a:	0f 93       	push	r16
    285c:	41 32       	cpi	r20, 0x21	; 33
    285e:	08 f0       	brcs	.+2      	; 0x2862 <twi_writeTo+0x8>
    2860:	4a c0       	rjmp	.+148    	; 0x28f6 <twi_writeTo+0x9c>
    2862:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <twi_state>
    2866:	91 11       	cpse	r25, r1
    2868:	fc cf       	rjmp	.-8      	; 0x2862 <twi_writeTo+0x8>
    286a:	32 e0       	ldi	r19, 0x02	; 2
    286c:	30 93 7a 03 	sts	0x037A, r19	; 0x80037a <twi_state>
    2870:	00 93 78 03 	sts	0x0378, r16	; 0x800378 <twi_sendStop>
    2874:	3f ef       	ldi	r19, 0xFF	; 255
    2876:	30 93 0d 03 	sts	0x030D, r19	; 0x80030d <twi_error>
    287a:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <twi_masterBufferIndex>
    287e:	40 93 51 03 	sts	0x0351, r20	; 0x800351 <twi_masterBufferLength>
    2882:	56 2f       	mov	r21, r22
    2884:	a3 e5       	ldi	r26, 0x53	; 83
    2886:	b3 e0       	ldi	r27, 0x03	; 3
    2888:	fb 01       	movw	r30, r22
    288a:	3e 2f       	mov	r19, r30
    288c:	35 1b       	sub	r19, r21
    288e:	34 17       	cp	r19, r20
    2890:	18 f4       	brcc	.+6      	; 0x2898 <twi_writeTo+0x3e>
    2892:	31 91       	ld	r19, Z+
    2894:	3d 93       	st	X+, r19
    2896:	f9 cf       	rjmp	.-14     	; 0x288a <twi_writeTo+0x30>
    2898:	10 92 79 03 	sts	0x0379, r1	; 0x800379 <twi_slarw>
    289c:	30 91 79 03 	lds	r19, 0x0379	; 0x800379 <twi_slarw>
    28a0:	88 0f       	add	r24, r24
    28a2:	83 2b       	or	r24, r19
    28a4:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <twi_slarw>
    28a8:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <twi_inRepStart>
    28ac:	81 30       	cpi	r24, 0x01	; 1
    28ae:	61 f4       	brne	.+24     	; 0x28c8 <twi_writeTo+0x6e>
    28b0:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <twi_inRepStart>
    28b4:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <twi_slarw>
    28b8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    28bc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    28c0:	83 fd       	sbrc	r24, 3
    28c2:	f8 cf       	rjmp	.-16     	; 0x28b4 <twi_writeTo+0x5a>
    28c4:	85 ec       	ldi	r24, 0xC5	; 197
    28c6:	01 c0       	rjmp	.+2      	; 0x28ca <twi_writeTo+0x70>
    28c8:	85 ee       	ldi	r24, 0xE5	; 229
    28ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    28ce:	22 23       	and	r18, r18
    28d0:	21 f0       	breq	.+8      	; 0x28da <twi_writeTo+0x80>
    28d2:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <twi_state>
    28d6:	82 30       	cpi	r24, 0x02	; 2
    28d8:	d1 f3       	breq	.-12     	; 0x28ce <twi_writeTo+0x74>
    28da:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <twi_error>
    28de:	8f 3f       	cpi	r24, 0xFF	; 255
    28e0:	79 f0       	breq	.+30     	; 0x2900 <twi_writeTo+0xa6>
    28e2:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <twi_error>
    28e6:	80 32       	cpi	r24, 0x20	; 32
    28e8:	41 f0       	breq	.+16     	; 0x28fa <twi_writeTo+0xa0>
    28ea:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <twi_error>
    28ee:	80 33       	cpi	r24, 0x30	; 48
    28f0:	31 f0       	breq	.+12     	; 0x28fe <twi_writeTo+0xa4>
    28f2:	94 e0       	ldi	r25, 0x04	; 4
    28f4:	05 c0       	rjmp	.+10     	; 0x2900 <twi_writeTo+0xa6>
    28f6:	91 e0       	ldi	r25, 0x01	; 1
    28f8:	03 c0       	rjmp	.+6      	; 0x2900 <twi_writeTo+0xa6>
    28fa:	92 e0       	ldi	r25, 0x02	; 2
    28fc:	01 c0       	rjmp	.+2      	; 0x2900 <twi_writeTo+0xa6>
    28fe:	93 e0       	ldi	r25, 0x03	; 3
    2900:	89 2f       	mov	r24, r25
    2902:	0f 91       	pop	r16
    2904:	08 95       	ret

00002906 <twi_transmit>:
    2906:	40 91 2f 03 	lds	r20, 0x032F	; 0x80032f <twi_txBufferLength>
    290a:	26 2f       	mov	r18, r22
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	24 0f       	add	r18, r20
    2910:	31 1d       	adc	r19, r1
    2912:	21 32       	cpi	r18, 0x21	; 33
    2914:	31 05       	cpc	r19, r1
    2916:	dc f4       	brge	.+54     	; 0x294e <twi_transmit+0x48>
    2918:	20 91 7a 03 	lds	r18, 0x037A	; 0x80037a <twi_state>
    291c:	24 30       	cpi	r18, 0x04	; 4
    291e:	c9 f4       	brne	.+50     	; 0x2952 <twi_transmit+0x4c>
    2920:	fc 01       	movw	r30, r24
    2922:	80 e0       	ldi	r24, 0x00	; 0
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	86 17       	cp	r24, r22
    2928:	58 f4       	brcc	.+22     	; 0x2940 <twi_transmit+0x3a>
    292a:	30 91 2f 03 	lds	r19, 0x032F	; 0x80032f <twi_txBufferLength>
    292e:	21 91       	ld	r18, Z+
    2930:	dc 01       	movw	r26, r24
    2932:	af 5c       	subi	r26, 0xCF	; 207
    2934:	bc 4f       	sbci	r27, 0xFC	; 252
    2936:	a3 0f       	add	r26, r19
    2938:	b1 1d       	adc	r27, r1
    293a:	2c 93       	st	X, r18
    293c:	01 96       	adiw	r24, 0x01	; 1
    293e:	f3 cf       	rjmp	.-26     	; 0x2926 <twi_transmit+0x20>
    2940:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <twi_txBufferLength>
    2944:	68 0f       	add	r22, r24
    2946:	60 93 2f 03 	sts	0x032F, r22	; 0x80032f <twi_txBufferLength>
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	08 95       	ret
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	08 95       	ret
    2952:	82 e0       	ldi	r24, 0x02	; 2
    2954:	08 95       	ret

00002956 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2956:	85 ed       	ldi	r24, 0xD5	; 213
    2958:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    295c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2960:	84 fd       	sbrc	r24, 4
    2962:	fc cf       	rjmp	.-8      	; 0x295c <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2964:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <twi_state>
    2968:	08 95       	ret

0000296a <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    296a:	85 ec       	ldi	r24, 0xC5	; 197
    296c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    2970:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <twi_state>
    2974:	08 95       	ret

00002976 <__vector_24>:
}

ISR(TWI_vect)
{
    2976:	1f 92       	push	r1
    2978:	0f 92       	push	r0
    297a:	0f b6       	in	r0, 0x3f	; 63
    297c:	0f 92       	push	r0
    297e:	11 24       	eor	r1, r1
    2980:	2f 93       	push	r18
    2982:	3f 93       	push	r19
    2984:	4f 93       	push	r20
    2986:	5f 93       	push	r21
    2988:	6f 93       	push	r22
    298a:	7f 93       	push	r23
    298c:	8f 93       	push	r24
    298e:	9f 93       	push	r25
    2990:	af 93       	push	r26
    2992:	bf 93       	push	r27
    2994:	ef 93       	push	r30
    2996:	ff 93       	push	r31
  switch(TW_STATUS){
    2998:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    299c:	88 7f       	andi	r24, 0xF8	; 248
    299e:	80 36       	cpi	r24, 0x60	; 96
    29a0:	09 f4       	brne	.+2      	; 0x29a4 <__vector_24+0x2e>
    29a2:	9e c0       	rjmp	.+316    	; 0x2ae0 <__vector_24+0x16a>
    29a4:	78 f5       	brcc	.+94     	; 0x2a04 <__vector_24+0x8e>
    29a6:	88 32       	cpi	r24, 0x28	; 40
    29a8:	09 f4       	brne	.+2      	; 0x29ac <__vector_24+0x36>
    29aa:	5d c0       	rjmp	.+186    	; 0x2a66 <__vector_24+0xf0>
    29ac:	90 f4       	brcc	.+36     	; 0x29d2 <__vector_24+0x5c>
    29ae:	80 31       	cpi	r24, 0x10	; 16
    29b0:	09 f4       	brne	.+2      	; 0x29b4 <__vector_24+0x3e>
    29b2:	56 c0       	rjmp	.+172    	; 0x2a60 <__vector_24+0xea>
    29b4:	38 f4       	brcc	.+14     	; 0x29c4 <__vector_24+0x4e>
    29b6:	88 23       	and	r24, r24
    29b8:	09 f4       	brne	.+2      	; 0x29bc <__vector_24+0x46>
    29ba:	f5 c0       	rjmp	.+490    	; 0x2ba6 <__vector_24+0x230>
    29bc:	88 30       	cpi	r24, 0x08	; 8
    29be:	09 f4       	brne	.+2      	; 0x29c2 <__vector_24+0x4c>
    29c0:	4f c0       	rjmp	.+158    	; 0x2a60 <__vector_24+0xea>
    29c2:	f5 c0       	rjmp	.+490    	; 0x2bae <__vector_24+0x238>
    29c4:	88 31       	cpi	r24, 0x18	; 24
    29c6:	09 f4       	brne	.+2      	; 0x29ca <__vector_24+0x54>
    29c8:	4e c0       	rjmp	.+156    	; 0x2a66 <__vector_24+0xf0>
    29ca:	80 32       	cpi	r24, 0x20	; 32
    29cc:	09 f4       	brne	.+2      	; 0x29d0 <__vector_24+0x5a>
    29ce:	5f c0       	rjmp	.+190    	; 0x2a8e <__vector_24+0x118>
    29d0:	ee c0       	rjmp	.+476    	; 0x2bae <__vector_24+0x238>
    29d2:	80 34       	cpi	r24, 0x40	; 64
    29d4:	09 f4       	brne	.+2      	; 0x29d8 <__vector_24+0x62>
    29d6:	6a c0       	rjmp	.+212    	; 0x2aac <__vector_24+0x136>
    29d8:	58 f4       	brcc	.+22     	; 0x29f0 <__vector_24+0x7a>
    29da:	80 33       	cpi	r24, 0x30	; 48
    29dc:	09 f4       	brne	.+2      	; 0x29e0 <__vector_24+0x6a>
    29de:	57 c0       	rjmp	.+174    	; 0x2a8e <__vector_24+0x118>
    29e0:	88 33       	cpi	r24, 0x38	; 56
    29e2:	09 f0       	breq	.+2      	; 0x29e6 <__vector_24+0x70>
    29e4:	e4 c0       	rjmp	.+456    	; 0x2bae <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    29e6:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <twi_error>
      twi_releaseBus();
    29ea:	0e 94 b5 14 	call	0x296a	; 0x296a <twi_releaseBus>
      break;
    29ee:	df c0       	rjmp	.+446    	; 0x2bae <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    29f0:	80 35       	cpi	r24, 0x50	; 80
    29f2:	09 f4       	brne	.+2      	; 0x29f6 <__vector_24+0x80>
    29f4:	4f c0       	rjmp	.+158    	; 0x2a94 <__vector_24+0x11e>
    29f6:	88 35       	cpi	r24, 0x58	; 88
    29f8:	09 f4       	brne	.+2      	; 0x29fc <__vector_24+0x86>
    29fa:	5d c0       	rjmp	.+186    	; 0x2ab6 <__vector_24+0x140>
    29fc:	88 34       	cpi	r24, 0x48	; 72
    29fe:	09 f0       	breq	.+2      	; 0x2a02 <__vector_24+0x8c>
    2a00:	d6 c0       	rjmp	.+428    	; 0x2bae <__vector_24+0x238>
    2a02:	d3 c0       	rjmp	.+422    	; 0x2baa <__vector_24+0x234>
    2a04:	88 39       	cpi	r24, 0x98	; 152
    2a06:	09 f4       	brne	.+2      	; 0x2a0a <__vector_24+0x94>
    2a08:	c4 c0       	rjmp	.+392    	; 0x2b92 <__vector_24+0x21c>
    2a0a:	a8 f4       	brcc	.+42     	; 0x2a36 <__vector_24+0xc0>
    2a0c:	88 37       	cpi	r24, 0x78	; 120
    2a0e:	09 f4       	brne	.+2      	; 0x2a12 <__vector_24+0x9c>
    2a10:	67 c0       	rjmp	.+206    	; 0x2ae0 <__vector_24+0x16a>
    2a12:	38 f4       	brcc	.+14     	; 0x2a22 <__vector_24+0xac>
    2a14:	88 36       	cpi	r24, 0x68	; 104
    2a16:	09 f4       	brne	.+2      	; 0x2a1a <__vector_24+0xa4>
    2a18:	63 c0       	rjmp	.+198    	; 0x2ae0 <__vector_24+0x16a>
    2a1a:	80 37       	cpi	r24, 0x70	; 112
    2a1c:	09 f4       	brne	.+2      	; 0x2a20 <__vector_24+0xaa>
    2a1e:	60 c0       	rjmp	.+192    	; 0x2ae0 <__vector_24+0x16a>
    2a20:	c6 c0       	rjmp	.+396    	; 0x2bae <__vector_24+0x238>
    2a22:	88 38       	cpi	r24, 0x88	; 136
    2a24:	09 f4       	brne	.+2      	; 0x2a28 <__vector_24+0xb2>
    2a26:	b5 c0       	rjmp	.+362    	; 0x2b92 <__vector_24+0x21c>
    2a28:	80 39       	cpi	r24, 0x90	; 144
    2a2a:	09 f4       	brne	.+2      	; 0x2a2e <__vector_24+0xb8>
    2a2c:	5f c0       	rjmp	.+190    	; 0x2aec <__vector_24+0x176>
    2a2e:	80 38       	cpi	r24, 0x80	; 128
    2a30:	09 f0       	breq	.+2      	; 0x2a34 <__vector_24+0xbe>
    2a32:	bd c0       	rjmp	.+378    	; 0x2bae <__vector_24+0x238>
    2a34:	5b c0       	rjmp	.+182    	; 0x2aec <__vector_24+0x176>
    2a36:	80 3b       	cpi	r24, 0xB0	; 176
    2a38:	09 f4       	brne	.+2      	; 0x2a3c <__vector_24+0xc6>
    2a3a:	83 c0       	rjmp	.+262    	; 0x2b42 <__vector_24+0x1cc>
    2a3c:	38 f4       	brcc	.+14     	; 0x2a4c <__vector_24+0xd6>
    2a3e:	80 3a       	cpi	r24, 0xA0	; 160
    2a40:	09 f4       	brne	.+2      	; 0x2a44 <__vector_24+0xce>
    2a42:	66 c0       	rjmp	.+204    	; 0x2b10 <__vector_24+0x19a>
    2a44:	88 3a       	cpi	r24, 0xA8	; 168
    2a46:	09 f4       	brne	.+2      	; 0x2a4a <__vector_24+0xd4>
    2a48:	7c c0       	rjmp	.+248    	; 0x2b42 <__vector_24+0x1cc>
    2a4a:	b1 c0       	rjmp	.+354    	; 0x2bae <__vector_24+0x238>
    2a4c:	80 3c       	cpi	r24, 0xC0	; 192
    2a4e:	09 f4       	brne	.+2      	; 0x2a52 <__vector_24+0xdc>
    2a50:	a4 c0       	rjmp	.+328    	; 0x2b9a <__vector_24+0x224>
    2a52:	88 3c       	cpi	r24, 0xC8	; 200
    2a54:	09 f4       	brne	.+2      	; 0x2a58 <__vector_24+0xe2>
    2a56:	a1 c0       	rjmp	.+322    	; 0x2b9a <__vector_24+0x224>
    2a58:	88 3b       	cpi	r24, 0xB8	; 184
    2a5a:	09 f4       	brne	.+2      	; 0x2a5e <__vector_24+0xe8>
    2a5c:	87 c0       	rjmp	.+270    	; 0x2b6c <__vector_24+0x1f6>
    2a5e:	a7 c0       	rjmp	.+334    	; 0x2bae <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2a60:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <twi_slarw>
    2a64:	10 c0       	rjmp	.+32     	; 0x2a86 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2a66:	90 91 52 03 	lds	r25, 0x0352	; 0x800352 <twi_masterBufferIndex>
    2a6a:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <twi_masterBufferLength>
    2a6e:	98 17       	cp	r25, r24
    2a70:	70 f5       	brcc	.+92     	; 0x2ace <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2a72:	e0 91 52 03 	lds	r30, 0x0352	; 0x800352 <twi_masterBufferIndex>
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	8e 0f       	add	r24, r30
    2a7a:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <twi_masterBufferIndex>
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	ed 5a       	subi	r30, 0xAD	; 173
    2a82:	fc 4f       	sbci	r31, 0xFC	; 252
    2a84:	80 81       	ld	r24, Z
    2a86:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2a8a:	85 ec       	ldi	r24, 0xC5	; 197
    2a8c:	83 c0       	rjmp	.+262    	; 0x2b94 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2a8e:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <twi_error>
    2a92:	8b c0       	rjmp	.+278    	; 0x2baa <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2a94:	e0 91 52 03 	lds	r30, 0x0352	; 0x800352 <twi_masterBufferIndex>
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	8e 0f       	add	r24, r30
    2a9c:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <twi_masterBufferIndex>
    2aa0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	ed 5a       	subi	r30, 0xAD	; 173
    2aa8:	fc 4f       	sbci	r31, 0xFC	; 252
    2aaa:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2aac:	90 91 52 03 	lds	r25, 0x0352	; 0x800352 <twi_masterBufferIndex>
    2ab0:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <twi_masterBufferLength>
    2ab4:	6b c0       	rjmp	.+214    	; 0x2b8c <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2ab6:	e0 91 52 03 	lds	r30, 0x0352	; 0x800352 <twi_masterBufferIndex>
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	8e 0f       	add	r24, r30
    2abe:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <twi_masterBufferIndex>
    2ac2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	ed 5a       	subi	r30, 0xAD	; 173
    2aca:	fc 4f       	sbci	r31, 0xFC	; 252
    2acc:	80 83       	st	Z, r24
	if (twi_sendStop)
    2ace:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <twi_sendStop>
    2ad2:	81 11       	cpse	r24, r1
    2ad4:	6a c0       	rjmp	.+212    	; 0x2baa <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2adc:	84 ea       	ldi	r24, 0xA4	; 164
    2ade:	5e c0       	rjmp	.+188    	; 0x2b9c <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2ae0:	83 e0       	ldi	r24, 0x03	; 3
    2ae2:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2ae6:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <twi_rxBufferIndex>
    2aea:	cf cf       	rjmp	.-98     	; 0x2a8a <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2aec:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <twi_rxBufferIndex>
    2af0:	80 32       	cpi	r24, 0x20	; 32
    2af2:	08 f0       	brcs	.+2      	; 0x2af6 <__vector_24+0x180>
    2af4:	4e c0       	rjmp	.+156    	; 0x2b92 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2af6:	e0 91 0e 03 	lds	r30, 0x030E	; 0x80030e <twi_rxBufferIndex>
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	8e 0f       	add	r24, r30
    2afe:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <twi_rxBufferIndex>
    2b02:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2b06:	f0 e0       	ldi	r31, 0x00	; 0
    2b08:	e1 5f       	subi	r30, 0xF1	; 241
    2b0a:	fc 4f       	sbci	r31, 0xFC	; 252
    2b0c:	80 83       	st	Z, r24
    2b0e:	bd cf       	rjmp	.-134    	; 0x2a8a <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2b10:	0e 94 b5 14 	call	0x296a	; 0x296a <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2b14:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <twi_rxBufferIndex>
    2b18:	80 32       	cpi	r24, 0x20	; 32
    2b1a:	30 f4       	brcc	.+12     	; 0x2b28 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2b1c:	e0 91 0e 03 	lds	r30, 0x030E	; 0x80030e <twi_rxBufferIndex>
    2b20:	f0 e0       	ldi	r31, 0x00	; 0
    2b22:	e1 5f       	subi	r30, 0xF1	; 241
    2b24:	fc 4f       	sbci	r31, 0xFC	; 252
    2b26:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2b28:	60 91 0e 03 	lds	r22, 0x030E	; 0x80030e <twi_rxBufferIndex>
    2b2c:	70 e0       	ldi	r23, 0x00	; 0
    2b2e:	e0 91 73 03 	lds	r30, 0x0373	; 0x800373 <twi_onSlaveReceive>
    2b32:	f0 91 74 03 	lds	r31, 0x0374	; 0x800374 <twi_onSlaveReceive+0x1>
    2b36:	8f e0       	ldi	r24, 0x0F	; 15
    2b38:	93 e0       	ldi	r25, 0x03	; 3
    2b3a:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2b3c:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <twi_rxBufferIndex>
      break;
    2b40:	36 c0       	rjmp	.+108    	; 0x2bae <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2b42:	84 e0       	ldi	r24, 0x04	; 4
    2b44:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2b48:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2b4c:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2b50:	e0 91 75 03 	lds	r30, 0x0375	; 0x800375 <twi_onSlaveTransmit>
    2b54:	f0 91 76 03 	lds	r31, 0x0376	; 0x800376 <twi_onSlaveTransmit+0x1>
    2b58:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2b5a:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <twi_txBufferLength>
    2b5e:	81 11       	cpse	r24, r1
    2b60:	05 c0       	rjmp	.+10     	; 0x2b6c <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    2b62:	81 e0       	ldi	r24, 0x01	; 1
    2b64:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2b68:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2b6c:	e0 91 30 03 	lds	r30, 0x0330	; 0x800330 <twi_txBufferIndex>
    2b70:	81 e0       	ldi	r24, 0x01	; 1
    2b72:	8e 0f       	add	r24, r30
    2b74:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <twi_txBufferIndex>
    2b78:	f0 e0       	ldi	r31, 0x00	; 0
    2b7a:	ef 5c       	subi	r30, 0xCF	; 207
    2b7c:	fc 4f       	sbci	r31, 0xFC	; 252
    2b7e:	80 81       	ld	r24, Z
    2b80:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2b84:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <twi_txBufferIndex>
    2b88:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <twi_txBufferLength>
    2b8c:	98 17       	cp	r25, r24
    2b8e:	08 f4       	brcc	.+2      	; 0x2b92 <__vector_24+0x21c>
    2b90:	7c cf       	rjmp	.-264    	; 0x2a8a <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2b92:	85 e8       	ldi	r24, 0x85	; 133
    2b94:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2b98:	0a c0       	rjmp	.+20     	; 0x2bae <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2b9a:	85 ec       	ldi	r24, 0xC5	; 197
    2b9c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2ba0:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <twi_state>
      break;
    2ba4:	04 c0       	rjmp	.+8      	; 0x2bae <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2ba6:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <twi_error>
      twi_stop();
    2baa:	0e 94 ab 14 	call	0x2956	; 0x2956 <twi_stop>
      break;
  }
}
    2bae:	ff 91       	pop	r31
    2bb0:	ef 91       	pop	r30
    2bb2:	bf 91       	pop	r27
    2bb4:	af 91       	pop	r26
    2bb6:	9f 91       	pop	r25
    2bb8:	8f 91       	pop	r24
    2bba:	7f 91       	pop	r23
    2bbc:	6f 91       	pop	r22
    2bbe:	5f 91       	pop	r21
    2bc0:	4f 91       	pop	r20
    2bc2:	3f 91       	pop	r19
    2bc4:	2f 91       	pop	r18
    2bc6:	0f 90       	pop	r0
    2bc8:	0f be       	out	0x3f, r0	; 63
    2bca:	0f 90       	pop	r0
    2bcc:	1f 90       	pop	r1
    2bce:	18 95       	reti

00002bd0 <__udivmodqi4>:
    2bd0:	99 1b       	sub	r25, r25
    2bd2:	79 e0       	ldi	r23, 0x09	; 9
    2bd4:	04 c0       	rjmp	.+8      	; 0x2bde <__udivmodqi4_ep>

00002bd6 <__udivmodqi4_loop>:
    2bd6:	99 1f       	adc	r25, r25
    2bd8:	96 17       	cp	r25, r22
    2bda:	08 f0       	brcs	.+2      	; 0x2bde <__udivmodqi4_ep>
    2bdc:	96 1b       	sub	r25, r22

00002bde <__udivmodqi4_ep>:
    2bde:	88 1f       	adc	r24, r24
    2be0:	7a 95       	dec	r23
    2be2:	c9 f7       	brne	.-14     	; 0x2bd6 <__udivmodqi4_loop>
    2be4:	80 95       	com	r24
    2be6:	08 95       	ret

00002be8 <__divmodhi4>:
    2be8:	97 fb       	bst	r25, 7
    2bea:	07 2e       	mov	r0, r23
    2bec:	16 f4       	brtc	.+4      	; 0x2bf2 <__divmodhi4+0xa>
    2bee:	00 94       	com	r0
    2bf0:	07 d0       	rcall	.+14     	; 0x2c00 <__divmodhi4_neg1>
    2bf2:	77 fd       	sbrc	r23, 7
    2bf4:	09 d0       	rcall	.+18     	; 0x2c08 <__divmodhi4_neg2>
    2bf6:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <__udivmodhi4>
    2bfa:	07 fc       	sbrc	r0, 7
    2bfc:	05 d0       	rcall	.+10     	; 0x2c08 <__divmodhi4_neg2>
    2bfe:	3e f4       	brtc	.+14     	; 0x2c0e <__divmodhi4_exit>

00002c00 <__divmodhi4_neg1>:
    2c00:	90 95       	com	r25
    2c02:	81 95       	neg	r24
    2c04:	9f 4f       	sbci	r25, 0xFF	; 255
    2c06:	08 95       	ret

00002c08 <__divmodhi4_neg2>:
    2c08:	70 95       	com	r23
    2c0a:	61 95       	neg	r22
    2c0c:	7f 4f       	sbci	r23, 0xFF	; 255

00002c0e <__divmodhi4_exit>:
    2c0e:	08 95       	ret

00002c10 <__udivmodsi4>:
    2c10:	a1 e2       	ldi	r26, 0x21	; 33
    2c12:	1a 2e       	mov	r1, r26
    2c14:	aa 1b       	sub	r26, r26
    2c16:	bb 1b       	sub	r27, r27
    2c18:	fd 01       	movw	r30, r26
    2c1a:	0d c0       	rjmp	.+26     	; 0x2c36 <__udivmodsi4_ep>

00002c1c <__udivmodsi4_loop>:
    2c1c:	aa 1f       	adc	r26, r26
    2c1e:	bb 1f       	adc	r27, r27
    2c20:	ee 1f       	adc	r30, r30
    2c22:	ff 1f       	adc	r31, r31
    2c24:	a2 17       	cp	r26, r18
    2c26:	b3 07       	cpc	r27, r19
    2c28:	e4 07       	cpc	r30, r20
    2c2a:	f5 07       	cpc	r31, r21
    2c2c:	20 f0       	brcs	.+8      	; 0x2c36 <__udivmodsi4_ep>
    2c2e:	a2 1b       	sub	r26, r18
    2c30:	b3 0b       	sbc	r27, r19
    2c32:	e4 0b       	sbc	r30, r20
    2c34:	f5 0b       	sbc	r31, r21

00002c36 <__udivmodsi4_ep>:
    2c36:	66 1f       	adc	r22, r22
    2c38:	77 1f       	adc	r23, r23
    2c3a:	88 1f       	adc	r24, r24
    2c3c:	99 1f       	adc	r25, r25
    2c3e:	1a 94       	dec	r1
    2c40:	69 f7       	brne	.-38     	; 0x2c1c <__udivmodsi4_loop>
    2c42:	60 95       	com	r22
    2c44:	70 95       	com	r23
    2c46:	80 95       	com	r24
    2c48:	90 95       	com	r25
    2c4a:	9b 01       	movw	r18, r22
    2c4c:	ac 01       	movw	r20, r24
    2c4e:	bd 01       	movw	r22, r26
    2c50:	cf 01       	movw	r24, r30
    2c52:	08 95       	ret

00002c54 <__tablejump2__>:
    2c54:	ee 0f       	add	r30, r30
    2c56:	ff 1f       	adc	r31, r31
    2c58:	05 90       	lpm	r0, Z+
    2c5a:	f4 91       	lpm	r31, Z
    2c5c:	e0 2d       	mov	r30, r0
    2c5e:	09 94       	ijmp

00002c60 <__umulhisi3>:
    2c60:	a2 9f       	mul	r26, r18
    2c62:	b0 01       	movw	r22, r0
    2c64:	b3 9f       	mul	r27, r19
    2c66:	c0 01       	movw	r24, r0
    2c68:	a3 9f       	mul	r26, r19
    2c6a:	70 0d       	add	r23, r0
    2c6c:	81 1d       	adc	r24, r1
    2c6e:	11 24       	eor	r1, r1
    2c70:	91 1d       	adc	r25, r1
    2c72:	b2 9f       	mul	r27, r18
    2c74:	70 0d       	add	r23, r0
    2c76:	81 1d       	adc	r24, r1
    2c78:	11 24       	eor	r1, r1
    2c7a:	91 1d       	adc	r25, r1
    2c7c:	08 95       	ret

00002c7e <__muluhisi3>:
    2c7e:	0e 94 30 16 	call	0x2c60	; 0x2c60 <__umulhisi3>
    2c82:	a5 9f       	mul	r26, r21
    2c84:	90 0d       	add	r25, r0
    2c86:	b4 9f       	mul	r27, r20
    2c88:	90 0d       	add	r25, r0
    2c8a:	a4 9f       	mul	r26, r20
    2c8c:	80 0d       	add	r24, r0
    2c8e:	91 1d       	adc	r25, r1
    2c90:	11 24       	eor	r1, r1
    2c92:	08 95       	ret

00002c94 <__mulshisi3>:
    2c94:	b7 ff       	sbrs	r27, 7
    2c96:	0c 94 3f 16 	jmp	0x2c7e	; 0x2c7e <__muluhisi3>

00002c9a <__mulohisi3>:
    2c9a:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <__muluhisi3>
    2c9e:	82 1b       	sub	r24, r18
    2ca0:	93 0b       	sbc	r25, r19
    2ca2:	08 95       	ret

00002ca4 <__udivmodhi4>:
    2ca4:	aa 1b       	sub	r26, r26
    2ca6:	bb 1b       	sub	r27, r27
    2ca8:	51 e1       	ldi	r21, 0x11	; 17
    2caa:	07 c0       	rjmp	.+14     	; 0x2cba <__udivmodhi4_ep>

00002cac <__udivmodhi4_loop>:
    2cac:	aa 1f       	adc	r26, r26
    2cae:	bb 1f       	adc	r27, r27
    2cb0:	a6 17       	cp	r26, r22
    2cb2:	b7 07       	cpc	r27, r23
    2cb4:	10 f0       	brcs	.+4      	; 0x2cba <__udivmodhi4_ep>
    2cb6:	a6 1b       	sub	r26, r22
    2cb8:	b7 0b       	sbc	r27, r23

00002cba <__udivmodhi4_ep>:
    2cba:	88 1f       	adc	r24, r24
    2cbc:	99 1f       	adc	r25, r25
    2cbe:	5a 95       	dec	r21
    2cc0:	a9 f7       	brne	.-22     	; 0x2cac <__udivmodhi4_loop>
    2cc2:	80 95       	com	r24
    2cc4:	90 95       	com	r25
    2cc6:	bc 01       	movw	r22, r24
    2cc8:	cd 01       	movw	r24, r26
    2cca:	08 95       	ret

00002ccc <eeprom_read_byte>:
    2ccc:	f9 99       	sbic	0x1f, 1	; 31
    2cce:	fe cf       	rjmp	.-4      	; 0x2ccc <eeprom_read_byte>
    2cd0:	92 bd       	out	0x22, r25	; 34
    2cd2:	81 bd       	out	0x21, r24	; 33
    2cd4:	f8 9a       	sbi	0x1f, 0	; 31
    2cd6:	99 27       	eor	r25, r25
    2cd8:	80 b5       	in	r24, 0x20	; 32
    2cda:	08 95       	ret

00002cdc <eeprom_write_byte>:
    2cdc:	26 2f       	mov	r18, r22

00002cde <eeprom_write_r18>:
    2cde:	f9 99       	sbic	0x1f, 1	; 31
    2ce0:	fe cf       	rjmp	.-4      	; 0x2cde <eeprom_write_r18>
    2ce2:	1f ba       	out	0x1f, r1	; 31
    2ce4:	92 bd       	out	0x22, r25	; 34
    2ce6:	81 bd       	out	0x21, r24	; 33
    2ce8:	20 bd       	out	0x20, r18	; 32
    2cea:	0f b6       	in	r0, 0x3f	; 63
    2cec:	f8 94       	cli
    2cee:	fa 9a       	sbi	0x1f, 2	; 31
    2cf0:	f9 9a       	sbi	0x1f, 1	; 31
    2cf2:	0f be       	out	0x3f, r0	; 63
    2cf4:	01 96       	adiw	r24, 0x01	; 1
    2cf6:	08 95       	ret

00002cf8 <_exit>:
    2cf8:	f8 94       	cli

00002cfa <__stop_program>:
    2cfa:	ff cf       	rjmp	.-2      	; 0x2cfa <__stop_program>
