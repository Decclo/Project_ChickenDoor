
ArduSketch3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  00001dae  00001e42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001dae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000018e  00800172  00800172  00001eb4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001eb4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ee4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000680  00000000  00000000  00001f28  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e14a  00000000  00000000  000025a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002bad  00000000  00000000  000106f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000037d8  00000000  00000000  0001329f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001368  00000000  00000000  00016a78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000033b2  00000000  00000000  00017de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000066dc  00000000  00000000  0001b192  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000608  00000000  00000000  0002186e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6f 00 	jmp	0xde	; 0xde <__ctors_end>
       4:	0c 94 0b 06 	jmp	0xc16	; 0xc16 <__vector_1>
       8:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__vector_2>
       c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      10:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      14:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      18:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      1c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      20:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      24:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      28:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      2c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      30:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      34:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      38:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      3c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      40:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__vector_16>
      44:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      48:	0c 94 74 04 	jmp	0x8e8	; 0x8e8 <__vector_18>
      4c:	0c 94 a6 04 	jmp	0x94c	; 0x94c <__vector_19>
      50:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      54:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      58:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      5c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      60:	0c 94 d6 0c 	jmp	0x19ac	; 0x19ac <__vector_24>
      64:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	45 72       	andi	r20, 0x25	; 37
      6a:	72 4a       	sbci	r23, 0xA2	; 162
      6c:	61 6e       	ori	r22, 0xE1	; 225
      6e:	46 65       	ori	r20, 0x56	; 86
      70:	62 4d       	sbci	r22, 0xD2	; 210
      72:	61 72       	andi	r22, 0x21	; 33
      74:	41 70       	andi	r20, 0x01	; 1
      76:	72 4d       	sbci	r23, 0xD2	; 210
      78:	61 79       	andi	r22, 0x91	; 145
      7a:	4a 75       	andi	r20, 0x5A	; 90
      7c:	6e 4a       	sbci	r22, 0xAE	; 174
      7e:	75 6c       	ori	r23, 0xC5	; 197
      80:	41 75       	andi	r20, 0x51	; 81
      82:	67 53       	subi	r22, 0x37	; 55
      84:	65 70       	andi	r22, 0x05	; 5
      86:	4f 63       	ori	r20, 0x3F	; 63
      88:	74 4e       	sbci	r23, 0xE4	; 228
      8a:	6f 76       	andi	r22, 0x6F	; 111
      8c:	44 65       	ori	r20, 0x54	; 84
      8e:	63 00       	.word	0x0063	; ????

00000090 <digital_pin_to_timer_PGM>:
      90:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      a0:	00 00 00 00                                         ....

000000a4 <digital_pin_to_bit_mask_PGM>:
      a4:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      b4:	04 08 10 20                                         ... 

000000b8 <digital_pin_to_port_PGM>:
      b8:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      c8:	03 03 03 03                                         ....

000000cc <port_to_output_PGM>:
      cc:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000d6 <__ctors_start>:
      d6:	4a 03       	fmul	r20, r18
      d8:	cc 04       	cpc	r12, r12
      da:	47 07       	cpc	r20, r23
      dc:	dd 0b       	sbc	r29, r29

000000de <__ctors_end>:
      de:	11 24       	eor	r1, r1
      e0:	1f be       	out	0x3f, r1	; 63
      e2:	cf ef       	ldi	r28, 0xFF	; 255
      e4:	d8 e0       	ldi	r29, 0x08	; 8
      e6:	de bf       	out	0x3e, r29	; 62
      e8:	cd bf       	out	0x3d, r28	; 61

000000ea <__do_copy_data>:
      ea:	11 e0       	ldi	r17, 0x01	; 1
      ec:	a0 e0       	ldi	r26, 0x00	; 0
      ee:	b1 e0       	ldi	r27, 0x01	; 1
      f0:	ee ea       	ldi	r30, 0xAE	; 174
      f2:	fd e1       	ldi	r31, 0x1D	; 29
      f4:	02 c0       	rjmp	.+4      	; 0xfa <__do_copy_data+0x10>
      f6:	05 90       	lpm	r0, Z+
      f8:	0d 92       	st	X+, r0
      fa:	a2 37       	cpi	r26, 0x72	; 114
      fc:	b1 07       	cpc	r27, r17
      fe:	d9 f7       	brne	.-10     	; 0xf6 <__do_copy_data+0xc>

00000100 <__do_clear_bss>:
     100:	23 e0       	ldi	r18, 0x03	; 3
     102:	a2 e7       	ldi	r26, 0x72	; 114
     104:	b1 e0       	ldi	r27, 0x01	; 1
     106:	01 c0       	rjmp	.+2      	; 0x10a <.do_clear_bss_start>

00000108 <.do_clear_bss_loop>:
     108:	1d 92       	st	X+, r1

0000010a <.do_clear_bss_start>:
     10a:	a0 30       	cpi	r26, 0x00	; 0
     10c:	b2 07       	cpc	r27, r18
     10e:	e1 f7       	brne	.-8      	; 0x108 <.do_clear_bss_loop>

00000110 <__do_global_ctors>:
     110:	10 e0       	ldi	r17, 0x00	; 0
     112:	cf e6       	ldi	r28, 0x6F	; 111
     114:	d0 e0       	ldi	r29, 0x00	; 0
     116:	04 c0       	rjmp	.+8      	; 0x120 <__do_global_ctors+0x10>
     118:	21 97       	sbiw	r28, 0x01	; 1
     11a:	fe 01       	movw	r30, r28
     11c:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <__tablejump2__>
     120:	cb 36       	cpi	r28, 0x6B	; 107
     122:	d1 07       	cpc	r29, r17
     124:	c9 f7       	brne	.-14     	; 0x118 <__do_global_ctors+0x8>
     126:	0e 94 de 02 	call	0x5bc	; 0x5bc <main>
     12a:	0c 94 d5 0e 	jmp	0x1daa	; 0x1daa <_exit>

0000012e <__bad_interrupt>:
     12e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000132 <_Z8alarmIsrv>:
	u.long_variable = makeTime(TM);
	for (int i = 0; i < 7; i++)
	{
		eeprom_write_byte((uint8_t *)alarm2_addr+i, u.byte_array[0+i]);
	}
}
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <alarmIsrWasCalled>
     138:	08 95       	ret

0000013a <_ZlsR5PrintRK6_BASED>:
     13a:	cf 93       	push	r28
     13c:	df 93       	push	r29
     13e:	ec 01       	movw	r28, r24
     140:	fb 01       	movw	r30, r22
     142:	24 81       	ldd	r18, Z+4	; 0x04
     144:	35 81       	ldd	r19, Z+5	; 0x05
     146:	40 81       	ld	r20, Z
     148:	51 81       	ldd	r21, Z+1	; 0x01
     14a:	62 81       	ldd	r22, Z+2	; 0x02
     14c:	73 81       	ldd	r23, Z+3	; 0x03
     14e:	0e 94 a2 05 	call	0xb44	; 0xb44 <_ZN5Print5printEli>
     152:	ce 01       	movw	r24, r28
     154:	df 91       	pop	r29
     156:	cf 91       	pop	r28
     158:	08 95       	ret

0000015a <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t>:
     15a:	ef 92       	push	r14
     15c:	ff 92       	push	r15
     15e:	0f 93       	push	r16
     160:	1f 93       	push	r17
     162:	cf 93       	push	r28
     164:	df 93       	push	r29
     166:	cd b7       	in	r28, 0x3d	; 61
     168:	de b7       	in	r29, 0x3e	; 62
     16a:	27 97       	sbiw	r28, 0x07	; 7
     16c:	0f b6       	in	r0, 0x3f	; 63
     16e:	f8 94       	cli
     170:	de bf       	out	0x3e, r29	; 62
     172:	0f be       	out	0x3f, r0	; 63
     174:	cd bf       	out	0x3d, r28	; 61
     176:	5e 83       	std	Y+6, r21	; 0x06
     178:	f2 2e       	mov	r15, r18
     17a:	e4 2e       	mov	r14, r20
     17c:	89 e0       	ldi	r24, 0x09	; 9
     17e:	84 17       	cp	r24, r20
     180:	18 f4       	brcc	.+6      	; 0x188 <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0x2e>
     182:	67 e4       	ldi	r22, 0x47	; 71
     184:	71 e0       	ldi	r23, 0x01	; 1
     186:	02 c0       	rjmp	.+4      	; 0x18c <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0x32>
     188:	65 e0       	ldi	r22, 0x05	; 5
     18a:	71 e0       	ldi	r23, 0x01	; 1
     18c:	83 e8       	ldi	r24, 0x83	; 131
     18e:	91 e0       	ldi	r25, 0x01	; 1
     190:	0e 94 38 05 	call	0xa70	; 0xa70 <_ZN5Print5printEPKc>
     194:	4a e0       	ldi	r20, 0x0A	; 10
     196:	50 e0       	ldi	r21, 0x00	; 0
     198:	6e 2d       	mov	r22, r14
     19a:	83 e8       	ldi	r24, 0x83	; 131
     19c:	91 e0       	ldi	r25, 0x01	; 1
     19e:	0e 94 9b 05 	call	0xb36	; 0xb36 <_ZN5Print5printEhi>
     1a2:	60 e2       	ldi	r22, 0x20	; 32
     1a4:	83 e8       	ldi	r24, 0x83	; 131
     1a6:	91 e0       	ldi	r25, 0x01	; 1
     1a8:	0e 94 3a 05 	call	0xa74	; 0xa74 <_ZN5Print5printEc>
     1ac:	8e 81       	ldd	r24, Y+6	; 0x06
     1ae:	0e 94 9f 08 	call	0x113e	; 0x113e <_Z13monthShortStrh>
     1b2:	bc 01       	movw	r22, r24
     1b4:	83 e8       	ldi	r24, 0x83	; 131
     1b6:	91 e0       	ldi	r25, 0x01	; 1
     1b8:	0e 94 38 05 	call	0xa70	; 0xa70 <_ZN5Print5printEPKc>
     1bc:	60 e2       	ldi	r22, 0x20	; 32
     1be:	83 e8       	ldi	r24, 0x83	; 131
     1c0:	91 e0       	ldi	r25, 0x01	; 1
     1c2:	0e 94 3a 05 	call	0xa74	; 0xa74 <_ZN5Print5printEc>
     1c6:	89 e0       	ldi	r24, 0x09	; 9
     1c8:	8f 15       	cp	r24, r15
     1ca:	18 f4       	brcc	.+6      	; 0x1d2 <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0x78>
     1cc:	67 e4       	ldi	r22, 0x47	; 71
     1ce:	71 e0       	ldi	r23, 0x01	; 1
     1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0x7c>
     1d2:	65 e0       	ldi	r22, 0x05	; 5
     1d4:	71 e0       	ldi	r23, 0x01	; 1
     1d6:	83 e8       	ldi	r24, 0x83	; 131
     1d8:	91 e0       	ldi	r25, 0x01	; 1
     1da:	0e 94 38 05 	call	0xa70	; 0xa70 <_ZN5Print5printEPKc>
     1de:	4a e0       	ldi	r20, 0x0A	; 10
     1e0:	50 e0       	ldi	r21, 0x00	; 0
     1e2:	6f 2d       	mov	r22, r15
     1e4:	83 e8       	ldi	r24, 0x83	; 131
     1e6:	91 e0       	ldi	r25, 0x01	; 1
     1e8:	0e 94 9b 05 	call	0xb36	; 0xb36 <_ZN5Print5printEhi>
     1ec:	6a e3       	ldi	r22, 0x3A	; 58
     1ee:	83 e8       	ldi	r24, 0x83	; 131
     1f0:	91 e0       	ldi	r25, 0x01	; 1
     1f2:	0e 94 3a 05 	call	0xa74	; 0xa74 <_ZN5Print5printEc>
     1f6:	1a 30       	cpi	r17, 0x0A	; 10
     1f8:	18 f0       	brcs	.+6      	; 0x200 <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0xa6>
     1fa:	67 e4       	ldi	r22, 0x47	; 71
     1fc:	71 e0       	ldi	r23, 0x01	; 1
     1fe:	02 c0       	rjmp	.+4      	; 0x204 <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0xaa>
     200:	65 e0       	ldi	r22, 0x05	; 5
     202:	71 e0       	ldi	r23, 0x01	; 1
     204:	83 e8       	ldi	r24, 0x83	; 131
     206:	91 e0       	ldi	r25, 0x01	; 1
     208:	0e 94 38 05 	call	0xa70	; 0xa70 <_ZN5Print5printEPKc>
     20c:	4a e0       	ldi	r20, 0x0A	; 10
     20e:	50 e0       	ldi	r21, 0x00	; 0
     210:	61 2f       	mov	r22, r17
     212:	83 e8       	ldi	r24, 0x83	; 131
     214:	91 e0       	ldi	r25, 0x01	; 1
     216:	0e 94 9b 05 	call	0xb36	; 0xb36 <_ZN5Print5printEhi>
     21a:	6a e3       	ldi	r22, 0x3A	; 58
     21c:	83 e8       	ldi	r24, 0x83	; 131
     21e:	91 e0       	ldi	r25, 0x01	; 1
     220:	0e 94 3a 05 	call	0xa74	; 0xa74 <_ZN5Print5printEc>
     224:	0a 30       	cpi	r16, 0x0A	; 10
     226:	18 f0       	brcs	.+6      	; 0x22e <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0xd4>
     228:	67 e4       	ldi	r22, 0x47	; 71
     22a:	71 e0       	ldi	r23, 0x01	; 1
     22c:	02 c0       	rjmp	.+4      	; 0x232 <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0xd8>
     22e:	65 e0       	ldi	r22, 0x05	; 5
     230:	71 e0       	ldi	r23, 0x01	; 1
     232:	83 e8       	ldi	r24, 0x83	; 131
     234:	91 e0       	ldi	r25, 0x01	; 1
     236:	0e 94 38 05 	call	0xa70	; 0xa70 <_ZN5Print5printEPKc>
     23a:	4a e0       	ldi	r20, 0x0A	; 10
     23c:	50 e0       	ldi	r21, 0x00	; 0
     23e:	60 2f       	mov	r22, r16
     240:	83 e8       	ldi	r24, 0x83	; 131
     242:	91 e0       	ldi	r25, 0x01	; 1
     244:	0e 94 9b 05 	call	0xb36	; 0xb36 <_ZN5Print5printEhi>
     248:	83 e8       	ldi	r24, 0x83	; 131
     24a:	91 e0       	ldi	r25, 0x01	; 1
     24c:	27 96       	adiw	r28, 0x07	; 7
     24e:	0f b6       	in	r0, 0x3f	; 63
     250:	f8 94       	cli
     252:	de bf       	out	0x3e, r29	; 62
     254:	0f be       	out	0x3f, r0	; 63
     256:	cd bf       	out	0x3d, r28	; 61
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	1f 91       	pop	r17
     25e:	0f 91       	pop	r16
     260:	ff 90       	pop	r15
     262:	ef 90       	pop	r14
     264:	0c 94 41 05 	jmp	0xa82	; 0xa82 <_ZN5Print7printlnEv>

00000268 <_ZN23Human_Machine_Interface13printDateTimeEm>:
     268:	cf 92       	push	r12
     26a:	df 92       	push	r13
     26c:	ef 92       	push	r14
     26e:	ff 92       	push	r15
     270:	0f 93       	push	r16
     272:	1f 93       	push	r17
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
     278:	00 d0       	rcall	.+0      	; 0x27a <_ZN23Human_Machine_Interface13printDateTimeEm+0x12>
     27a:	00 d0       	rcall	.+0      	; 0x27c <_ZN23Human_Machine_Interface13printDateTimeEm+0x14>
     27c:	00 d0       	rcall	.+0      	; 0x27e <_ZN23Human_Machine_Interface13printDateTimeEm+0x16>
     27e:	cd b7       	in	r28, 0x3d	; 61
     280:	de b7       	in	r29, 0x3e	; 62
     282:	6a 01       	movw	r12, r20
     284:	7b 01       	movw	r14, r22
     286:	cb 01       	movw	r24, r22
     288:	ba 01       	movw	r22, r20
     28a:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <_Z3daym>
     28e:	09 2e       	mov	r0, r25
     290:	00 0c       	add	r0, r0
     292:	aa 0b       	sbc	r26, r26
     294:	bb 0b       	sbc	r27, r27
     296:	89 83       	std	Y+1, r24	; 0x01
     298:	9a 83       	std	Y+2, r25	; 0x02
     29a:	ab 83       	std	Y+3, r26	; 0x03
     29c:	bc 83       	std	Y+4, r27	; 0x04
     29e:	8a e0       	ldi	r24, 0x0A	; 10
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	9e 83       	std	Y+6, r25	; 0x06
     2a4:	8d 83       	std	Y+5, r24	; 0x05
     2a6:	c7 01       	movw	r24, r14
     2a8:	b6 01       	movw	r22, r12
     2aa:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <_Z3daym>
     2ae:	0a 97       	sbiw	r24, 0x0a	; 10
     2b0:	1c f0       	brlt	.+6      	; 0x2b8 <_ZN23Human_Machine_Interface13printDateTimeEm+0x50>
     2b2:	67 e4       	ldi	r22, 0x47	; 71
     2b4:	71 e0       	ldi	r23, 0x01	; 1
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <_ZN23Human_Machine_Interface13printDateTimeEm+0x54>
     2b8:	65 e0       	ldi	r22, 0x05	; 5
     2ba:	71 e0       	ldi	r23, 0x01	; 1
     2bc:	83 e8       	ldi	r24, 0x83	; 131
     2be:	91 e0       	ldi	r25, 0x01	; 1
     2c0:	0e 94 38 05 	call	0xa70	; 0xa70 <_ZN5Print5printEPKc>
     2c4:	be 01       	movw	r22, r28
     2c6:	6f 5f       	subi	r22, 0xFF	; 255
     2c8:	7f 4f       	sbci	r23, 0xFF	; 255
     2ca:	83 e8       	ldi	r24, 0x83	; 131
     2cc:	91 e0       	ldi	r25, 0x01	; 1
     2ce:	0e 94 9d 00 	call	0x13a	; 0x13a <_ZlsR5PrintRK6_BASED>
     2d2:	60 e2       	ldi	r22, 0x20	; 32
     2d4:	0e 94 3a 05 	call	0xa74	; 0xa74 <_ZN5Print5printEc>
     2d8:	c7 01       	movw	r24, r14
     2da:	b6 01       	movw	r22, r12
     2dc:	0e 94 df 09 	call	0x13be	; 0x13be <_Z4yearm>
     2e0:	09 2e       	mov	r0, r25
     2e2:	00 0c       	add	r0, r0
     2e4:	aa 0b       	sbc	r26, r26
     2e6:	bb 0b       	sbc	r27, r27
     2e8:	89 83       	std	Y+1, r24	; 0x01
     2ea:	9a 83       	std	Y+2, r25	; 0x02
     2ec:	ab 83       	std	Y+3, r26	; 0x03
     2ee:	bc 83       	std	Y+4, r27	; 0x04
     2f0:	0a e0       	ldi	r16, 0x0A	; 10
     2f2:	10 e0       	ldi	r17, 0x00	; 0
     2f4:	1e 83       	std	Y+6, r17	; 0x06
     2f6:	0d 83       	std	Y+5, r16	; 0x05
     2f8:	c7 01       	movw	r24, r14
     2fa:	b6 01       	movw	r22, r12
     2fc:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <_Z5monthm>
     300:	0e 94 9f 08 	call	0x113e	; 0x113e <_Z13monthShortStrh>
     304:	bc 01       	movw	r22, r24
     306:	83 e8       	ldi	r24, 0x83	; 131
     308:	91 e0       	ldi	r25, 0x01	; 1
     30a:	0e 94 38 05 	call	0xa70	; 0xa70 <_ZN5Print5printEPKc>
     30e:	67 e1       	ldi	r22, 0x17	; 23
     310:	71 e0       	ldi	r23, 0x01	; 1
     312:	83 e8       	ldi	r24, 0x83	; 131
     314:	91 e0       	ldi	r25, 0x01	; 1
     316:	0e 94 38 05 	call	0xa70	; 0xa70 <_ZN5Print5printEPKc>
     31a:	be 01       	movw	r22, r28
     31c:	6f 5f       	subi	r22, 0xFF	; 255
     31e:	7f 4f       	sbci	r23, 0xFF	; 255
     320:	83 e8       	ldi	r24, 0x83	; 131
     322:	91 e0       	ldi	r25, 0x01	; 1
     324:	0e 94 9d 00 	call	0x13a	; 0x13a <_ZlsR5PrintRK6_BASED>
     328:	60 e2       	ldi	r22, 0x20	; 32
     32a:	0e 94 3a 05 	call	0xa74	; 0xa74 <_ZN5Print5printEc>
     32e:	c7 01       	movw	r24, r14
     330:	b6 01       	movw	r22, r12
     332:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z4hourm>
     336:	09 2e       	mov	r0, r25
     338:	00 0c       	add	r0, r0
     33a:	aa 0b       	sbc	r26, r26
     33c:	bb 0b       	sbc	r27, r27
     33e:	89 83       	std	Y+1, r24	; 0x01
     340:	9a 83       	std	Y+2, r25	; 0x02
     342:	ab 83       	std	Y+3, r26	; 0x03
     344:	bc 83       	std	Y+4, r27	; 0x04
     346:	1e 83       	std	Y+6, r17	; 0x06
     348:	0d 83       	std	Y+5, r16	; 0x05
     34a:	c7 01       	movw	r24, r14
     34c:	b6 01       	movw	r22, r12
     34e:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z4hourm>
     352:	0a 97       	sbiw	r24, 0x0a	; 10
     354:	1c f0       	brlt	.+6      	; 0x35c <_ZN23Human_Machine_Interface13printDateTimeEm+0xf4>
     356:	67 e4       	ldi	r22, 0x47	; 71
     358:	71 e0       	ldi	r23, 0x01	; 1
     35a:	02 c0       	rjmp	.+4      	; 0x360 <_ZN23Human_Machine_Interface13printDateTimeEm+0xf8>
     35c:	65 e0       	ldi	r22, 0x05	; 5
     35e:	71 e0       	ldi	r23, 0x01	; 1
     360:	83 e8       	ldi	r24, 0x83	; 131
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	0e 94 38 05 	call	0xa70	; 0xa70 <_ZN5Print5printEPKc>
     368:	be 01       	movw	r22, r28
     36a:	6f 5f       	subi	r22, 0xFF	; 255
     36c:	7f 4f       	sbci	r23, 0xFF	; 255
     36e:	83 e8       	ldi	r24, 0x83	; 131
     370:	91 e0       	ldi	r25, 0x01	; 1
     372:	0e 94 9d 00 	call	0x13a	; 0x13a <_ZlsR5PrintRK6_BASED>
     376:	6a e3       	ldi	r22, 0x3A	; 58
     378:	0e 94 3a 05 	call	0xa74	; 0xa74 <_ZN5Print5printEc>
     37c:	c7 01       	movw	r24, r14
     37e:	b6 01       	movw	r22, r12
     380:	0e 94 c7 09 	call	0x138e	; 0x138e <_Z6minutem>
     384:	09 2e       	mov	r0, r25
     386:	00 0c       	add	r0, r0
     388:	aa 0b       	sbc	r26, r26
     38a:	bb 0b       	sbc	r27, r27
     38c:	89 83       	std	Y+1, r24	; 0x01
     38e:	9a 83       	std	Y+2, r25	; 0x02
     390:	ab 83       	std	Y+3, r26	; 0x03
     392:	bc 83       	std	Y+4, r27	; 0x04
     394:	8a e0       	ldi	r24, 0x0A	; 10
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	9e 83       	std	Y+6, r25	; 0x06
     39a:	8d 83       	std	Y+5, r24	; 0x05
     39c:	c7 01       	movw	r24, r14
     39e:	b6 01       	movw	r22, r12
     3a0:	0e 94 c7 09 	call	0x138e	; 0x138e <_Z6minutem>
     3a4:	0a 97       	sbiw	r24, 0x0a	; 10
     3a6:	1c f0       	brlt	.+6      	; 0x3ae <_ZN23Human_Machine_Interface13printDateTimeEm+0x146>
     3a8:	67 e4       	ldi	r22, 0x47	; 71
     3aa:	71 e0       	ldi	r23, 0x01	; 1
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <_ZN23Human_Machine_Interface13printDateTimeEm+0x14a>
     3ae:	65 e0       	ldi	r22, 0x05	; 5
     3b0:	71 e0       	ldi	r23, 0x01	; 1
     3b2:	83 e8       	ldi	r24, 0x83	; 131
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	0e 94 38 05 	call	0xa70	; 0xa70 <_ZN5Print5printEPKc>
     3ba:	be 01       	movw	r22, r28
     3bc:	6f 5f       	subi	r22, 0xFF	; 255
     3be:	7f 4f       	sbci	r23, 0xFF	; 255
     3c0:	83 e8       	ldi	r24, 0x83	; 131
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	0e 94 9d 00 	call	0x13a	; 0x13a <_ZlsR5PrintRK6_BASED>
     3c8:	6a e3       	ldi	r22, 0x3A	; 58
     3ca:	0e 94 3a 05 	call	0xa74	; 0xa74 <_ZN5Print5printEc>
     3ce:	c7 01       	movw	r24, r14
     3d0:	b6 01       	movw	r22, r12
     3d2:	0e 94 cd 09 	call	0x139a	; 0x139a <_Z6secondm>
     3d6:	09 2e       	mov	r0, r25
     3d8:	00 0c       	add	r0, r0
     3da:	aa 0b       	sbc	r26, r26
     3dc:	bb 0b       	sbc	r27, r27
     3de:	89 83       	std	Y+1, r24	; 0x01
     3e0:	9a 83       	std	Y+2, r25	; 0x02
     3e2:	ab 83       	std	Y+3, r26	; 0x03
     3e4:	bc 83       	std	Y+4, r27	; 0x04
     3e6:	8a e0       	ldi	r24, 0x0A	; 10
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	9e 83       	std	Y+6, r25	; 0x06
     3ec:	8d 83       	std	Y+5, r24	; 0x05
     3ee:	c7 01       	movw	r24, r14
     3f0:	b6 01       	movw	r22, r12
     3f2:	0e 94 cd 09 	call	0x139a	; 0x139a <_Z6secondm>
     3f6:	0a 97       	sbiw	r24, 0x0a	; 10
     3f8:	1c f0       	brlt	.+6      	; 0x400 <__LOCK_REGION_LENGTH__>
     3fa:	67 e4       	ldi	r22, 0x47	; 71
     3fc:	71 e0       	ldi	r23, 0x01	; 1
     3fe:	02 c0       	rjmp	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     400:	65 e0       	ldi	r22, 0x05	; 5
     402:	71 e0       	ldi	r23, 0x01	; 1
     404:	83 e8       	ldi	r24, 0x83	; 131
     406:	91 e0       	ldi	r25, 0x01	; 1
     408:	0e 94 38 05 	call	0xa70	; 0xa70 <_ZN5Print5printEPKc>
     40c:	be 01       	movw	r22, r28
     40e:	6f 5f       	subi	r22, 0xFF	; 255
     410:	7f 4f       	sbci	r23, 0xFF	; 255
     412:	83 e8       	ldi	r24, 0x83	; 131
     414:	91 e0       	ldi	r25, 0x01	; 1
     416:	0e 94 9d 00 	call	0x13a	; 0x13a <_ZlsR5PrintRK6_BASED>
     41a:	26 96       	adiw	r28, 0x06	; 6
     41c:	0f b6       	in	r0, 0x3f	; 63
     41e:	f8 94       	cli
     420:	de bf       	out	0x3e, r29	; 62
     422:	0f be       	out	0x3f, r0	; 63
     424:	cd bf       	out	0x3d, r28	; 61
     426:	df 91       	pop	r29
     428:	cf 91       	pop	r28
     42a:	1f 91       	pop	r17
     42c:	0f 91       	pop	r16
     42e:	ff 90       	pop	r15
     430:	ef 90       	pop	r14
     432:	df 90       	pop	r13
     434:	cf 90       	pop	r12
     436:	08 95       	ret

00000438 <_ZN23Human_Machine_Interface8ConvTotmEm>:
     438:	9f 92       	push	r9
     43a:	af 92       	push	r10
     43c:	bf 92       	push	r11
     43e:	cf 92       	push	r12
     440:	df 92       	push	r13
     442:	ef 92       	push	r14
     444:	ff 92       	push	r15
     446:	0f 93       	push	r16
     448:	1f 93       	push	r17
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	cd b7       	in	r28, 0x3d	; 61
     450:	de b7       	in	r29, 0x3e	; 62
     452:	27 97       	sbiw	r28, 0x07	; 7
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	f8 94       	cli
     458:	de bf       	out	0x3e, r29	; 62
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	cd bf       	out	0x3d, r28	; 61
     45e:	6a 01       	movw	r12, r20
     460:	7b 01       	movw	r14, r22
     462:	cb 01       	movw	r24, r22
     464:	ba 01       	movw	r22, r20
     466:	0e 94 df 09 	call	0x13be	; 0x13be <_Z4yearm>
     46a:	18 2f       	mov	r17, r24
     46c:	c7 01       	movw	r24, r14
     46e:	b6 01       	movw	r22, r12
     470:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <_Z3daym>
     474:	b8 2e       	mov	r11, r24
     476:	c7 01       	movw	r24, r14
     478:	b6 01       	movw	r22, r12
     47a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <_Z5monthm>
     47e:	08 2f       	mov	r16, r24
     480:	c7 01       	movw	r24, r14
     482:	b6 01       	movw	r22, r12
     484:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z4hourm>
     488:	a8 2e       	mov	r10, r24
     48a:	c7 01       	movw	r24, r14
     48c:	b6 01       	movw	r22, r12
     48e:	0e 94 c7 09 	call	0x138e	; 0x138e <_Z6minutem>
     492:	98 2e       	mov	r9, r24
     494:	c7 01       	movw	r24, r14
     496:	b6 01       	movw	r22, r12
     498:	0e 94 cd 09 	call	0x139a	; 0x139a <_Z6secondm>
     49c:	5c 81       	ldd	r21, Y+4	; 0x04
     49e:	28 2f       	mov	r18, r24
     4a0:	39 2d       	mov	r19, r9
     4a2:	4a 2d       	mov	r20, r10
     4a4:	6b 2d       	mov	r22, r11
     4a6:	70 2f       	mov	r23, r16
     4a8:	81 2f       	mov	r24, r17
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	27 96       	adiw	r28, 0x07	; 7
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	f8 94       	cli
     4b2:	de bf       	out	0x3e, r29	; 62
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	cd bf       	out	0x3d, r28	; 61
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	1f 91       	pop	r17
     4be:	0f 91       	pop	r16
     4c0:	ff 90       	pop	r15
     4c2:	ef 90       	pop	r14
     4c4:	df 90       	pop	r13
     4c6:	cf 90       	pop	r12
     4c8:	bf 90       	pop	r11
     4ca:	af 90       	pop	r10
     4cc:	9f 90       	pop	r9
     4ce:	08 95       	ret

000004d0 <_ZN16DS3231RTC_Alarms11init_alarmsEv>:
     4d0:	ef 92       	push	r14
     4d2:	ff 92       	push	r15
     4d4:	0f 93       	push	r16
     4d6:	1f 93       	push	r17
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	ec 01       	movw	r28, r24
     4de:	52 98       	cbi	0x0a, 2	; 10
     4e0:	5a 9a       	sbi	0x0b, 2	; 11
     4e2:	42 e0       	ldi	r20, 0x02	; 2
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	69 e9       	ldi	r22, 0x99	; 153
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <attachInterrupt>
     4f0:	64 e0       	ldi	r22, 0x04	; 4
     4f2:	89 e2       	ldi	r24, 0x29	; 41
     4f4:	92 e0       	ldi	r25, 0x02	; 2
     4f6:	0e 94 85 08 	call	0x110a	; 0x110a <_ZN9DS3232RTC10squareWaveE14SQWAVE_FREQS_t>
     4fa:	61 e0       	ldi	r22, 0x01	; 1
     4fc:	89 e2       	ldi	r24, 0x29	; 41
     4fe:	92 e0       	ldi	r25, 0x02	; 2
     500:	0e 94 65 08 	call	0x10ca	; 0x10ca <_ZN9DS3232RTC5alarmEh>
     504:	41 e0       	ldi	r20, 0x01	; 1
     506:	61 e0       	ldi	r22, 0x01	; 1
     508:	89 e2       	ldi	r24, 0x29	; 41
     50a:	92 e0       	ldi	r25, 0x02	; 2
     50c:	0e 94 44 08 	call	0x1088	; 0x1088 <_ZN9DS3232RTC14alarmInterruptEhb>
     510:	62 e0       	ldi	r22, 0x02	; 2
     512:	89 e2       	ldi	r24, 0x29	; 41
     514:	92 e0       	ldi	r25, 0x02	; 2
     516:	0e 94 65 08 	call	0x10ca	; 0x10ca <_ZN9DS3232RTC5alarmEh>
     51a:	41 e0       	ldi	r20, 0x01	; 1
     51c:	62 e0       	ldi	r22, 0x02	; 2
     51e:	89 e2       	ldi	r24, 0x29	; 41
     520:	92 e0       	ldi	r25, 0x02	; 2
     522:	0e 94 44 08 	call	0x1088	; 0x1088 <_ZN9DS3232RTC14alarmInterruptEhb>
     526:	00 91 81 01 	lds	r16, 0x0181	; 0x800181 <alarm1_addr>
     52a:	10 e0       	ldi	r17, 0x00	; 0
     52c:	7e 01       	movw	r14, r28
     52e:	87 e0       	ldi	r24, 0x07	; 7
     530:	e8 0e       	add	r14, r24
     532:	f1 1c       	adc	r15, r1
     534:	0c 1b       	sub	r16, r28
     536:	1d 0b       	sbc	r17, r29
     538:	c8 01       	movw	r24, r16
     53a:	8c 0f       	add	r24, r28
     53c:	9d 1f       	adc	r25, r29
     53e:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <eeprom_read_byte>
     542:	89 93       	st	Y+, r24
     544:	ce 15       	cp	r28, r14
     546:	df 05       	cpc	r29, r15
     548:	b9 f7       	brne	.-18     	; 0x538 <_ZN16DS3231RTC_Alarms11init_alarmsEv+0x68>
     54a:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__data_start>
     54e:	10 e0       	ldi	r17, 0x00	; 0
     550:	c0 e0       	ldi	r28, 0x00	; 0
     552:	d0 e0       	ldi	r29, 0x00	; 0
     554:	ce 01       	movw	r24, r28
     556:	80 0f       	add	r24, r16
     558:	91 1f       	adc	r25, r17
     55a:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <eeprom_read_byte>
     55e:	f7 01       	movw	r30, r14
     560:	81 93       	st	Z+, r24
     562:	7f 01       	movw	r14, r30
     564:	21 96       	adiw	r28, 0x01	; 1
     566:	c7 30       	cpi	r28, 0x07	; 7
     568:	d1 05       	cpc	r29, r1
     56a:	a1 f7       	brne	.-24     	; 0x554 <_ZN16DS3231RTC_Alarms11init_alarmsEv+0x84>
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	1f 91       	pop	r17
     572:	0f 91       	pop	r16
     574:	ff 90       	pop	r15
     576:	ef 90       	pop	r14
     578:	08 95       	ret

0000057a <_ZN16DS3231RTC_Alarms11alarm_CheckEPh>:
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <alarmIsrWasCalled>
     582:	88 23       	and	r24, r24
     584:	b1 f0       	breq	.+44     	; 0x5b2 <_ZN16DS3231RTC_Alarms11alarm_CheckEPh+0x38>
     586:	eb 01       	movw	r28, r22
     588:	61 e0       	ldi	r22, 0x01	; 1
     58a:	89 e2       	ldi	r24, 0x29	; 41
     58c:	92 e0       	ldi	r25, 0x02	; 2
     58e:	0e 94 65 08 	call	0x10ca	; 0x10ca <_ZN9DS3232RTC5alarmEh>
     592:	88 23       	and	r24, r24
     594:	11 f0       	breq	.+4      	; 0x59a <_ZN16DS3231RTC_Alarms11alarm_CheckEPh+0x20>
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	08 c0       	rjmp	.+16     	; 0x5aa <_ZN16DS3231RTC_Alarms11alarm_CheckEPh+0x30>
     59a:	62 e0       	ldi	r22, 0x02	; 2
     59c:	89 e2       	ldi	r24, 0x29	; 41
     59e:	92 e0       	ldi	r25, 0x02	; 2
     5a0:	0e 94 65 08 	call	0x10ca	; 0x10ca <_ZN9DS3232RTC5alarmEh>
     5a4:	88 23       	and	r24, r24
     5a6:	11 f0       	breq	.+4      	; 0x5ac <_ZN16DS3231RTC_Alarms11alarm_CheckEPh+0x32>
     5a8:	82 e0       	ldi	r24, 0x02	; 2
     5aa:	88 83       	st	Y, r24
     5ac:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <alarmIsrWasCalled>
     5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <_ZN16DS3231RTC_Alarms11alarm_CheckEPh+0x3c>
     5b2:	fb 01       	movw	r30, r22
     5b4:	10 82       	st	Z, r1
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	08 95       	ret

000005bc <main>:
// Extra includes and defines:
#include "Supp_Func.h"


int main(void)
{
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	cd b7       	in	r28, 0x3d	; 61
     5c2:	de b7       	in	r29, 0x3e	; 62
     5c4:	28 97       	sbiw	r28, 0x08	; 8
     5c6:	0f b6       	in	r0, 0x3f	; 63
     5c8:	f8 94       	cli
     5ca:	de bf       	out	0x3e, r29	; 62
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	cd bf       	out	0x3d, r28	; 61
	init();						// Initializes the Arduino Core.
     5d0:	0e 94 04 07 	call	0xe08	; 0xe08 <init>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     5d4:	26 e0       	ldi	r18, 0x06	; 6
     5d6:	40 e8       	ldi	r20, 0x80	; 128
     5d8:	55 e2       	ldi	r21, 0x25	; 37
     5da:	60 e0       	ldi	r22, 0x00	; 0
     5dc:	70 e0       	ldi	r23, 0x00	; 0
     5de:	83 e8       	ldi	r24, 0x83	; 131
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	0e 94 0f 04 	call	0x81e	; 0x81e <_ZN14HardwareSerial5beginEmh>
	Serial.begin(9600);			// Start the serial communication at 9600 a baud rate.
	RTC_alarm.init_alarms();	// Start the alarms.
     5e6:	83 e7       	ldi	r24, 0x73	; 115
     5e8:	91 e0       	ldi	r25, 0x01	; 1
     5ea:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN16DS3231RTC_Alarms11init_alarmsEv>
	
	// Local Variables:
	uint8_t alarm_stat = 0;
     5ee:	18 86       	std	Y+8, r1	; 0x08
#define STREAMING_LIBRARY_VERSION 5

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     5f0:	67 e0       	ldi	r22, 0x07	; 7
     5f2:	71 e0       	ldi	r23, 0x01	; 1
     5f4:	83 e8       	ldi	r24, 0x83	; 131
     5f6:	91 e0       	ldi	r25, 0x01	; 1
     5f8:	0e 94 38 05 	call	0xa70	; 0xa70 <_ZN5Print5printEPKc>
	
	
	// print he current time:
	Serial << "Current time is: ";
	HMI.printDateTime(RTC.get());
     5fc:	0e 94 dd 07 	call	0xfba	; 0xfba <_ZN9DS3232RTC3getEv>
     600:	ab 01       	movw	r20, r22
     602:	bc 01       	movw	r22, r24
     604:	82 e7       	ldi	r24, 0x72	; 114
     606:	91 e0       	ldi	r25, 0x01	; 1
     608:	0e 94 34 01 	call	0x268	; 0x268 <_ZN23Human_Machine_Interface13printDateTimeEm>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
     60c:	83 e8       	ldi	r24, 0x83	; 131
     60e:	91 e0       	ldi	r25, 0x01	; 1
     610:	0e 94 41 05 	call	0xa82	; 0xa82 <_ZN5Print7printlnEv>
	Serial << endl;
	
	HMI.printDateTime(HMI.ConvTotm(RTC.get()));
     614:	0e 94 dd 07 	call	0xfba	; 0xfba <_ZN9DS3232RTC3getEv>
     618:	ab 01       	movw	r20, r22
     61a:	bc 01       	movw	r22, r24
     61c:	82 e7       	ldi	r24, 0x72	; 114
     61e:	91 e0       	ldi	r25, 0x01	; 1
     620:	0e 94 1c 02 	call	0x438	; 0x438 <_ZN23Human_Machine_Interface8ConvTotmEm>
     624:	89 01       	movw	r16, r18
     626:	9a 01       	movw	r18, r20
     628:	ab 01       	movw	r20, r22
     62a:	68 2f       	mov	r22, r24
     62c:	82 e7       	ldi	r24, 0x72	; 114
     62e:	91 e0       	ldi	r25, 0x01	; 1
     630:	0e 94 ad 00 	call	0x15a	; 0x15a <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t>
	
	while (1)
	{
		RTC_alarm.alarm_Check(&alarm_stat);	// get the alarm status.
     634:	be 01       	movw	r22, r28
     636:	68 5f       	subi	r22, 0xF8	; 248
     638:	7f 4f       	sbci	r23, 0xFF	; 255
     63a:	83 e7       	ldi	r24, 0x73	; 115
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	0e 94 bd 02 	call	0x57a	; 0x57a <_ZN16DS3231RTC_Alarms11alarm_CheckEPh>
		
		switch(alarm_stat)					// switch statement to decide what should happen if alarm has happened.
     642:	88 85       	ldd	r24, Y+8	; 0x08
     644:	81 30       	cpi	r24, 0x01	; 1
     646:	69 f0       	breq	.+26     	; 0x662 <main+0xa6>
     648:	82 30       	cpi	r24, 0x02	; 2
     64a:	e9 f4       	brne	.+58     	; 0x686 <main+0xca>
				HMI.printDateTime( RTC.get() );
				Serial << " --> Alarm 1!" << endl;
			break;
			
			case 2:							// alarm1:
				HMI.printDateTime( RTC.get() );
     64c:	0e 94 dd 07 	call	0xfba	; 0xfba <_ZN9DS3232RTC3getEv>
     650:	ab 01       	movw	r20, r22
     652:	bc 01       	movw	r22, r24
     654:	82 e7       	ldi	r24, 0x72	; 114
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	0e 94 34 01 	call	0x268	; 0x268 <_ZN23Human_Machine_Interface13printDateTimeEm>
#define STREAMING_LIBRARY_VERSION 5

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     65c:	67 e2       	ldi	r22, 0x27	; 39
     65e:	71 e0       	ldi	r23, 0x01	; 1
     660:	0a c0       	rjmp	.+20     	; 0x676 <main+0xba>
		RTC_alarm.alarm_Check(&alarm_stat);	// get the alarm status.
		
		switch(alarm_stat)					// switch statement to decide what should happen if alarm has happened.
		{
			case 1:							// alarm1:
				HMI.printDateTime( RTC.get() );
     662:	0e 94 dd 07 	call	0xfba	; 0xfba <_ZN9DS3232RTC3getEv>
     666:	ab 01       	movw	r20, r22
     668:	bc 01       	movw	r22, r24
     66a:	82 e7       	ldi	r24, 0x72	; 114
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	0e 94 34 01 	call	0x268	; 0x268 <_ZN23Human_Machine_Interface13printDateTimeEm>
     672:	69 e1       	ldi	r22, 0x19	; 25
     674:	71 e0       	ldi	r23, 0x01	; 1
     676:	83 e8       	ldi	r24, 0x83	; 131
     678:	91 e0       	ldi	r25, 0x01	; 1
     67a:	0e 94 38 05 	call	0xa70	; 0xa70 <_ZN5Print5printEPKc>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
     67e:	83 e8       	ldi	r24, 0x83	; 131
     680:	91 e0       	ldi	r25, 0x01	; 1
     682:	0e 94 41 05 	call	0xa82	; 0xa82 <_ZN5Print7printlnEv>
				
			default:						// if there was no alarm:
				
			break;
		}
		delay(100);	// small delay
     686:	64 e6       	ldi	r22, 0x64	; 100
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	0e 94 c8 06 	call	0xd90	; 0xd90 <delay>
	HMI.printDateTime(RTC.get());
	Serial << endl;
	
	HMI.printDateTime(HMI.ConvTotm(RTC.get()));
	
	while (1)
     692:	d0 cf       	rjmp	.-96     	; 0x634 <main+0x78>

00000694 <_GLOBAL__sub_I_alarmIsrWasCalled>:
}


DS3231RTC_Alarms::DS3231RTC_Alarms()
{
	alarm1_time.long_time = 0;
     694:	e3 e7       	ldi	r30, 0x73	; 115
     696:	f1 e0       	ldi	r31, 0x01	; 1
     698:	10 82       	st	Z, r1
     69a:	11 82       	std	Z+1, r1	; 0x01
     69c:	12 82       	std	Z+2, r1	; 0x02
     69e:	13 82       	std	Z+3, r1	; 0x03
	alarm2_time.long_time = 0;
     6a0:	17 82       	std	Z+7, r1	; 0x07
     6a2:	10 86       	std	Z+8, r1	; 0x08
     6a4:	11 86       	std	Z+9, r1	; 0x09
     6a6:	12 86       	std	Z+10, r1	; 0x0a
DS3231RTC_Alarms RTC_alarm;	// Make a object of the 'class DS3231RTC_Alarms' named 'RTC_alarm'
Human_Machine_Interface HMI;// Make a object of the 'class Human_Machine_Interface' named 'HMI'

Human_Machine_Interface::Human_Machine_Interface()
{
	UIstate = 0;
     6a8:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <__data_end>
     6ac:	08 95       	ret

000006ae <_ZN14HardwareSerial9availableEv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     6ae:	fc 01       	movw	r30, r24
     6b0:	91 8d       	ldd	r25, Z+25	; 0x19
     6b2:	22 8d       	ldd	r18, Z+26	; 0x1a
     6b4:	89 2f       	mov	r24, r25
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	80 5c       	subi	r24, 0xC0	; 192
     6ba:	9f 4f       	sbci	r25, 0xFF	; 255
     6bc:	82 1b       	sub	r24, r18
     6be:	91 09       	sbc	r25, r1
     6c0:	8f 73       	andi	r24, 0x3F	; 63
     6c2:	99 27       	eor	r25, r25
     6c4:	08 95       	ret

000006c6 <_ZN14HardwareSerial4peekEv>:
     6c6:	fc 01       	movw	r30, r24
     6c8:	91 8d       	ldd	r25, Z+25	; 0x19
     6ca:	82 8d       	ldd	r24, Z+26	; 0x1a
     6cc:	98 17       	cp	r25, r24
     6ce:	31 f0       	breq	.+12     	; 0x6dc <_ZN14HardwareSerial4peekEv+0x16>
     6d0:	82 8d       	ldd	r24, Z+26	; 0x1a
     6d2:	e8 0f       	add	r30, r24
     6d4:	f1 1d       	adc	r31, r1
     6d6:	85 8d       	ldd	r24, Z+29	; 0x1d
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	08 95       	ret
     6dc:	8f ef       	ldi	r24, 0xFF	; 255
     6de:	9f ef       	ldi	r25, 0xFF	; 255
     6e0:	08 95       	ret

000006e2 <_ZN14HardwareSerial4readEv>:
     6e2:	fc 01       	movw	r30, r24
     6e4:	91 8d       	ldd	r25, Z+25	; 0x19
     6e6:	82 8d       	ldd	r24, Z+26	; 0x1a
     6e8:	98 17       	cp	r25, r24
     6ea:	61 f0       	breq	.+24     	; 0x704 <_ZN14HardwareSerial4readEv+0x22>
     6ec:	82 8d       	ldd	r24, Z+26	; 0x1a
     6ee:	df 01       	movw	r26, r30
     6f0:	a8 0f       	add	r26, r24
     6f2:	b1 1d       	adc	r27, r1
     6f4:	5d 96       	adiw	r26, 0x1d	; 29
     6f6:	8c 91       	ld	r24, X
     6f8:	92 8d       	ldd	r25, Z+26	; 0x1a
     6fa:	9f 5f       	subi	r25, 0xFF	; 255
     6fc:	9f 73       	andi	r25, 0x3F	; 63
     6fe:	92 8f       	std	Z+26, r25	; 0x1a
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	08 95       	ret
     704:	8f ef       	ldi	r24, 0xFF	; 255
     706:	9f ef       	ldi	r25, 0xFF	; 255
     708:	08 95       	ret

0000070a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     70a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     70c:	84 8d       	ldd	r24, Z+28	; 0x1c
     70e:	df 01       	movw	r26, r30
     710:	a8 0f       	add	r26, r24
     712:	b1 1d       	adc	r27, r1
     714:	a3 5a       	subi	r26, 0xA3	; 163
     716:	bf 4f       	sbci	r27, 0xFF	; 255
     718:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     71a:	84 8d       	ldd	r24, Z+28	; 0x1c
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	01 96       	adiw	r24, 0x01	; 1
     720:	8f 73       	andi	r24, 0x3F	; 63
     722:	99 27       	eor	r25, r25
     724:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     726:	a6 89       	ldd	r26, Z+22	; 0x16
     728:	b7 89       	ldd	r27, Z+23	; 0x17
     72a:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     72c:	a0 89       	ldd	r26, Z+16	; 0x10
     72e:	b1 89       	ldd	r27, Z+17	; 0x11
     730:	8c 91       	ld	r24, X
     732:	80 64       	ori	r24, 0x40	; 64
     734:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     736:	93 8d       	ldd	r25, Z+27	; 0x1b
     738:	84 8d       	ldd	r24, Z+28	; 0x1c
     73a:	98 13       	cpse	r25, r24
     73c:	06 c0       	rjmp	.+12     	; 0x74a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     73e:	02 88       	ldd	r0, Z+18	; 0x12
     740:	f3 89       	ldd	r31, Z+19	; 0x13
     742:	e0 2d       	mov	r30, r0
     744:	80 81       	ld	r24, Z
     746:	8f 7d       	andi	r24, 0xDF	; 223
     748:	80 83       	st	Z, r24
     74a:	08 95       	ret

0000074c <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     74c:	ef 92       	push	r14
     74e:	ff 92       	push	r15
     750:	0f 93       	push	r16
     752:	1f 93       	push	r17
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	ec 01       	movw	r28, r24
  _written = true;
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     75e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     760:	8c 8d       	ldd	r24, Y+28	; 0x1c
     762:	98 13       	cpse	r25, r24
     764:	05 c0       	rjmp	.+10     	; 0x770 <_ZN14HardwareSerial5writeEh+0x24>
     766:	e8 89       	ldd	r30, Y+16	; 0x10
     768:	f9 89       	ldd	r31, Y+17	; 0x11
     76a:	80 81       	ld	r24, Z
     76c:	85 fd       	sbrc	r24, 5
     76e:	24 c0       	rjmp	.+72     	; 0x7b8 <_ZN14HardwareSerial5writeEh+0x6c>
     770:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     772:	0b 8d       	ldd	r16, Y+27	; 0x1b
     774:	10 e0       	ldi	r17, 0x00	; 0
     776:	0f 5f       	subi	r16, 0xFF	; 255
     778:	1f 4f       	sbci	r17, 0xFF	; 255
     77a:	0f 73       	andi	r16, 0x3F	; 63
     77c:	11 27       	eor	r17, r17
     77e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     780:	8c 8d       	ldd	r24, Y+28	; 0x1c
     782:	e8 12       	cpse	r14, r24
     784:	0c c0       	rjmp	.+24     	; 0x79e <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     786:	0f b6       	in	r0, 0x3f	; 63
     788:	07 fc       	sbrc	r0, 7
     78a:	fa cf       	rjmp	.-12     	; 0x780 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     78c:	e8 89       	ldd	r30, Y+16	; 0x10
     78e:	f9 89       	ldd	r31, Y+17	; 0x11
     790:	80 81       	ld	r24, Z
     792:	85 ff       	sbrs	r24, 5
     794:	f5 cf       	rjmp	.-22     	; 0x780 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     796:	ce 01       	movw	r24, r28
     798:	0e 94 85 03 	call	0x70a	; 0x70a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     79c:	f1 cf       	rjmp	.-30     	; 0x780 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     79e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7a0:	fe 01       	movw	r30, r28
     7a2:	e8 0f       	add	r30, r24
     7a4:	f1 1d       	adc	r31, r1
     7a6:	e3 5a       	subi	r30, 0xA3	; 163
     7a8:	ff 4f       	sbci	r31, 0xFF	; 255
     7aa:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     7ac:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     7ae:	ea 89       	ldd	r30, Y+18	; 0x12
     7b0:	fb 89       	ldd	r31, Y+19	; 0x13
     7b2:	80 81       	ld	r24, Z
     7b4:	80 62       	ori	r24, 0x20	; 32
     7b6:	07 c0       	rjmp	.+14     	; 0x7c6 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     7b8:	ee 89       	ldd	r30, Y+22	; 0x16
     7ba:	ff 89       	ldd	r31, Y+23	; 0x17
     7bc:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     7be:	e8 89       	ldd	r30, Y+16	; 0x10
     7c0:	f9 89       	ldd	r31, Y+17	; 0x11
     7c2:	80 81       	ld	r24, Z
     7c4:	80 64       	ori	r24, 0x40	; 64
     7c6:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	1f 91       	pop	r17
     7d2:	0f 91       	pop	r16
     7d4:	ff 90       	pop	r15
     7d6:	ef 90       	pop	r14
     7d8:	08 95       	ret

000007da <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     7e0:	88 8d       	ldd	r24, Y+24	; 0x18
     7e2:	88 23       	and	r24, r24
     7e4:	c9 f0       	breq	.+50     	; 0x818 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     7e6:	ea 89       	ldd	r30, Y+18	; 0x12
     7e8:	fb 89       	ldd	r31, Y+19	; 0x13
     7ea:	80 81       	ld	r24, Z
     7ec:	85 fd       	sbrc	r24, 5
     7ee:	05 c0       	rjmp	.+10     	; 0x7fa <_ZN14HardwareSerial5flushEv+0x20>
     7f0:	a8 89       	ldd	r26, Y+16	; 0x10
     7f2:	b9 89       	ldd	r27, Y+17	; 0x11
     7f4:	8c 91       	ld	r24, X
     7f6:	86 fd       	sbrc	r24, 6
     7f8:	0f c0       	rjmp	.+30     	; 0x818 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     7fa:	0f b6       	in	r0, 0x3f	; 63
     7fc:	07 fc       	sbrc	r0, 7
     7fe:	f5 cf       	rjmp	.-22     	; 0x7ea <_ZN14HardwareSerial5flushEv+0x10>
     800:	80 81       	ld	r24, Z
     802:	85 ff       	sbrs	r24, 5
     804:	f2 cf       	rjmp	.-28     	; 0x7ea <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     806:	a8 89       	ldd	r26, Y+16	; 0x10
     808:	b9 89       	ldd	r27, Y+17	; 0x11
     80a:	8c 91       	ld	r24, X
     80c:	85 ff       	sbrs	r24, 5
     80e:	ed cf       	rjmp	.-38     	; 0x7ea <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     810:	ce 01       	movw	r24, r28
     812:	0e 94 85 03 	call	0x70a	; 0x70a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     816:	e7 cf       	rjmp	.-50     	; 0x7e6 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	08 95       	ret

0000081e <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     81e:	cf 92       	push	r12
     820:	df 92       	push	r13
     822:	ef 92       	push	r14
     824:	ff 92       	push	r15
     826:	1f 93       	push	r17
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	ec 01       	movw	r28, r24
     82e:	6a 01       	movw	r12, r20
     830:	7b 01       	movw	r14, r22
     832:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     834:	e8 89       	ldd	r30, Y+16	; 0x10
     836:	f9 89       	ldd	r31, Y+17	; 0x11
     838:	82 e0       	ldi	r24, 0x02	; 2
     83a:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     83c:	41 15       	cp	r20, r1
     83e:	51 4e       	sbci	r21, 0xE1	; 225
     840:	61 05       	cpc	r22, r1
     842:	71 05       	cpc	r23, r1
     844:	b1 f0       	breq	.+44     	; 0x872 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     846:	60 e0       	ldi	r22, 0x00	; 0
     848:	79 e0       	ldi	r23, 0x09	; 9
     84a:	8d e3       	ldi	r24, 0x3D	; 61
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	a7 01       	movw	r20, r14
     850:	96 01       	movw	r18, r12
     852:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <__udivmodsi4>
     856:	da 01       	movw	r26, r20
     858:	c9 01       	movw	r24, r18
     85a:	01 97       	sbiw	r24, 0x01	; 1
     85c:	a1 09       	sbc	r26, r1
     85e:	b1 09       	sbc	r27, r1
     860:	b6 95       	lsr	r27
     862:	a7 95       	ror	r26
     864:	97 95       	ror	r25
     866:	87 95       	ror	r24
     868:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     86a:	21 15       	cp	r18, r1
     86c:	80 e1       	ldi	r24, 0x10	; 16
     86e:	38 07       	cpc	r19, r24
     870:	a8 f0       	brcs	.+42     	; 0x89c <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     872:	e8 89       	ldd	r30, Y+16	; 0x10
     874:	f9 89       	ldd	r31, Y+17	; 0x11
     876:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     878:	60 e8       	ldi	r22, 0x80	; 128
     87a:	74 e8       	ldi	r23, 0x84	; 132
     87c:	8e e1       	ldi	r24, 0x1E	; 30
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	a7 01       	movw	r20, r14
     882:	96 01       	movw	r18, r12
     884:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <__udivmodsi4>
     888:	da 01       	movw	r26, r20
     88a:	c9 01       	movw	r24, r18
     88c:	01 97       	sbiw	r24, 0x01	; 1
     88e:	a1 09       	sbc	r26, r1
     890:	b1 09       	sbc	r27, r1
     892:	b6 95       	lsr	r27
     894:	a7 95       	ror	r26
     896:	97 95       	ror	r25
     898:	87 95       	ror	r24
     89a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     89c:	ec 85       	ldd	r30, Y+12	; 0x0c
     89e:	fd 85       	ldd	r31, Y+13	; 0x0d
     8a0:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     8a2:	ee 85       	ldd	r30, Y+14	; 0x0e
     8a4:	ff 85       	ldd	r31, Y+15	; 0x0f
     8a6:	20 83       	st	Z, r18

  _written = false;
     8a8:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     8aa:	ec 89       	ldd	r30, Y+20	; 0x14
     8ac:	fd 89       	ldd	r31, Y+21	; 0x15
     8ae:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     8b0:	ea 89       	ldd	r30, Y+18	; 0x12
     8b2:	fb 89       	ldd	r31, Y+19	; 0x13
     8b4:	80 81       	ld	r24, Z
     8b6:	80 61       	ori	r24, 0x10	; 16
     8b8:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     8ba:	ea 89       	ldd	r30, Y+18	; 0x12
     8bc:	fb 89       	ldd	r31, Y+19	; 0x13
     8be:	80 81       	ld	r24, Z
     8c0:	88 60       	ori	r24, 0x08	; 8
     8c2:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     8c4:	ea 89       	ldd	r30, Y+18	; 0x12
     8c6:	fb 89       	ldd	r31, Y+19	; 0x13
     8c8:	80 81       	ld	r24, Z
     8ca:	80 68       	ori	r24, 0x80	; 128
     8cc:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     8ce:	ea 89       	ldd	r30, Y+18	; 0x12
     8d0:	fb 89       	ldd	r31, Y+19	; 0x13
     8d2:	80 81       	ld	r24, Z
     8d4:	8f 7d       	andi	r24, 0xDF	; 223
     8d6:	80 83       	st	Z, r24
}
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	1f 91       	pop	r17
     8de:	ff 90       	pop	r15
     8e0:	ef 90       	pop	r14
     8e2:	df 90       	pop	r13
     8e4:	cf 90       	pop	r12
     8e6:	08 95       	ret

000008e8 <__vector_18>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
     8e8:	1f 92       	push	r1
     8ea:	0f 92       	push	r0
     8ec:	0f b6       	in	r0, 0x3f	; 63
     8ee:	0f 92       	push	r0
     8f0:	11 24       	eor	r1, r1
     8f2:	2f 93       	push	r18
     8f4:	8f 93       	push	r24
     8f6:	9f 93       	push	r25
     8f8:	ef 93       	push	r30
     8fa:	ff 93       	push	r31
     8fc:	e0 91 93 01 	lds	r30, 0x0193	; 0x800193 <Serial+0x10>
     900:	f0 91 94 01 	lds	r31, 0x0194	; 0x800194 <Serial+0x11>
     904:	80 81       	ld	r24, Z
     906:	e0 91 99 01 	lds	r30, 0x0199	; 0x800199 <Serial+0x16>
     90a:	f0 91 9a 01 	lds	r31, 0x019A	; 0x80019a <Serial+0x17>
     90e:	82 fd       	sbrc	r24, 2
     910:	12 c0       	rjmp	.+36     	; 0x936 <__stack+0x37>
     912:	90 81       	ld	r25, Z
     914:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <Serial+0x19>
     918:	8f 5f       	subi	r24, 0xFF	; 255
     91a:	8f 73       	andi	r24, 0x3F	; 63
     91c:	20 91 9d 01 	lds	r18, 0x019D	; 0x80019d <Serial+0x1a>
     920:	82 17       	cp	r24, r18
     922:	51 f0       	breq	.+20     	; 0x938 <__stack+0x39>
     924:	e0 91 9c 01 	lds	r30, 0x019C	; 0x80019c <Serial+0x19>
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	ed 57       	subi	r30, 0x7D	; 125
     92c:	fe 4f       	sbci	r31, 0xFE	; 254
     92e:	95 8f       	std	Z+29, r25	; 0x1d
     930:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <Serial+0x19>
     934:	01 c0       	rjmp	.+2      	; 0x938 <__stack+0x39>
     936:	80 81       	ld	r24, Z
     938:	ff 91       	pop	r31
     93a:	ef 91       	pop	r30
     93c:	9f 91       	pop	r25
     93e:	8f 91       	pop	r24
     940:	2f 91       	pop	r18
     942:	0f 90       	pop	r0
     944:	0f be       	out	0x3f, r0	; 63
     946:	0f 90       	pop	r0
     948:	1f 90       	pop	r1
     94a:	18 95       	reti

0000094c <__vector_19>:
     94c:	1f 92       	push	r1
     94e:	0f 92       	push	r0
     950:	0f b6       	in	r0, 0x3f	; 63
     952:	0f 92       	push	r0
     954:	11 24       	eor	r1, r1
     956:	2f 93       	push	r18
     958:	3f 93       	push	r19
     95a:	4f 93       	push	r20
     95c:	5f 93       	push	r21
     95e:	6f 93       	push	r22
     960:	7f 93       	push	r23
     962:	8f 93       	push	r24
     964:	9f 93       	push	r25
     966:	af 93       	push	r26
     968:	bf 93       	push	r27
     96a:	ef 93       	push	r30
     96c:	ff 93       	push	r31
     96e:	83 e8       	ldi	r24, 0x83	; 131
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	0e 94 85 03 	call	0x70a	; 0x70a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     976:	ff 91       	pop	r31
     978:	ef 91       	pop	r30
     97a:	bf 91       	pop	r27
     97c:	af 91       	pop	r26
     97e:	9f 91       	pop	r25
     980:	8f 91       	pop	r24
     982:	7f 91       	pop	r23
     984:	6f 91       	pop	r22
     986:	5f 91       	pop	r21
     988:	4f 91       	pop	r20
     98a:	3f 91       	pop	r19
     98c:	2f 91       	pop	r18
     98e:	0f 90       	pop	r0
     990:	0f be       	out	0x3f, r0	; 63
     992:	0f 90       	pop	r0
     994:	1f 90       	pop	r1
     996:	18 95       	reti

00000998 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     998:	e3 e8       	ldi	r30, 0x83	; 131
     99a:	f1 e0       	ldi	r31, 0x01	; 1
     99c:	13 82       	std	Z+3, r1	; 0x03
     99e:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     9a0:	88 ee       	ldi	r24, 0xE8	; 232
     9a2:	93 e0       	ldi	r25, 0x03	; 3
     9a4:	a0 e0       	ldi	r26, 0x00	; 0
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	84 83       	std	Z+4, r24	; 0x04
     9aa:	95 83       	std	Z+5, r25	; 0x05
     9ac:	a6 83       	std	Z+6, r26	; 0x06
     9ae:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     9b0:	89 e3       	ldi	r24, 0x39	; 57
     9b2:	91 e0       	ldi	r25, 0x01	; 1
     9b4:	91 83       	std	Z+1, r25	; 0x01
     9b6:	80 83       	st	Z, r24
     9b8:	85 ec       	ldi	r24, 0xC5	; 197
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	95 87       	std	Z+13, r25	; 0x0d
     9be:	84 87       	std	Z+12, r24	; 0x0c
     9c0:	84 ec       	ldi	r24, 0xC4	; 196
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	97 87       	std	Z+15, r25	; 0x0f
     9c6:	86 87       	std	Z+14, r24	; 0x0e
     9c8:	80 ec       	ldi	r24, 0xC0	; 192
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	91 8b       	std	Z+17, r25	; 0x11
     9ce:	80 8b       	std	Z+16, r24	; 0x10
     9d0:	81 ec       	ldi	r24, 0xC1	; 193
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	93 8b       	std	Z+19, r25	; 0x13
     9d6:	82 8b       	std	Z+18, r24	; 0x12
     9d8:	82 ec       	ldi	r24, 0xC2	; 194
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	95 8b       	std	Z+21, r25	; 0x15
     9de:	84 8b       	std	Z+20, r24	; 0x14
     9e0:	86 ec       	ldi	r24, 0xC6	; 198
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	97 8b       	std	Z+23, r25	; 0x17
     9e6:	86 8b       	std	Z+22, r24	; 0x16
     9e8:	11 8e       	std	Z+25, r1	; 0x19
     9ea:	12 8e       	std	Z+26, r1	; 0x1a
     9ec:	13 8e       	std	Z+27, r1	; 0x1b
     9ee:	14 8e       	std	Z+28, r1	; 0x1c
     9f0:	08 95       	ret

000009f2 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     9f2:	cf 92       	push	r12
     9f4:	df 92       	push	r13
     9f6:	ef 92       	push	r14
     9f8:	ff 92       	push	r15
     9fa:	0f 93       	push	r16
     9fc:	1f 93       	push	r17
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	6c 01       	movw	r12, r24
     a04:	7a 01       	movw	r14, r20
     a06:	8b 01       	movw	r16, r22
     a08:	c0 e0       	ldi	r28, 0x00	; 0
     a0a:	d0 e0       	ldi	r29, 0x00	; 0
     a0c:	ce 15       	cp	r28, r14
     a0e:	df 05       	cpc	r29, r15
     a10:	81 f0       	breq	.+32     	; 0xa32 <_ZN5Print5writeEPKhj+0x40>
     a12:	d8 01       	movw	r26, r16
     a14:	6d 91       	ld	r22, X+
     a16:	8d 01       	movw	r16, r26
     a18:	d6 01       	movw	r26, r12
     a1a:	ed 91       	ld	r30, X+
     a1c:	fc 91       	ld	r31, X
     a1e:	01 90       	ld	r0, Z+
     a20:	f0 81       	ld	r31, Z
     a22:	e0 2d       	mov	r30, r0
     a24:	c6 01       	movw	r24, r12
     a26:	09 95       	icall
     a28:	89 2b       	or	r24, r25
     a2a:	11 f0       	breq	.+4      	; 0xa30 <_ZN5Print5writeEPKhj+0x3e>
     a2c:	21 96       	adiw	r28, 0x01	; 1
     a2e:	ee cf       	rjmp	.-36     	; 0xa0c <_ZN5Print5writeEPKhj+0x1a>
     a30:	7e 01       	movw	r14, r28
     a32:	c7 01       	movw	r24, r14
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	1f 91       	pop	r17
     a3a:	0f 91       	pop	r16
     a3c:	ff 90       	pop	r15
     a3e:	ef 90       	pop	r14
     a40:	df 90       	pop	r13
     a42:	cf 90       	pop	r12
     a44:	08 95       	ret

00000a46 <_ZN5Print5writeEPKc>:
     a46:	61 15       	cp	r22, r1
     a48:	71 05       	cpc	r23, r1
     a4a:	79 f0       	breq	.+30     	; 0xa6a <_ZN5Print5writeEPKc+0x24>
     a4c:	fb 01       	movw	r30, r22
     a4e:	01 90       	ld	r0, Z+
     a50:	00 20       	and	r0, r0
     a52:	e9 f7       	brne	.-6      	; 0xa4e <_ZN5Print5writeEPKc+0x8>
     a54:	31 97       	sbiw	r30, 0x01	; 1
     a56:	af 01       	movw	r20, r30
     a58:	46 1b       	sub	r20, r22
     a5a:	57 0b       	sbc	r21, r23
     a5c:	dc 01       	movw	r26, r24
     a5e:	ed 91       	ld	r30, X+
     a60:	fc 91       	ld	r31, X
     a62:	02 80       	ldd	r0, Z+2	; 0x02
     a64:	f3 81       	ldd	r31, Z+3	; 0x03
     a66:	e0 2d       	mov	r30, r0
     a68:	09 94       	ijmp
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	08 95       	ret

00000a70 <_ZN5Print5printEPKc>:
     a70:	0c 94 23 05 	jmp	0xa46	; 0xa46 <_ZN5Print5writeEPKc>

00000a74 <_ZN5Print5printEc>:
     a74:	dc 01       	movw	r26, r24
     a76:	ed 91       	ld	r30, X+
     a78:	fc 91       	ld	r31, X
     a7a:	01 90       	ld	r0, Z+
     a7c:	f0 81       	ld	r31, Z
     a7e:	e0 2d       	mov	r30, r0
     a80:	09 94       	ijmp

00000a82 <_ZN5Print7printlnEv>:
     a82:	65 e4       	ldi	r22, 0x45	; 69
     a84:	71 e0       	ldi	r23, 0x01	; 1
     a86:	0c 94 23 05 	jmp	0xa46	; 0xa46 <_ZN5Print5writeEPKc>

00000a8a <_ZN5Print11printNumberEmh>:
     a8a:	8f 92       	push	r8
     a8c:	9f 92       	push	r9
     a8e:	af 92       	push	r10
     a90:	bf 92       	push	r11
     a92:	ef 92       	push	r14
     a94:	ff 92       	push	r15
     a96:	0f 93       	push	r16
     a98:	1f 93       	push	r17
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	cd b7       	in	r28, 0x3d	; 61
     aa0:	de b7       	in	r29, 0x3e	; 62
     aa2:	a1 97       	sbiw	r28, 0x21	; 33
     aa4:	0f b6       	in	r0, 0x3f	; 63
     aa6:	f8 94       	cli
     aa8:	de bf       	out	0x3e, r29	; 62
     aaa:	0f be       	out	0x3f, r0	; 63
     aac:	cd bf       	out	0x3d, r28	; 61
     aae:	7c 01       	movw	r14, r24
     ab0:	fa 01       	movw	r30, r20
     ab2:	cb 01       	movw	r24, r22
     ab4:	19 a2       	std	Y+33, r1	; 0x21
     ab6:	22 30       	cpi	r18, 0x02	; 2
     ab8:	08 f4       	brcc	.+2      	; 0xabc <_ZN5Print11printNumberEmh+0x32>
     aba:	2a e0       	ldi	r18, 0x0A	; 10
     abc:	8e 01       	movw	r16, r28
     abe:	0f 5d       	subi	r16, 0xDF	; 223
     ac0:	1f 4f       	sbci	r17, 0xFF	; 255
     ac2:	82 2e       	mov	r8, r18
     ac4:	91 2c       	mov	r9, r1
     ac6:	a1 2c       	mov	r10, r1
     ac8:	b1 2c       	mov	r11, r1
     aca:	bf 01       	movw	r22, r30
     acc:	a5 01       	movw	r20, r10
     ace:	94 01       	movw	r18, r8
     ad0:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <__udivmodsi4>
     ad4:	f9 01       	movw	r30, r18
     ad6:	ca 01       	movw	r24, r20
     ad8:	01 50       	subi	r16, 0x01	; 1
     ada:	11 09       	sbc	r17, r1
     adc:	6a 30       	cpi	r22, 0x0A	; 10
     ade:	10 f4       	brcc	.+4      	; 0xae4 <_ZN5Print11printNumberEmh+0x5a>
     ae0:	60 5d       	subi	r22, 0xD0	; 208
     ae2:	01 c0       	rjmp	.+2      	; 0xae6 <_ZN5Print11printNumberEmh+0x5c>
     ae4:	69 5c       	subi	r22, 0xC9	; 201
     ae6:	d8 01       	movw	r26, r16
     ae8:	6c 93       	st	X, r22
     aea:	23 2b       	or	r18, r19
     aec:	24 2b       	or	r18, r20
     aee:	25 2b       	or	r18, r21
     af0:	61 f7       	brne	.-40     	; 0xaca <_ZN5Print11printNumberEmh+0x40>
     af2:	b8 01       	movw	r22, r16
     af4:	c7 01       	movw	r24, r14
     af6:	0e 94 23 05 	call	0xa46	; 0xa46 <_ZN5Print5writeEPKc>
     afa:	a1 96       	adiw	r28, 0x21	; 33
     afc:	0f b6       	in	r0, 0x3f	; 63
     afe:	f8 94       	cli
     b00:	de bf       	out	0x3e, r29	; 62
     b02:	0f be       	out	0x3f, r0	; 63
     b04:	cd bf       	out	0x3d, r28	; 61
     b06:	df 91       	pop	r29
     b08:	cf 91       	pop	r28
     b0a:	1f 91       	pop	r17
     b0c:	0f 91       	pop	r16
     b0e:	ff 90       	pop	r15
     b10:	ef 90       	pop	r14
     b12:	bf 90       	pop	r11
     b14:	af 90       	pop	r10
     b16:	9f 90       	pop	r9
     b18:	8f 90       	pop	r8
     b1a:	08 95       	ret

00000b1c <_ZN5Print5printEmi>:
     b1c:	21 15       	cp	r18, r1
     b1e:	31 05       	cpc	r19, r1
     b20:	41 f4       	brne	.+16     	; 0xb32 <_ZN5Print5printEmi+0x16>
     b22:	dc 01       	movw	r26, r24
     b24:	ed 91       	ld	r30, X+
     b26:	fc 91       	ld	r31, X
     b28:	01 90       	ld	r0, Z+
     b2a:	f0 81       	ld	r31, Z
     b2c:	e0 2d       	mov	r30, r0
     b2e:	64 2f       	mov	r22, r20
     b30:	09 94       	ijmp
     b32:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <_ZN5Print11printNumberEmh>

00000b36 <_ZN5Print5printEhi>:
     b36:	9a 01       	movw	r18, r20
     b38:	46 2f       	mov	r20, r22
     b3a:	50 e0       	ldi	r21, 0x00	; 0
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <_ZN5Print5printEmi>

00000b44 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     b44:	cf 92       	push	r12
     b46:	df 92       	push	r13
     b48:	ef 92       	push	r14
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
  if (base == 0) {
     b54:	21 15       	cp	r18, r1
     b56:	31 05       	cpc	r19, r1
     b58:	81 f4       	brne	.+32     	; 0xb7a <_ZN5Print5printEli+0x36>
    return write(n);
     b5a:	dc 01       	movw	r26, r24
     b5c:	ed 91       	ld	r30, X+
     b5e:	fc 91       	ld	r31, X
     b60:	01 90       	ld	r0, Z+
     b62:	f0 81       	ld	r31, Z
     b64:	e0 2d       	mov	r30, r0
     b66:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	1f 91       	pop	r17
     b6e:	0f 91       	pop	r16
     b70:	ff 90       	pop	r15
     b72:	ef 90       	pop	r14
     b74:	df 90       	pop	r13
     b76:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     b78:	09 94       	ijmp
  } else if (base == 10) {
     b7a:	2a 30       	cpi	r18, 0x0A	; 10
     b7c:	31 05       	cpc	r19, r1
     b7e:	01 f5       	brne	.+64     	; 0xbc0 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
     b80:	77 ff       	sbrs	r23, 7
     b82:	1d c0       	rjmp	.+58     	; 0xbbe <_ZN5Print5printEli+0x7a>
     b84:	6a 01       	movw	r12, r20
     b86:	7b 01       	movw	r14, r22
     b88:	ec 01       	movw	r28, r24
      int t = print('-');
     b8a:	6d e2       	ldi	r22, 0x2D	; 45
     b8c:	0e 94 3a 05 	call	0xa74	; 0xa74 <_ZN5Print5printEc>
     b90:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
     b92:	44 27       	eor	r20, r20
     b94:	55 27       	eor	r21, r21
     b96:	ba 01       	movw	r22, r20
     b98:	4c 19       	sub	r20, r12
     b9a:	5d 09       	sbc	r21, r13
     b9c:	6e 09       	sbc	r22, r14
     b9e:	7f 09       	sbc	r23, r15
     ba0:	2a e0       	ldi	r18, 0x0A	; 10
     ba2:	ce 01       	movw	r24, r28
     ba4:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN5Print11printNumberEmh>
     ba8:	80 0f       	add	r24, r16
     baa:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	1f 91       	pop	r17
     bb2:	0f 91       	pop	r16
     bb4:	ff 90       	pop	r15
     bb6:	ef 90       	pop	r14
     bb8:	df 90       	pop	r13
     bba:	cf 90       	pop	r12
     bbc:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     bbe:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	1f 91       	pop	r17
     bc6:	0f 91       	pop	r16
     bc8:	ff 90       	pop	r15
     bca:	ef 90       	pop	r14
     bcc:	df 90       	pop	r13
     bce:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     bd0:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <_ZN5Print11printNumberEmh>

00000bd4 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
     bd4:	08 95       	ret

00000bd6 <attachInterrupt>:
     bd6:	82 30       	cpi	r24, 0x02	; 2
     bd8:	e8 f4       	brcc	.+58     	; 0xc14 <attachInterrupt+0x3e>
     bda:	e8 2f       	mov	r30, r24
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	ee 0f       	add	r30, r30
     be0:	ff 1f       	adc	r31, r31
     be2:	ef 5f       	subi	r30, 0xFF	; 255
     be4:	fe 4f       	sbci	r31, 0xFE	; 254
     be6:	71 83       	std	Z+1, r23	; 0x01
     be8:	60 83       	st	Z, r22
     bea:	81 30       	cpi	r24, 0x01	; 1
     bec:	41 f0       	breq	.+16     	; 0xbfe <attachInterrupt+0x28>
     bee:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     bf2:	8c 7f       	andi	r24, 0xFC	; 252
     bf4:	48 2b       	or	r20, r24
     bf6:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     bfa:	e8 9a       	sbi	0x1d, 0	; 29
     bfc:	08 95       	ret
     bfe:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     c02:	83 7f       	andi	r24, 0xF3	; 243
     c04:	44 0f       	add	r20, r20
     c06:	55 1f       	adc	r21, r21
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	48 2b       	or	r20, r24
     c0e:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     c12:	e9 9a       	sbi	0x1d, 1	; 29
     c14:	08 95       	ret

00000c16 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
     c16:	1f 92       	push	r1
     c18:	0f 92       	push	r0
     c1a:	0f b6       	in	r0, 0x3f	; 63
     c1c:	0f 92       	push	r0
     c1e:	11 24       	eor	r1, r1
     c20:	2f 93       	push	r18
     c22:	3f 93       	push	r19
     c24:	4f 93       	push	r20
     c26:	5f 93       	push	r21
     c28:	6f 93       	push	r22
     c2a:	7f 93       	push	r23
     c2c:	8f 93       	push	r24
     c2e:	9f 93       	push	r25
     c30:	af 93       	push	r26
     c32:	bf 93       	push	r27
     c34:	ef 93       	push	r30
     c36:	ff 93       	push	r31
     c38:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <intFunc>
     c3c:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <intFunc+0x1>
     c40:	09 95       	icall
     c42:	ff 91       	pop	r31
     c44:	ef 91       	pop	r30
     c46:	bf 91       	pop	r27
     c48:	af 91       	pop	r26
     c4a:	9f 91       	pop	r25
     c4c:	8f 91       	pop	r24
     c4e:	7f 91       	pop	r23
     c50:	6f 91       	pop	r22
     c52:	5f 91       	pop	r21
     c54:	4f 91       	pop	r20
     c56:	3f 91       	pop	r19
     c58:	2f 91       	pop	r18
     c5a:	0f 90       	pop	r0
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	0f 90       	pop	r0
     c60:	1f 90       	pop	r1
     c62:	18 95       	reti

00000c64 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
     c64:	1f 92       	push	r1
     c66:	0f 92       	push	r0
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	0f 92       	push	r0
     c6c:	11 24       	eor	r1, r1
     c6e:	2f 93       	push	r18
     c70:	3f 93       	push	r19
     c72:	4f 93       	push	r20
     c74:	5f 93       	push	r21
     c76:	6f 93       	push	r22
     c78:	7f 93       	push	r23
     c7a:	8f 93       	push	r24
     c7c:	9f 93       	push	r25
     c7e:	af 93       	push	r26
     c80:	bf 93       	push	r27
     c82:	ef 93       	push	r30
     c84:	ff 93       	push	r31
     c86:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <intFunc+0x2>
     c8a:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <intFunc+0x3>
     c8e:	09 95       	icall
     c90:	ff 91       	pop	r31
     c92:	ef 91       	pop	r30
     c94:	bf 91       	pop	r27
     c96:	af 91       	pop	r26
     c98:	9f 91       	pop	r25
     c9a:	8f 91       	pop	r24
     c9c:	7f 91       	pop	r23
     c9e:	6f 91       	pop	r22
     ca0:	5f 91       	pop	r21
     ca2:	4f 91       	pop	r20
     ca4:	3f 91       	pop	r19
     ca6:	2f 91       	pop	r18
     ca8:	0f 90       	pop	r0
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	0f 90       	pop	r0
     cae:	1f 90       	pop	r1
     cb0:	18 95       	reti

00000cb2 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     cb2:	1f 92       	push	r1
     cb4:	0f 92       	push	r0
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	0f 92       	push	r0
     cba:	11 24       	eor	r1, r1
     cbc:	2f 93       	push	r18
     cbe:	3f 93       	push	r19
     cc0:	8f 93       	push	r24
     cc2:	9f 93       	push	r25
     cc4:	af 93       	push	r26
     cc6:	bf 93       	push	r27
     cc8:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <timer0_millis>
     ccc:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <timer0_millis+0x1>
     cd0:	a0 91 23 02 	lds	r26, 0x0223	; 0x800223 <timer0_millis+0x2>
     cd4:	b0 91 24 02 	lds	r27, 0x0224	; 0x800224 <timer0_millis+0x3>
     cd8:	30 91 20 02 	lds	r19, 0x0220	; 0x800220 <timer0_fract>
     cdc:	23 e0       	ldi	r18, 0x03	; 3
     cde:	23 0f       	add	r18, r19
     ce0:	2d 37       	cpi	r18, 0x7D	; 125
     ce2:	20 f4       	brcc	.+8      	; 0xcec <__vector_16+0x3a>
     ce4:	01 96       	adiw	r24, 0x01	; 1
     ce6:	a1 1d       	adc	r26, r1
     ce8:	b1 1d       	adc	r27, r1
     cea:	05 c0       	rjmp	.+10     	; 0xcf6 <__vector_16+0x44>
     cec:	26 e8       	ldi	r18, 0x86	; 134
     cee:	23 0f       	add	r18, r19
     cf0:	02 96       	adiw	r24, 0x02	; 2
     cf2:	a1 1d       	adc	r26, r1
     cf4:	b1 1d       	adc	r27, r1
     cf6:	20 93 20 02 	sts	0x0220, r18	; 0x800220 <timer0_fract>
     cfa:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <timer0_millis>
     cfe:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <timer0_millis+0x1>
     d02:	a0 93 23 02 	sts	0x0223, r26	; 0x800223 <timer0_millis+0x2>
     d06:	b0 93 24 02 	sts	0x0224, r27	; 0x800224 <timer0_millis+0x3>
     d0a:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <timer0_overflow_count>
     d0e:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <timer0_overflow_count+0x1>
     d12:	a0 91 27 02 	lds	r26, 0x0227	; 0x800227 <timer0_overflow_count+0x2>
     d16:	b0 91 28 02 	lds	r27, 0x0228	; 0x800228 <timer0_overflow_count+0x3>
     d1a:	01 96       	adiw	r24, 0x01	; 1
     d1c:	a1 1d       	adc	r26, r1
     d1e:	b1 1d       	adc	r27, r1
     d20:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <timer0_overflow_count>
     d24:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <timer0_overflow_count+0x1>
     d28:	a0 93 27 02 	sts	0x0227, r26	; 0x800227 <timer0_overflow_count+0x2>
     d2c:	b0 93 28 02 	sts	0x0228, r27	; 0x800228 <timer0_overflow_count+0x3>
     d30:	bf 91       	pop	r27
     d32:	af 91       	pop	r26
     d34:	9f 91       	pop	r25
     d36:	8f 91       	pop	r24
     d38:	3f 91       	pop	r19
     d3a:	2f 91       	pop	r18
     d3c:	0f 90       	pop	r0
     d3e:	0f be       	out	0x3f, r0	; 63
     d40:	0f 90       	pop	r0
     d42:	1f 90       	pop	r1
     d44:	18 95       	reti

00000d46 <micros>:
     d46:	3f b7       	in	r19, 0x3f	; 63
     d48:	f8 94       	cli
     d4a:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <timer0_overflow_count>
     d4e:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <timer0_overflow_count+0x1>
     d52:	a0 91 27 02 	lds	r26, 0x0227	; 0x800227 <timer0_overflow_count+0x2>
     d56:	b0 91 28 02 	lds	r27, 0x0228	; 0x800228 <timer0_overflow_count+0x3>
     d5a:	26 b5       	in	r18, 0x26	; 38
     d5c:	a8 9b       	sbis	0x15, 0	; 21
     d5e:	05 c0       	rjmp	.+10     	; 0xd6a <micros+0x24>
     d60:	2f 3f       	cpi	r18, 0xFF	; 255
     d62:	19 f0       	breq	.+6      	; 0xd6a <micros+0x24>
     d64:	01 96       	adiw	r24, 0x01	; 1
     d66:	a1 1d       	adc	r26, r1
     d68:	b1 1d       	adc	r27, r1
     d6a:	3f bf       	out	0x3f, r19	; 63
     d6c:	ba 2f       	mov	r27, r26
     d6e:	a9 2f       	mov	r26, r25
     d70:	98 2f       	mov	r25, r24
     d72:	88 27       	eor	r24, r24
     d74:	82 0f       	add	r24, r18
     d76:	91 1d       	adc	r25, r1
     d78:	a1 1d       	adc	r26, r1
     d7a:	b1 1d       	adc	r27, r1
     d7c:	bc 01       	movw	r22, r24
     d7e:	cd 01       	movw	r24, r26
     d80:	42 e0       	ldi	r20, 0x02	; 2
     d82:	66 0f       	add	r22, r22
     d84:	77 1f       	adc	r23, r23
     d86:	88 1f       	adc	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	4a 95       	dec	r20
     d8c:	d1 f7       	brne	.-12     	; 0xd82 <micros+0x3c>
     d8e:	08 95       	ret

00000d90 <delay>:
     d90:	8f 92       	push	r8
     d92:	9f 92       	push	r9
     d94:	af 92       	push	r10
     d96:	bf 92       	push	r11
     d98:	cf 92       	push	r12
     d9a:	df 92       	push	r13
     d9c:	ef 92       	push	r14
     d9e:	ff 92       	push	r15
     da0:	6b 01       	movw	r12, r22
     da2:	7c 01       	movw	r14, r24
     da4:	0e 94 a3 06 	call	0xd46	; 0xd46 <micros>
     da8:	4b 01       	movw	r8, r22
     daa:	5c 01       	movw	r10, r24
     dac:	c1 14       	cp	r12, r1
     dae:	d1 04       	cpc	r13, r1
     db0:	e1 04       	cpc	r14, r1
     db2:	f1 04       	cpc	r15, r1
     db4:	01 f1       	breq	.+64     	; 0xdf6 <delay+0x66>
     db6:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <yield>
     dba:	0e 94 a3 06 	call	0xd46	; 0xd46 <micros>
     dbe:	dc 01       	movw	r26, r24
     dc0:	cb 01       	movw	r24, r22
     dc2:	88 19       	sub	r24, r8
     dc4:	99 09       	sbc	r25, r9
     dc6:	aa 09       	sbc	r26, r10
     dc8:	bb 09       	sbc	r27, r11
     dca:	88 3e       	cpi	r24, 0xE8	; 232
     dcc:	93 40       	sbci	r25, 0x03	; 3
     dce:	a1 05       	cpc	r26, r1
     dd0:	b1 05       	cpc	r27, r1
     dd2:	60 f3       	brcs	.-40     	; 0xdac <delay+0x1c>
     dd4:	21 e0       	ldi	r18, 0x01	; 1
     dd6:	c2 1a       	sub	r12, r18
     dd8:	d1 08       	sbc	r13, r1
     dda:	e1 08       	sbc	r14, r1
     ddc:	f1 08       	sbc	r15, r1
     dde:	88 ee       	ldi	r24, 0xE8	; 232
     de0:	88 0e       	add	r8, r24
     de2:	83 e0       	ldi	r24, 0x03	; 3
     de4:	98 1e       	adc	r9, r24
     de6:	a1 1c       	adc	r10, r1
     de8:	b1 1c       	adc	r11, r1
     dea:	c1 14       	cp	r12, r1
     dec:	d1 04       	cpc	r13, r1
     dee:	e1 04       	cpc	r14, r1
     df0:	f1 04       	cpc	r15, r1
     df2:	19 f7       	brne	.-58     	; 0xdba <delay+0x2a>
     df4:	db cf       	rjmp	.-74     	; 0xdac <delay+0x1c>
     df6:	ff 90       	pop	r15
     df8:	ef 90       	pop	r14
     dfa:	df 90       	pop	r13
     dfc:	cf 90       	pop	r12
     dfe:	bf 90       	pop	r11
     e00:	af 90       	pop	r10
     e02:	9f 90       	pop	r9
     e04:	8f 90       	pop	r8
     e06:	08 95       	ret

00000e08 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     e08:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     e0a:	84 b5       	in	r24, 0x24	; 36
     e0c:	82 60       	ori	r24, 0x02	; 2
     e0e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     e10:	84 b5       	in	r24, 0x24	; 36
     e12:	81 60       	ori	r24, 0x01	; 1
     e14:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     e16:	85 b5       	in	r24, 0x25	; 37
     e18:	82 60       	ori	r24, 0x02	; 2
     e1a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     e1c:	85 b5       	in	r24, 0x25	; 37
     e1e:	81 60       	ori	r24, 0x01	; 1
     e20:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     e22:	ee e6       	ldi	r30, 0x6E	; 110
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	81 60       	ori	r24, 0x01	; 1
     e2a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     e2c:	e1 e8       	ldi	r30, 0x81	; 129
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     e32:	80 81       	ld	r24, Z
     e34:	82 60       	ori	r24, 0x02	; 2
     e36:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     e38:	80 81       	ld	r24, Z
     e3a:	81 60       	ori	r24, 0x01	; 1
     e3c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     e3e:	e0 e8       	ldi	r30, 0x80	; 128
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	81 60       	ori	r24, 0x01	; 1
     e46:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     e48:	e1 eb       	ldi	r30, 0xB1	; 177
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	84 60       	ori	r24, 0x04	; 4
     e50:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     e52:	e0 eb       	ldi	r30, 0xB0	; 176
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	81 60       	ori	r24, 0x01	; 1
     e5a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     e5c:	ea e7       	ldi	r30, 0x7A	; 122
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	84 60       	ori	r24, 0x04	; 4
     e64:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     e66:	80 81       	ld	r24, Z
     e68:	82 60       	ori	r24, 0x02	; 2
     e6a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     e6c:	80 81       	ld	r24, Z
     e6e:	81 60       	ori	r24, 0x01	; 1
     e70:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     e72:	80 81       	ld	r24, Z
     e74:	80 68       	ori	r24, 0x80	; 128
     e76:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     e78:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     e7c:	08 95       	ret

00000e7e <_ZN9DS3232RTC7bcd2decEh>:
{
    tmElements_t tm;

    breakTime(t, tm);
    return ( write(tm) );
}
     e7e:	98 2f       	mov	r25, r24
     e80:	92 95       	swap	r25
     e82:	9f 70       	andi	r25, 0x0F	; 15
     e84:	2a ef       	ldi	r18, 0xFA	; 250
     e86:	92 9f       	mul	r25, r18
     e88:	80 0d       	add	r24, r0
     e8a:	11 24       	eor	r1, r1
     e8c:	08 95       	ret

00000e8e <_GLOBAL__sub_I__ZN9DS3232RTC7errCodeE>:
     e8e:	80 e4       	ldi	r24, 0x40	; 64
     e90:	92 e0       	ldi	r25, 0x02	; 2
     e92:	0c 94 47 0b 	jmp	0x168e	; 0x168e <_ZN7TwoWire5beginEv>

00000e96 <_ZN9DS3232RTC8writeRTCEhPhh>:
     e96:	ff 92       	push	r15
     e98:	0f 93       	push	r16
     e9a:	1f 93       	push	r17
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
     ea0:	c6 2f       	mov	r28, r22
     ea2:	f4 2e       	mov	r15, r20
     ea4:	05 2f       	mov	r16, r21
     ea6:	12 2f       	mov	r17, r18
     ea8:	68 e6       	ldi	r22, 0x68	; 104
     eaa:	70 e0       	ldi	r23, 0x00	; 0
     eac:	80 e4       	ldi	r24, 0x40	; 64
     eae:	92 e0       	ldi	r25, 0x02	; 2
     eb0:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <_ZN7TwoWire17beginTransmissionEi>
     eb4:	6c 2f       	mov	r22, r28
     eb6:	80 e4       	ldi	r24, 0x40	; 64
     eb8:	92 e0       	ldi	r25, 0x02	; 2
     eba:	0e 94 08 0b 	call	0x1610	; 0x1610 <_ZN7TwoWire5writeEh>
     ebe:	cf 2d       	mov	r28, r15
     ec0:	d0 2f       	mov	r29, r16
     ec2:	ce 01       	movw	r24, r28
     ec4:	81 0f       	add	r24, r17
     ec6:	91 1d       	adc	r25, r1
     ec8:	8c 01       	movw	r16, r24
     eca:	c0 17       	cp	r28, r16
     ecc:	d1 07       	cpc	r29, r17
     ece:	31 f0       	breq	.+12     	; 0xedc <_ZN9DS3232RTC8writeRTCEhPhh+0x46>
     ed0:	69 91       	ld	r22, Y+
     ed2:	80 e4       	ldi	r24, 0x40	; 64
     ed4:	92 e0       	ldi	r25, 0x02	; 2
     ed6:	0e 94 08 0b 	call	0x1610	; 0x1610 <_ZN7TwoWire5writeEh>
     eda:	f7 cf       	rjmp	.-18     	; 0xeca <_ZN9DS3232RTC8writeRTCEhPhh+0x34>
     edc:	80 e4       	ldi	r24, 0x40	; 64
     ede:	92 e0       	ldi	r25, 0x02	; 2
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	1f 91       	pop	r17
     ee6:	0f 91       	pop	r16
     ee8:	ff 90       	pop	r15
     eea:	0c 94 da 0b 	jmp	0x17b4	; 0x17b4 <_ZN7TwoWire15endTransmissionEv>

00000eee <_ZN9DS3232RTC8writeRTCEhh>:
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	1f 92       	push	r1
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	49 83       	std	Y+1, r20	; 0x01
     efa:	21 e0       	ldi	r18, 0x01	; 1
     efc:	ae 01       	movw	r20, r28
     efe:	4f 5f       	subi	r20, 0xFF	; 255
     f00:	5f 4f       	sbci	r21, 0xFF	; 255
     f02:	0e 94 4b 07 	call	0xe96	; 0xe96 <_ZN9DS3232RTC8writeRTCEhPhh>
     f06:	0f 90       	pop	r0
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	08 95       	ret

00000f0e <_ZN9DS3232RTC4readER12tmElements_t>:
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	ec 01       	movw	r28, r24
     f14:	68 e6       	ldi	r22, 0x68	; 104
     f16:	70 e0       	ldi	r23, 0x00	; 0
     f18:	80 e4       	ldi	r24, 0x40	; 64
     f1a:	92 e0       	ldi	r25, 0x02	; 2
     f1c:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <_ZN7TwoWire17beginTransmissionEi>
     f20:	60 e0       	ldi	r22, 0x00	; 0
     f22:	80 e4       	ldi	r24, 0x40	; 64
     f24:	92 e0       	ldi	r25, 0x02	; 2
     f26:	0e 94 08 0b 	call	0x1610	; 0x1610 <_ZN7TwoWire5writeEh>
     f2a:	80 e4       	ldi	r24, 0x40	; 64
     f2c:	92 e0       	ldi	r25, 0x02	; 2
     f2e:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <_ZN7TwoWire15endTransmissionEv>
     f32:	88 23       	and	r24, r24
     f34:	19 f0       	breq	.+6      	; 0xf3c <_ZN9DS3232RTC4readER12tmElements_t+0x2e>
     f36:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <_ZN9DS3232RTC7errCodeE>
     f3a:	3c c0       	rjmp	.+120    	; 0xfb4 <_ZN9DS3232RTC4readER12tmElements_t+0xa6>
     f3c:	47 e0       	ldi	r20, 0x07	; 7
     f3e:	50 e0       	ldi	r21, 0x00	; 0
     f40:	68 e6       	ldi	r22, 0x68	; 104
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	80 e4       	ldi	r24, 0x40	; 64
     f46:	92 e0       	ldi	r25, 0x02	; 2
     f48:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <_ZN7TwoWire11requestFromEii>
     f4c:	80 e4       	ldi	r24, 0x40	; 64
     f4e:	92 e0       	ldi	r25, 0x02	; 2
     f50:	0e 94 b7 0a 	call	0x156e	; 0x156e <_ZN7TwoWire4readEv>
     f54:	8f 77       	andi	r24, 0x7F	; 127
     f56:	0e 94 3f 07 	call	0xe7e	; 0xe7e <_ZN9DS3232RTC7bcd2decEh>
     f5a:	88 83       	st	Y, r24
     f5c:	80 e4       	ldi	r24, 0x40	; 64
     f5e:	92 e0       	ldi	r25, 0x02	; 2
     f60:	0e 94 b7 0a 	call	0x156e	; 0x156e <_ZN7TwoWire4readEv>
     f64:	0e 94 3f 07 	call	0xe7e	; 0xe7e <_ZN9DS3232RTC7bcd2decEh>
     f68:	89 83       	std	Y+1, r24	; 0x01
     f6a:	80 e4       	ldi	r24, 0x40	; 64
     f6c:	92 e0       	ldi	r25, 0x02	; 2
     f6e:	0e 94 b7 0a 	call	0x156e	; 0x156e <_ZN7TwoWire4readEv>
     f72:	8f 7b       	andi	r24, 0xBF	; 191
     f74:	0e 94 3f 07 	call	0xe7e	; 0xe7e <_ZN9DS3232RTC7bcd2decEh>
     f78:	8a 83       	std	Y+2, r24	; 0x02
     f7a:	80 e4       	ldi	r24, 0x40	; 64
     f7c:	92 e0       	ldi	r25, 0x02	; 2
     f7e:	0e 94 b7 0a 	call	0x156e	; 0x156e <_ZN7TwoWire4readEv>
     f82:	8b 83       	std	Y+3, r24	; 0x03
     f84:	80 e4       	ldi	r24, 0x40	; 64
     f86:	92 e0       	ldi	r25, 0x02	; 2
     f88:	0e 94 b7 0a 	call	0x156e	; 0x156e <_ZN7TwoWire4readEv>
     f8c:	0e 94 3f 07 	call	0xe7e	; 0xe7e <_ZN9DS3232RTC7bcd2decEh>
     f90:	8c 83       	std	Y+4, r24	; 0x04
     f92:	80 e4       	ldi	r24, 0x40	; 64
     f94:	92 e0       	ldi	r25, 0x02	; 2
     f96:	0e 94 b7 0a 	call	0x156e	; 0x156e <_ZN7TwoWire4readEv>
     f9a:	8f 77       	andi	r24, 0x7F	; 127
     f9c:	0e 94 3f 07 	call	0xe7e	; 0xe7e <_ZN9DS3232RTC7bcd2decEh>
     fa0:	8d 83       	std	Y+5, r24	; 0x05
     fa2:	80 e4       	ldi	r24, 0x40	; 64
     fa4:	92 e0       	ldi	r25, 0x02	; 2
     fa6:	0e 94 b7 0a 	call	0x156e	; 0x156e <_ZN7TwoWire4readEv>
     faa:	0e 94 3f 07 	call	0xe7e	; 0xe7e <_ZN9DS3232RTC7bcd2decEh>
     fae:	82 5e       	subi	r24, 0xE2	; 226
     fb0:	8e 83       	std	Y+6, r24	; 0x06
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	08 95       	ret

00000fba <_ZN9DS3232RTC3getEv>:
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
     fc2:	27 97       	sbiw	r28, 0x07	; 7
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	f8 94       	cli
     fc8:	de bf       	out	0x3e, r29	; 62
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	cd bf       	out	0x3d, r28	; 61
     fce:	ce 01       	movw	r24, r28
     fd0:	01 96       	adiw	r24, 0x01	; 1
     fd2:	0e 94 87 07 	call	0xf0e	; 0xf0e <_ZN9DS3232RTC4readER12tmElements_t>
     fd6:	81 11       	cpse	r24, r1
     fd8:	05 c0       	rjmp	.+10     	; 0xfe4 <_ZN9DS3232RTC3getEv+0x2a>
     fda:	ce 01       	movw	r24, r28
     fdc:	01 96       	adiw	r24, 0x01	; 1
     fde:	0e 94 e7 09 	call	0x13ce	; 0x13ce <_Z8makeTimeR12tmElements_t>
     fe2:	03 c0       	rjmp	.+6      	; 0xfea <_ZN9DS3232RTC3getEv+0x30>
     fe4:	60 e0       	ldi	r22, 0x00	; 0
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	cb 01       	movw	r24, r22
     fea:	27 96       	adiw	r28, 0x07	; 7
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	f8 94       	cli
     ff0:	de bf       	out	0x3e, r29	; 62
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	cd bf       	out	0x3d, r28	; 61
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	08 95       	ret

00000ffc <_ZN9DS3232RTC7readRTCEhPhh>:
     ffc:	ff 92       	push	r15
     ffe:	0f 93       	push	r16
    1000:	1f 93       	push	r17
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	c6 2f       	mov	r28, r22
    1008:	f4 2e       	mov	r15, r20
    100a:	05 2f       	mov	r16, r21
    100c:	12 2f       	mov	r17, r18
    100e:	68 e6       	ldi	r22, 0x68	; 104
    1010:	70 e0       	ldi	r23, 0x00	; 0
    1012:	80 e4       	ldi	r24, 0x40	; 64
    1014:	92 e0       	ldi	r25, 0x02	; 2
    1016:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <_ZN7TwoWire17beginTransmissionEi>
    101a:	6c 2f       	mov	r22, r28
    101c:	80 e4       	ldi	r24, 0x40	; 64
    101e:	92 e0       	ldi	r25, 0x02	; 2
    1020:	0e 94 08 0b 	call	0x1610	; 0x1610 <_ZN7TwoWire5writeEh>
    1024:	80 e4       	ldi	r24, 0x40	; 64
    1026:	92 e0       	ldi	r25, 0x02	; 2
    1028:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <_ZN7TwoWire15endTransmissionEv>
    102c:	81 11       	cpse	r24, r1
    102e:	16 c0       	rjmp	.+44     	; 0x105c <_ZN9DS3232RTC7readRTCEhPhh+0x60>
    1030:	41 2f       	mov	r20, r17
    1032:	68 e6       	ldi	r22, 0x68	; 104
    1034:	80 e4       	ldi	r24, 0x40	; 64
    1036:	92 e0       	ldi	r25, 0x02	; 2
    1038:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN7TwoWire11requestFromEhh>
    103c:	cf 2d       	mov	r28, r15
    103e:	d0 2f       	mov	r29, r16
    1040:	ce 01       	movw	r24, r28
    1042:	81 0f       	add	r24, r17
    1044:	91 1d       	adc	r25, r1
    1046:	8c 01       	movw	r16, r24
    1048:	c0 17       	cp	r28, r16
    104a:	d1 07       	cpc	r29, r17
    104c:	31 f0       	breq	.+12     	; 0x105a <_ZN9DS3232RTC7readRTCEhPhh+0x5e>
    104e:	80 e4       	ldi	r24, 0x40	; 64
    1050:	92 e0       	ldi	r25, 0x02	; 2
    1052:	0e 94 b7 0a 	call	0x156e	; 0x156e <_ZN7TwoWire4readEv>
    1056:	89 93       	st	Y+, r24
    1058:	f7 cf       	rjmp	.-18     	; 0x1048 <_ZN9DS3232RTC7readRTCEhPhh+0x4c>
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	1f 91       	pop	r17
    1062:	0f 91       	pop	r16
    1064:	ff 90       	pop	r15
    1066:	08 95       	ret

00001068 <_ZN9DS3232RTC7readRTCEh>:
    1068:	cf 93       	push	r28
    106a:	df 93       	push	r29
    106c:	1f 92       	push	r1
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	21 e0       	ldi	r18, 0x01	; 1
    1074:	ae 01       	movw	r20, r28
    1076:	4f 5f       	subi	r20, 0xFF	; 255
    1078:	5f 4f       	sbci	r21, 0xFF	; 255
    107a:	0e 94 fe 07 	call	0xffc	; 0xffc <_ZN9DS3232RTC7readRTCEhPhh>
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	0f 90       	pop	r0
    1082:	df 91       	pop	r29
    1084:	cf 91       	pop	r28
    1086:	08 95       	ret

00001088 <_ZN9DS3232RTC14alarmInterruptEhb>:
/*----------------------------------------------------------------------*
 * Enable or disable an alarm "interrupt" which asserts the INT pin     *
 * on the RTC.                                                          *
 *----------------------------------------------------------------------*/
void DS3232RTC::alarmInterrupt(byte alarmNumber, bool interruptEnabled)
{
    1088:	0f 93       	push	r16
    108a:	1f 93       	push	r17
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	8c 01       	movw	r16, r24
    1092:	c6 2f       	mov	r28, r22
    1094:	d4 2f       	mov	r29, r20
    uint8_t controlReg, mask;
    
    controlReg = readRTC(RTC_CONTROL);
    1096:	6e e0       	ldi	r22, 0x0E	; 14
    1098:	0e 94 34 08 	call	0x1068	; 0x1068 <_ZN9DS3232RTC7readRTCEh>
    mask = _BV(A1IE) << (alarmNumber - 1);
    109c:	c1 50       	subi	r28, 0x01	; 1
    109e:	21 e0       	ldi	r18, 0x01	; 1
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	01 c0       	rjmp	.+2      	; 0x10a6 <_ZN9DS3232RTC14alarmInterruptEhb+0x1e>
    10a4:	22 0f       	add	r18, r18
    10a6:	ca 95       	dec	r28
    10a8:	ea f7       	brpl	.-6      	; 0x10a4 <_ZN9DS3232RTC14alarmInterruptEhb+0x1c>
    if (interruptEnabled)
    10aa:	dd 23       	and	r29, r29
    10ac:	19 f0       	breq	.+6      	; 0x10b4 <_ZN9DS3232RTC14alarmInterruptEhb+0x2c>
        controlReg |= mask;
    10ae:	48 2f       	mov	r20, r24
    10b0:	42 2b       	or	r20, r18
    10b2:	03 c0       	rjmp	.+6      	; 0x10ba <_ZN9DS3232RTC14alarmInterruptEhb+0x32>
    else
        controlReg &= ~mask;
    10b4:	20 95       	com	r18
    10b6:	42 2f       	mov	r20, r18
    10b8:	48 23       	and	r20, r24
    writeRTC(RTC_CONTROL, controlReg); 
    10ba:	6e e0       	ldi	r22, 0x0E	; 14
    10bc:	c8 01       	movw	r24, r16
}
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	1f 91       	pop	r17
    10c4:	0f 91       	pop	r16
    mask = _BV(A1IE) << (alarmNumber - 1);
    if (interruptEnabled)
        controlReg |= mask;
    else
        controlReg &= ~mask;
    writeRTC(RTC_CONTROL, controlReg); 
    10c6:	0c 94 77 07 	jmp	0xeee	; 0xeee <_ZN9DS3232RTC8writeRTCEhh>

000010ca <_ZN9DS3232RTC5alarmEh>:
/*----------------------------------------------------------------------*
 * Returns true or false depending on whether the given alarm has been  *
 * triggered, and resets the alarm flag bit.                            *
 *----------------------------------------------------------------------*/
bool DS3232RTC::alarm(byte alarmNumber)
{
    10ca:	0f 93       	push	r16
    10cc:	1f 93       	push	r17
    10ce:	cf 93       	push	r28
    10d0:	8c 01       	movw	r16, r24
    10d2:	c6 2f       	mov	r28, r22
    uint8_t statusReg, mask;
    
    statusReg = readRTC(RTC_STATUS);
    10d4:	6f e0       	ldi	r22, 0x0F	; 15
    10d6:	0e 94 34 08 	call	0x1068	; 0x1068 <_ZN9DS3232RTC7readRTCEh>
    mask = _BV(A1F) << (alarmNumber - 1);
    10da:	c1 50       	subi	r28, 0x01	; 1
    10dc:	21 e0       	ldi	r18, 0x01	; 1
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	01 c0       	rjmp	.+2      	; 0x10e4 <_ZN9DS3232RTC5alarmEh+0x1a>
    10e2:	22 0f       	add	r18, r18
    10e4:	ca 95       	dec	r28
    10e6:	ea f7       	brpl	.-6      	; 0x10e2 <_ZN9DS3232RTC5alarmEh+0x18>
    if (statusReg & mask) {
    10e8:	98 2f       	mov	r25, r24
    10ea:	92 23       	and	r25, r18
    10ec:	49 f0       	breq	.+18     	; 0x1100 <_ZN9DS3232RTC5alarmEh+0x36>
        statusReg &= ~mask;
    10ee:	20 95       	com	r18
    10f0:	42 2f       	mov	r20, r18
    10f2:	48 23       	and	r20, r24
        writeRTC(RTC_STATUS, statusReg);
    10f4:	6f e0       	ldi	r22, 0x0F	; 15
    10f6:	c8 01       	movw	r24, r16
    10f8:	0e 94 77 07 	call	0xeee	; 0xeee <_ZN9DS3232RTC8writeRTCEhh>
        return true;
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	01 c0       	rjmp	.+2      	; 0x1102 <_ZN9DS3232RTC5alarmEh+0x38>
    }
    else {
        return false;
    1100:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    1102:	cf 91       	pop	r28
    1104:	1f 91       	pop	r17
    1106:	0f 91       	pop	r16
    1108:	08 95       	ret

0000110a <_ZN9DS3232RTC10squareWaveE14SQWAVE_FREQS_t>:
/*----------------------------------------------------------------------*
 * Enable or disable the square wave output.                            *
 * Use a value from the SQWAVE_FREQS_t enumeration for the parameter.   *
 *----------------------------------------------------------------------*/
void DS3232RTC::squareWave(SQWAVE_FREQS_t freq)
{
    110a:	0f 93       	push	r16
    110c:	1f 93       	push	r17
    110e:	cf 93       	push	r28
    1110:	8c 01       	movw	r16, r24
    1112:	c6 2f       	mov	r28, r22
    uint8_t controlReg;

    controlReg = readRTC(RTC_CONTROL);
    1114:	6e e0       	ldi	r22, 0x0E	; 14
    1116:	0e 94 34 08 	call	0x1068	; 0x1068 <_ZN9DS3232RTC7readRTCEh>
    if (freq >= SQWAVE_NONE) {
        controlReg |= _BV(INTCN);
    111a:	48 2f       	mov	r20, r24
void DS3232RTC::squareWave(SQWAVE_FREQS_t freq)
{
    uint8_t controlReg;

    controlReg = readRTC(RTC_CONTROL);
    if (freq >= SQWAVE_NONE) {
    111c:	c4 30       	cpi	r28, 0x04	; 4
    111e:	10 f0       	brcs	.+4      	; 0x1124 <_ZN9DS3232RTC10squareWaveE14SQWAVE_FREQS_t+0x1a>
        controlReg |= _BV(INTCN);
    1120:	44 60       	ori	r20, 0x04	; 4
    1122:	06 c0       	rjmp	.+12     	; 0x1130 <_ZN9DS3232RTC10squareWaveE14SQWAVE_FREQS_t+0x26>
    }
    else {
        controlReg = (controlReg & 0xE3) | (freq << RS1);
    1124:	43 7e       	andi	r20, 0xE3	; 227
    1126:	88 e0       	ldi	r24, 0x08	; 8
    1128:	c8 9f       	mul	r28, r24
    112a:	b0 01       	movw	r22, r0
    112c:	11 24       	eor	r1, r1
    112e:	46 2b       	or	r20, r22
    }
    writeRTC(RTC_CONTROL, controlReg);
    1130:	6e e0       	ldi	r22, 0x0E	; 14
    1132:	c8 01       	movw	r24, r16
}
    1134:	cf 91       	pop	r28
    1136:	1f 91       	pop	r17
    1138:	0f 91       	pop	r16
        controlReg |= _BV(INTCN);
    }
    else {
        controlReg = (controlReg & 0xE3) | (freq << RS1);
    }
    writeRTC(RTC_CONTROL, controlReg);
    113a:	0c 94 77 07 	jmp	0xeee	; 0xeee <_ZN9DS3232RTC8writeRTCEhh>

0000113e <_Z13monthShortStrh>:
}

char* monthShortStr(uint8_t month)
{
   for (int i=0; i < dt_SHORT_STR_LEN; i++)      
      buffer[i] = pgm_read_byte(&(monthShortNames_P[i+ (month*dt_SHORT_STR_LEN)]));  
    113e:	23 e0       	ldi	r18, 0x03	; 3
    1140:	82 9f       	mul	r24, r18
    1142:	c0 01       	movw	r24, r0
    1144:	11 24       	eor	r1, r1
    1146:	ab e2       	ldi	r26, 0x2B	; 43
    1148:	b2 e0       	ldi	r27, 0x02	; 2
    return buffer;
}

char* monthShortStr(uint8_t month)
{
   for (int i=0; i < dt_SHORT_STR_LEN; i++)      
    114a:	20 e0       	ldi	r18, 0x00	; 0
    114c:	30 e0       	ldi	r19, 0x00	; 0
      buffer[i] = pgm_read_byte(&(monthShortNames_P[i+ (month*dt_SHORT_STR_LEN)]));  
    114e:	fc 01       	movw	r30, r24
    1150:	e2 0f       	add	r30, r18
    1152:	f3 1f       	adc	r31, r19
    1154:	e8 59       	subi	r30, 0x98	; 152
    1156:	ff 4f       	sbci	r31, 0xFF	; 255
    1158:	e4 91       	lpm	r30, Z
    115a:	ed 93       	st	X+, r30
    return buffer;
}

char* monthShortStr(uint8_t month)
{
   for (int i=0; i < dt_SHORT_STR_LEN; i++)      
    115c:	2f 5f       	subi	r18, 0xFF	; 255
    115e:	3f 4f       	sbci	r19, 0xFF	; 255
    1160:	23 30       	cpi	r18, 0x03	; 3
    1162:	31 05       	cpc	r19, r1
    1164:	a1 f7       	brne	.-24     	; 0x114e <_Z13monthShortStrh+0x10>
      buffer[i] = pgm_read_byte(&(monthShortNames_P[i+ (month*dt_SHORT_STR_LEN)]));  
   buffer[dt_SHORT_STR_LEN] = 0;
    1166:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <_ZL6buffer+0x3>
   return buffer;
}
    116a:	8b e2       	ldi	r24, 0x2B	; 43
    116c:	92 e0       	ldi	r25, 0x02	; 2
    116e:	08 95       	ret

00001170 <_Z9breakTimemR12tmElements_t>:
}

int weekday(time_t t) {
  refreshCache(t);
  return tm.Wday;
}
    1170:	6f 92       	push	r6
    1172:	7f 92       	push	r7
    1174:	8f 92       	push	r8
    1176:	9f 92       	push	r9
    1178:	af 92       	push	r10
    117a:	bf 92       	push	r11
    117c:	cf 92       	push	r12
    117e:	df 92       	push	r13
    1180:	ef 92       	push	r14
    1182:	ff 92       	push	r15
    1184:	0f 93       	push	r16
    1186:	1f 93       	push	r17
    1188:	cf 93       	push	r28
    118a:	df 93       	push	r29
    118c:	6b 01       	movw	r12, r22
    118e:	7c 01       	movw	r14, r24
    1190:	ea 01       	movw	r28, r20
    1192:	8c e3       	ldi	r24, 0x3C	; 60
    1194:	88 2e       	mov	r8, r24
    1196:	91 2c       	mov	r9, r1
    1198:	a1 2c       	mov	r10, r1
    119a:	b1 2c       	mov	r11, r1
    119c:	c7 01       	movw	r24, r14
    119e:	b6 01       	movw	r22, r12
    11a0:	a5 01       	movw	r20, r10
    11a2:	94 01       	movw	r18, r8
    11a4:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <__udivmodsi4>
    11a8:	68 83       	st	Y, r22
    11aa:	ca 01       	movw	r24, r20
    11ac:	b9 01       	movw	r22, r18
    11ae:	a5 01       	movw	r20, r10
    11b0:	94 01       	movw	r18, r8
    11b2:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <__udivmodsi4>
    11b6:	69 83       	std	Y+1, r22	; 0x01
    11b8:	c7 01       	movw	r24, r14
    11ba:	b6 01       	movw	r22, r12
    11bc:	20 e1       	ldi	r18, 0x10	; 16
    11be:	3e e0       	ldi	r19, 0x0E	; 14
    11c0:	40 e0       	ldi	r20, 0x00	; 0
    11c2:	50 e0       	ldi	r21, 0x00	; 0
    11c4:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <__udivmodsi4>
    11c8:	ca 01       	movw	r24, r20
    11ca:	b9 01       	movw	r22, r18
    11cc:	28 e1       	ldi	r18, 0x18	; 24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	40 e0       	ldi	r20, 0x00	; 0
    11d2:	50 e0       	ldi	r21, 0x00	; 0
    11d4:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <__udivmodsi4>
    11d8:	6a 83       	std	Y+2, r22	; 0x02
    11da:	c7 01       	movw	r24, r14
    11dc:	b6 01       	movw	r22, r12
    11de:	20 e8       	ldi	r18, 0x80	; 128
    11e0:	31 e5       	ldi	r19, 0x51	; 81
    11e2:	41 e0       	ldi	r20, 0x01	; 1
    11e4:	50 e0       	ldi	r21, 0x00	; 0
    11e6:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <__udivmodsi4>
    11ea:	69 01       	movw	r12, r18
    11ec:	7a 01       	movw	r14, r20
    11ee:	ca 01       	movw	r24, r20
    11f0:	b9 01       	movw	r22, r18
    11f2:	6c 5f       	subi	r22, 0xFC	; 252
    11f4:	7f 4f       	sbci	r23, 0xFF	; 255
    11f6:	8f 4f       	sbci	r24, 0xFF	; 255
    11f8:	9f 4f       	sbci	r25, 0xFF	; 255
    11fa:	27 e0       	ldi	r18, 0x07	; 7
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	40 e0       	ldi	r20, 0x00	; 0
    1200:	50 e0       	ldi	r21, 0x00	; 0
    1202:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <__udivmodsi4>
    1206:	6f 5f       	subi	r22, 0xFF	; 255
    1208:	6b 83       	std	Y+3, r22	; 0x03
    120a:	81 2c       	mov	r8, r1
    120c:	91 2c       	mov	r9, r1
    120e:	54 01       	movw	r10, r8
    1210:	40 e0       	ldi	r20, 0x00	; 0
    1212:	94 e6       	ldi	r25, 0x64	; 100
    1214:	69 2e       	mov	r6, r25
    1216:	71 2c       	mov	r7, r1
    1218:	00 e9       	ldi	r16, 0x90	; 144
    121a:	11 e0       	ldi	r17, 0x01	; 1
    121c:	24 2f       	mov	r18, r20
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	2e 54       	subi	r18, 0x4E	; 78
    1222:	38 4f       	sbci	r19, 0xF8	; 248
    1224:	f9 01       	movw	r30, r18
    1226:	e3 70       	andi	r30, 0x03	; 3
    1228:	ff 27       	eor	r31, r31
    122a:	30 97       	sbiw	r30, 0x00	; 0
    122c:	89 f4       	brne	.+34     	; 0x1250 <_Z9breakTimemR12tmElements_t+0xe0>
    122e:	c9 01       	movw	r24, r18
    1230:	b3 01       	movw	r22, r6
    1232:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__divmodhi4>
    1236:	89 2b       	or	r24, r25
    1238:	31 f4       	brne	.+12     	; 0x1246 <_Z9breakTimemR12tmElements_t+0xd6>
    123a:	c9 01       	movw	r24, r18
    123c:	b8 01       	movw	r22, r16
    123e:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__divmodhi4>
    1242:	89 2b       	or	r24, r25
    1244:	29 f4       	brne	.+10     	; 0x1250 <_Z9breakTimemR12tmElements_t+0xe0>
    1246:	8e e6       	ldi	r24, 0x6E	; 110
    1248:	91 e0       	ldi	r25, 0x01	; 1
    124a:	a0 e0       	ldi	r26, 0x00	; 0
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	04 c0       	rjmp	.+8      	; 0x1258 <_Z9breakTimemR12tmElements_t+0xe8>
    1250:	8d e6       	ldi	r24, 0x6D	; 109
    1252:	91 e0       	ldi	r25, 0x01	; 1
    1254:	a0 e0       	ldi	r26, 0x00	; 0
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	88 0e       	add	r8, r24
    125a:	99 1e       	adc	r9, r25
    125c:	aa 1e       	adc	r10, r26
    125e:	bb 1e       	adc	r11, r27
    1260:	d5 01       	movw	r26, r10
    1262:	c4 01       	movw	r24, r8
    1264:	aa 27       	eor	r26, r26
    1266:	bb 27       	eor	r27, r27
    1268:	c8 16       	cp	r12, r24
    126a:	d9 06       	cpc	r13, r25
    126c:	ea 06       	cpc	r14, r26
    126e:	fb 06       	cpc	r15, r27
    1270:	10 f0       	brcs	.+4      	; 0x1276 <_Z9breakTimemR12tmElements_t+0x106>
    1272:	4f 5f       	subi	r20, 0xFF	; 255
    1274:	d3 cf       	rjmp	.-90     	; 0x121c <_Z9breakTimemR12tmElements_t+0xac>
    1276:	4e 83       	std	Y+6, r20	; 0x06
    1278:	30 97       	sbiw	r30, 0x00	; 0
    127a:	99 f4       	brne	.+38     	; 0x12a2 <_Z9breakTimemR12tmElements_t+0x132>
    127c:	c9 01       	movw	r24, r18
    127e:	64 e6       	ldi	r22, 0x64	; 100
    1280:	70 e0       	ldi	r23, 0x00	; 0
    1282:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__divmodhi4>
    1286:	89 2b       	or	r24, r25
    1288:	39 f4       	brne	.+14     	; 0x1298 <_Z9breakTimemR12tmElements_t+0x128>
    128a:	c9 01       	movw	r24, r18
    128c:	60 e9       	ldi	r22, 0x90	; 144
    128e:	71 e0       	ldi	r23, 0x01	; 1
    1290:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__divmodhi4>
    1294:	89 2b       	or	r24, r25
    1296:	29 f4       	brne	.+10     	; 0x12a2 <_Z9breakTimemR12tmElements_t+0x132>
    1298:	8e e6       	ldi	r24, 0x6E	; 110
    129a:	91 e0       	ldi	r25, 0x01	; 1
    129c:	a0 e0       	ldi	r26, 0x00	; 0
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	04 c0       	rjmp	.+8      	; 0x12aa <_Z9breakTimemR12tmElements_t+0x13a>
    12a2:	8d e6       	ldi	r24, 0x6D	; 109
    12a4:	91 e0       	ldi	r25, 0x01	; 1
    12a6:	a0 e0       	ldi	r26, 0x00	; 0
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	88 1a       	sub	r8, r24
    12ac:	99 0a       	sbc	r9, r25
    12ae:	aa 0a       	sbc	r10, r26
    12b0:	bb 0a       	sbc	r11, r27
    12b2:	c8 18       	sub	r12, r8
    12b4:	d9 08       	sbc	r13, r9
    12b6:	ea 08       	sbc	r14, r10
    12b8:	fb 08       	sbc	r15, r11
    12ba:	c9 01       	movw	r24, r18
    12bc:	64 e6       	ldi	r22, 0x64	; 100
    12be:	70 e0       	ldi	r23, 0x00	; 0
    12c0:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__divmodhi4>
    12c4:	8c 01       	movw	r16, r24
    12c6:	c9 01       	movw	r24, r18
    12c8:	60 e9       	ldi	r22, 0x90	; 144
    12ca:	71 e0       	ldi	r23, 0x01	; 1
    12cc:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__divmodhi4>
    12d0:	a6 e5       	ldi	r26, 0x56	; 86
    12d2:	b1 e0       	ldi	r27, 0x01	; 1
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	21 30       	cpi	r18, 0x01	; 1
    12d8:	41 f4       	brne	.+16     	; 0x12ea <_Z9breakTimemR12tmElements_t+0x17a>
    12da:	30 97       	sbiw	r30, 0x00	; 0
    12dc:	51 f4       	brne	.+20     	; 0x12f2 <_Z9breakTimemR12tmElements_t+0x182>
    12de:	01 15       	cp	r16, r1
    12e0:	11 05       	cpc	r17, r1
    12e2:	29 f4       	brne	.+10     	; 0x12ee <_Z9breakTimemR12tmElements_t+0x17e>
    12e4:	00 97       	sbiw	r24, 0x00	; 0
    12e6:	29 f4       	brne	.+10     	; 0x12f2 <_Z9breakTimemR12tmElements_t+0x182>
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <_Z9breakTimemR12tmElements_t+0x17e>
    12ea:	4c 91       	ld	r20, X
    12ec:	03 c0       	rjmp	.+6      	; 0x12f4 <_Z9breakTimemR12tmElements_t+0x184>
    12ee:	4d e1       	ldi	r20, 0x1D	; 29
    12f0:	01 c0       	rjmp	.+2      	; 0x12f4 <_Z9breakTimemR12tmElements_t+0x184>
    12f2:	4c e1       	ldi	r20, 0x1C	; 28
    12f4:	50 e0       	ldi	r21, 0x00	; 0
    12f6:	60 e0       	ldi	r22, 0x00	; 0
    12f8:	70 e0       	ldi	r23, 0x00	; 0
    12fa:	c4 16       	cp	r12, r20
    12fc:	d5 06       	cpc	r13, r21
    12fe:	e6 06       	cpc	r14, r22
    1300:	f7 06       	cpc	r15, r23
    1302:	40 f0       	brcs	.+16     	; 0x1314 <_Z9breakTimemR12tmElements_t+0x1a4>
    1304:	c4 1a       	sub	r12, r20
    1306:	d5 0a       	sbc	r13, r21
    1308:	e6 0a       	sbc	r14, r22
    130a:	f7 0a       	sbc	r15, r23
    130c:	2f 5f       	subi	r18, 0xFF	; 255
    130e:	11 96       	adiw	r26, 0x01	; 1
    1310:	2c 30       	cpi	r18, 0x0C	; 12
    1312:	09 f7       	brne	.-62     	; 0x12d6 <_Z9breakTimemR12tmElements_t+0x166>
    1314:	2f 5f       	subi	r18, 0xFF	; 255
    1316:	2d 83       	std	Y+5, r18	; 0x05
    1318:	c3 94       	inc	r12
    131a:	cc 82       	std	Y+4, r12	; 0x04
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	1f 91       	pop	r17
    1322:	0f 91       	pop	r16
    1324:	ff 90       	pop	r15
    1326:	ef 90       	pop	r14
    1328:	df 90       	pop	r13
    132a:	cf 90       	pop	r12
    132c:	bf 90       	pop	r11
    132e:	af 90       	pop	r10
    1330:	9f 90       	pop	r9
    1332:	8f 90       	pop	r8
    1334:	7f 90       	pop	r7
    1336:	6f 90       	pop	r6
    1338:	08 95       	ret

0000133a <_Z12refreshCachem>:
    133a:	cf 92       	push	r12
    133c:	df 92       	push	r13
    133e:	ef 92       	push	r14
    1340:	ff 92       	push	r15
    1342:	c0 90 35 02 	lds	r12, 0x0235	; 0x800235 <_ZL9cacheTime>
    1346:	d0 90 36 02 	lds	r13, 0x0236	; 0x800236 <_ZL9cacheTime+0x1>
    134a:	e0 90 37 02 	lds	r14, 0x0237	; 0x800237 <_ZL9cacheTime+0x2>
    134e:	f0 90 38 02 	lds	r15, 0x0238	; 0x800238 <_ZL9cacheTime+0x3>
    1352:	c6 16       	cp	r12, r22
    1354:	d7 06       	cpc	r13, r23
    1356:	e8 06       	cpc	r14, r24
    1358:	f9 06       	cpc	r15, r25
    135a:	71 f0       	breq	.+28     	; 0x1378 <_Z12refreshCachem+0x3e>
    135c:	6b 01       	movw	r12, r22
    135e:	7c 01       	movw	r14, r24
    1360:	49 e3       	ldi	r20, 0x39	; 57
    1362:	52 e0       	ldi	r21, 0x02	; 2
    1364:	0e 94 b8 08 	call	0x1170	; 0x1170 <_Z9breakTimemR12tmElements_t>
    1368:	c0 92 35 02 	sts	0x0235, r12	; 0x800235 <_ZL9cacheTime>
    136c:	d0 92 36 02 	sts	0x0236, r13	; 0x800236 <_ZL9cacheTime+0x1>
    1370:	e0 92 37 02 	sts	0x0237, r14	; 0x800237 <_ZL9cacheTime+0x2>
    1374:	f0 92 38 02 	sts	0x0238, r15	; 0x800238 <_ZL9cacheTime+0x3>
    1378:	ff 90       	pop	r15
    137a:	ef 90       	pop	r14
    137c:	df 90       	pop	r13
    137e:	cf 90       	pop	r12
    1380:	08 95       	ret

00001382 <_Z4hourm>:
    1382:	0e 94 9d 09 	call	0x133a	; 0x133a <_Z12refreshCachem>
    1386:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <_ZL2tm+0x2>
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	08 95       	ret

0000138e <_Z6minutem>:
    138e:	0e 94 9d 09 	call	0x133a	; 0x133a <_Z12refreshCachem>
    1392:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <_ZL2tm+0x1>
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	08 95       	ret

0000139a <_Z6secondm>:
    139a:	0e 94 9d 09 	call	0x133a	; 0x133a <_Z12refreshCachem>
    139e:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <_ZL2tm>
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	08 95       	ret

000013a6 <_Z3daym>:
    13a6:	0e 94 9d 09 	call	0x133a	; 0x133a <_Z12refreshCachem>
    13aa:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <_ZL2tm+0x4>
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	08 95       	ret

000013b2 <_Z5monthm>:
int month(){
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
  refreshCache(t);
    13b2:	0e 94 9d 09 	call	0x133a	; 0x133a <_Z12refreshCachem>
  return tm.Month;
    13b6:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <_ZL2tm+0x5>
}
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	08 95       	ret

000013be <_Z4yearm>:
int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
    13be:	0e 94 9d 09 	call	0x133a	; 0x133a <_Z12refreshCachem>
  return tmYearToCalendar(tm.Year);
    13c2:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <_ZL2tm+0x6>
    13c6:	90 e0       	ldi	r25, 0x00	; 0
}
    13c8:	8e 54       	subi	r24, 0x4E	; 78
    13ca:	98 4f       	sbci	r25, 0xF8	; 248
    13cc:	08 95       	ret

000013ce <_Z8makeTimeR12tmElements_t>:
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
}

time_t makeTime(tmElements_t &tm){   
    13ce:	4f 92       	push	r4
    13d0:	5f 92       	push	r5
    13d2:	6f 92       	push	r6
    13d4:	7f 92       	push	r7
    13d6:	8f 92       	push	r8
    13d8:	9f 92       	push	r9
    13da:	af 92       	push	r10
    13dc:	bf 92       	push	r11
    13de:	cf 92       	push	r12
    13e0:	df 92       	push	r13
    13e2:	ef 92       	push	r14
    13e4:	ff 92       	push	r15
    13e6:	0f 93       	push	r16
    13e8:	1f 93       	push	r17
    13ea:	cf 93       	push	r28
    13ec:	df 93       	push	r29
    13ee:	fc 01       	movw	r30, r24
  
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
    13f0:	16 81       	ldd	r17, Z+6	; 0x06
    13f2:	a1 2f       	mov	r26, r17
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	20 e8       	ldi	r18, 0x80	; 128
    13f8:	33 e3       	ldi	r19, 0x33	; 51
    13fa:	41 ee       	ldi	r20, 0xE1	; 225
    13fc:	51 e0       	ldi	r21, 0x01	; 1
    13fe:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__muluhisi3>
    1402:	4b 01       	movw	r8, r22
    1404:	5c 01       	movw	r10, r24
    1406:	c2 eb       	ldi	r28, 0xB2	; 178
    1408:	d7 e0       	ldi	r29, 0x07	; 7
  for (i = 0; i < tm.Year; i++) {
    140a:	9d 01       	movw	r18, r26
    if (LEAP_YEAR(i)) {
    140c:	04 e6       	ldi	r16, 0x64	; 100
    140e:	10 e0       	ldi	r17, 0x00	; 0
    1410:	80 e9       	ldi	r24, 0x90	; 144
    1412:	e8 2e       	mov	r14, r24
    1414:	ff 24       	eor	r15, r15
    1416:	f3 94       	inc	r15
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    1418:	ce 01       	movw	r24, r28
    141a:	82 5b       	subi	r24, 0xB2	; 178
    141c:	97 40       	sbci	r25, 0x07	; 7
    141e:	82 17       	cp	r24, r18
    1420:	93 07       	cpc	r25, r19
    1422:	d4 f4       	brge	.+52     	; 0x1458 <_Z8makeTimeR12tmElements_t+0x8a>
    if (LEAP_YEAR(i)) {
    1424:	ce 01       	movw	r24, r28
    1426:	83 70       	andi	r24, 0x03	; 3
    1428:	99 27       	eor	r25, r25
    142a:	89 2b       	or	r24, r25
    142c:	99 f4       	brne	.+38     	; 0x1454 <_Z8makeTimeR12tmElements_t+0x86>
    142e:	ce 01       	movw	r24, r28
    1430:	b8 01       	movw	r22, r16
    1432:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__divmodhi4>
    1436:	89 2b       	or	r24, r25
    1438:	31 f4       	brne	.+12     	; 0x1446 <_Z8makeTimeR12tmElements_t+0x78>
    143a:	ce 01       	movw	r24, r28
    143c:	b7 01       	movw	r22, r14
    143e:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__divmodhi4>
    1442:	89 2b       	or	r24, r25
    1444:	39 f4       	brne	.+14     	; 0x1454 <_Z8makeTimeR12tmElements_t+0x86>
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    1446:	80 e8       	ldi	r24, 0x80	; 128
    1448:	88 0e       	add	r8, r24
    144a:	81 e5       	ldi	r24, 0x51	; 81
    144c:	98 1e       	adc	r9, r24
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	a8 1e       	adc	r10, r24
    1452:	b1 1c       	adc	r11, r1
    1454:	21 96       	adiw	r28, 0x01	; 1
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    1456:	e0 cf       	rjmp	.-64     	; 0x1418 <_Z8makeTimeR12tmElements_t+0x4a>
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    1458:	45 80       	ldd	r4, Z+5	; 0x05
    145a:	51 2c       	mov	r5, r1
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    145c:	2e 54       	subi	r18, 0x4E	; 78
    145e:	38 4f       	sbci	r19, 0xF8	; 248
    1460:	c9 01       	movw	r24, r18
    1462:	64 e6       	ldi	r22, 0x64	; 100
    1464:	70 e0       	ldi	r23, 0x00	; 0
    1466:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__divmodhi4>
    146a:	7c 01       	movw	r14, r24
    146c:	c9 01       	movw	r24, r18
    146e:	60 e9       	ldi	r22, 0x90	; 144
    1470:	71 e0       	ldi	r23, 0x01	; 1
    1472:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__divmodhi4>
    1476:	6c 01       	movw	r12, r24
    1478:	06 e5       	ldi	r16, 0x56	; 86
    147a:	11 e0       	ldi	r17, 0x01	; 1
    147c:	c1 e0       	ldi	r28, 0x01	; 1
    147e:	d0 e0       	ldi	r29, 0x00	; 0
    1480:	39 01       	movw	r6, r18
    1482:	a3 e0       	ldi	r26, 0x03	; 3
    1484:	6a 22       	and	r6, r26
    1486:	77 24       	eor	r7, r7
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    1488:	c4 15       	cp	r28, r4
    148a:	d5 05       	cpc	r29, r5
    148c:	34 f5       	brge	.+76     	; 0x14da <_Z8makeTimeR12tmElements_t+0x10c>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    148e:	c2 30       	cpi	r28, 0x02	; 2
    1490:	d1 05       	cpc	r29, r1
    1492:	89 f4       	brne	.+34     	; 0x14b6 <_Z8makeTimeR12tmElements_t+0xe8>
    1494:	61 14       	cp	r6, r1
    1496:	71 04       	cpc	r7, r1
    1498:	71 f4       	brne	.+28     	; 0x14b6 <_Z8makeTimeR12tmElements_t+0xe8>
    149a:	e1 14       	cp	r14, r1
    149c:	f1 04       	cpc	r15, r1
    149e:	19 f4       	brne	.+6      	; 0x14a6 <_Z8makeTimeR12tmElements_t+0xd8>
    14a0:	c1 14       	cp	r12, r1
    14a2:	d1 04       	cpc	r13, r1
    14a4:	41 f4       	brne	.+16     	; 0x14b6 <_Z8makeTimeR12tmElements_t+0xe8>
      seconds += SECS_PER_DAY * 29;
    14a6:	b0 e8       	ldi	r27, 0x80	; 128
    14a8:	8b 0e       	add	r8, r27
    14aa:	bb e3       	ldi	r27, 0x3B	; 59
    14ac:	9b 1e       	adc	r9, r27
    14ae:	b6 e2       	ldi	r27, 0x26	; 38
    14b0:	ab 1e       	adc	r10, r27
    14b2:	b1 1c       	adc	r11, r1
    14b4:	0e c0       	rjmp	.+28     	; 0x14d2 <_Z8makeTimeR12tmElements_t+0x104>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    14b6:	d8 01       	movw	r26, r16
    14b8:	8c 91       	ld	r24, X
    14ba:	a8 2f       	mov	r26, r24
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	20 e8       	ldi	r18, 0x80	; 128
    14c0:	31 e5       	ldi	r19, 0x51	; 81
    14c2:	41 e0       	ldi	r20, 0x01	; 1
    14c4:	50 e0       	ldi	r21, 0x00	; 0
    14c6:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__muluhisi3>
    14ca:	86 0e       	add	r8, r22
    14cc:	97 1e       	adc	r9, r23
    14ce:	a8 1e       	adc	r10, r24
    14d0:	b9 1e       	adc	r11, r25
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    14d2:	21 96       	adiw	r28, 0x01	; 1
    14d4:	0f 5f       	subi	r16, 0xFF	; 255
    14d6:	1f 4f       	sbci	r17, 0xFF	; 255
    14d8:	d7 cf       	rjmp	.-82     	; 0x1488 <_Z8makeTimeR12tmElements_t+0xba>
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    }
  }
  seconds+= (tm.Day-1) * SECS_PER_DAY;
  seconds+= tm.Hour * SECS_PER_HOUR;
  seconds+= tm.Minute * SECS_PER_MIN;
    14da:	41 81       	ldd	r20, Z+1	; 0x01
  seconds+= tm.Second;
  return (time_t)seconds; 
    14dc:	22 81       	ldd	r18, Z+2	; 0x02
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	a0 e1       	ldi	r26, 0x10	; 16
    14e2:	be e0       	ldi	r27, 0x0E	; 14
    14e4:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__umulhisi3>
    14e8:	6b 01       	movw	r12, r22
    14ea:	7c 01       	movw	r14, r24
    14ec:	24 2f       	mov	r18, r20
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	ac e3       	ldi	r26, 0x3C	; 60
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__umulhisi3>
    14f8:	dc 01       	movw	r26, r24
    14fa:	cb 01       	movw	r24, r22
    14fc:	8c 0d       	add	r24, r12
    14fe:	9d 1d       	adc	r25, r13
    1500:	ae 1d       	adc	r26, r14
    1502:	bf 1d       	adc	r27, r15
    1504:	20 81       	ld	r18, Z
    1506:	6c 01       	movw	r12, r24
    1508:	7d 01       	movw	r14, r26
    150a:	c2 0e       	add	r12, r18
    150c:	d1 1c       	adc	r13, r1
    150e:	e1 1c       	adc	r14, r1
    1510:	f1 1c       	adc	r15, r1
    1512:	a4 81       	ldd	r26, Z+4	; 0x04
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	11 97       	sbiw	r26, 0x01	; 1
    1518:	20 e8       	ldi	r18, 0x80	; 128
    151a:	31 e5       	ldi	r19, 0x51	; 81
    151c:	41 e0       	ldi	r20, 0x01	; 1
    151e:	50 e0       	ldi	r21, 0x00	; 0
    1520:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <__mulshisi3>
    1524:	dc 01       	movw	r26, r24
    1526:	cb 01       	movw	r24, r22
    1528:	8c 0d       	add	r24, r12
    152a:	9d 1d       	adc	r25, r13
    152c:	ae 1d       	adc	r26, r14
    152e:	bf 1d       	adc	r27, r15
    1530:	bc 01       	movw	r22, r24
    1532:	cd 01       	movw	r24, r26
    1534:	68 0d       	add	r22, r8
    1536:	79 1d       	adc	r23, r9
    1538:	8a 1d       	adc	r24, r10
    153a:	9b 1d       	adc	r25, r11
}
    153c:	df 91       	pop	r29
    153e:	cf 91       	pop	r28
    1540:	1f 91       	pop	r17
    1542:	0f 91       	pop	r16
    1544:	ff 90       	pop	r15
    1546:	ef 90       	pop	r14
    1548:	df 90       	pop	r13
    154a:	cf 90       	pop	r12
    154c:	bf 90       	pop	r11
    154e:	af 90       	pop	r10
    1550:	9f 90       	pop	r9
    1552:	8f 90       	pop	r8
    1554:	7f 90       	pop	r7
    1556:	6f 90       	pop	r6
    1558:	5f 90       	pop	r5
    155a:	4f 90       	pop	r4
    155c:	08 95       	ret

0000155e <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    155e:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <_ZN7TwoWire14rxBufferLengthE>
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	20 91 71 02 	lds	r18, 0x0271	; 0x800271 <_ZN7TwoWire13rxBufferIndexE>
    1568:	82 1b       	sub	r24, r18
    156a:	91 09       	sbc	r25, r1
    156c:	08 95       	ret

0000156e <_ZN7TwoWire4readEv>:
    156e:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <_ZN7TwoWire13rxBufferIndexE>
    1572:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <_ZN7TwoWire14rxBufferLengthE>
    1576:	98 17       	cp	r25, r24
    1578:	50 f4       	brcc	.+20     	; 0x158e <_ZN7TwoWire4readEv+0x20>
    157a:	e9 2f       	mov	r30, r25
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	ee 58       	subi	r30, 0x8E	; 142
    1580:	fd 4f       	sbci	r31, 0xFD	; 253
    1582:	20 81       	ld	r18, Z
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	9f 5f       	subi	r25, 0xFF	; 255
    1588:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <_ZN7TwoWire13rxBufferIndexE>
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <_ZN7TwoWire4readEv+0x24>
    158e:	2f ef       	ldi	r18, 0xFF	; 255
    1590:	3f ef       	ldi	r19, 0xFF	; 255
    1592:	c9 01       	movw	r24, r18
    1594:	08 95       	ret

00001596 <_ZN7TwoWire4peekEv>:
    1596:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <_ZN7TwoWire13rxBufferIndexE>
    159a:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <_ZN7TwoWire14rxBufferLengthE>
    159e:	e8 17       	cp	r30, r24
    15a0:	30 f4       	brcc	.+12     	; 0x15ae <_ZN7TwoWire4peekEv+0x18>
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	ee 58       	subi	r30, 0x8E	; 142
    15a6:	fd 4f       	sbci	r31, 0xFD	; 253
    15a8:	80 81       	ld	r24, Z
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	08 95       	ret
    15ae:	8f ef       	ldi	r24, 0xFF	; 255
    15b0:	9f ef       	ldi	r25, 0xFF	; 255
    15b2:	08 95       	ret

000015b4 <_ZN7TwoWire5flushEv>:
    15b4:	08 95       	ret

000015b6 <_ZN7TwoWire5writeEPKhj>:
    15b6:	cf 92       	push	r12
    15b8:	df 92       	push	r13
    15ba:	ef 92       	push	r14
    15bc:	ff 92       	push	r15
    15be:	0f 93       	push	r16
    15c0:	1f 93       	push	r17
    15c2:	cf 93       	push	r28
    15c4:	df 93       	push	r29
    15c6:	7c 01       	movw	r14, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	8a 01       	movw	r16, r20
    15cc:	20 91 4c 02 	lds	r18, 0x024C	; 0x80024c <_ZN7TwoWire12transmittingE>
    15d0:	22 23       	and	r18, r18
    15d2:	89 f0       	breq	.+34     	; 0x15f6 <_ZN7TwoWire5writeEPKhj+0x40>
    15d4:	eb 01       	movw	r28, r22
    15d6:	6b 01       	movw	r12, r22
    15d8:	c4 0e       	add	r12, r20
    15da:	d5 1e       	adc	r13, r21
    15dc:	cc 15       	cp	r28, r12
    15de:	dd 05       	cpc	r29, r13
    15e0:	69 f0       	breq	.+26     	; 0x15fc <_ZN7TwoWire5writeEPKhj+0x46>
    15e2:	69 91       	ld	r22, Y+
    15e4:	d7 01       	movw	r26, r14
    15e6:	ed 91       	ld	r30, X+
    15e8:	fc 91       	ld	r31, X
    15ea:	01 90       	ld	r0, Z+
    15ec:	f0 81       	ld	r31, Z
    15ee:	e0 2d       	mov	r30, r0
    15f0:	c7 01       	movw	r24, r14
    15f2:	09 95       	icall
    15f4:	f3 cf       	rjmp	.-26     	; 0x15dc <_ZN7TwoWire5writeEPKhj+0x26>
    15f6:	64 2f       	mov	r22, r20
    15f8:	0e 94 9e 0c 	call	0x193c	; 0x193c <twi_transmit>
    15fc:	c8 01       	movw	r24, r16
    15fe:	df 91       	pop	r29
    1600:	cf 91       	pop	r28
    1602:	1f 91       	pop	r17
    1604:	0f 91       	pop	r16
    1606:	ff 90       	pop	r15
    1608:	ef 90       	pop	r14
    160a:	df 90       	pop	r13
    160c:	cf 90       	pop	r12
    160e:	08 95       	ret

00001610 <_ZN7TwoWire5writeEh>:
    1610:	cf 93       	push	r28
    1612:	df 93       	push	r29
    1614:	1f 92       	push	r1
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
    161a:	69 83       	std	Y+1, r22	; 0x01
    161c:	20 91 4c 02 	lds	r18, 0x024C	; 0x80024c <_ZN7TwoWire12transmittingE>
    1620:	22 23       	and	r18, r18
    1622:	d1 f0       	breq	.+52     	; 0x1658 <_ZN7TwoWire5writeEh+0x48>
    1624:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <_ZN7TwoWire14txBufferLengthE>
    1628:	20 32       	cpi	r18, 0x20	; 32
    162a:	40 f0       	brcs	.+16     	; 0x163c <_ZN7TwoWire5writeEh+0x2c>
    162c:	21 e0       	ldi	r18, 0x01	; 1
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	fc 01       	movw	r30, r24
    1632:	33 83       	std	Z+3, r19	; 0x03
    1634:	22 83       	std	Z+2, r18	; 0x02
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	15 c0       	rjmp	.+42     	; 0x1666 <_ZN7TwoWire5writeEh+0x56>
    163c:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <_ZN7TwoWire13txBufferIndexE>
    1640:	e8 2f       	mov	r30, r24
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	e1 5b       	subi	r30, 0xB1	; 177
    1646:	fd 4f       	sbci	r31, 0xFD	; 253
    1648:	99 81       	ldd	r25, Y+1	; 0x01
    164a:	90 83       	st	Z, r25
    164c:	8f 5f       	subi	r24, 0xFF	; 255
    164e:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <_ZN7TwoWire13txBufferIndexE>
    1652:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <_ZN7TwoWire14txBufferLengthE>
    1656:	05 c0       	rjmp	.+10     	; 0x1662 <_ZN7TwoWire5writeEh+0x52>
    1658:	61 e0       	ldi	r22, 0x01	; 1
    165a:	ce 01       	movw	r24, r28
    165c:	01 96       	adiw	r24, 0x01	; 1
    165e:	0e 94 9e 0c 	call	0x193c	; 0x193c <twi_transmit>
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	0f 90       	pop	r0
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	08 95       	ret

0000166e <_ZN7TwoWireC1Ev>:
    166e:	fc 01       	movw	r30, r24
    1670:	13 82       	std	Z+3, r1	; 0x03
    1672:	12 82       	std	Z+2, r1	; 0x02
    1674:	88 ee       	ldi	r24, 0xE8	; 232
    1676:	93 e0       	ldi	r25, 0x03	; 3
    1678:	a0 e0       	ldi	r26, 0x00	; 0
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	84 83       	std	Z+4, r24	; 0x04
    167e:	95 83       	std	Z+5, r25	; 0x05
    1680:	a6 83       	std	Z+6, r26	; 0x06
    1682:	b7 83       	std	Z+7, r27	; 0x07
    1684:	86 e6       	ldi	r24, 0x66	; 102
    1686:	91 e0       	ldi	r25, 0x01	; 1
    1688:	91 83       	std	Z+1, r25	; 0x01
    168a:	80 83       	st	Z, r24
    168c:	08 95       	ret

0000168e <_ZN7TwoWire5beginEv>:
    168e:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <_ZN7TwoWire13rxBufferIndexE>
    1692:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <_ZN7TwoWire14rxBufferLengthE>
    1696:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <_ZN7TwoWire13txBufferIndexE>
    169a:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <_ZN7TwoWire14txBufferLengthE>
    169e:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <twi_init>

000016a2 <_ZN7TwoWire17beginTransmissionEh>:
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <_ZN7TwoWire12transmittingE>
    16a8:	60 93 6f 02 	sts	0x026F, r22	; 0x80026f <_ZN7TwoWire9txAddressE>
    16ac:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <_ZN7TwoWire13txBufferIndexE>
    16b0:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <_ZN7TwoWire14txBufferLengthE>
    16b4:	08 95       	ret

000016b6 <_ZN7TwoWire17beginTransmissionEi>:
    16b6:	0c 94 51 0b 	jmp	0x16a2	; 0x16a2 <_ZN7TwoWire17beginTransmissionEh>

000016ba <_ZN7TwoWire15endTransmissionEh>:
    16ba:	0f 93       	push	r16
    16bc:	06 2f       	mov	r16, r22
    16be:	21 e0       	ldi	r18, 0x01	; 1
    16c0:	40 91 4d 02 	lds	r20, 0x024D	; 0x80024d <_ZN7TwoWire14txBufferLengthE>
    16c4:	6f e4       	ldi	r22, 0x4F	; 79
    16c6:	72 e0       	ldi	r23, 0x02	; 2
    16c8:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <_ZN7TwoWire9txAddressE>
    16cc:	0e 94 48 0c 	call	0x1890	; 0x1890 <twi_writeTo>
    16d0:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <_ZN7TwoWire13txBufferIndexE>
    16d4:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <_ZN7TwoWire14txBufferLengthE>
    16d8:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <_ZN7TwoWire12transmittingE>
    16dc:	0f 91       	pop	r16
    16de:	08 95       	ret

000016e0 <_ZN7TwoWire11requestFromEhhmhh>:
    16e0:	4f 92       	push	r4
    16e2:	5f 92       	push	r5
    16e4:	6f 92       	push	r6
    16e6:	7f 92       	push	r7
    16e8:	af 92       	push	r10
    16ea:	bf 92       	push	r11
    16ec:	cf 92       	push	r12
    16ee:	ef 92       	push	r14
    16f0:	ff 92       	push	r15
    16f2:	0f 93       	push	r16
    16f4:	1f 93       	push	r17
    16f6:	cf 93       	push	r28
    16f8:	df 93       	push	r29
    16fa:	5c 01       	movw	r10, r24
    16fc:	f6 2e       	mov	r15, r22
    16fe:	d4 2f       	mov	r29, r20
    1700:	28 01       	movw	r4, r16
    1702:	39 01       	movw	r6, r18
    1704:	ee 20       	and	r14, r14
    1706:	21 f1       	breq	.+72     	; 0x1750 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    1708:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <_ZN7TwoWire17beginTransmissionEh>
    170c:	ce 2d       	mov	r28, r14
    170e:	c4 30       	cpi	r28, 0x04	; 4
    1710:	08 f0       	brcs	.+2      	; 0x1714 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1712:	c3 e0       	ldi	r28, 0x03	; 3
    1714:	c1 50       	subi	r28, 0x01	; 1
    1716:	c0 f0       	brcs	.+48     	; 0x1748 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    1718:	28 e0       	ldi	r18, 0x08	; 8
    171a:	c2 9f       	mul	r28, r18
    171c:	c0 01       	movw	r24, r0
    171e:	11 24       	eor	r1, r1
    1720:	a3 01       	movw	r20, r6
    1722:	92 01       	movw	r18, r4
    1724:	04 c0       	rjmp	.+8      	; 0x172e <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    1726:	56 95       	lsr	r21
    1728:	47 95       	ror	r20
    172a:	37 95       	ror	r19
    172c:	27 95       	ror	r18
    172e:	8a 95       	dec	r24
    1730:	d2 f7       	brpl	.-12     	; 0x1726 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    1732:	ca 01       	movw	r24, r20
    1734:	b9 01       	movw	r22, r18
    1736:	d5 01       	movw	r26, r10
    1738:	ed 91       	ld	r30, X+
    173a:	fc 91       	ld	r31, X
    173c:	01 90       	ld	r0, Z+
    173e:	f0 81       	ld	r31, Z
    1740:	e0 2d       	mov	r30, r0
    1742:	c5 01       	movw	r24, r10
    1744:	09 95       	icall
    1746:	e6 cf       	rjmp	.-52     	; 0x1714 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1748:	60 e0       	ldi	r22, 0x00	; 0
    174a:	c5 01       	movw	r24, r10
    174c:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <_ZN7TwoWire15endTransmissionEh>
    1750:	4d 2f       	mov	r20, r29
    1752:	d1 32       	cpi	r29, 0x21	; 33
    1754:	08 f0       	brcs	.+2      	; 0x1758 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    1756:	40 e2       	ldi	r20, 0x20	; 32
    1758:	2c 2d       	mov	r18, r12
    175a:	62 e7       	ldi	r22, 0x72	; 114
    175c:	72 e0       	ldi	r23, 0x02	; 2
    175e:	8f 2d       	mov	r24, r15
    1760:	0e 94 00 0c 	call	0x1800	; 0x1800 <twi_readFrom>
    1764:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <_ZN7TwoWire13rxBufferIndexE>
    1768:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <_ZN7TwoWire14rxBufferLengthE>
    176c:	df 91       	pop	r29
    176e:	cf 91       	pop	r28
    1770:	1f 91       	pop	r17
    1772:	0f 91       	pop	r16
    1774:	ff 90       	pop	r15
    1776:	ef 90       	pop	r14
    1778:	cf 90       	pop	r12
    177a:	bf 90       	pop	r11
    177c:	af 90       	pop	r10
    177e:	7f 90       	pop	r7
    1780:	6f 90       	pop	r6
    1782:	5f 90       	pop	r5
    1784:	4f 90       	pop	r4
    1786:	08 95       	ret

00001788 <_ZN7TwoWire11requestFromEhhh>:
    1788:	cf 92       	push	r12
    178a:	ef 92       	push	r14
    178c:	0f 93       	push	r16
    178e:	1f 93       	push	r17
    1790:	c2 2e       	mov	r12, r18
    1792:	e1 2c       	mov	r14, r1
    1794:	00 e0       	ldi	r16, 0x00	; 0
    1796:	10 e0       	ldi	r17, 0x00	; 0
    1798:	98 01       	movw	r18, r16
    179a:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <_ZN7TwoWire11requestFromEhhmhh>
    179e:	1f 91       	pop	r17
    17a0:	0f 91       	pop	r16
    17a2:	ef 90       	pop	r14
    17a4:	cf 90       	pop	r12
    17a6:	08 95       	ret

000017a8 <_ZN7TwoWire11requestFromEhh>:
    17a8:	21 e0       	ldi	r18, 0x01	; 1
    17aa:	0c 94 c4 0b 	jmp	0x1788	; 0x1788 <_ZN7TwoWire11requestFromEhhh>

000017ae <_ZN7TwoWire11requestFromEii>:
    17ae:	21 e0       	ldi	r18, 0x01	; 1
    17b0:	0c 94 c4 0b 	jmp	0x1788	; 0x1788 <_ZN7TwoWire11requestFromEhhh>

000017b4 <_ZN7TwoWire15endTransmissionEv>:
    17b4:	61 e0       	ldi	r22, 0x01	; 1
    17b6:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <_ZN7TwoWire15endTransmissionEh>

000017ba <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    17ba:	80 e4       	ldi	r24, 0x40	; 64
    17bc:	92 e0       	ldi	r25, 0x02	; 2
    17be:	0c 94 37 0b 	jmp	0x166e	; 0x166e <_ZN7TwoWireC1Ev>

000017c2 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    17c2:	08 95       	ret

000017c4 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    17c4:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <twi_state>
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <twi_sendStop>
    17ce:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <twi_inRepStart>
    17d2:	61 e0       	ldi	r22, 0x01	; 1
    17d4:	82 e1       	ldi	r24, 0x12	; 18
    17d6:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <digitalWrite>
    17da:	61 e0       	ldi	r22, 0x01	; 1
    17dc:	83 e1       	ldi	r24, 0x13	; 19
    17de:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <digitalWrite>
    17e2:	e9 eb       	ldi	r30, 0xB9	; 185
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	8e 7f       	andi	r24, 0xFE	; 254
    17ea:	80 83       	st	Z, r24
    17ec:	80 81       	ld	r24, Z
    17ee:	8d 7f       	andi	r24, 0xFD	; 253
    17f0:	80 83       	st	Z, r24
    17f2:	88 e4       	ldi	r24, 0x48	; 72
    17f4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    17f8:	85 e4       	ldi	r24, 0x45	; 69
    17fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    17fe:	08 95       	ret

00001800 <twi_readFrom>:
    1800:	41 32       	cpi	r20, 0x21	; 33
    1802:	08 f0       	brcs	.+2      	; 0x1806 <twi_readFrom+0x6>
    1804:	43 c0       	rjmp	.+134    	; 0x188c <twi_readFrom+0x8c>
    1806:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <twi_state>
    180a:	91 11       	cpse	r25, r1
    180c:	fc cf       	rjmp	.-8      	; 0x1806 <twi_readFrom+0x6>
    180e:	91 e0       	ldi	r25, 0x01	; 1
    1810:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <twi_state>
    1814:	20 93 fd 02 	sts	0x02FD, r18	; 0x8002fd <twi_sendStop>
    1818:	2f ef       	ldi	r18, 0xFF	; 255
    181a:	20 93 92 02 	sts	0x0292, r18	; 0x800292 <twi_error>
    181e:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <twi_masterBufferIndex>
    1822:	24 0f       	add	r18, r20
    1824:	20 93 d6 02 	sts	0x02D6, r18	; 0x8002d6 <twi_masterBufferLength>
    1828:	90 93 fe 02 	sts	0x02FE, r25	; 0x8002fe <twi_slarw>
    182c:	90 91 fe 02 	lds	r25, 0x02FE	; 0x8002fe <twi_slarw>
    1830:	88 0f       	add	r24, r24
    1832:	89 2b       	or	r24, r25
    1834:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <twi_slarw>
    1838:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <twi_inRepStart>
    183c:	81 30       	cpi	r24, 0x01	; 1
    183e:	61 f4       	brne	.+24     	; 0x1858 <twi_readFrom+0x58>
    1840:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <twi_inRepStart>
    1844:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <twi_slarw>
    1848:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    184c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1850:	83 fd       	sbrc	r24, 3
    1852:	f8 cf       	rjmp	.-16     	; 0x1844 <twi_readFrom+0x44>
    1854:	85 ec       	ldi	r24, 0xC5	; 197
    1856:	01 c0       	rjmp	.+2      	; 0x185a <twi_readFrom+0x5a>
    1858:	85 ee       	ldi	r24, 0xE5	; 229
    185a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    185e:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <twi_state>
    1862:	81 30       	cpi	r24, 0x01	; 1
    1864:	e1 f3       	breq	.-8      	; 0x185e <twi_readFrom+0x5e>
    1866:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <twi_masterBufferIndex>
    186a:	84 17       	cp	r24, r20
    186c:	10 f4       	brcc	.+4      	; 0x1872 <twi_readFrom+0x72>
    186e:	40 91 d7 02 	lds	r20, 0x02D7	; 0x8002d7 <twi_masterBufferIndex>
    1872:	a8 ed       	ldi	r26, 0xD8	; 216
    1874:	b2 e0       	ldi	r27, 0x02	; 2
    1876:	96 2f       	mov	r25, r22
    1878:	fb 01       	movw	r30, r22
    187a:	8e 2f       	mov	r24, r30
    187c:	89 1b       	sub	r24, r25
    187e:	84 17       	cp	r24, r20
    1880:	18 f4       	brcc	.+6      	; 0x1888 <twi_readFrom+0x88>
    1882:	8d 91       	ld	r24, X+
    1884:	81 93       	st	Z+, r24
    1886:	f9 cf       	rjmp	.-14     	; 0x187a <twi_readFrom+0x7a>
    1888:	84 2f       	mov	r24, r20
    188a:	08 95       	ret
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	08 95       	ret

00001890 <twi_writeTo>:
    1890:	0f 93       	push	r16
    1892:	41 32       	cpi	r20, 0x21	; 33
    1894:	08 f0       	brcs	.+2      	; 0x1898 <twi_writeTo+0x8>
    1896:	4a c0       	rjmp	.+148    	; 0x192c <twi_writeTo+0x9c>
    1898:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <twi_state>
    189c:	91 11       	cpse	r25, r1
    189e:	fc cf       	rjmp	.-8      	; 0x1898 <twi_writeTo+0x8>
    18a0:	32 e0       	ldi	r19, 0x02	; 2
    18a2:	30 93 ff 02 	sts	0x02FF, r19	; 0x8002ff <twi_state>
    18a6:	00 93 fd 02 	sts	0x02FD, r16	; 0x8002fd <twi_sendStop>
    18aa:	3f ef       	ldi	r19, 0xFF	; 255
    18ac:	30 93 92 02 	sts	0x0292, r19	; 0x800292 <twi_error>
    18b0:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <twi_masterBufferIndex>
    18b4:	40 93 d6 02 	sts	0x02D6, r20	; 0x8002d6 <twi_masterBufferLength>
    18b8:	56 2f       	mov	r21, r22
    18ba:	a8 ed       	ldi	r26, 0xD8	; 216
    18bc:	b2 e0       	ldi	r27, 0x02	; 2
    18be:	fb 01       	movw	r30, r22
    18c0:	3e 2f       	mov	r19, r30
    18c2:	35 1b       	sub	r19, r21
    18c4:	34 17       	cp	r19, r20
    18c6:	18 f4       	brcc	.+6      	; 0x18ce <twi_writeTo+0x3e>
    18c8:	31 91       	ld	r19, Z+
    18ca:	3d 93       	st	X+, r19
    18cc:	f9 cf       	rjmp	.-14     	; 0x18c0 <twi_writeTo+0x30>
    18ce:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <twi_slarw>
    18d2:	30 91 fe 02 	lds	r19, 0x02FE	; 0x8002fe <twi_slarw>
    18d6:	88 0f       	add	r24, r24
    18d8:	83 2b       	or	r24, r19
    18da:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <twi_slarw>
    18de:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <twi_inRepStart>
    18e2:	81 30       	cpi	r24, 0x01	; 1
    18e4:	61 f4       	brne	.+24     	; 0x18fe <twi_writeTo+0x6e>
    18e6:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <twi_inRepStart>
    18ea:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <twi_slarw>
    18ee:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    18f2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    18f6:	83 fd       	sbrc	r24, 3
    18f8:	f8 cf       	rjmp	.-16     	; 0x18ea <twi_writeTo+0x5a>
    18fa:	85 ec       	ldi	r24, 0xC5	; 197
    18fc:	01 c0       	rjmp	.+2      	; 0x1900 <twi_writeTo+0x70>
    18fe:	85 ee       	ldi	r24, 0xE5	; 229
    1900:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1904:	22 23       	and	r18, r18
    1906:	21 f0       	breq	.+8      	; 0x1910 <twi_writeTo+0x80>
    1908:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <twi_state>
    190c:	82 30       	cpi	r24, 0x02	; 2
    190e:	d1 f3       	breq	.-12     	; 0x1904 <twi_writeTo+0x74>
    1910:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <twi_error>
    1914:	8f 3f       	cpi	r24, 0xFF	; 255
    1916:	79 f0       	breq	.+30     	; 0x1936 <twi_writeTo+0xa6>
    1918:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <twi_error>
    191c:	80 32       	cpi	r24, 0x20	; 32
    191e:	41 f0       	breq	.+16     	; 0x1930 <twi_writeTo+0xa0>
    1920:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <twi_error>
    1924:	80 33       	cpi	r24, 0x30	; 48
    1926:	31 f0       	breq	.+12     	; 0x1934 <twi_writeTo+0xa4>
    1928:	94 e0       	ldi	r25, 0x04	; 4
    192a:	05 c0       	rjmp	.+10     	; 0x1936 <twi_writeTo+0xa6>
    192c:	91 e0       	ldi	r25, 0x01	; 1
    192e:	03 c0       	rjmp	.+6      	; 0x1936 <twi_writeTo+0xa6>
    1930:	92 e0       	ldi	r25, 0x02	; 2
    1932:	01 c0       	rjmp	.+2      	; 0x1936 <twi_writeTo+0xa6>
    1934:	93 e0       	ldi	r25, 0x03	; 3
    1936:	89 2f       	mov	r24, r25
    1938:	0f 91       	pop	r16
    193a:	08 95       	ret

0000193c <twi_transmit>:
    193c:	40 91 b4 02 	lds	r20, 0x02B4	; 0x8002b4 <twi_txBufferLength>
    1940:	26 2f       	mov	r18, r22
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	24 0f       	add	r18, r20
    1946:	31 1d       	adc	r19, r1
    1948:	21 32       	cpi	r18, 0x21	; 33
    194a:	31 05       	cpc	r19, r1
    194c:	dc f4       	brge	.+54     	; 0x1984 <twi_transmit+0x48>
    194e:	20 91 ff 02 	lds	r18, 0x02FF	; 0x8002ff <twi_state>
    1952:	24 30       	cpi	r18, 0x04	; 4
    1954:	c9 f4       	brne	.+50     	; 0x1988 <twi_transmit+0x4c>
    1956:	fc 01       	movw	r30, r24
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	86 17       	cp	r24, r22
    195e:	58 f4       	brcc	.+22     	; 0x1976 <twi_transmit+0x3a>
    1960:	30 91 b4 02 	lds	r19, 0x02B4	; 0x8002b4 <twi_txBufferLength>
    1964:	21 91       	ld	r18, Z+
    1966:	dc 01       	movw	r26, r24
    1968:	aa 54       	subi	r26, 0x4A	; 74
    196a:	bd 4f       	sbci	r27, 0xFD	; 253
    196c:	a3 0f       	add	r26, r19
    196e:	b1 1d       	adc	r27, r1
    1970:	2c 93       	st	X, r18
    1972:	01 96       	adiw	r24, 0x01	; 1
    1974:	f3 cf       	rjmp	.-26     	; 0x195c <twi_transmit+0x20>
    1976:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <twi_txBufferLength>
    197a:	68 0f       	add	r22, r24
    197c:	60 93 b4 02 	sts	0x02B4, r22	; 0x8002b4 <twi_txBufferLength>
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	08 95       	ret
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	08 95       	ret
    1988:	82 e0       	ldi	r24, 0x02	; 2
    198a:	08 95       	ret

0000198c <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    198c:	85 ed       	ldi	r24, 0xD5	; 213
    198e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1992:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1996:	84 fd       	sbrc	r24, 4
    1998:	fc cf       	rjmp	.-8      	; 0x1992 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    199a:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <twi_state>
    199e:	08 95       	ret

000019a0 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    19a0:	85 ec       	ldi	r24, 0xC5	; 197
    19a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    19a6:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <twi_state>
    19aa:	08 95       	ret

000019ac <__vector_24>:
}

ISR(TWI_vect)
{
    19ac:	1f 92       	push	r1
    19ae:	0f 92       	push	r0
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	0f 92       	push	r0
    19b4:	11 24       	eor	r1, r1
    19b6:	2f 93       	push	r18
    19b8:	3f 93       	push	r19
    19ba:	4f 93       	push	r20
    19bc:	5f 93       	push	r21
    19be:	6f 93       	push	r22
    19c0:	7f 93       	push	r23
    19c2:	8f 93       	push	r24
    19c4:	9f 93       	push	r25
    19c6:	af 93       	push	r26
    19c8:	bf 93       	push	r27
    19ca:	ef 93       	push	r30
    19cc:	ff 93       	push	r31
  switch(TW_STATUS){
    19ce:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    19d2:	88 7f       	andi	r24, 0xF8	; 248
    19d4:	80 36       	cpi	r24, 0x60	; 96
    19d6:	09 f4       	brne	.+2      	; 0x19da <__vector_24+0x2e>
    19d8:	9e c0       	rjmp	.+316    	; 0x1b16 <__vector_24+0x16a>
    19da:	78 f5       	brcc	.+94     	; 0x1a3a <__vector_24+0x8e>
    19dc:	88 32       	cpi	r24, 0x28	; 40
    19de:	09 f4       	brne	.+2      	; 0x19e2 <__vector_24+0x36>
    19e0:	5d c0       	rjmp	.+186    	; 0x1a9c <__vector_24+0xf0>
    19e2:	90 f4       	brcc	.+36     	; 0x1a08 <__vector_24+0x5c>
    19e4:	80 31       	cpi	r24, 0x10	; 16
    19e6:	09 f4       	brne	.+2      	; 0x19ea <__vector_24+0x3e>
    19e8:	56 c0       	rjmp	.+172    	; 0x1a96 <__vector_24+0xea>
    19ea:	38 f4       	brcc	.+14     	; 0x19fa <__vector_24+0x4e>
    19ec:	88 23       	and	r24, r24
    19ee:	09 f4       	brne	.+2      	; 0x19f2 <__vector_24+0x46>
    19f0:	f5 c0       	rjmp	.+490    	; 0x1bdc <__vector_24+0x230>
    19f2:	88 30       	cpi	r24, 0x08	; 8
    19f4:	09 f4       	brne	.+2      	; 0x19f8 <__vector_24+0x4c>
    19f6:	4f c0       	rjmp	.+158    	; 0x1a96 <__vector_24+0xea>
    19f8:	f5 c0       	rjmp	.+490    	; 0x1be4 <__vector_24+0x238>
    19fa:	88 31       	cpi	r24, 0x18	; 24
    19fc:	09 f4       	brne	.+2      	; 0x1a00 <__vector_24+0x54>
    19fe:	4e c0       	rjmp	.+156    	; 0x1a9c <__vector_24+0xf0>
    1a00:	80 32       	cpi	r24, 0x20	; 32
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <__vector_24+0x5a>
    1a04:	5f c0       	rjmp	.+190    	; 0x1ac4 <__vector_24+0x118>
    1a06:	ee c0       	rjmp	.+476    	; 0x1be4 <__vector_24+0x238>
    1a08:	80 34       	cpi	r24, 0x40	; 64
    1a0a:	09 f4       	brne	.+2      	; 0x1a0e <__vector_24+0x62>
    1a0c:	6a c0       	rjmp	.+212    	; 0x1ae2 <__vector_24+0x136>
    1a0e:	58 f4       	brcc	.+22     	; 0x1a26 <__vector_24+0x7a>
    1a10:	80 33       	cpi	r24, 0x30	; 48
    1a12:	09 f4       	brne	.+2      	; 0x1a16 <__vector_24+0x6a>
    1a14:	57 c0       	rjmp	.+174    	; 0x1ac4 <__vector_24+0x118>
    1a16:	88 33       	cpi	r24, 0x38	; 56
    1a18:	09 f0       	breq	.+2      	; 0x1a1c <__vector_24+0x70>
    1a1a:	e4 c0       	rjmp	.+456    	; 0x1be4 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1a1c:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <twi_error>
      twi_releaseBus();
    1a20:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <twi_releaseBus>
      break;
    1a24:	df c0       	rjmp	.+446    	; 0x1be4 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1a26:	80 35       	cpi	r24, 0x50	; 80
    1a28:	09 f4       	brne	.+2      	; 0x1a2c <__vector_24+0x80>
    1a2a:	4f c0       	rjmp	.+158    	; 0x1aca <__vector_24+0x11e>
    1a2c:	88 35       	cpi	r24, 0x58	; 88
    1a2e:	09 f4       	brne	.+2      	; 0x1a32 <__vector_24+0x86>
    1a30:	5d c0       	rjmp	.+186    	; 0x1aec <__vector_24+0x140>
    1a32:	88 34       	cpi	r24, 0x48	; 72
    1a34:	09 f0       	breq	.+2      	; 0x1a38 <__vector_24+0x8c>
    1a36:	d6 c0       	rjmp	.+428    	; 0x1be4 <__vector_24+0x238>
    1a38:	d3 c0       	rjmp	.+422    	; 0x1be0 <__vector_24+0x234>
    1a3a:	88 39       	cpi	r24, 0x98	; 152
    1a3c:	09 f4       	brne	.+2      	; 0x1a40 <__vector_24+0x94>
    1a3e:	c4 c0       	rjmp	.+392    	; 0x1bc8 <__vector_24+0x21c>
    1a40:	a8 f4       	brcc	.+42     	; 0x1a6c <__vector_24+0xc0>
    1a42:	88 37       	cpi	r24, 0x78	; 120
    1a44:	09 f4       	brne	.+2      	; 0x1a48 <__vector_24+0x9c>
    1a46:	67 c0       	rjmp	.+206    	; 0x1b16 <__vector_24+0x16a>
    1a48:	38 f4       	brcc	.+14     	; 0x1a58 <__vector_24+0xac>
    1a4a:	88 36       	cpi	r24, 0x68	; 104
    1a4c:	09 f4       	brne	.+2      	; 0x1a50 <__vector_24+0xa4>
    1a4e:	63 c0       	rjmp	.+198    	; 0x1b16 <__vector_24+0x16a>
    1a50:	80 37       	cpi	r24, 0x70	; 112
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <__vector_24+0xaa>
    1a54:	60 c0       	rjmp	.+192    	; 0x1b16 <__vector_24+0x16a>
    1a56:	c6 c0       	rjmp	.+396    	; 0x1be4 <__vector_24+0x238>
    1a58:	88 38       	cpi	r24, 0x88	; 136
    1a5a:	09 f4       	brne	.+2      	; 0x1a5e <__vector_24+0xb2>
    1a5c:	b5 c0       	rjmp	.+362    	; 0x1bc8 <__vector_24+0x21c>
    1a5e:	80 39       	cpi	r24, 0x90	; 144
    1a60:	09 f4       	brne	.+2      	; 0x1a64 <__vector_24+0xb8>
    1a62:	5f c0       	rjmp	.+190    	; 0x1b22 <__vector_24+0x176>
    1a64:	80 38       	cpi	r24, 0x80	; 128
    1a66:	09 f0       	breq	.+2      	; 0x1a6a <__vector_24+0xbe>
    1a68:	bd c0       	rjmp	.+378    	; 0x1be4 <__vector_24+0x238>
    1a6a:	5b c0       	rjmp	.+182    	; 0x1b22 <__vector_24+0x176>
    1a6c:	80 3b       	cpi	r24, 0xB0	; 176
    1a6e:	09 f4       	brne	.+2      	; 0x1a72 <__vector_24+0xc6>
    1a70:	83 c0       	rjmp	.+262    	; 0x1b78 <__vector_24+0x1cc>
    1a72:	38 f4       	brcc	.+14     	; 0x1a82 <__vector_24+0xd6>
    1a74:	80 3a       	cpi	r24, 0xA0	; 160
    1a76:	09 f4       	brne	.+2      	; 0x1a7a <__vector_24+0xce>
    1a78:	66 c0       	rjmp	.+204    	; 0x1b46 <__vector_24+0x19a>
    1a7a:	88 3a       	cpi	r24, 0xA8	; 168
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <__vector_24+0xd4>
    1a7e:	7c c0       	rjmp	.+248    	; 0x1b78 <__vector_24+0x1cc>
    1a80:	b1 c0       	rjmp	.+354    	; 0x1be4 <__vector_24+0x238>
    1a82:	80 3c       	cpi	r24, 0xC0	; 192
    1a84:	09 f4       	brne	.+2      	; 0x1a88 <__vector_24+0xdc>
    1a86:	a4 c0       	rjmp	.+328    	; 0x1bd0 <__vector_24+0x224>
    1a88:	88 3c       	cpi	r24, 0xC8	; 200
    1a8a:	09 f4       	brne	.+2      	; 0x1a8e <__vector_24+0xe2>
    1a8c:	a1 c0       	rjmp	.+322    	; 0x1bd0 <__vector_24+0x224>
    1a8e:	88 3b       	cpi	r24, 0xB8	; 184
    1a90:	09 f4       	brne	.+2      	; 0x1a94 <__vector_24+0xe8>
    1a92:	87 c0       	rjmp	.+270    	; 0x1ba2 <__vector_24+0x1f6>
    1a94:	a7 c0       	rjmp	.+334    	; 0x1be4 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1a96:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <twi_slarw>
    1a9a:	10 c0       	rjmp	.+32     	; 0x1abc <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1a9c:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <twi_masterBufferIndex>
    1aa0:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <twi_masterBufferLength>
    1aa4:	98 17       	cp	r25, r24
    1aa6:	70 f5       	brcc	.+92     	; 0x1b04 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1aa8:	e0 91 d7 02 	lds	r30, 0x02D7	; 0x8002d7 <twi_masterBufferIndex>
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	8e 0f       	add	r24, r30
    1ab0:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <twi_masterBufferIndex>
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	e8 52       	subi	r30, 0x28	; 40
    1ab8:	fd 4f       	sbci	r31, 0xFD	; 253
    1aba:	80 81       	ld	r24, Z
    1abc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1ac0:	85 ec       	ldi	r24, 0xC5	; 197
    1ac2:	83 c0       	rjmp	.+262    	; 0x1bca <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1ac4:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <twi_error>
    1ac8:	8b c0       	rjmp	.+278    	; 0x1be0 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1aca:	e0 91 d7 02 	lds	r30, 0x02D7	; 0x8002d7 <twi_masterBufferIndex>
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	8e 0f       	add	r24, r30
    1ad2:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <twi_masterBufferIndex>
    1ad6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	e8 52       	subi	r30, 0x28	; 40
    1ade:	fd 4f       	sbci	r31, 0xFD	; 253
    1ae0:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1ae2:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <twi_masterBufferIndex>
    1ae6:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <twi_masterBufferLength>
    1aea:	6b c0       	rjmp	.+214    	; 0x1bc2 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1aec:	e0 91 d7 02 	lds	r30, 0x02D7	; 0x8002d7 <twi_masterBufferIndex>
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	8e 0f       	add	r24, r30
    1af4:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <twi_masterBufferIndex>
    1af8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	e8 52       	subi	r30, 0x28	; 40
    1b00:	fd 4f       	sbci	r31, 0xFD	; 253
    1b02:	80 83       	st	Z, r24
	if (twi_sendStop)
    1b04:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <twi_sendStop>
    1b08:	81 11       	cpse	r24, r1
    1b0a:	6a c0       	rjmp	.+212    	; 0x1be0 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1b12:	84 ea       	ldi	r24, 0xA4	; 164
    1b14:	5e c0       	rjmp	.+188    	; 0x1bd2 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1b16:	83 e0       	ldi	r24, 0x03	; 3
    1b18:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1b1c:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <twi_rxBufferIndex>
    1b20:	cf cf       	rjmp	.-98     	; 0x1ac0 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1b22:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <twi_rxBufferIndex>
    1b26:	80 32       	cpi	r24, 0x20	; 32
    1b28:	08 f0       	brcs	.+2      	; 0x1b2c <__vector_24+0x180>
    1b2a:	4e c0       	rjmp	.+156    	; 0x1bc8 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1b2c:	e0 91 93 02 	lds	r30, 0x0293	; 0x800293 <twi_rxBufferIndex>
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	8e 0f       	add	r24, r30
    1b34:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <twi_rxBufferIndex>
    1b38:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	ec 56       	subi	r30, 0x6C	; 108
    1b40:	fd 4f       	sbci	r31, 0xFD	; 253
    1b42:	80 83       	st	Z, r24
    1b44:	bd cf       	rjmp	.-134    	; 0x1ac0 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1b46:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1b4a:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <twi_rxBufferIndex>
    1b4e:	80 32       	cpi	r24, 0x20	; 32
    1b50:	30 f4       	brcc	.+12     	; 0x1b5e <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1b52:	e0 91 93 02 	lds	r30, 0x0293	; 0x800293 <twi_rxBufferIndex>
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	ec 56       	subi	r30, 0x6C	; 108
    1b5a:	fd 4f       	sbci	r31, 0xFD	; 253
    1b5c:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1b5e:	60 91 93 02 	lds	r22, 0x0293	; 0x800293 <twi_rxBufferIndex>
    1b62:	70 e0       	ldi	r23, 0x00	; 0
    1b64:	e0 91 f8 02 	lds	r30, 0x02F8	; 0x8002f8 <twi_onSlaveReceive>
    1b68:	f0 91 f9 02 	lds	r31, 0x02F9	; 0x8002f9 <twi_onSlaveReceive+0x1>
    1b6c:	84 e9       	ldi	r24, 0x94	; 148
    1b6e:	92 e0       	ldi	r25, 0x02	; 2
    1b70:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1b72:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <twi_rxBufferIndex>
      break;
    1b76:	36 c0       	rjmp	.+108    	; 0x1be4 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1b78:	84 e0       	ldi	r24, 0x04	; 4
    1b7a:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1b7e:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1b82:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1b86:	e0 91 fa 02 	lds	r30, 0x02FA	; 0x8002fa <twi_onSlaveTransmit>
    1b8a:	f0 91 fb 02 	lds	r31, 0x02FB	; 0x8002fb <twi_onSlaveTransmit+0x1>
    1b8e:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1b90:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <twi_txBufferLength>
    1b94:	81 11       	cpse	r24, r1
    1b96:	05 c0       	rjmp	.+10     	; 0x1ba2 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    1b9e:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1ba2:	e0 91 b5 02 	lds	r30, 0x02B5	; 0x8002b5 <twi_txBufferIndex>
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	8e 0f       	add	r24, r30
    1baa:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <twi_txBufferIndex>
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	ea 54       	subi	r30, 0x4A	; 74
    1bb2:	fd 4f       	sbci	r31, 0xFD	; 253
    1bb4:	80 81       	ld	r24, Z
    1bb6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1bba:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <twi_txBufferIndex>
    1bbe:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <twi_txBufferLength>
    1bc2:	98 17       	cp	r25, r24
    1bc4:	08 f4       	brcc	.+2      	; 0x1bc8 <__vector_24+0x21c>
    1bc6:	7c cf       	rjmp	.-264    	; 0x1ac0 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1bc8:	85 e8       	ldi	r24, 0x85	; 133
    1bca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1bce:	0a c0       	rjmp	.+20     	; 0x1be4 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1bd0:	85 ec       	ldi	r24, 0xC5	; 197
    1bd2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1bd6:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <twi_state>
      break;
    1bda:	04 c0       	rjmp	.+8      	; 0x1be4 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1bdc:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <twi_error>
      twi_stop();
    1be0:	0e 94 c6 0c 	call	0x198c	; 0x198c <twi_stop>
      break;
  }
}
    1be4:	ff 91       	pop	r31
    1be6:	ef 91       	pop	r30
    1be8:	bf 91       	pop	r27
    1bea:	af 91       	pop	r26
    1bec:	9f 91       	pop	r25
    1bee:	8f 91       	pop	r24
    1bf0:	7f 91       	pop	r23
    1bf2:	6f 91       	pop	r22
    1bf4:	5f 91       	pop	r21
    1bf6:	4f 91       	pop	r20
    1bf8:	3f 91       	pop	r19
    1bfa:	2f 91       	pop	r18
    1bfc:	0f 90       	pop	r0
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	0f 90       	pop	r0
    1c02:	1f 90       	pop	r1
    1c04:	18 95       	reti

00001c06 <turnOffPWM>:
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
    1c06:	83 30       	cpi	r24, 0x03	; 3
    1c08:	81 f0       	breq	.+32     	; 0x1c2a <turnOffPWM+0x24>
    1c0a:	28 f4       	brcc	.+10     	; 0x1c16 <turnOffPWM+0x10>
    1c0c:	81 30       	cpi	r24, 0x01	; 1
    1c0e:	99 f0       	breq	.+38     	; 0x1c36 <turnOffPWM+0x30>
    1c10:	82 30       	cpi	r24, 0x02	; 2
    1c12:	a1 f0       	breq	.+40     	; 0x1c3c <turnOffPWM+0x36>
    1c14:	08 95       	ret
    1c16:	87 30       	cpi	r24, 0x07	; 7
    1c18:	a9 f0       	breq	.+42     	; 0x1c44 <turnOffPWM+0x3e>
    1c1a:	88 30       	cpi	r24, 0x08	; 8
    1c1c:	b9 f0       	breq	.+46     	; 0x1c4c <turnOffPWM+0x46>
    1c1e:	84 30       	cpi	r24, 0x04	; 4
    1c20:	d1 f4       	brne	.+52     	; 0x1c56 <turnOffPWM+0x50>
    1c22:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1c26:	8f 7d       	andi	r24, 0xDF	; 223
    1c28:	03 c0       	rjmp	.+6      	; 0x1c30 <turnOffPWM+0x2a>
    1c2a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1c2e:	8f 77       	andi	r24, 0x7F	; 127
    1c30:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1c34:	08 95       	ret
    1c36:	84 b5       	in	r24, 0x24	; 36
    1c38:	8f 77       	andi	r24, 0x7F	; 127
    1c3a:	02 c0       	rjmp	.+4      	; 0x1c40 <turnOffPWM+0x3a>
    1c3c:	84 b5       	in	r24, 0x24	; 36
    1c3e:	8f 7d       	andi	r24, 0xDF	; 223
    1c40:	84 bd       	out	0x24, r24	; 36
    1c42:	08 95       	ret
    1c44:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1c48:	8f 77       	andi	r24, 0x7F	; 127
    1c4a:	03 c0       	rjmp	.+6      	; 0x1c52 <turnOffPWM+0x4c>
    1c4c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1c50:	8f 7d       	andi	r24, 0xDF	; 223
    1c52:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1c56:	08 95       	ret

00001c58 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1c58:	1f 93       	push	r17
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1c5e:	28 2f       	mov	r18, r24
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	f9 01       	movw	r30, r18
    1c64:	e0 57       	subi	r30, 0x70	; 112
    1c66:	ff 4f       	sbci	r31, 0xFF	; 255
    1c68:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1c6a:	f9 01       	movw	r30, r18
    1c6c:	ec 55       	subi	r30, 0x5C	; 92
    1c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c70:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1c72:	f9 01       	movw	r30, r18
    1c74:	e8 54       	subi	r30, 0x48	; 72
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1c7a:	cc 23       	and	r28, r28
    1c7c:	c1 f0       	breq	.+48     	; 0x1cae <digitalWrite+0x56>
    1c7e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1c80:	81 11       	cpse	r24, r1
    1c82:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <turnOffPWM>

	out = portOutputRegister(port);
    1c86:	ec 2f       	mov	r30, r28
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	ee 0f       	add	r30, r30
    1c8c:	ff 1f       	adc	r31, r31
    1c8e:	e4 53       	subi	r30, 0x34	; 52
    1c90:	ff 4f       	sbci	r31, 0xFF	; 255
    1c92:	a5 91       	lpm	r26, Z+
    1c94:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1c96:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1c98:	f8 94       	cli

	if (val == LOW) {
    1c9a:	11 11       	cpse	r17, r1
    1c9c:	04 c0       	rjmp	.+8      	; 0x1ca6 <digitalWrite+0x4e>
		*out &= ~bit;
    1c9e:	8c 91       	ld	r24, X
    1ca0:	d0 95       	com	r29
    1ca2:	d8 23       	and	r29, r24
    1ca4:	02 c0       	rjmp	.+4      	; 0x1caa <digitalWrite+0x52>
	} else {
		*out |= bit;
    1ca6:	ec 91       	ld	r30, X
    1ca8:	de 2b       	or	r29, r30
    1caa:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1cac:	9f bf       	out	0x3f, r25	; 63
}
    1cae:	df 91       	pop	r29
    1cb0:	cf 91       	pop	r28
    1cb2:	1f 91       	pop	r17
    1cb4:	08 95       	ret

00001cb6 <__divmodhi4>:
    1cb6:	97 fb       	bst	r25, 7
    1cb8:	07 2e       	mov	r0, r23
    1cba:	16 f4       	brtc	.+4      	; 0x1cc0 <__divmodhi4+0xa>
    1cbc:	00 94       	com	r0
    1cbe:	07 d0       	rcall	.+14     	; 0x1cce <__divmodhi4_neg1>
    1cc0:	77 fd       	sbrc	r23, 7
    1cc2:	09 d0       	rcall	.+18     	; 0x1cd6 <__divmodhi4_neg2>
    1cc4:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <__udivmodhi4>
    1cc8:	07 fc       	sbrc	r0, 7
    1cca:	05 d0       	rcall	.+10     	; 0x1cd6 <__divmodhi4_neg2>
    1ccc:	3e f4       	brtc	.+14     	; 0x1cdc <__divmodhi4_exit>

00001cce <__divmodhi4_neg1>:
    1cce:	90 95       	com	r25
    1cd0:	81 95       	neg	r24
    1cd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd4:	08 95       	ret

00001cd6 <__divmodhi4_neg2>:
    1cd6:	70 95       	com	r23
    1cd8:	61 95       	neg	r22
    1cda:	7f 4f       	sbci	r23, 0xFF	; 255

00001cdc <__divmodhi4_exit>:
    1cdc:	08 95       	ret

00001cde <__udivmodsi4>:
    1cde:	a1 e2       	ldi	r26, 0x21	; 33
    1ce0:	1a 2e       	mov	r1, r26
    1ce2:	aa 1b       	sub	r26, r26
    1ce4:	bb 1b       	sub	r27, r27
    1ce6:	fd 01       	movw	r30, r26
    1ce8:	0d c0       	rjmp	.+26     	; 0x1d04 <__udivmodsi4_ep>

00001cea <__udivmodsi4_loop>:
    1cea:	aa 1f       	adc	r26, r26
    1cec:	bb 1f       	adc	r27, r27
    1cee:	ee 1f       	adc	r30, r30
    1cf0:	ff 1f       	adc	r31, r31
    1cf2:	a2 17       	cp	r26, r18
    1cf4:	b3 07       	cpc	r27, r19
    1cf6:	e4 07       	cpc	r30, r20
    1cf8:	f5 07       	cpc	r31, r21
    1cfa:	20 f0       	brcs	.+8      	; 0x1d04 <__udivmodsi4_ep>
    1cfc:	a2 1b       	sub	r26, r18
    1cfe:	b3 0b       	sbc	r27, r19
    1d00:	e4 0b       	sbc	r30, r20
    1d02:	f5 0b       	sbc	r31, r21

00001d04 <__udivmodsi4_ep>:
    1d04:	66 1f       	adc	r22, r22
    1d06:	77 1f       	adc	r23, r23
    1d08:	88 1f       	adc	r24, r24
    1d0a:	99 1f       	adc	r25, r25
    1d0c:	1a 94       	dec	r1
    1d0e:	69 f7       	brne	.-38     	; 0x1cea <__udivmodsi4_loop>
    1d10:	60 95       	com	r22
    1d12:	70 95       	com	r23
    1d14:	80 95       	com	r24
    1d16:	90 95       	com	r25
    1d18:	9b 01       	movw	r18, r22
    1d1a:	ac 01       	movw	r20, r24
    1d1c:	bd 01       	movw	r22, r26
    1d1e:	cf 01       	movw	r24, r30
    1d20:	08 95       	ret

00001d22 <__umulhisi3>:
    1d22:	a2 9f       	mul	r26, r18
    1d24:	b0 01       	movw	r22, r0
    1d26:	b3 9f       	mul	r27, r19
    1d28:	c0 01       	movw	r24, r0
    1d2a:	a3 9f       	mul	r26, r19
    1d2c:	70 0d       	add	r23, r0
    1d2e:	81 1d       	adc	r24, r1
    1d30:	11 24       	eor	r1, r1
    1d32:	91 1d       	adc	r25, r1
    1d34:	b2 9f       	mul	r27, r18
    1d36:	70 0d       	add	r23, r0
    1d38:	81 1d       	adc	r24, r1
    1d3a:	11 24       	eor	r1, r1
    1d3c:	91 1d       	adc	r25, r1
    1d3e:	08 95       	ret

00001d40 <__muluhisi3>:
    1d40:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__umulhisi3>
    1d44:	a5 9f       	mul	r26, r21
    1d46:	90 0d       	add	r25, r0
    1d48:	b4 9f       	mul	r27, r20
    1d4a:	90 0d       	add	r25, r0
    1d4c:	a4 9f       	mul	r26, r20
    1d4e:	80 0d       	add	r24, r0
    1d50:	91 1d       	adc	r25, r1
    1d52:	11 24       	eor	r1, r1
    1d54:	08 95       	ret

00001d56 <__mulshisi3>:
    1d56:	b7 ff       	sbrs	r27, 7
    1d58:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <__muluhisi3>

00001d5c <__mulohisi3>:
    1d5c:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__muluhisi3>
    1d60:	82 1b       	sub	r24, r18
    1d62:	93 0b       	sbc	r25, r19
    1d64:	08 95       	ret

00001d66 <__udivmodhi4>:
    1d66:	aa 1b       	sub	r26, r26
    1d68:	bb 1b       	sub	r27, r27
    1d6a:	51 e1       	ldi	r21, 0x11	; 17
    1d6c:	07 c0       	rjmp	.+14     	; 0x1d7c <__udivmodhi4_ep>

00001d6e <__udivmodhi4_loop>:
    1d6e:	aa 1f       	adc	r26, r26
    1d70:	bb 1f       	adc	r27, r27
    1d72:	a6 17       	cp	r26, r22
    1d74:	b7 07       	cpc	r27, r23
    1d76:	10 f0       	brcs	.+4      	; 0x1d7c <__udivmodhi4_ep>
    1d78:	a6 1b       	sub	r26, r22
    1d7a:	b7 0b       	sbc	r27, r23

00001d7c <__udivmodhi4_ep>:
    1d7c:	88 1f       	adc	r24, r24
    1d7e:	99 1f       	adc	r25, r25
    1d80:	5a 95       	dec	r21
    1d82:	a9 f7       	brne	.-22     	; 0x1d6e <__udivmodhi4_loop>
    1d84:	80 95       	com	r24
    1d86:	90 95       	com	r25
    1d88:	bc 01       	movw	r22, r24
    1d8a:	cd 01       	movw	r24, r26
    1d8c:	08 95       	ret

00001d8e <__tablejump2__>:
    1d8e:	ee 0f       	add	r30, r30
    1d90:	ff 1f       	adc	r31, r31
    1d92:	05 90       	lpm	r0, Z+
    1d94:	f4 91       	lpm	r31, Z
    1d96:	e0 2d       	mov	r30, r0
    1d98:	09 94       	ijmp

00001d9a <eeprom_read_byte>:
    1d9a:	f9 99       	sbic	0x1f, 1	; 31
    1d9c:	fe cf       	rjmp	.-4      	; 0x1d9a <eeprom_read_byte>
    1d9e:	92 bd       	out	0x22, r25	; 34
    1da0:	81 bd       	out	0x21, r24	; 33
    1da2:	f8 9a       	sbi	0x1f, 0	; 31
    1da4:	99 27       	eor	r25, r25
    1da6:	80 b5       	in	r24, 0x20	; 32
    1da8:	08 95       	ret

00001daa <_exit>:
    1daa:	f8 94       	cli

00001dac <__stop_program>:
    1dac:	ff cf       	rjmp	.-2      	; 0x1dac <__stop_program>
