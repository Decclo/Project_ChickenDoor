
ArduSketch3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  00001c4a  00001cde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000017f  00800172  00800172  00001d50  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d50  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000600  00000000  00000000  00001dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000dcf8  00000000  00000000  000023c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002b95  00000000  00000000  000100b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000034dd  00000000  00000000  00012c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000011d4  00000000  00000000  0001612c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002e78  00000000  00000000  00017300  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000061f2  00000000  00000000  0001a178  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000650  00000000  00000000  0002036a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__ctors_end>
       4:	0c 94 69 05 	jmp	0xad2	; 0xad2 <__vector_1>
       8:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__vector_2>
       c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      10:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      14:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      18:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      1c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      20:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      24:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      28:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      2c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      30:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      34:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      38:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      3c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      40:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__vector_16>
      44:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      48:	0c 94 c4 03 	jmp	0x788	; 0x788 <__vector_18>
      4c:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <__vector_19>
      50:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      54:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      58:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      5c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      60:	0c 94 2b 0c 	jmp	0x1856	; 0x1856 <__vector_24>
      64:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	45 72       	andi	r20, 0x25	; 37
      6a:	72 4a       	sbci	r23, 0xA2	; 162
      6c:	61 6e       	ori	r22, 0xE1	; 225
      6e:	46 65       	ori	r20, 0x56	; 86
      70:	62 4d       	sbci	r22, 0xD2	; 210
      72:	61 72       	andi	r22, 0x21	; 33
      74:	41 70       	andi	r20, 0x01	; 1
      76:	72 4d       	sbci	r23, 0xD2	; 210
      78:	61 79       	andi	r22, 0x91	; 145
      7a:	4a 75       	andi	r20, 0x5A	; 90
      7c:	6e 4a       	sbci	r22, 0xAE	; 174
      7e:	75 6c       	ori	r23, 0xC5	; 197
      80:	41 75       	andi	r20, 0x51	; 81
      82:	67 53       	subi	r22, 0x37	; 55
      84:	65 70       	andi	r22, 0x05	; 5
      86:	4f 63       	ori	r20, 0x3F	; 63
      88:	74 4e       	sbci	r23, 0xE4	; 228
      8a:	6f 76       	andi	r22, 0x6F	; 111
      8c:	44 65       	ori	r20, 0x54	; 84
      8e:	63 00       	.word	0x0063	; ????

00000090 <digital_pin_to_timer_PGM>:
      90:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      a0:	00 00 00 00                                         ....

000000a4 <digital_pin_to_bit_mask_PGM>:
      a4:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      b4:	04 08 10 20                                         ... 

000000b8 <digital_pin_to_port_PGM>:
      b8:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      c8:	03 03 03 03                                         ....

000000cc <port_to_output_PGM>:
      cc:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000d6 <__ctors_start>:
      d6:	1c 04       	cpc	r1, r12
      d8:	a5 06       	cpc	r10, r21
      da:	32 0b       	sbc	r19, r18

000000dc <__ctors_end>:
      dc:	11 24       	eor	r1, r1
      de:	1f be       	out	0x3f, r1	; 63
      e0:	cf ef       	ldi	r28, 0xFF	; 255
      e2:	d8 e0       	ldi	r29, 0x08	; 8
      e4:	de bf       	out	0x3e, r29	; 62
      e6:	cd bf       	out	0x3d, r28	; 61

000000e8 <__do_copy_data>:
      e8:	11 e0       	ldi	r17, 0x01	; 1
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b1 e0       	ldi	r27, 0x01	; 1
      ee:	ea e4       	ldi	r30, 0x4A	; 74
      f0:	fc e1       	ldi	r31, 0x1C	; 28
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x10>
      f4:	05 90       	lpm	r0, Z+
      f6:	0d 92       	st	X+, r0
      f8:	a2 37       	cpi	r26, 0x72	; 114
      fa:	b1 07       	cpc	r27, r17
      fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0xc>

000000fe <__do_clear_bss>:
      fe:	22 e0       	ldi	r18, 0x02	; 2
     100:	a2 e7       	ldi	r26, 0x72	; 114
     102:	b1 e0       	ldi	r27, 0x01	; 1
     104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
     106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
     108:	a1 3f       	cpi	r26, 0xF1	; 241
     10a:	b2 07       	cpc	r27, r18
     10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>

0000010e <__do_global_ctors>:
     10e:	10 e0       	ldi	r17, 0x00	; 0
     110:	ce e6       	ldi	r28, 0x6E	; 110
     112:	d0 e0       	ldi	r29, 0x00	; 0
     114:	04 c0       	rjmp	.+8      	; 0x11e <__do_global_ctors+0x10>
     116:	21 97       	sbiw	r28, 0x01	; 1
     118:	fe 01       	movw	r30, r28
     11a:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__tablejump2__>
     11e:	cb 36       	cpi	r28, 0x6B	; 107
     120:	d1 07       	cpc	r29, r17
     122:	c9 f7       	brne	.-14     	; 0x116 <__do_global_ctors+0x8>
     124:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <main>
     128:	0c 94 23 0e 	jmp	0x1c46	; 0x1c46 <_exit>

0000012c <__bad_interrupt>:
     12c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000130 <_Z8alarmIsrv>:

// Functions:

void alarmIsr()	// INT0 triggered function.
{
	alarmIsrWasCalled = true;
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <alarmIsrWasCalled>
     136:	08 95       	ret

00000138 <_ZN23Human_Machine_Interface13printDateTimeEm>:
	* 
	* \param t
	* 
	* \return void
	 */
	void printDateTime(time_t t)
     138:	8f 92       	push	r8
     13a:	9f 92       	push	r9
     13c:	af 92       	push	r10
     13e:	bf 92       	push	r11
     140:	cf 92       	push	r12
     142:	df 92       	push	r13
     144:	ef 92       	push	r14
     146:	ff 92       	push	r15
     148:	cf 93       	push	r28
     14a:	df 93       	push	r29
     14c:	6a 01       	movw	r12, r20
     14e:	7b 01       	movw	r14, r22
	{
		Serial << ((day(t)<10) ? "0" : "") << _DEC(day(t)) << ' ';
     150:	cb 01       	movw	r24, r22
     152:	ba 01       	movw	r22, r20
     154:	0e 94 2d 09 	call	0x125a	; 0x125a <_Z3daym>
     158:	4c 01       	movw	r8, r24
     15a:	99 0f       	add	r25, r25
     15c:	aa 08       	sbc	r10, r10
     15e:	bb 08       	sbc	r11, r11
     160:	c7 01       	movw	r24, r14
     162:	b6 01       	movw	r22, r12
     164:	0e 94 2d 09 	call	0x125a	; 0x125a <_Z3daym>
     168:	0a 97       	sbiw	r24, 0x0a	; 10
     16a:	1c f0       	brlt	.+6      	; 0x172 <_ZN23Human_Machine_Interface13printDateTimeEm+0x3a>
     16c:	66 e4       	ldi	r22, 0x46	; 70
     16e:	71 e0       	ldi	r23, 0x01	; 1
     170:	02 c0       	rjmp	.+4      	; 0x176 <_ZN23Human_Machine_Interface13printDateTimeEm+0x3e>
     172:	64 e0       	ldi	r22, 0x04	; 4
     174:	71 e0       	ldi	r23, 0x01	; 1
#define STREAMING_LIBRARY_VERSION 5

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     176:	84 e7       	ldi	r24, 0x74	; 116
     178:	91 e0       	ldi	r25, 0x01	; 1
     17a:	0e 94 89 04 	call	0x912	; 0x912 <_ZN5Print5printEPKc>
// Thanks to Arduino forum user Ben Combee who suggested this 
// clever technique to allow for expressions like
//   Serial << _HEX(a);

inline Print &operator <<(Print &obj, const _BASED &arg)
{ obj.print(arg.val, arg.base); return obj; } 
     17e:	2a e0       	ldi	r18, 0x0A	; 10
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	b5 01       	movw	r22, r10
     184:	a4 01       	movw	r20, r8
     186:	84 e7       	ldi	r24, 0x74	; 116
     188:	91 e0       	ldi	r25, 0x01	; 1
     18a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_ZN5Print5printEli>
#define STREAMING_LIBRARY_VERSION 5

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     18e:	60 e2       	ldi	r22, 0x20	; 32
     190:	84 e7       	ldi	r24, 0x74	; 116
     192:	91 e0       	ldi	r25, 0x01	; 1
     194:	0e 94 8b 04 	call	0x916	; 0x916 <_ZN5Print5printEc>
		Serial << monthShortStr(month(t)) << " " << _DEC(year(t)) << ' ';
     198:	c7 01       	movw	r24, r14
     19a:	b6 01       	movw	r22, r12
     19c:	0e 94 39 09 	call	0x1272	; 0x1272 <_Z4yearm>
     1a0:	ec 01       	movw	r28, r24
     1a2:	c7 01       	movw	r24, r14
     1a4:	b6 01       	movw	r22, r12
     1a6:	0e 94 33 09 	call	0x1266	; 0x1266 <_Z5monthm>
     1aa:	0e 94 0d 08 	call	0x101a	; 0x101a <_Z13monthShortStrh>
     1ae:	bc 01       	movw	r22, r24
     1b0:	84 e7       	ldi	r24, 0x74	; 116
     1b2:	91 e0       	ldi	r25, 0x01	; 1
     1b4:	0e 94 89 04 	call	0x912	; 0x912 <_ZN5Print5printEPKc>
     1b8:	66 e1       	ldi	r22, 0x16	; 22
     1ba:	71 e0       	ldi	r23, 0x01	; 1
     1bc:	84 e7       	ldi	r24, 0x74	; 116
     1be:	91 e0       	ldi	r25, 0x01	; 1
     1c0:	0e 94 89 04 	call	0x912	; 0x912 <_ZN5Print5printEPKc>
     1c4:	ae 01       	movw	r20, r28
     1c6:	dd 0f       	add	r29, r29
     1c8:	66 0b       	sbc	r22, r22
     1ca:	77 0b       	sbc	r23, r23
// Thanks to Arduino forum user Ben Combee who suggested this 
// clever technique to allow for expressions like
//   Serial << _HEX(a);

inline Print &operator <<(Print &obj, const _BASED &arg)
{ obj.print(arg.val, arg.base); return obj; } 
     1cc:	2a e0       	ldi	r18, 0x0A	; 10
     1ce:	30 e0       	ldi	r19, 0x00	; 0
     1d0:	84 e7       	ldi	r24, 0x74	; 116
     1d2:	91 e0       	ldi	r25, 0x01	; 1
     1d4:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_ZN5Print5printEli>
#define STREAMING_LIBRARY_VERSION 5

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     1d8:	60 e2       	ldi	r22, 0x20	; 32
     1da:	84 e7       	ldi	r24, 0x74	; 116
     1dc:	91 e0       	ldi	r25, 0x01	; 1
     1de:	0e 94 8b 04 	call	0x916	; 0x916 <_ZN5Print5printEc>
		Serial << ((hour(t)<10) ? "0" : "") << _DEC(hour(t)) << ':';
     1e2:	c7 01       	movw	r24, r14
     1e4:	b6 01       	movw	r22, r12
     1e6:	0e 94 1b 09 	call	0x1236	; 0x1236 <_Z4hourm>
     1ea:	4c 01       	movw	r8, r24
     1ec:	99 0f       	add	r25, r25
     1ee:	aa 08       	sbc	r10, r10
     1f0:	bb 08       	sbc	r11, r11
     1f2:	c7 01       	movw	r24, r14
     1f4:	b6 01       	movw	r22, r12
     1f6:	0e 94 1b 09 	call	0x1236	; 0x1236 <_Z4hourm>
     1fa:	0a 97       	sbiw	r24, 0x0a	; 10
     1fc:	1c f0       	brlt	.+6      	; 0x204 <_ZN23Human_Machine_Interface13printDateTimeEm+0xcc>
     1fe:	66 e4       	ldi	r22, 0x46	; 70
     200:	71 e0       	ldi	r23, 0x01	; 1
     202:	02 c0       	rjmp	.+4      	; 0x208 <_ZN23Human_Machine_Interface13printDateTimeEm+0xd0>
     204:	64 e0       	ldi	r22, 0x04	; 4
     206:	71 e0       	ldi	r23, 0x01	; 1
     208:	84 e7       	ldi	r24, 0x74	; 116
     20a:	91 e0       	ldi	r25, 0x01	; 1
     20c:	0e 94 89 04 	call	0x912	; 0x912 <_ZN5Print5printEPKc>
// Thanks to Arduino forum user Ben Combee who suggested this 
// clever technique to allow for expressions like
//   Serial << _HEX(a);

inline Print &operator <<(Print &obj, const _BASED &arg)
{ obj.print(arg.val, arg.base); return obj; } 
     210:	2a e0       	ldi	r18, 0x0A	; 10
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	b5 01       	movw	r22, r10
     216:	a4 01       	movw	r20, r8
     218:	84 e7       	ldi	r24, 0x74	; 116
     21a:	91 e0       	ldi	r25, 0x01	; 1
     21c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_ZN5Print5printEli>
#define STREAMING_LIBRARY_VERSION 5

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     220:	6a e3       	ldi	r22, 0x3A	; 58
     222:	84 e7       	ldi	r24, 0x74	; 116
     224:	91 e0       	ldi	r25, 0x01	; 1
     226:	0e 94 8b 04 	call	0x916	; 0x916 <_ZN5Print5printEc>
		Serial << ((minute(t)<10) ? "0" : "") << _DEC(minute(t)) << ':';
     22a:	c7 01       	movw	r24, r14
     22c:	b6 01       	movw	r22, r12
     22e:	0e 94 21 09 	call	0x1242	; 0x1242 <_Z6minutem>
     232:	4c 01       	movw	r8, r24
     234:	99 0f       	add	r25, r25
     236:	aa 08       	sbc	r10, r10
     238:	bb 08       	sbc	r11, r11
     23a:	c7 01       	movw	r24, r14
     23c:	b6 01       	movw	r22, r12
     23e:	0e 94 21 09 	call	0x1242	; 0x1242 <_Z6minutem>
     242:	0a 97       	sbiw	r24, 0x0a	; 10
     244:	1c f0       	brlt	.+6      	; 0x24c <_ZN23Human_Machine_Interface13printDateTimeEm+0x114>
     246:	66 e4       	ldi	r22, 0x46	; 70
     248:	71 e0       	ldi	r23, 0x01	; 1
     24a:	02 c0       	rjmp	.+4      	; 0x250 <_ZN23Human_Machine_Interface13printDateTimeEm+0x118>
     24c:	64 e0       	ldi	r22, 0x04	; 4
     24e:	71 e0       	ldi	r23, 0x01	; 1
     250:	84 e7       	ldi	r24, 0x74	; 116
     252:	91 e0       	ldi	r25, 0x01	; 1
     254:	0e 94 89 04 	call	0x912	; 0x912 <_ZN5Print5printEPKc>
// Thanks to Arduino forum user Ben Combee who suggested this 
// clever technique to allow for expressions like
//   Serial << _HEX(a);

inline Print &operator <<(Print &obj, const _BASED &arg)
{ obj.print(arg.val, arg.base); return obj; } 
     258:	2a e0       	ldi	r18, 0x0A	; 10
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	b5 01       	movw	r22, r10
     25e:	a4 01       	movw	r20, r8
     260:	84 e7       	ldi	r24, 0x74	; 116
     262:	91 e0       	ldi	r25, 0x01	; 1
     264:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_ZN5Print5printEli>
#define STREAMING_LIBRARY_VERSION 5

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     268:	6a e3       	ldi	r22, 0x3A	; 58
     26a:	84 e7       	ldi	r24, 0x74	; 116
     26c:	91 e0       	ldi	r25, 0x01	; 1
     26e:	0e 94 8b 04 	call	0x916	; 0x916 <_ZN5Print5printEc>
		Serial << ((second(t)<10) ? "0" : "") << _DEC(second(t));
     272:	c7 01       	movw	r24, r14
     274:	b6 01       	movw	r22, r12
     276:	0e 94 27 09 	call	0x124e	; 0x124e <_Z6secondm>
     27a:	4c 01       	movw	r8, r24
     27c:	99 0f       	add	r25, r25
     27e:	aa 08       	sbc	r10, r10
     280:	bb 08       	sbc	r11, r11
     282:	c7 01       	movw	r24, r14
     284:	b6 01       	movw	r22, r12
     286:	0e 94 27 09 	call	0x124e	; 0x124e <_Z6secondm>
     28a:	0a 97       	sbiw	r24, 0x0a	; 10
     28c:	1c f0       	brlt	.+6      	; 0x294 <_ZN23Human_Machine_Interface13printDateTimeEm+0x15c>
     28e:	66 e4       	ldi	r22, 0x46	; 70
     290:	71 e0       	ldi	r23, 0x01	; 1
     292:	02 c0       	rjmp	.+4      	; 0x298 <_ZN23Human_Machine_Interface13printDateTimeEm+0x160>
     294:	64 e0       	ldi	r22, 0x04	; 4
     296:	71 e0       	ldi	r23, 0x01	; 1
     298:	84 e7       	ldi	r24, 0x74	; 116
     29a:	91 e0       	ldi	r25, 0x01	; 1
     29c:	0e 94 89 04 	call	0x912	; 0x912 <_ZN5Print5printEPKc>
// Thanks to Arduino forum user Ben Combee who suggested this 
// clever technique to allow for expressions like
//   Serial << _HEX(a);

inline Print &operator <<(Print &obj, const _BASED &arg)
{ obj.print(arg.val, arg.base); return obj; } 
     2a0:	2a e0       	ldi	r18, 0x0A	; 10
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	b5 01       	movw	r22, r10
     2a6:	a4 01       	movw	r20, r8
     2a8:	84 e7       	ldi	r24, 0x74	; 116
     2aa:	91 e0       	ldi	r25, 0x01	; 1
	}
     2ac:	df 91       	pop	r29
     2ae:	cf 91       	pop	r28
     2b0:	ff 90       	pop	r15
     2b2:	ef 90       	pop	r14
     2b4:	df 90       	pop	r13
     2b6:	cf 90       	pop	r12
     2b8:	bf 90       	pop	r11
     2ba:	af 90       	pop	r10
     2bc:	9f 90       	pop	r9
     2be:	8f 90       	pop	r8
     2c0:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <_ZN5Print5printEli>

000002c4 <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t>:
	 * 
	 * \param TM
	 * 
	 * \return void
	 */
	void printDateTime(tmElements_t TM)
     2c4:	0f 93       	push	r16
     2c6:	1f 93       	push	r17
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	cd b7       	in	r28, 0x3d	; 61
     2ce:	de b7       	in	r29, 0x3e	; 62
     2d0:	27 97       	sbiw	r28, 0x07	; 7
     2d2:	0f b6       	in	r0, 0x3f	; 63
     2d4:	f8 94       	cli
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	0f be       	out	0x3f, r0	; 63
     2da:	cd bf       	out	0x3d, r28	; 61
     2dc:	09 83       	std	Y+1, r16	; 0x01
     2de:	1a 83       	std	Y+2, r17	; 0x02
     2e0:	2b 83       	std	Y+3, r18	; 0x03
     2e2:	5e 83       	std	Y+6, r21	; 0x06
	{
		Serial << ((TM.Day<10) ? "0" : "") << TM.Day << ' ';
     2e4:	14 2f       	mov	r17, r20
     2e6:	4a 30       	cpi	r20, 0x0A	; 10
     2e8:	18 f0       	brcs	.+6      	; 0x2f0 <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0x2c>
     2ea:	66 e4       	ldi	r22, 0x46	; 70
     2ec:	71 e0       	ldi	r23, 0x01	; 1
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0x30>
     2f0:	64 e0       	ldi	r22, 0x04	; 4
     2f2:	71 e0       	ldi	r23, 0x01	; 1
#define STREAMING_LIBRARY_VERSION 5

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     2f4:	84 e7       	ldi	r24, 0x74	; 116
     2f6:	91 e0       	ldi	r25, 0x01	; 1
     2f8:	0e 94 89 04 	call	0x912	; 0x912 <_ZN5Print5printEPKc>
     2fc:	4a e0       	ldi	r20, 0x0A	; 10
     2fe:	50 e0       	ldi	r21, 0x00	; 0
     300:	61 2f       	mov	r22, r17
     302:	84 e7       	ldi	r24, 0x74	; 116
     304:	91 e0       	ldi	r25, 0x01	; 1
     306:	0e 94 41 05 	call	0xa82	; 0xa82 <_ZN5Print5printEhi>
     30a:	60 e2       	ldi	r22, 0x20	; 32
     30c:	84 e7       	ldi	r24, 0x74	; 116
     30e:	91 e0       	ldi	r25, 0x01	; 1
     310:	0e 94 8b 04 	call	0x916	; 0x916 <_ZN5Print5printEc>
		Serial << monthShortStr(TM.Month) << ' ';
     314:	8e 81       	ldd	r24, Y+6	; 0x06
     316:	0e 94 0d 08 	call	0x101a	; 0x101a <_Z13monthShortStrh>
     31a:	bc 01       	movw	r22, r24
     31c:	84 e7       	ldi	r24, 0x74	; 116
     31e:	91 e0       	ldi	r25, 0x01	; 1
     320:	0e 94 89 04 	call	0x912	; 0x912 <_ZN5Print5printEPKc>
     324:	60 e2       	ldi	r22, 0x20	; 32
     326:	84 e7       	ldi	r24, 0x74	; 116
     328:	91 e0       	ldi	r25, 0x01	; 1
     32a:	0e 94 8b 04 	call	0x916	; 0x916 <_ZN5Print5printEc>
		Serial << ((TM.Hour<10) ? "0" : "") << TM.Hour << ':';
     32e:	1b 81       	ldd	r17, Y+3	; 0x03
     330:	1a 30       	cpi	r17, 0x0A	; 10
     332:	18 f0       	brcs	.+6      	; 0x33a <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0x76>
     334:	66 e4       	ldi	r22, 0x46	; 70
     336:	71 e0       	ldi	r23, 0x01	; 1
     338:	02 c0       	rjmp	.+4      	; 0x33e <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0x7a>
     33a:	64 e0       	ldi	r22, 0x04	; 4
     33c:	71 e0       	ldi	r23, 0x01	; 1
     33e:	84 e7       	ldi	r24, 0x74	; 116
     340:	91 e0       	ldi	r25, 0x01	; 1
     342:	0e 94 89 04 	call	0x912	; 0x912 <_ZN5Print5printEPKc>
     346:	4a e0       	ldi	r20, 0x0A	; 10
     348:	50 e0       	ldi	r21, 0x00	; 0
     34a:	61 2f       	mov	r22, r17
     34c:	84 e7       	ldi	r24, 0x74	; 116
     34e:	91 e0       	ldi	r25, 0x01	; 1
     350:	0e 94 41 05 	call	0xa82	; 0xa82 <_ZN5Print5printEhi>
     354:	6a e3       	ldi	r22, 0x3A	; 58
     356:	84 e7       	ldi	r24, 0x74	; 116
     358:	91 e0       	ldi	r25, 0x01	; 1
     35a:	0e 94 8b 04 	call	0x916	; 0x916 <_ZN5Print5printEc>
		Serial << ((TM.Minute<10) ? "0" : "") << TM.Minute << ':';
     35e:	1a 81       	ldd	r17, Y+2	; 0x02
     360:	1a 30       	cpi	r17, 0x0A	; 10
     362:	18 f0       	brcs	.+6      	; 0x36a <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0xa6>
     364:	66 e4       	ldi	r22, 0x46	; 70
     366:	71 e0       	ldi	r23, 0x01	; 1
     368:	02 c0       	rjmp	.+4      	; 0x36e <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0xaa>
     36a:	64 e0       	ldi	r22, 0x04	; 4
     36c:	71 e0       	ldi	r23, 0x01	; 1
     36e:	84 e7       	ldi	r24, 0x74	; 116
     370:	91 e0       	ldi	r25, 0x01	; 1
     372:	0e 94 89 04 	call	0x912	; 0x912 <_ZN5Print5printEPKc>
     376:	4a e0       	ldi	r20, 0x0A	; 10
     378:	50 e0       	ldi	r21, 0x00	; 0
     37a:	61 2f       	mov	r22, r17
     37c:	84 e7       	ldi	r24, 0x74	; 116
     37e:	91 e0       	ldi	r25, 0x01	; 1
     380:	0e 94 41 05 	call	0xa82	; 0xa82 <_ZN5Print5printEhi>
     384:	6a e3       	ldi	r22, 0x3A	; 58
     386:	84 e7       	ldi	r24, 0x74	; 116
     388:	91 e0       	ldi	r25, 0x01	; 1
     38a:	0e 94 8b 04 	call	0x916	; 0x916 <_ZN5Print5printEc>
		Serial << ((TM.Second<10) ? "0" : "") << TM.Second << endl;
     38e:	19 81       	ldd	r17, Y+1	; 0x01
     390:	1a 30       	cpi	r17, 0x0A	; 10
     392:	18 f0       	brcs	.+6      	; 0x39a <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0xd6>
     394:	66 e4       	ldi	r22, 0x46	; 70
     396:	71 e0       	ldi	r23, 0x01	; 1
     398:	02 c0       	rjmp	.+4      	; 0x39e <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0xda>
     39a:	64 e0       	ldi	r22, 0x04	; 4
     39c:	71 e0       	ldi	r23, 0x01	; 1
     39e:	84 e7       	ldi	r24, 0x74	; 116
     3a0:	91 e0       	ldi	r25, 0x01	; 1
     3a2:	0e 94 89 04 	call	0x912	; 0x912 <_ZN5Print5printEPKc>
     3a6:	4a e0       	ldi	r20, 0x0A	; 10
     3a8:	50 e0       	ldi	r21, 0x00	; 0
     3aa:	61 2f       	mov	r22, r17
     3ac:	84 e7       	ldi	r24, 0x74	; 116
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	0e 94 41 05 	call	0xa82	; 0xa82 <_ZN5Print5printEhi>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
     3b4:	84 e7       	ldi	r24, 0x74	; 116
     3b6:	91 e0       	ldi	r25, 0x01	; 1
	}
     3b8:	27 96       	adiw	r28, 0x07	; 7
     3ba:	0f b6       	in	r0, 0x3f	; 63
     3bc:	f8 94       	cli
     3be:	de bf       	out	0x3e, r29	; 62
     3c0:	0f be       	out	0x3f, r0	; 63
     3c2:	cd bf       	out	0x3d, r28	; 61
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	1f 91       	pop	r17
     3ca:	0f 91       	pop	r16
     3cc:	0c 94 92 04 	jmp	0x924	; 0x924 <_ZN5Print7printlnEv>

000003d0 <main>:
// Extra includes and defines:
#include "Supp_Func.h"


int main(void)
{
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	cd b7       	in	r28, 0x3d	; 61
     3d6:	de b7       	in	r29, 0x3e	; 62
     3d8:	2a 97       	sbiw	r28, 0x0a	; 10
     3da:	0f b6       	in	r0, 0x3f	; 63
     3dc:	f8 94       	cli
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	0f be       	out	0x3f, r0	; 63
     3e2:	cd bf       	out	0x3d, r28	; 61
	init();						// Initializes the Arduino Core.
     3e4:	0e 94 62 06 	call	0xcc4	; 0xcc4 <init>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     3e8:	26 e0       	ldi	r18, 0x06	; 6
     3ea:	40 e8       	ldi	r20, 0x80	; 128
     3ec:	55 e2       	ldi	r21, 0x25	; 37
     3ee:	60 e0       	ldi	r22, 0x00	; 0
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	84 e7       	ldi	r24, 0x74	; 116
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	0e 94 5f 03 	call	0x6be	; 0x6be <_ZN14HardwareSerial5beginEmh>
	* \return void
	*/
	void init_alarms(void)
	{
		// Setup the SQW interrupt:
		DDRD &= ~(1 << DDD2); // make INT0 an input.
     3fa:	52 98       	cbi	0x0a, 2	; 10
		PORTD |= (1 << DDD2); // enable pull-up on INT0.
     3fc:	5a 9a       	sbi	0x0b, 2	; 11
		attachInterrupt(INT0, alarmIsr, FALLING);	// Initializing the INT0 interrupt in the Arduino way.
     3fe:	42 e0       	ldi	r20, 0x02	; 2
     400:	50 e0       	ldi	r21, 0x00	; 0
     402:	68 e9       	ldi	r22, 0x98	; 152
     404:	70 e0       	ldi	r23, 0x00	; 0
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	0e 94 49 05 	call	0xa92	; 0xa92 <attachInterrupt>
		
		//Disable the default square wave of the SQW pin.
		RTC.squareWave(SQWAVE_NONE);
     40c:	64 e0       	ldi	r22, 0x04	; 4
     40e:	8a e1       	ldi	r24, 0x1A	; 26
     410:	92 e0       	ldi	r25, 0x02	; 2
     412:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <_ZN9DS3232RTC10squareWaveE14SQWAVE_FREQS_t>
		
		//Prepare alarm1 for the interrupt.
		RTC.alarm(ALARM_1);                   //ensure RTC interrupt flag is cleared
     416:	61 e0       	ldi	r22, 0x01	; 1
     418:	8a e1       	ldi	r24, 0x1A	; 26
     41a:	92 e0       	ldi	r25, 0x02	; 2
     41c:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <_ZN9DS3232RTC5alarmEh>
		RTC.alarmInterrupt(ALARM_1, true);
     420:	41 e0       	ldi	r20, 0x01	; 1
     422:	61 e0       	ldi	r22, 0x01	; 1
     424:	8a e1       	ldi	r24, 0x1A	; 26
     426:	92 e0       	ldi	r25, 0x02	; 2
     428:	0e 94 ab 07 	call	0xf56	; 0xf56 <_ZN9DS3232RTC14alarmInterruptEhb>

		//Prepare alarm1 for the interrupt.
		RTC.alarm(ALARM_2);                   //ensure RTC interrupt flag is cleared
     42c:	62 e0       	ldi	r22, 0x02	; 2
     42e:	8a e1       	ldi	r24, 0x1A	; 26
     430:	92 e0       	ldi	r25, 0x02	; 2
     432:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <_ZN9DS3232RTC5alarmEh>
		RTC.alarmInterrupt(ALARM_2, true);
     436:	41 e0       	ldi	r20, 0x01	; 1
     438:	62 e0       	ldi	r22, 0x02	; 2
     43a:	8a e1       	ldi	r24, 0x1A	; 26
     43c:	92 e0       	ldi	r25, 0x02	; 2
     43e:	0e 94 ab 07 	call	0xf56	; 0xf56 <_ZN9DS3232RTC14alarmInterruptEhb>
#define STREAMING_LIBRARY_VERSION 5

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     442:	66 e0       	ldi	r22, 0x06	; 6
     444:	71 e0       	ldi	r23, 0x01	; 1
     446:	84 e7       	ldi	r24, 0x74	; 116
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	0e 94 89 04 	call	0x912	; 0x912 <_ZN5Print5printEPKc>
	uint8_t alarm_stat = 0;
	
	
	// print he current time:
	Serial << "Current time is: ";
	HMI.printDateTime(RTC.get());
     44e:	0e 94 44 07 	call	0xe88	; 0xe88 <_ZN9DS3232RTC3getEv>
     452:	ab 01       	movw	r20, r22
     454:	bc 01       	movw	r22, r24
     456:	82 e7       	ldi	r24, 0x72	; 114
     458:	91 e0       	ldi	r25, 0x01	; 1
     45a:	0e 94 9c 00 	call	0x138	; 0x138 <_ZN23Human_Machine_Interface13printDateTimeEm>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
     45e:	84 e7       	ldi	r24, 0x74	; 116
     460:	91 e0       	ldi	r25, 0x01	; 1
     462:	0e 94 92 04 	call	0x924	; 0x924 <_ZN5Print7printlnEv>
	Serial << endl;
	
	HMI.printDateTime(HMI.ConvTotm(RTC.get()));
     466:	0e 94 44 07 	call	0xe88	; 0xe88 <_ZN9DS3232RTC3getEv>
     46a:	6b 01       	movw	r12, r22
     46c:	7c 01       	movw	r14, r24
	 * \return tmElements_t
	 */
	tmElements_t ConvTotm(time_t t)
	{
		tmElements_t TM;
		TM.Year = year(t);
     46e:	0e 94 39 09 	call	0x1272	; 0x1272 <_Z4yearm>
     472:	b8 2e       	mov	r11, r24
		TM.Day = day(t);
     474:	c7 01       	movw	r24, r14
     476:	b6 01       	movw	r22, r12
     478:	0e 94 2d 09 	call	0x125a	; 0x125a <_Z3daym>
     47c:	48 2f       	mov	r20, r24
		TM.Month = month(t);
     47e:	c7 01       	movw	r24, r14
     480:	b6 01       	movw	r22, r12
     482:	4a 87       	std	Y+10, r20	; 0x0a
     484:	0e 94 33 09 	call	0x1266	; 0x1266 <_Z5monthm>
     488:	58 2f       	mov	r21, r24
		TM.Hour = hour(t);
     48a:	c7 01       	movw	r24, r14
     48c:	b6 01       	movw	r22, r12
     48e:	59 87       	std	Y+9, r21	; 0x09
     490:	0e 94 1b 09 	call	0x1236	; 0x1236 <_Z4hourm>
     494:	28 2f       	mov	r18, r24
		TM.Minute = minute(t);
     496:	c7 01       	movw	r24, r14
     498:	b6 01       	movw	r22, r12
     49a:	28 87       	std	Y+8, r18	; 0x08
     49c:	0e 94 21 09 	call	0x1242	; 0x1242 <_Z6minutem>
     4a0:	18 2f       	mov	r17, r24
		TM.Second = second(t);
     4a2:	c7 01       	movw	r24, r14
     4a4:	b6 01       	movw	r22, r12
     4a6:	0e 94 27 09 	call	0x124e	; 0x124e <_Z6secondm>
     4aa:	89 83       	std	Y+1, r24	; 0x01
		tmElements_t TM;
		TM.Year = year(t);
		TM.Day = day(t);
		TM.Month = month(t);
		TM.Hour = hour(t);
		TM.Minute = minute(t);
     4ac:	1a 83       	std	Y+2, r17	; 0x02
	{
		tmElements_t TM;
		TM.Year = year(t);
		TM.Day = day(t);
		TM.Month = month(t);
		TM.Hour = hour(t);
     4ae:	28 85       	ldd	r18, Y+8	; 0x08
     4b0:	2b 83       	std	Y+3, r18	; 0x03
	 */
	tmElements_t ConvTotm(time_t t)
	{
		tmElements_t TM;
		TM.Year = year(t);
		TM.Day = day(t);
     4b2:	4a 85       	ldd	r20, Y+10	; 0x0a
     4b4:	4d 83       	std	Y+5, r20	; 0x05
		TM.Month = month(t);
     4b6:	59 85       	ldd	r21, Y+9	; 0x09
     4b8:	5e 83       	std	Y+6, r21	; 0x06
	 * \return tmElements_t
	 */
	tmElements_t ConvTotm(time_t t)
	{
		tmElements_t TM;
		TM.Year = year(t);
     4ba:	bf 82       	std	Y+7, r11	; 0x07
     4bc:	08 2f       	mov	r16, r24
     4be:	3c 81       	ldd	r19, Y+4	; 0x04
     4c0:	6b 2d       	mov	r22, r11
     4c2:	82 e7       	ldi	r24, 0x72	; 114
     4c4:	91 e0       	ldi	r25, 0x01	; 1
     4c6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t>
	init();						// Initializes the Arduino Core.
	Serial.begin(9600);			// Start the serial communication at 9600 a baud rate.
	RTC_alarm.init_alarms();	// Start the alarms.
	
	// Local Variables:
	uint8_t alarm_stat = 0;
     4ca:	10 e0       	ldi	r17, 0x00	; 0
	 * 
	 * \return void
	 */
	void alarm_Check(uint8_t *stat)
	{
		if (alarmIsrWasCalled)	// if the interrupt has happened
     4cc:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <alarmIsrWasCalled>
     4d0:	88 23       	and	r24, r24
     4d2:	a9 f1       	breq	.+106    	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
		{
			if (RTC.alarm(ALARM_1))	// check if alarm1 has happened and reset it.
     4d4:	61 e0       	ldi	r22, 0x01	; 1
     4d6:	8a e1       	ldi	r24, 0x1A	; 26
     4d8:	92 e0       	ldi	r25, 0x02	; 2
     4da:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <_ZN9DS3232RTC5alarmEh>
     4de:	81 11       	cpse	r24, r1
     4e0:	09 c0       	rjmp	.+18     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
			{
				*stat = 1;
			}
			else if (RTC.alarm(ALARM_2))	// or else check if alarm2 has happened and reset it.
     4e2:	62 e0       	ldi	r22, 0x02	; 2
     4e4:	8a e1       	ldi	r24, 0x1A	; 26
     4e6:	92 e0       	ldi	r25, 0x02	; 2
     4e8:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <_ZN9DS3232RTC5alarmEh>
     4ec:	88 23       	and	r24, r24
     4ee:	19 f0       	breq	.+6      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
			{
				*stat = 2;
     4f0:	12 e0       	ldi	r17, 0x02	; 2
     4f2:	01 c0       	rjmp	.+2      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
	{
		if (alarmIsrWasCalled)	// if the interrupt has happened
		{
			if (RTC.alarm(ALARM_1))	// check if alarm1 has happened and reset it.
			{
				*stat = 1;
     4f4:	11 e0       	ldi	r17, 0x01	; 1
			}
			else if (RTC.alarm(ALARM_2))	// or else check if alarm2 has happened and reset it.
			{
				*stat = 2;
			}
			alarmIsrWasCalled = false;
     4f6:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <alarmIsrWasCalled>
	
	while (1)
	{
		RTC_alarm.alarm_Check(&alarm_stat);	// get the alarm status.
		
		switch(alarm_stat)					// switch statement to decide what should happen if alarm has happened.
     4fa:	11 30       	cpi	r17, 0x01	; 1
     4fc:	69 f0       	breq	.+26     	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
     4fe:	12 30       	cpi	r17, 0x02	; 2
     500:	f9 f4       	brne	.+62     	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
				HMI.printDateTime( RTC.get() );
				Serial << " --> Alarm 1!" << endl;
			break;
			
			case 2:							// alarm1:
				HMI.printDateTime( RTC.get() );
     502:	0e 94 44 07 	call	0xe88	; 0xe88 <_ZN9DS3232RTC3getEv>
     506:	ab 01       	movw	r20, r22
     508:	bc 01       	movw	r22, r24
     50a:	82 e7       	ldi	r24, 0x72	; 114
     50c:	91 e0       	ldi	r25, 0x01	; 1
     50e:	0e 94 9c 00 	call	0x138	; 0x138 <_ZN23Human_Machine_Interface13printDateTimeEm>
#define STREAMING_LIBRARY_VERSION 5

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     512:	66 e2       	ldi	r22, 0x26	; 38
     514:	71 e0       	ldi	r23, 0x01	; 1
     516:	0a c0       	rjmp	.+20     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
		RTC_alarm.alarm_Check(&alarm_stat);	// get the alarm status.
		
		switch(alarm_stat)					// switch statement to decide what should happen if alarm has happened.
		{
			case 1:							// alarm1:
				HMI.printDateTime( RTC.get() );
     518:	0e 94 44 07 	call	0xe88	; 0xe88 <_ZN9DS3232RTC3getEv>
     51c:	ab 01       	movw	r20, r22
     51e:	bc 01       	movw	r22, r24
     520:	82 e7       	ldi	r24, 0x72	; 114
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	0e 94 9c 00 	call	0x138	; 0x138 <_ZN23Human_Machine_Interface13printDateTimeEm>
     528:	68 e1       	ldi	r22, 0x18	; 24
     52a:	71 e0       	ldi	r23, 0x01	; 1
     52c:	84 e7       	ldi	r24, 0x74	; 116
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	0e 94 89 04 	call	0x912	; 0x912 <_ZN5Print5printEPKc>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
     534:	84 e7       	ldi	r24, 0x74	; 116
     536:	91 e0       	ldi	r25, 0x01	; 1
     538:	0e 94 92 04 	call	0x924	; 0x924 <_ZN5Print7printlnEv>
     53c:	01 c0       	rjmp	.+2      	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
		}
		else	// else return 0
		{
			
			*stat = 0;
     53e:	10 e0       	ldi	r17, 0x00	; 0
				
			default:						// if there was no alarm:
				
			break;
		}
		delay(100);	// small delay
     540:	64 e6       	ldi	r22, 0x64	; 100
     542:	70 e0       	ldi	r23, 0x00	; 0
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	0e 94 26 06 	call	0xc4c	; 0xc4c <delay>
	}
     54c:	bf cf       	rjmp	.-130    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>

0000054e <_ZN14HardwareSerial9availableEv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     54e:	fc 01       	movw	r30, r24
     550:	91 8d       	ldd	r25, Z+25	; 0x19
     552:	22 8d       	ldd	r18, Z+26	; 0x1a
     554:	89 2f       	mov	r24, r25
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	80 5c       	subi	r24, 0xC0	; 192
     55a:	9f 4f       	sbci	r25, 0xFF	; 255
     55c:	82 1b       	sub	r24, r18
     55e:	91 09       	sbc	r25, r1
     560:	8f 73       	andi	r24, 0x3F	; 63
     562:	99 27       	eor	r25, r25
     564:	08 95       	ret

00000566 <_ZN14HardwareSerial4peekEv>:
     566:	fc 01       	movw	r30, r24
     568:	91 8d       	ldd	r25, Z+25	; 0x19
     56a:	82 8d       	ldd	r24, Z+26	; 0x1a
     56c:	98 17       	cp	r25, r24
     56e:	31 f0       	breq	.+12     	; 0x57c <_ZN14HardwareSerial4peekEv+0x16>
     570:	82 8d       	ldd	r24, Z+26	; 0x1a
     572:	e8 0f       	add	r30, r24
     574:	f1 1d       	adc	r31, r1
     576:	85 8d       	ldd	r24, Z+29	; 0x1d
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	08 95       	ret
     57c:	8f ef       	ldi	r24, 0xFF	; 255
     57e:	9f ef       	ldi	r25, 0xFF	; 255
     580:	08 95       	ret

00000582 <_ZN14HardwareSerial4readEv>:
     582:	fc 01       	movw	r30, r24
     584:	91 8d       	ldd	r25, Z+25	; 0x19
     586:	82 8d       	ldd	r24, Z+26	; 0x1a
     588:	98 17       	cp	r25, r24
     58a:	61 f0       	breq	.+24     	; 0x5a4 <_ZN14HardwareSerial4readEv+0x22>
     58c:	82 8d       	ldd	r24, Z+26	; 0x1a
     58e:	df 01       	movw	r26, r30
     590:	a8 0f       	add	r26, r24
     592:	b1 1d       	adc	r27, r1
     594:	5d 96       	adiw	r26, 0x1d	; 29
     596:	8c 91       	ld	r24, X
     598:	92 8d       	ldd	r25, Z+26	; 0x1a
     59a:	9f 5f       	subi	r25, 0xFF	; 255
     59c:	9f 73       	andi	r25, 0x3F	; 63
     59e:	92 8f       	std	Z+26, r25	; 0x1a
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	08 95       	ret
     5a4:	8f ef       	ldi	r24, 0xFF	; 255
     5a6:	9f ef       	ldi	r25, 0xFF	; 255
     5a8:	08 95       	ret

000005aa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     5aa:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     5ac:	84 8d       	ldd	r24, Z+28	; 0x1c
     5ae:	df 01       	movw	r26, r30
     5b0:	a8 0f       	add	r26, r24
     5b2:	b1 1d       	adc	r27, r1
     5b4:	a3 5a       	subi	r26, 0xA3	; 163
     5b6:	bf 4f       	sbci	r27, 0xFF	; 255
     5b8:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     5ba:	84 8d       	ldd	r24, Z+28	; 0x1c
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	01 96       	adiw	r24, 0x01	; 1
     5c0:	8f 73       	andi	r24, 0x3F	; 63
     5c2:	99 27       	eor	r25, r25
     5c4:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     5c6:	a6 89       	ldd	r26, Z+22	; 0x16
     5c8:	b7 89       	ldd	r27, Z+23	; 0x17
     5ca:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     5cc:	a0 89       	ldd	r26, Z+16	; 0x10
     5ce:	b1 89       	ldd	r27, Z+17	; 0x11
     5d0:	8c 91       	ld	r24, X
     5d2:	80 64       	ori	r24, 0x40	; 64
     5d4:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     5d6:	93 8d       	ldd	r25, Z+27	; 0x1b
     5d8:	84 8d       	ldd	r24, Z+28	; 0x1c
     5da:	98 13       	cpse	r25, r24
     5dc:	06 c0       	rjmp	.+12     	; 0x5ea <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     5de:	02 88       	ldd	r0, Z+18	; 0x12
     5e0:	f3 89       	ldd	r31, Z+19	; 0x13
     5e2:	e0 2d       	mov	r30, r0
     5e4:	80 81       	ld	r24, Z
     5e6:	8f 7d       	andi	r24, 0xDF	; 223
     5e8:	80 83       	st	Z, r24
     5ea:	08 95       	ret

000005ec <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     5f2:	88 8d       	ldd	r24, Y+24	; 0x18
     5f4:	88 23       	and	r24, r24
     5f6:	c9 f0       	breq	.+50     	; 0x62a <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     5f8:	ea 89       	ldd	r30, Y+18	; 0x12
     5fa:	fb 89       	ldd	r31, Y+19	; 0x13
     5fc:	80 81       	ld	r24, Z
     5fe:	85 fd       	sbrc	r24, 5
     600:	05 c0       	rjmp	.+10     	; 0x60c <_ZN14HardwareSerial5flushEv+0x20>
     602:	a8 89       	ldd	r26, Y+16	; 0x10
     604:	b9 89       	ldd	r27, Y+17	; 0x11
     606:	8c 91       	ld	r24, X
     608:	86 fd       	sbrc	r24, 6
     60a:	0f c0       	rjmp	.+30     	; 0x62a <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	07 fc       	sbrc	r0, 7
     610:	f5 cf       	rjmp	.-22     	; 0x5fc <_ZN14HardwareSerial5flushEv+0x10>
     612:	80 81       	ld	r24, Z
     614:	85 ff       	sbrs	r24, 5
     616:	f2 cf       	rjmp	.-28     	; 0x5fc <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     618:	a8 89       	ldd	r26, Y+16	; 0x10
     61a:	b9 89       	ldd	r27, Y+17	; 0x11
     61c:	8c 91       	ld	r24, X
     61e:	85 ff       	sbrs	r24, 5
     620:	ed cf       	rjmp	.-38     	; 0x5fc <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     622:	ce 01       	movw	r24, r28
     624:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     628:	e7 cf       	rjmp	.-50     	; 0x5f8 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	08 95       	ret

00000630 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     630:	ef 92       	push	r14
     632:	ff 92       	push	r15
     634:	0f 93       	push	r16
     636:	1f 93       	push	r17
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	ec 01       	movw	r28, r24
  _written = true;
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     642:	9b 8d       	ldd	r25, Y+27	; 0x1b
     644:	8c 8d       	ldd	r24, Y+28	; 0x1c
     646:	98 13       	cpse	r25, r24
     648:	05 c0       	rjmp	.+10     	; 0x654 <_ZN14HardwareSerial5writeEh+0x24>
     64a:	e8 89       	ldd	r30, Y+16	; 0x10
     64c:	f9 89       	ldd	r31, Y+17	; 0x11
     64e:	80 81       	ld	r24, Z
     650:	85 fd       	sbrc	r24, 5
     652:	24 c0       	rjmp	.+72     	; 0x69c <_ZN14HardwareSerial5writeEh+0x6c>
     654:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     656:	0b 8d       	ldd	r16, Y+27	; 0x1b
     658:	10 e0       	ldi	r17, 0x00	; 0
     65a:	0f 5f       	subi	r16, 0xFF	; 255
     65c:	1f 4f       	sbci	r17, 0xFF	; 255
     65e:	0f 73       	andi	r16, 0x3F	; 63
     660:	11 27       	eor	r17, r17
     662:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     664:	8c 8d       	ldd	r24, Y+28	; 0x1c
     666:	e8 12       	cpse	r14, r24
     668:	0c c0       	rjmp	.+24     	; 0x682 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	07 fc       	sbrc	r0, 7
     66e:	fa cf       	rjmp	.-12     	; 0x664 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     670:	e8 89       	ldd	r30, Y+16	; 0x10
     672:	f9 89       	ldd	r31, Y+17	; 0x11
     674:	80 81       	ld	r24, Z
     676:	85 ff       	sbrs	r24, 5
     678:	f5 cf       	rjmp	.-22     	; 0x664 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     67a:	ce 01       	movw	r24, r28
     67c:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     680:	f1 cf       	rjmp	.-30     	; 0x664 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     682:	8b 8d       	ldd	r24, Y+27	; 0x1b
     684:	fe 01       	movw	r30, r28
     686:	e8 0f       	add	r30, r24
     688:	f1 1d       	adc	r31, r1
     68a:	e3 5a       	subi	r30, 0xA3	; 163
     68c:	ff 4f       	sbci	r31, 0xFF	; 255
     68e:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     690:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     692:	ea 89       	ldd	r30, Y+18	; 0x12
     694:	fb 89       	ldd	r31, Y+19	; 0x13
     696:	80 81       	ld	r24, Z
     698:	80 62       	ori	r24, 0x20	; 32
     69a:	07 c0       	rjmp	.+14     	; 0x6aa <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     69c:	ee 89       	ldd	r30, Y+22	; 0x16
     69e:	ff 89       	ldd	r31, Y+23	; 0x17
     6a0:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     6a2:	e8 89       	ldd	r30, Y+16	; 0x10
     6a4:	f9 89       	ldd	r31, Y+17	; 0x11
     6a6:	80 81       	ld	r24, Z
     6a8:	80 64       	ori	r24, 0x40	; 64
     6aa:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	df 91       	pop	r29
     6b2:	cf 91       	pop	r28
     6b4:	1f 91       	pop	r17
     6b6:	0f 91       	pop	r16
     6b8:	ff 90       	pop	r15
     6ba:	ef 90       	pop	r14
     6bc:	08 95       	ret

000006be <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     6be:	cf 92       	push	r12
     6c0:	df 92       	push	r13
     6c2:	ef 92       	push	r14
     6c4:	ff 92       	push	r15
     6c6:	1f 93       	push	r17
     6c8:	cf 93       	push	r28
     6ca:	df 93       	push	r29
     6cc:	ec 01       	movw	r28, r24
     6ce:	6a 01       	movw	r12, r20
     6d0:	7b 01       	movw	r14, r22
     6d2:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     6d4:	e8 89       	ldd	r30, Y+16	; 0x10
     6d6:	f9 89       	ldd	r31, Y+17	; 0x11
     6d8:	82 e0       	ldi	r24, 0x02	; 2
     6da:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     6dc:	41 15       	cp	r20, r1
     6de:	51 4e       	sbci	r21, 0xE1	; 225
     6e0:	61 05       	cpc	r22, r1
     6e2:	71 05       	cpc	r23, r1
     6e4:	b1 f0       	breq	.+44     	; 0x712 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     6e6:	60 e0       	ldi	r22, 0x00	; 0
     6e8:	79 e0       	ldi	r23, 0x09	; 9
     6ea:	8d e3       	ldi	r24, 0x3D	; 61
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	a7 01       	movw	r20, r14
     6f0:	96 01       	movw	r18, r12
     6f2:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__udivmodsi4>
     6f6:	da 01       	movw	r26, r20
     6f8:	c9 01       	movw	r24, r18
     6fa:	01 97       	sbiw	r24, 0x01	; 1
     6fc:	a1 09       	sbc	r26, r1
     6fe:	b1 09       	sbc	r27, r1
     700:	b6 95       	lsr	r27
     702:	a7 95       	ror	r26
     704:	97 95       	ror	r25
     706:	87 95       	ror	r24
     708:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     70a:	41 15       	cp	r20, r1
     70c:	80 e1       	ldi	r24, 0x10	; 16
     70e:	58 07       	cpc	r21, r24
     710:	a8 f0       	brcs	.+42     	; 0x73c <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     712:	e8 89       	ldd	r30, Y+16	; 0x10
     714:	f9 89       	ldd	r31, Y+17	; 0x11
     716:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     718:	60 e8       	ldi	r22, 0x80	; 128
     71a:	74 e8       	ldi	r23, 0x84	; 132
     71c:	8e e1       	ldi	r24, 0x1E	; 30
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	a7 01       	movw	r20, r14
     722:	96 01       	movw	r18, r12
     724:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__udivmodsi4>
     728:	ba 01       	movw	r22, r20
     72a:	a9 01       	movw	r20, r18
     72c:	41 50       	subi	r20, 0x01	; 1
     72e:	51 09       	sbc	r21, r1
     730:	61 09       	sbc	r22, r1
     732:	71 09       	sbc	r23, r1
     734:	76 95       	lsr	r23
     736:	67 95       	ror	r22
     738:	57 95       	ror	r21
     73a:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     73c:	ec 85       	ldd	r30, Y+12	; 0x0c
     73e:	fd 85       	ldd	r31, Y+13	; 0x0d
     740:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
     742:	ee 85       	ldd	r30, Y+14	; 0x0e
     744:	ff 85       	ldd	r31, Y+15	; 0x0f
     746:	40 83       	st	Z, r20

  _written = false;
     748:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     74a:	ec 89       	ldd	r30, Y+20	; 0x14
     74c:	fd 89       	ldd	r31, Y+21	; 0x15
     74e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     750:	ea 89       	ldd	r30, Y+18	; 0x12
     752:	fb 89       	ldd	r31, Y+19	; 0x13
     754:	80 81       	ld	r24, Z
     756:	80 61       	ori	r24, 0x10	; 16
     758:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     75a:	ea 89       	ldd	r30, Y+18	; 0x12
     75c:	fb 89       	ldd	r31, Y+19	; 0x13
     75e:	80 81       	ld	r24, Z
     760:	88 60       	ori	r24, 0x08	; 8
     762:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     764:	ea 89       	ldd	r30, Y+18	; 0x12
     766:	fb 89       	ldd	r31, Y+19	; 0x13
     768:	80 81       	ld	r24, Z
     76a:	80 68       	ori	r24, 0x80	; 128
     76c:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     76e:	ea 89       	ldd	r30, Y+18	; 0x12
     770:	fb 89       	ldd	r31, Y+19	; 0x13
     772:	80 81       	ld	r24, Z
     774:	8f 7d       	andi	r24, 0xDF	; 223
     776:	80 83       	st	Z, r24
}
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	1f 91       	pop	r17
     77e:	ff 90       	pop	r15
     780:	ef 90       	pop	r14
     782:	df 90       	pop	r13
     784:	cf 90       	pop	r12
     786:	08 95       	ret

00000788 <__vector_18>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
     788:	1f 92       	push	r1
     78a:	0f 92       	push	r0
     78c:	0f b6       	in	r0, 0x3f	; 63
     78e:	0f 92       	push	r0
     790:	11 24       	eor	r1, r1
     792:	2f 93       	push	r18
     794:	8f 93       	push	r24
     796:	9f 93       	push	r25
     798:	ef 93       	push	r30
     79a:	ff 93       	push	r31
     79c:	e0 91 84 01 	lds	r30, 0x0184	; 0x800184 <Serial+0x10>
     7a0:	f0 91 85 01 	lds	r31, 0x0185	; 0x800185 <Serial+0x11>
     7a4:	80 81       	ld	r24, Z
     7a6:	e0 91 8a 01 	lds	r30, 0x018A	; 0x80018a <Serial+0x16>
     7aa:	f0 91 8b 01 	lds	r31, 0x018B	; 0x80018b <Serial+0x17>
     7ae:	82 fd       	sbrc	r24, 2
     7b0:	12 c0       	rjmp	.+36     	; 0x7d6 <__vector_18+0x4e>
     7b2:	90 81       	ld	r25, Z
     7b4:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <Serial+0x19>
     7b8:	8f 5f       	subi	r24, 0xFF	; 255
     7ba:	8f 73       	andi	r24, 0x3F	; 63
     7bc:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <Serial+0x1a>
     7c0:	82 17       	cp	r24, r18
     7c2:	51 f0       	breq	.+20     	; 0x7d8 <__vector_18+0x50>
     7c4:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <Serial+0x19>
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	ec 58       	subi	r30, 0x8C	; 140
     7cc:	fe 4f       	sbci	r31, 0xFE	; 254
     7ce:	95 8f       	std	Z+29, r25	; 0x1d
     7d0:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <Serial+0x19>
     7d4:	01 c0       	rjmp	.+2      	; 0x7d8 <__vector_18+0x50>
     7d6:	80 81       	ld	r24, Z
     7d8:	ff 91       	pop	r31
     7da:	ef 91       	pop	r30
     7dc:	9f 91       	pop	r25
     7de:	8f 91       	pop	r24
     7e0:	2f 91       	pop	r18
     7e2:	0f 90       	pop	r0
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	0f 90       	pop	r0
     7e8:	1f 90       	pop	r1
     7ea:	18 95       	reti

000007ec <__vector_19>:
     7ec:	1f 92       	push	r1
     7ee:	0f 92       	push	r0
     7f0:	0f b6       	in	r0, 0x3f	; 63
     7f2:	0f 92       	push	r0
     7f4:	11 24       	eor	r1, r1
     7f6:	2f 93       	push	r18
     7f8:	3f 93       	push	r19
     7fa:	4f 93       	push	r20
     7fc:	5f 93       	push	r21
     7fe:	6f 93       	push	r22
     800:	7f 93       	push	r23
     802:	8f 93       	push	r24
     804:	9f 93       	push	r25
     806:	af 93       	push	r26
     808:	bf 93       	push	r27
     80a:	ef 93       	push	r30
     80c:	ff 93       	push	r31
     80e:	84 e7       	ldi	r24, 0x74	; 116
     810:	91 e0       	ldi	r25, 0x01	; 1
     812:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     816:	ff 91       	pop	r31
     818:	ef 91       	pop	r30
     81a:	bf 91       	pop	r27
     81c:	af 91       	pop	r26
     81e:	9f 91       	pop	r25
     820:	8f 91       	pop	r24
     822:	7f 91       	pop	r23
     824:	6f 91       	pop	r22
     826:	5f 91       	pop	r21
     828:	4f 91       	pop	r20
     82a:	3f 91       	pop	r19
     82c:	2f 91       	pop	r18
     82e:	0f 90       	pop	r0
     830:	0f be       	out	0x3f, r0	; 63
     832:	0f 90       	pop	r0
     834:	1f 90       	pop	r1
     836:	18 95       	reti

00000838 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     838:	e4 e7       	ldi	r30, 0x74	; 116
     83a:	f1 e0       	ldi	r31, 0x01	; 1
     83c:	13 82       	std	Z+3, r1	; 0x03
     83e:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     840:	88 ee       	ldi	r24, 0xE8	; 232
     842:	93 e0       	ldi	r25, 0x03	; 3
     844:	a0 e0       	ldi	r26, 0x00	; 0
     846:	b0 e0       	ldi	r27, 0x00	; 0
     848:	84 83       	std	Z+4, r24	; 0x04
     84a:	95 83       	std	Z+5, r25	; 0x05
     84c:	a6 83       	std	Z+6, r26	; 0x06
     84e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     850:	88 e3       	ldi	r24, 0x38	; 56
     852:	91 e0       	ldi	r25, 0x01	; 1
     854:	91 83       	std	Z+1, r25	; 0x01
     856:	80 83       	st	Z, r24
     858:	85 ec       	ldi	r24, 0xC5	; 197
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	95 87       	std	Z+13, r25	; 0x0d
     85e:	84 87       	std	Z+12, r24	; 0x0c
     860:	84 ec       	ldi	r24, 0xC4	; 196
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	97 87       	std	Z+15, r25	; 0x0f
     866:	86 87       	std	Z+14, r24	; 0x0e
     868:	80 ec       	ldi	r24, 0xC0	; 192
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	91 8b       	std	Z+17, r25	; 0x11
     86e:	80 8b       	std	Z+16, r24	; 0x10
     870:	81 ec       	ldi	r24, 0xC1	; 193
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	93 8b       	std	Z+19, r25	; 0x13
     876:	82 8b       	std	Z+18, r24	; 0x12
     878:	82 ec       	ldi	r24, 0xC2	; 194
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	95 8b       	std	Z+21, r25	; 0x15
     87e:	84 8b       	std	Z+20, r24	; 0x14
     880:	86 ec       	ldi	r24, 0xC6	; 198
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	97 8b       	std	Z+23, r25	; 0x17
     886:	86 8b       	std	Z+22, r24	; 0x16
     888:	11 8e       	std	Z+25, r1	; 0x19
     88a:	12 8e       	std	Z+26, r1	; 0x1a
     88c:	13 8e       	std	Z+27, r1	; 0x1b
     88e:	14 8e       	std	Z+28, r1	; 0x1c
     890:	08 95       	ret

00000892 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     892:	cf 92       	push	r12
     894:	df 92       	push	r13
     896:	ef 92       	push	r14
     898:	ff 92       	push	r15
     89a:	0f 93       	push	r16
     89c:	1f 93       	push	r17
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
     8a2:	6c 01       	movw	r12, r24
     8a4:	7a 01       	movw	r14, r20
     8a6:	8b 01       	movw	r16, r22
     8a8:	c0 e0       	ldi	r28, 0x00	; 0
     8aa:	d0 e0       	ldi	r29, 0x00	; 0
     8ac:	ce 15       	cp	r28, r14
     8ae:	df 05       	cpc	r29, r15
     8b0:	89 f0       	breq	.+34     	; 0x8d4 <_ZN5Print5writeEPKhj+0x42>
     8b2:	d8 01       	movw	r26, r16
     8b4:	6d 91       	ld	r22, X+
     8b6:	8d 01       	movw	r16, r26
     8b8:	d6 01       	movw	r26, r12
     8ba:	ed 91       	ld	r30, X+
     8bc:	fc 91       	ld	r31, X
     8be:	01 90       	ld	r0, Z+
     8c0:	f0 81       	ld	r31, Z
     8c2:	e0 2d       	mov	r30, r0
     8c4:	c6 01       	movw	r24, r12
     8c6:	09 95       	icall
     8c8:	89 2b       	or	r24, r25
     8ca:	11 f4       	brne	.+4      	; 0x8d0 <_ZN5Print5writeEPKhj+0x3e>
     8cc:	7e 01       	movw	r14, r28
     8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <_ZN5Print5writeEPKhj+0x42>
     8d0:	21 96       	adiw	r28, 0x01	; 1
     8d2:	ec cf       	rjmp	.-40     	; 0x8ac <_ZN5Print5writeEPKhj+0x1a>
     8d4:	c7 01       	movw	r24, r14
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	1f 91       	pop	r17
     8dc:	0f 91       	pop	r16
     8de:	ff 90       	pop	r15
     8e0:	ef 90       	pop	r14
     8e2:	df 90       	pop	r13
     8e4:	cf 90       	pop	r12
     8e6:	08 95       	ret

000008e8 <_ZN5Print5writeEPKc>:
     8e8:	61 15       	cp	r22, r1
     8ea:	71 05       	cpc	r23, r1
     8ec:	79 f0       	breq	.+30     	; 0x90c <__stack+0xd>
     8ee:	fb 01       	movw	r30, r22
     8f0:	01 90       	ld	r0, Z+
     8f2:	00 20       	and	r0, r0
     8f4:	e9 f7       	brne	.-6      	; 0x8f0 <_ZN5Print5writeEPKc+0x8>
     8f6:	31 97       	sbiw	r30, 0x01	; 1
     8f8:	af 01       	movw	r20, r30
     8fa:	46 1b       	sub	r20, r22
     8fc:	57 0b       	sbc	r21, r23
     8fe:	dc 01       	movw	r26, r24
     900:	ed 91       	ld	r30, X+
     902:	fc 91       	ld	r31, X
     904:	02 80       	ldd	r0, Z+2	; 0x02
     906:	f3 81       	ldd	r31, Z+3	; 0x03
     908:	e0 2d       	mov	r30, r0
     90a:	09 94       	ijmp
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	08 95       	ret

00000912 <_ZN5Print5printEPKc>:
     912:	0c 94 74 04 	jmp	0x8e8	; 0x8e8 <_ZN5Print5writeEPKc>

00000916 <_ZN5Print5printEc>:
     916:	dc 01       	movw	r26, r24
     918:	ed 91       	ld	r30, X+
     91a:	fc 91       	ld	r31, X
     91c:	01 90       	ld	r0, Z+
     91e:	f0 81       	ld	r31, Z
     920:	e0 2d       	mov	r30, r0
     922:	09 94       	ijmp

00000924 <_ZN5Print7printlnEv>:
     924:	64 e4       	ldi	r22, 0x44	; 68
     926:	71 e0       	ldi	r23, 0x01	; 1
     928:	0c 94 74 04 	jmp	0x8e8	; 0x8e8 <_ZN5Print5writeEPKc>

0000092c <_ZN5Print11printNumberEmh>:
     92c:	8f 92       	push	r8
     92e:	9f 92       	push	r9
     930:	af 92       	push	r10
     932:	bf 92       	push	r11
     934:	cf 92       	push	r12
     936:	df 92       	push	r13
     938:	ef 92       	push	r14
     93a:	ff 92       	push	r15
     93c:	0f 93       	push	r16
     93e:	1f 93       	push	r17
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
     944:	cd b7       	in	r28, 0x3d	; 61
     946:	de b7       	in	r29, 0x3e	; 62
     948:	a1 97       	sbiw	r28, 0x21	; 33
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	f8 94       	cli
     94e:	de bf       	out	0x3e, r29	; 62
     950:	0f be       	out	0x3f, r0	; 63
     952:	cd bf       	out	0x3d, r28	; 61
     954:	7c 01       	movw	r14, r24
     956:	d4 2e       	mov	r13, r20
     958:	c5 2e       	mov	r12, r21
     95a:	db 01       	movw	r26, r22
     95c:	19 a2       	std	Y+33, r1	; 0x21
     95e:	22 30       	cpi	r18, 0x02	; 2
     960:	08 f4       	brcc	.+2      	; 0x964 <_ZN5Print11printNumberEmh+0x38>
     962:	2a e0       	ldi	r18, 0x0A	; 10
     964:	8e 01       	movw	r16, r28
     966:	0f 5d       	subi	r16, 0xDF	; 223
     968:	1f 4f       	sbci	r17, 0xFF	; 255
     96a:	82 2e       	mov	r8, r18
     96c:	91 2c       	mov	r9, r1
     96e:	a1 2c       	mov	r10, r1
     970:	b1 2c       	mov	r11, r1
     972:	6d 2d       	mov	r22, r13
     974:	7c 2d       	mov	r23, r12
     976:	cd 01       	movw	r24, r26
     978:	a5 01       	movw	r20, r10
     97a:	94 01       	movw	r18, r8
     97c:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__udivmodsi4>
     980:	d2 2e       	mov	r13, r18
     982:	c3 2e       	mov	r12, r19
     984:	da 01       	movw	r26, r20
     986:	01 50       	subi	r16, 0x01	; 1
     988:	11 09       	sbc	r17, r1
     98a:	6a 30       	cpi	r22, 0x0A	; 10
     98c:	71 05       	cpc	r23, r1
     98e:	81 05       	cpc	r24, r1
     990:	91 05       	cpc	r25, r1
     992:	10 f4       	brcc	.+4      	; 0x998 <_ZN5Print11printNumberEmh+0x6c>
     994:	60 5d       	subi	r22, 0xD0	; 208
     996:	01 c0       	rjmp	.+2      	; 0x99a <_ZN5Print11printNumberEmh+0x6e>
     998:	69 5c       	subi	r22, 0xC9	; 201
     99a:	f8 01       	movw	r30, r16
     99c:	60 83       	st	Z, r22
     99e:	23 2b       	or	r18, r19
     9a0:	24 2b       	or	r18, r20
     9a2:	25 2b       	or	r18, r21
     9a4:	31 f7       	brne	.-52     	; 0x972 <_ZN5Print11printNumberEmh+0x46>
     9a6:	b8 01       	movw	r22, r16
     9a8:	c7 01       	movw	r24, r14
     9aa:	0e 94 74 04 	call	0x8e8	; 0x8e8 <_ZN5Print5writeEPKc>
     9ae:	a1 96       	adiw	r28, 0x21	; 33
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	f8 94       	cli
     9b4:	de bf       	out	0x3e, r29	; 62
     9b6:	0f be       	out	0x3f, r0	; 63
     9b8:	cd bf       	out	0x3d, r28	; 61
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	1f 91       	pop	r17
     9c0:	0f 91       	pop	r16
     9c2:	ff 90       	pop	r15
     9c4:	ef 90       	pop	r14
     9c6:	df 90       	pop	r13
     9c8:	cf 90       	pop	r12
     9ca:	bf 90       	pop	r11
     9cc:	af 90       	pop	r10
     9ce:	9f 90       	pop	r9
     9d0:	8f 90       	pop	r8
     9d2:	08 95       	ret

000009d4 <_ZN5Print5printEli>:
     9d4:	cf 92       	push	r12
     9d6:	df 92       	push	r13
     9d8:	ef 92       	push	r14
     9da:	ff 92       	push	r15
     9dc:	0f 93       	push	r16
     9de:	1f 93       	push	r17
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	ec 01       	movw	r28, r24
     9e6:	6a 01       	movw	r12, r20
     9e8:	7b 01       	movw	r14, r22
     9ea:	21 15       	cp	r18, r1
     9ec:	31 05       	cpc	r19, r1
     9ee:	79 f4       	brne	.+30     	; 0xa0e <_ZN5Print5printEli+0x3a>
     9f0:	e8 81       	ld	r30, Y
     9f2:	f9 81       	ldd	r31, Y+1	; 0x01
     9f4:	01 90       	ld	r0, Z+
     9f6:	f0 81       	ld	r31, Z
     9f8:	e0 2d       	mov	r30, r0
     9fa:	64 2f       	mov	r22, r20
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	1f 91       	pop	r17
     a02:	0f 91       	pop	r16
     a04:	ff 90       	pop	r15
     a06:	ef 90       	pop	r14
     a08:	df 90       	pop	r13
     a0a:	cf 90       	pop	r12
     a0c:	09 94       	ijmp
     a0e:	2a 30       	cpi	r18, 0x0A	; 10
     a10:	31 05       	cpc	r19, r1
     a12:	e9 f4       	brne	.+58     	; 0xa4e <_ZN5Print5printEli+0x7a>
     a14:	77 ff       	sbrs	r23, 7
     a16:	1a c0       	rjmp	.+52     	; 0xa4c <_ZN5Print5printEli+0x78>
     a18:	6d e2       	ldi	r22, 0x2D	; 45
     a1a:	0e 94 8b 04 	call	0x916	; 0x916 <_ZN5Print5printEc>
     a1e:	8c 01       	movw	r16, r24
     a20:	44 27       	eor	r20, r20
     a22:	55 27       	eor	r21, r21
     a24:	ba 01       	movw	r22, r20
     a26:	4c 19       	sub	r20, r12
     a28:	5d 09       	sbc	r21, r13
     a2a:	6e 09       	sbc	r22, r14
     a2c:	7f 09       	sbc	r23, r15
     a2e:	2a e0       	ldi	r18, 0x0A	; 10
     a30:	ce 01       	movw	r24, r28
     a32:	0e 94 96 04 	call	0x92c	; 0x92c <_ZN5Print11printNumberEmh>
     a36:	80 0f       	add	r24, r16
     a38:	91 1f       	adc	r25, r17
     a3a:	df 91       	pop	r29
     a3c:	cf 91       	pop	r28
     a3e:	1f 91       	pop	r17
     a40:	0f 91       	pop	r16
     a42:	ff 90       	pop	r15
     a44:	ef 90       	pop	r14
     a46:	df 90       	pop	r13
     a48:	cf 90       	pop	r12
     a4a:	08 95       	ret
     a4c:	2a e0       	ldi	r18, 0x0A	; 10
     a4e:	b7 01       	movw	r22, r14
     a50:	a6 01       	movw	r20, r12
     a52:	ce 01       	movw	r24, r28
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	1f 91       	pop	r17
     a5a:	0f 91       	pop	r16
     a5c:	ff 90       	pop	r15
     a5e:	ef 90       	pop	r14
     a60:	df 90       	pop	r13
     a62:	cf 90       	pop	r12
     a64:	0c 94 96 04 	jmp	0x92c	; 0x92c <_ZN5Print11printNumberEmh>

00000a68 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
     a68:	21 15       	cp	r18, r1
     a6a:	31 05       	cpc	r19, r1
     a6c:	41 f4       	brne	.+16     	; 0xa7e <_ZN5Print5printEmi+0x16>
     a6e:	dc 01       	movw	r26, r24
     a70:	ed 91       	ld	r30, X+
     a72:	fc 91       	ld	r31, X
     a74:	01 90       	ld	r0, Z+
     a76:	f0 81       	ld	r31, Z
     a78:	e0 2d       	mov	r30, r0
     a7a:	64 2f       	mov	r22, r20
     a7c:	09 94       	ijmp
  else return printNumber(n, base);
     a7e:	0c 94 96 04 	jmp	0x92c	; 0x92c <_ZN5Print11printNumberEmh>

00000a82 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
     a82:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
     a84:	46 2f       	mov	r20, r22
     a86:	50 e0       	ldi	r21, 0x00	; 0
     a88:	60 e0       	ldi	r22, 0x00	; 0
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	0c 94 34 05 	jmp	0xa68	; 0xa68 <_ZN5Print5printEmi>

00000a90 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
     a90:	08 95       	ret

00000a92 <attachInterrupt>:
     a92:	82 30       	cpi	r24, 0x02	; 2
     a94:	e8 f4       	brcc	.+58     	; 0xad0 <attachInterrupt+0x3e>
     a96:	e8 2f       	mov	r30, r24
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	ee 0f       	add	r30, r30
     a9c:	ff 1f       	adc	r31, r31
     a9e:	e0 50       	subi	r30, 0x00	; 0
     aa0:	ff 4f       	sbci	r31, 0xFF	; 255
     aa2:	71 83       	std	Z+1, r23	; 0x01
     aa4:	60 83       	st	Z, r22
     aa6:	81 30       	cpi	r24, 0x01	; 1
     aa8:	41 f0       	breq	.+16     	; 0xaba <attachInterrupt+0x28>
     aaa:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     aae:	8c 7f       	andi	r24, 0xFC	; 252
     ab0:	48 2b       	or	r20, r24
     ab2:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     ab6:	e8 9a       	sbi	0x1d, 0	; 29
     ab8:	08 95       	ret
     aba:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     abe:	44 0f       	add	r20, r20
     ac0:	55 1f       	adc	r21, r21
     ac2:	44 0f       	add	r20, r20
     ac4:	55 1f       	adc	r21, r21
     ac6:	83 7f       	andi	r24, 0xF3	; 243
     ac8:	48 2b       	or	r20, r24
     aca:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     ace:	e9 9a       	sbi	0x1d, 1	; 29
     ad0:	08 95       	ret

00000ad2 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
     ad2:	1f 92       	push	r1
     ad4:	0f 92       	push	r0
     ad6:	0f b6       	in	r0, 0x3f	; 63
     ad8:	0f 92       	push	r0
     ada:	11 24       	eor	r1, r1
     adc:	2f 93       	push	r18
     ade:	3f 93       	push	r19
     ae0:	4f 93       	push	r20
     ae2:	5f 93       	push	r21
     ae4:	6f 93       	push	r22
     ae6:	7f 93       	push	r23
     ae8:	8f 93       	push	r24
     aea:	9f 93       	push	r25
     aec:	af 93       	push	r26
     aee:	bf 93       	push	r27
     af0:	ef 93       	push	r30
     af2:	ff 93       	push	r31
     af4:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
     af8:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
     afc:	09 95       	icall
     afe:	ff 91       	pop	r31
     b00:	ef 91       	pop	r30
     b02:	bf 91       	pop	r27
     b04:	af 91       	pop	r26
     b06:	9f 91       	pop	r25
     b08:	8f 91       	pop	r24
     b0a:	7f 91       	pop	r23
     b0c:	6f 91       	pop	r22
     b0e:	5f 91       	pop	r21
     b10:	4f 91       	pop	r20
     b12:	3f 91       	pop	r19
     b14:	2f 91       	pop	r18
     b16:	0f 90       	pop	r0
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	0f 90       	pop	r0
     b1c:	1f 90       	pop	r1
     b1e:	18 95       	reti

00000b20 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
     b20:	1f 92       	push	r1
     b22:	0f 92       	push	r0
     b24:	0f b6       	in	r0, 0x3f	; 63
     b26:	0f 92       	push	r0
     b28:	11 24       	eor	r1, r1
     b2a:	2f 93       	push	r18
     b2c:	3f 93       	push	r19
     b2e:	4f 93       	push	r20
     b30:	5f 93       	push	r21
     b32:	6f 93       	push	r22
     b34:	7f 93       	push	r23
     b36:	8f 93       	push	r24
     b38:	9f 93       	push	r25
     b3a:	af 93       	push	r26
     b3c:	bf 93       	push	r27
     b3e:	ef 93       	push	r30
     b40:	ff 93       	push	r31
     b42:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_start+0x2>
     b46:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__data_start+0x3>
     b4a:	09 95       	icall
     b4c:	ff 91       	pop	r31
     b4e:	ef 91       	pop	r30
     b50:	bf 91       	pop	r27
     b52:	af 91       	pop	r26
     b54:	9f 91       	pop	r25
     b56:	8f 91       	pop	r24
     b58:	7f 91       	pop	r23
     b5a:	6f 91       	pop	r22
     b5c:	5f 91       	pop	r21
     b5e:	4f 91       	pop	r20
     b60:	3f 91       	pop	r19
     b62:	2f 91       	pop	r18
     b64:	0f 90       	pop	r0
     b66:	0f be       	out	0x3f, r0	; 63
     b68:	0f 90       	pop	r0
     b6a:	1f 90       	pop	r1
     b6c:	18 95       	reti

00000b6e <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     b6e:	1f 92       	push	r1
     b70:	0f 92       	push	r0
     b72:	0f b6       	in	r0, 0x3f	; 63
     b74:	0f 92       	push	r0
     b76:	11 24       	eor	r1, r1
     b78:	2f 93       	push	r18
     b7a:	3f 93       	push	r19
     b7c:	8f 93       	push	r24
     b7e:	9f 93       	push	r25
     b80:	af 93       	push	r26
     b82:	bf 93       	push	r27
     b84:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <timer0_millis>
     b88:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <timer0_millis+0x1>
     b8c:	a0 91 14 02 	lds	r26, 0x0214	; 0x800214 <timer0_millis+0x2>
     b90:	b0 91 15 02 	lds	r27, 0x0215	; 0x800215 <timer0_millis+0x3>
     b94:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <timer0_fract>
     b98:	23 e0       	ldi	r18, 0x03	; 3
     b9a:	23 0f       	add	r18, r19
     b9c:	2d 37       	cpi	r18, 0x7D	; 125
     b9e:	20 f4       	brcc	.+8      	; 0xba8 <__vector_16+0x3a>
     ba0:	01 96       	adiw	r24, 0x01	; 1
     ba2:	a1 1d       	adc	r26, r1
     ba4:	b1 1d       	adc	r27, r1
     ba6:	05 c0       	rjmp	.+10     	; 0xbb2 <__vector_16+0x44>
     ba8:	26 e8       	ldi	r18, 0x86	; 134
     baa:	23 0f       	add	r18, r19
     bac:	02 96       	adiw	r24, 0x02	; 2
     bae:	a1 1d       	adc	r26, r1
     bb0:	b1 1d       	adc	r27, r1
     bb2:	20 93 11 02 	sts	0x0211, r18	; 0x800211 <timer0_fract>
     bb6:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <timer0_millis>
     bba:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <timer0_millis+0x1>
     bbe:	a0 93 14 02 	sts	0x0214, r26	; 0x800214 <timer0_millis+0x2>
     bc2:	b0 93 15 02 	sts	0x0215, r27	; 0x800215 <timer0_millis+0x3>
     bc6:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <timer0_overflow_count>
     bca:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <timer0_overflow_count+0x1>
     bce:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <timer0_overflow_count+0x2>
     bd2:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <timer0_overflow_count+0x3>
     bd6:	01 96       	adiw	r24, 0x01	; 1
     bd8:	a1 1d       	adc	r26, r1
     bda:	b1 1d       	adc	r27, r1
     bdc:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <timer0_overflow_count>
     be0:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <timer0_overflow_count+0x1>
     be4:	a0 93 18 02 	sts	0x0218, r26	; 0x800218 <timer0_overflow_count+0x2>
     be8:	b0 93 19 02 	sts	0x0219, r27	; 0x800219 <timer0_overflow_count+0x3>
     bec:	bf 91       	pop	r27
     bee:	af 91       	pop	r26
     bf0:	9f 91       	pop	r25
     bf2:	8f 91       	pop	r24
     bf4:	3f 91       	pop	r19
     bf6:	2f 91       	pop	r18
     bf8:	0f 90       	pop	r0
     bfa:	0f be       	out	0x3f, r0	; 63
     bfc:	0f 90       	pop	r0
     bfe:	1f 90       	pop	r1
     c00:	18 95       	reti

00000c02 <micros>:
     c02:	3f b7       	in	r19, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <timer0_overflow_count>
     c0a:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <timer0_overflow_count+0x1>
     c0e:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <timer0_overflow_count+0x2>
     c12:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <timer0_overflow_count+0x3>
     c16:	26 b5       	in	r18, 0x26	; 38
     c18:	a8 9b       	sbis	0x15, 0	; 21
     c1a:	05 c0       	rjmp	.+10     	; 0xc26 <micros+0x24>
     c1c:	2f 3f       	cpi	r18, 0xFF	; 255
     c1e:	19 f0       	breq	.+6      	; 0xc26 <micros+0x24>
     c20:	01 96       	adiw	r24, 0x01	; 1
     c22:	a1 1d       	adc	r26, r1
     c24:	b1 1d       	adc	r27, r1
     c26:	3f bf       	out	0x3f, r19	; 63
     c28:	ba 2f       	mov	r27, r26
     c2a:	a9 2f       	mov	r26, r25
     c2c:	98 2f       	mov	r25, r24
     c2e:	88 27       	eor	r24, r24
     c30:	82 0f       	add	r24, r18
     c32:	91 1d       	adc	r25, r1
     c34:	a1 1d       	adc	r26, r1
     c36:	b1 1d       	adc	r27, r1
     c38:	bc 01       	movw	r22, r24
     c3a:	cd 01       	movw	r24, r26
     c3c:	42 e0       	ldi	r20, 0x02	; 2
     c3e:	66 0f       	add	r22, r22
     c40:	77 1f       	adc	r23, r23
     c42:	88 1f       	adc	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	4a 95       	dec	r20
     c48:	d1 f7       	brne	.-12     	; 0xc3e <micros+0x3c>
     c4a:	08 95       	ret

00000c4c <delay>:
     c4c:	8f 92       	push	r8
     c4e:	9f 92       	push	r9
     c50:	af 92       	push	r10
     c52:	bf 92       	push	r11
     c54:	cf 92       	push	r12
     c56:	df 92       	push	r13
     c58:	ef 92       	push	r14
     c5a:	ff 92       	push	r15
     c5c:	6b 01       	movw	r12, r22
     c5e:	7c 01       	movw	r14, r24
     c60:	0e 94 01 06 	call	0xc02	; 0xc02 <micros>
     c64:	4b 01       	movw	r8, r22
     c66:	5c 01       	movw	r10, r24
     c68:	c1 14       	cp	r12, r1
     c6a:	d1 04       	cpc	r13, r1
     c6c:	e1 04       	cpc	r14, r1
     c6e:	f1 04       	cpc	r15, r1
     c70:	01 f1       	breq	.+64     	; 0xcb2 <delay+0x66>
     c72:	0e 94 36 0b 	call	0x166c	; 0x166c <yield>
     c76:	0e 94 01 06 	call	0xc02	; 0xc02 <micros>
     c7a:	dc 01       	movw	r26, r24
     c7c:	cb 01       	movw	r24, r22
     c7e:	88 19       	sub	r24, r8
     c80:	99 09       	sbc	r25, r9
     c82:	aa 09       	sbc	r26, r10
     c84:	bb 09       	sbc	r27, r11
     c86:	88 3e       	cpi	r24, 0xE8	; 232
     c88:	93 40       	sbci	r25, 0x03	; 3
     c8a:	a1 05       	cpc	r26, r1
     c8c:	b1 05       	cpc	r27, r1
     c8e:	60 f3       	brcs	.-40     	; 0xc68 <delay+0x1c>
     c90:	21 e0       	ldi	r18, 0x01	; 1
     c92:	c2 1a       	sub	r12, r18
     c94:	d1 08       	sbc	r13, r1
     c96:	e1 08       	sbc	r14, r1
     c98:	f1 08       	sbc	r15, r1
     c9a:	88 ee       	ldi	r24, 0xE8	; 232
     c9c:	88 0e       	add	r8, r24
     c9e:	83 e0       	ldi	r24, 0x03	; 3
     ca0:	98 1e       	adc	r9, r24
     ca2:	a1 1c       	adc	r10, r1
     ca4:	b1 1c       	adc	r11, r1
     ca6:	c1 14       	cp	r12, r1
     ca8:	d1 04       	cpc	r13, r1
     caa:	e1 04       	cpc	r14, r1
     cac:	f1 04       	cpc	r15, r1
     cae:	19 f7       	brne	.-58     	; 0xc76 <delay+0x2a>
     cb0:	db cf       	rjmp	.-74     	; 0xc68 <delay+0x1c>
     cb2:	ff 90       	pop	r15
     cb4:	ef 90       	pop	r14
     cb6:	df 90       	pop	r13
     cb8:	cf 90       	pop	r12
     cba:	bf 90       	pop	r11
     cbc:	af 90       	pop	r10
     cbe:	9f 90       	pop	r9
     cc0:	8f 90       	pop	r8
     cc2:	08 95       	ret

00000cc4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     cc4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     cc6:	84 b5       	in	r24, 0x24	; 36
     cc8:	82 60       	ori	r24, 0x02	; 2
     cca:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     ccc:	84 b5       	in	r24, 0x24	; 36
     cce:	81 60       	ori	r24, 0x01	; 1
     cd0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     cd2:	85 b5       	in	r24, 0x25	; 37
     cd4:	82 60       	ori	r24, 0x02	; 2
     cd6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     cd8:	85 b5       	in	r24, 0x25	; 37
     cda:	81 60       	ori	r24, 0x01	; 1
     cdc:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     cde:	ee e6       	ldi	r30, 0x6E	; 110
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	81 60       	ori	r24, 0x01	; 1
     ce6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     ce8:	e1 e8       	ldi	r30, 0x81	; 129
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     cee:	80 81       	ld	r24, Z
     cf0:	82 60       	ori	r24, 0x02	; 2
     cf2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     cf4:	80 81       	ld	r24, Z
     cf6:	81 60       	ori	r24, 0x01	; 1
     cf8:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     cfa:	e0 e8       	ldi	r30, 0x80	; 128
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	81 60       	ori	r24, 0x01	; 1
     d02:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     d04:	e1 eb       	ldi	r30, 0xB1	; 177
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	84 60       	ori	r24, 0x04	; 4
     d0c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     d0e:	e0 eb       	ldi	r30, 0xB0	; 176
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	81 60       	ori	r24, 0x01	; 1
     d16:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     d18:	ea e7       	ldi	r30, 0x7A	; 122
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	84 60       	ori	r24, 0x04	; 4
     d20:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     d22:	80 81       	ld	r24, Z
     d24:	82 60       	ori	r24, 0x02	; 2
     d26:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     d28:	80 81       	ld	r24, Z
     d2a:	81 60       	ori	r24, 0x01	; 1
     d2c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     d2e:	80 81       	ld	r24, Z
     d30:	80 68       	ori	r24, 0x80	; 128
     d32:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     d34:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     d38:	08 95       	ret

00000d3a <_ZN9DS3232RTC7bcd2decEh>:
{
    tmElements_t tm;

    breakTime(t, tm);
    return ( write(tm) );
}
     d3a:	98 2f       	mov	r25, r24
     d3c:	92 95       	swap	r25
     d3e:	9f 70       	andi	r25, 0x0F	; 15
     d40:	2a ef       	ldi	r18, 0xFA	; 250
     d42:	92 9f       	mul	r25, r18
     d44:	80 0d       	add	r24, r0
     d46:	11 24       	eor	r1, r1
     d48:	08 95       	ret

00000d4a <_GLOBAL__sub_I__ZN9DS3232RTC7errCodeE>:
     d4a:	81 e3       	ldi	r24, 0x31	; 49
     d4c:	92 e0       	ldi	r25, 0x02	; 2
     d4e:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <_ZN7TwoWire5beginEv>

00000d52 <_ZN9DS3232RTC8writeRTCEhPhh>:
     d52:	ef 92       	push	r14
     d54:	ff 92       	push	r15
     d56:	0f 93       	push	r16
     d58:	1f 93       	push	r17
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	00 d0       	rcall	.+0      	; 0xd60 <_ZN9DS3232RTC8writeRTCEhPhh+0xe>
     d60:	cd b7       	in	r28, 0x3d	; 61
     d62:	de b7       	in	r29, 0x3e	; 62
     d64:	06 2f       	mov	r16, r22
     d66:	12 2f       	mov	r17, r18
     d68:	68 e6       	ldi	r22, 0x68	; 104
     d6a:	70 e0       	ldi	r23, 0x00	; 0
     d6c:	81 e3       	ldi	r24, 0x31	; 49
     d6e:	92 e0       	ldi	r25, 0x02	; 2
     d70:	49 83       	std	Y+1, r20	; 0x01
     d72:	5a 83       	std	Y+2, r21	; 0x02
     d74:	0e 94 b0 0a 	call	0x1560	; 0x1560 <_ZN7TwoWire17beginTransmissionEi>
     d78:	60 2f       	mov	r22, r16
     d7a:	81 e3       	ldi	r24, 0x31	; 49
     d7c:	92 e0       	ldi	r25, 0x02	; 2
     d7e:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <_ZN7TwoWire5writeEh>
     d82:	49 81       	ldd	r20, Y+1	; 0x01
     d84:	04 2f       	mov	r16, r20
     d86:	e4 2e       	mov	r14, r20
     d88:	5a 81       	ldd	r21, Y+2	; 0x02
     d8a:	f5 2e       	mov	r15, r21
     d8c:	8e 2d       	mov	r24, r14
     d8e:	80 1b       	sub	r24, r16
     d90:	81 17       	cp	r24, r17
     d92:	40 f4       	brcc	.+16     	; 0xda4 <_ZN9DS3232RTC8writeRTCEhPhh+0x52>
     d94:	f7 01       	movw	r30, r14
     d96:	61 91       	ld	r22, Z+
     d98:	7f 01       	movw	r14, r30
     d9a:	81 e3       	ldi	r24, 0x31	; 49
     d9c:	92 e0       	ldi	r25, 0x02	; 2
     d9e:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <_ZN7TwoWire5writeEh>
     da2:	f4 cf       	rjmp	.-24     	; 0xd8c <_ZN9DS3232RTC8writeRTCEhPhh+0x3a>
     da4:	81 e3       	ldi	r24, 0x31	; 49
     da6:	92 e0       	ldi	r25, 0x02	; 2
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	1f 91       	pop	r17
     db2:	0f 91       	pop	r16
     db4:	ff 90       	pop	r15
     db6:	ef 90       	pop	r14
     db8:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <_ZN7TwoWire15endTransmissionEv>

00000dbc <_ZN9DS3232RTC8writeRTCEhh>:
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	1f 92       	push	r1
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	49 83       	std	Y+1, r20	; 0x01
     dc8:	21 e0       	ldi	r18, 0x01	; 1
     dca:	ae 01       	movw	r20, r28
     dcc:	4f 5f       	subi	r20, 0xFF	; 255
     dce:	5f 4f       	sbci	r21, 0xFF	; 255
     dd0:	0e 94 a9 06 	call	0xd52	; 0xd52 <_ZN9DS3232RTC8writeRTCEhPhh>
     dd4:	0f 90       	pop	r0
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	08 95       	ret

00000ddc <_ZN9DS3232RTC4readER12tmElements_t>:
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
     de0:	ec 01       	movw	r28, r24
     de2:	68 e6       	ldi	r22, 0x68	; 104
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	81 e3       	ldi	r24, 0x31	; 49
     de8:	92 e0       	ldi	r25, 0x02	; 2
     dea:	0e 94 b0 0a 	call	0x1560	; 0x1560 <_ZN7TwoWire17beginTransmissionEi>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	81 e3       	ldi	r24, 0x31	; 49
     df2:	92 e0       	ldi	r25, 0x02	; 2
     df4:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <_ZN7TwoWire5writeEh>
     df8:	81 e3       	ldi	r24, 0x31	; 49
     dfa:	92 e0       	ldi	r25, 0x02	; 2
     dfc:	0e 94 2f 0b 	call	0x165e	; 0x165e <_ZN7TwoWire15endTransmissionEv>
     e00:	88 23       	and	r24, r24
     e02:	19 f0       	breq	.+6      	; 0xe0a <_ZN9DS3232RTC4readER12tmElements_t+0x2e>
     e04:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <_ZN9DS3232RTC7errCodeE>
     e08:	3c c0       	rjmp	.+120    	; 0xe82 <_ZN9DS3232RTC4readER12tmElements_t+0xa6>
     e0a:	47 e0       	ldi	r20, 0x07	; 7
     e0c:	50 e0       	ldi	r21, 0x00	; 0
     e0e:	68 e6       	ldi	r22, 0x68	; 104
     e10:	70 e0       	ldi	r23, 0x00	; 0
     e12:	81 e3       	ldi	r24, 0x31	; 49
     e14:	92 e0       	ldi	r25, 0x02	; 2
     e16:	0e 94 2c 0b 	call	0x1658	; 0x1658 <_ZN7TwoWire11requestFromEii>
     e1a:	81 e3       	ldi	r24, 0x31	; 49
     e1c:	92 e0       	ldi	r25, 0x02	; 2
     e1e:	0e 94 09 0a 	call	0x1412	; 0x1412 <_ZN7TwoWire4readEv>
     e22:	8f 77       	andi	r24, 0x7F	; 127
     e24:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_ZN9DS3232RTC7bcd2decEh>
     e28:	88 83       	st	Y, r24
     e2a:	81 e3       	ldi	r24, 0x31	; 49
     e2c:	92 e0       	ldi	r25, 0x02	; 2
     e2e:	0e 94 09 0a 	call	0x1412	; 0x1412 <_ZN7TwoWire4readEv>
     e32:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_ZN9DS3232RTC7bcd2decEh>
     e36:	89 83       	std	Y+1, r24	; 0x01
     e38:	81 e3       	ldi	r24, 0x31	; 49
     e3a:	92 e0       	ldi	r25, 0x02	; 2
     e3c:	0e 94 09 0a 	call	0x1412	; 0x1412 <_ZN7TwoWire4readEv>
     e40:	8f 7b       	andi	r24, 0xBF	; 191
     e42:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_ZN9DS3232RTC7bcd2decEh>
     e46:	8a 83       	std	Y+2, r24	; 0x02
     e48:	81 e3       	ldi	r24, 0x31	; 49
     e4a:	92 e0       	ldi	r25, 0x02	; 2
     e4c:	0e 94 09 0a 	call	0x1412	; 0x1412 <_ZN7TwoWire4readEv>
     e50:	8b 83       	std	Y+3, r24	; 0x03
     e52:	81 e3       	ldi	r24, 0x31	; 49
     e54:	92 e0       	ldi	r25, 0x02	; 2
     e56:	0e 94 09 0a 	call	0x1412	; 0x1412 <_ZN7TwoWire4readEv>
     e5a:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_ZN9DS3232RTC7bcd2decEh>
     e5e:	8c 83       	std	Y+4, r24	; 0x04
     e60:	81 e3       	ldi	r24, 0x31	; 49
     e62:	92 e0       	ldi	r25, 0x02	; 2
     e64:	0e 94 09 0a 	call	0x1412	; 0x1412 <_ZN7TwoWire4readEv>
     e68:	8f 77       	andi	r24, 0x7F	; 127
     e6a:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_ZN9DS3232RTC7bcd2decEh>
     e6e:	8d 83       	std	Y+5, r24	; 0x05
     e70:	81 e3       	ldi	r24, 0x31	; 49
     e72:	92 e0       	ldi	r25, 0x02	; 2
     e74:	0e 94 09 0a 	call	0x1412	; 0x1412 <_ZN7TwoWire4readEv>
     e78:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_ZN9DS3232RTC7bcd2decEh>
     e7c:	82 5e       	subi	r24, 0xE2	; 226
     e7e:	8e 83       	std	Y+6, r24	; 0x06
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	08 95       	ret

00000e88 <_ZN9DS3232RTC3getEv>:
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
     e90:	27 97       	sbiw	r28, 0x07	; 7
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	f8 94       	cli
     e96:	de bf       	out	0x3e, r29	; 62
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	cd bf       	out	0x3d, r28	; 61
     e9c:	ce 01       	movw	r24, r28
     e9e:	01 96       	adiw	r24, 0x01	; 1
     ea0:	0e 94 ee 06 	call	0xddc	; 0xddc <_ZN9DS3232RTC4readER12tmElements_t>
     ea4:	81 11       	cpse	r24, r1
     ea6:	05 c0       	rjmp	.+10     	; 0xeb2 <_ZN9DS3232RTC3getEv+0x2a>
     ea8:	ce 01       	movw	r24, r28
     eaa:	01 96       	adiw	r24, 0x01	; 1
     eac:	0e 94 41 09 	call	0x1282	; 0x1282 <_Z8makeTimeR12tmElements_t>
     eb0:	03 c0       	rjmp	.+6      	; 0xeb8 <_ZN9DS3232RTC3getEv+0x30>
     eb2:	60 e0       	ldi	r22, 0x00	; 0
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	cb 01       	movw	r24, r22
     eb8:	27 96       	adiw	r28, 0x07	; 7
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	f8 94       	cli
     ebe:	de bf       	out	0x3e, r29	; 62
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	cd bf       	out	0x3d, r28	; 61
     ec4:	df 91       	pop	r29
     ec6:	cf 91       	pop	r28
     ec8:	08 95       	ret

00000eca <_ZN9DS3232RTC7readRTCEhPhh>:
     eca:	ef 92       	push	r14
     ecc:	ff 92       	push	r15
     ece:	0f 93       	push	r16
     ed0:	1f 93       	push	r17
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	c6 2f       	mov	r28, r22
     ed8:	04 2f       	mov	r16, r20
     eda:	e5 2e       	mov	r14, r21
     edc:	12 2f       	mov	r17, r18
     ede:	68 e6       	ldi	r22, 0x68	; 104
     ee0:	70 e0       	ldi	r23, 0x00	; 0
     ee2:	81 e3       	ldi	r24, 0x31	; 49
     ee4:	92 e0       	ldi	r25, 0x02	; 2
     ee6:	0e 94 b0 0a 	call	0x1560	; 0x1560 <_ZN7TwoWire17beginTransmissionEi>
     eea:	6c 2f       	mov	r22, r28
     eec:	81 e3       	ldi	r24, 0x31	; 49
     eee:	92 e0       	ldi	r25, 0x02	; 2
     ef0:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <_ZN7TwoWire5writeEh>
     ef4:	81 e3       	ldi	r24, 0x31	; 49
     ef6:	92 e0       	ldi	r25, 0x02	; 2
     ef8:	0e 94 2f 0b 	call	0x165e	; 0x165e <_ZN7TwoWire15endTransmissionEv>
     efc:	81 11       	cpse	r24, r1
     efe:	14 c0       	rjmp	.+40     	; 0xf28 <_ZN9DS3232RTC7readRTCEhPhh+0x5e>
     f00:	41 2f       	mov	r20, r17
     f02:	68 e6       	ldi	r22, 0x68	; 104
     f04:	81 e3       	ldi	r24, 0x31	; 49
     f06:	92 e0       	ldi	r25, 0x02	; 2
     f08:	0e 94 29 0b 	call	0x1652	; 0x1652 <_ZN7TwoWire11requestFromEhh>
     f0c:	f0 2e       	mov	r15, r16
     f0e:	c0 2f       	mov	r28, r16
     f10:	de 2d       	mov	r29, r14
     f12:	8c 2f       	mov	r24, r28
     f14:	8f 19       	sub	r24, r15
     f16:	81 17       	cp	r24, r17
     f18:	30 f4       	brcc	.+12     	; 0xf26 <_ZN9DS3232RTC7readRTCEhPhh+0x5c>
     f1a:	81 e3       	ldi	r24, 0x31	; 49
     f1c:	92 e0       	ldi	r25, 0x02	; 2
     f1e:	0e 94 09 0a 	call	0x1412	; 0x1412 <_ZN7TwoWire4readEv>
     f22:	89 93       	st	Y+, r24
     f24:	f6 cf       	rjmp	.-20     	; 0xf12 <_ZN9DS3232RTC7readRTCEhPhh+0x48>
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	1f 91       	pop	r17
     f2e:	0f 91       	pop	r16
     f30:	ff 90       	pop	r15
     f32:	ef 90       	pop	r14
     f34:	08 95       	ret

00000f36 <_ZN9DS3232RTC7readRTCEh>:
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
     f3a:	1f 92       	push	r1
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
     f40:	21 e0       	ldi	r18, 0x01	; 1
     f42:	ae 01       	movw	r20, r28
     f44:	4f 5f       	subi	r20, 0xFF	; 255
     f46:	5f 4f       	sbci	r21, 0xFF	; 255
     f48:	0e 94 65 07 	call	0xeca	; 0xeca <_ZN9DS3232RTC7readRTCEhPhh>
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	0f 90       	pop	r0
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	08 95       	ret

00000f56 <_ZN9DS3232RTC14alarmInterruptEhb>:
/*----------------------------------------------------------------------*
 * Enable or disable an alarm "interrupt" which asserts the INT pin     *
 * on the RTC.                                                          *
 *----------------------------------------------------------------------*/
void DS3232RTC::alarmInterrupt(byte alarmNumber, bool interruptEnabled)
{
     f56:	ff 92       	push	r15
     f58:	0f 93       	push	r16
     f5a:	1f 93       	push	r17
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	1f 92       	push	r1
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
     f66:	8c 01       	movw	r16, r24
     f68:	f6 2e       	mov	r15, r22
    uint8_t controlReg, mask;
    
    controlReg = readRTC(RTC_CONTROL);
     f6a:	6e e0       	ldi	r22, 0x0E	; 14
     f6c:	49 83       	std	Y+1, r20	; 0x01
     f6e:	0e 94 9b 07 	call	0xf36	; 0xf36 <_ZN9DS3232RTC7readRTCEh>
    mask = _BV(A1IE) << (alarmNumber - 1);
     f72:	fa 94       	dec	r15
     f74:	21 e0       	ldi	r18, 0x01	; 1
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	01 c0       	rjmp	.+2      	; 0xf7c <_ZN9DS3232RTC14alarmInterruptEhb+0x26>
     f7a:	22 0f       	add	r18, r18
     f7c:	fa 94       	dec	r15
     f7e:	ea f7       	brpl	.-6      	; 0xf7a <_ZN9DS3232RTC14alarmInterruptEhb+0x24>
    if (interruptEnabled)
     f80:	49 81       	ldd	r20, Y+1	; 0x01
     f82:	44 23       	and	r20, r20
     f84:	19 f0       	breq	.+6      	; 0xf8c <_ZN9DS3232RTC14alarmInterruptEhb+0x36>
        controlReg |= mask;
     f86:	48 2f       	mov	r20, r24
     f88:	42 2b       	or	r20, r18
     f8a:	03 c0       	rjmp	.+6      	; 0xf92 <_ZN9DS3232RTC14alarmInterruptEhb+0x3c>
    else
        controlReg &= ~mask;
     f8c:	20 95       	com	r18
     f8e:	48 2f       	mov	r20, r24
     f90:	42 23       	and	r20, r18
    writeRTC(RTC_CONTROL, controlReg); 
     f92:	6e e0       	ldi	r22, 0x0E	; 14
     f94:	c8 01       	movw	r24, r16
}
     f96:	0f 90       	pop	r0
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	1f 91       	pop	r17
     f9e:	0f 91       	pop	r16
     fa0:	ff 90       	pop	r15
    mask = _BV(A1IE) << (alarmNumber - 1);
    if (interruptEnabled)
        controlReg |= mask;
    else
        controlReg &= ~mask;
    writeRTC(RTC_CONTROL, controlReg); 
     fa2:	0c 94 de 06 	jmp	0xdbc	; 0xdbc <_ZN9DS3232RTC8writeRTCEhh>

00000fa6 <_ZN9DS3232RTC5alarmEh>:
/*----------------------------------------------------------------------*
 * Returns true or false depending on whether the given alarm has been  *
 * triggered, and resets the alarm flag bit.                            *
 *----------------------------------------------------------------------*/
bool DS3232RTC::alarm(byte alarmNumber)
{
     fa6:	0f 93       	push	r16
     fa8:	1f 93       	push	r17
     faa:	cf 93       	push	r28
     fac:	8c 01       	movw	r16, r24
     fae:	c6 2f       	mov	r28, r22
    uint8_t statusReg, mask;
    
    statusReg = readRTC(RTC_STATUS);
     fb0:	6f e0       	ldi	r22, 0x0F	; 15
     fb2:	0e 94 9b 07 	call	0xf36	; 0xf36 <_ZN9DS3232RTC7readRTCEh>
    mask = _BV(A1F) << (alarmNumber - 1);
     fb6:	c1 50       	subi	r28, 0x01	; 1
     fb8:	21 e0       	ldi	r18, 0x01	; 1
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	01 c0       	rjmp	.+2      	; 0xfc0 <_ZN9DS3232RTC5alarmEh+0x1a>
     fbe:	22 0f       	add	r18, r18
     fc0:	ca 95       	dec	r28
     fc2:	ea f7       	brpl	.-6      	; 0xfbe <_ZN9DS3232RTC5alarmEh+0x18>
    if (statusReg & mask) {
     fc4:	98 2f       	mov	r25, r24
     fc6:	92 23       	and	r25, r18
     fc8:	49 f0       	breq	.+18     	; 0xfdc <_ZN9DS3232RTC5alarmEh+0x36>
        statusReg &= ~mask;
     fca:	20 95       	com	r18
     fcc:	48 2f       	mov	r20, r24
     fce:	42 23       	and	r20, r18
        writeRTC(RTC_STATUS, statusReg);
     fd0:	6f e0       	ldi	r22, 0x0F	; 15
     fd2:	c8 01       	movw	r24, r16
     fd4:	0e 94 de 06 	call	0xdbc	; 0xdbc <_ZN9DS3232RTC8writeRTCEhh>
        return true;
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	01 c0       	rjmp	.+2      	; 0xfde <_ZN9DS3232RTC5alarmEh+0x38>
    }
    else {
        return false;
     fdc:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     fde:	cf 91       	pop	r28
     fe0:	1f 91       	pop	r17
     fe2:	0f 91       	pop	r16
     fe4:	08 95       	ret

00000fe6 <_ZN9DS3232RTC10squareWaveE14SQWAVE_FREQS_t>:
/*----------------------------------------------------------------------*
 * Enable or disable the square wave output.                            *
 * Use a value from the SQWAVE_FREQS_t enumeration for the parameter.   *
 *----------------------------------------------------------------------*/
void DS3232RTC::squareWave(SQWAVE_FREQS_t freq)
{
     fe6:	0f 93       	push	r16
     fe8:	1f 93       	push	r17
     fea:	cf 93       	push	r28
     fec:	8c 01       	movw	r16, r24
     fee:	c6 2f       	mov	r28, r22
    uint8_t controlReg;

    controlReg = readRTC(RTC_CONTROL);
     ff0:	6e e0       	ldi	r22, 0x0E	; 14
     ff2:	0e 94 9b 07 	call	0xf36	; 0xf36 <_ZN9DS3232RTC7readRTCEh>
    if (freq >= SQWAVE_NONE) {
        controlReg |= _BV(INTCN);
     ff6:	48 2f       	mov	r20, r24
void DS3232RTC::squareWave(SQWAVE_FREQS_t freq)
{
    uint8_t controlReg;

    controlReg = readRTC(RTC_CONTROL);
    if (freq >= SQWAVE_NONE) {
     ff8:	c4 30       	cpi	r28, 0x04	; 4
     ffa:	10 f0       	brcs	.+4      	; 0x1000 <_ZN9DS3232RTC10squareWaveE14SQWAVE_FREQS_t+0x1a>
        controlReg |= _BV(INTCN);
     ffc:	44 60       	ori	r20, 0x04	; 4
     ffe:	06 c0       	rjmp	.+12     	; 0x100c <_ZN9DS3232RTC10squareWaveE14SQWAVE_FREQS_t+0x26>
    }
    else {
        controlReg = (controlReg & 0xE3) | (freq << RS1);
    1000:	43 7e       	andi	r20, 0xE3	; 227
    1002:	88 e0       	ldi	r24, 0x08	; 8
    1004:	c8 9f       	mul	r28, r24
    1006:	b0 01       	movw	r22, r0
    1008:	11 24       	eor	r1, r1
    100a:	46 2b       	or	r20, r22
    }
    writeRTC(RTC_CONTROL, controlReg);
    100c:	6e e0       	ldi	r22, 0x0E	; 14
    100e:	c8 01       	movw	r24, r16
}
    1010:	cf 91       	pop	r28
    1012:	1f 91       	pop	r17
    1014:	0f 91       	pop	r16
        controlReg |= _BV(INTCN);
    }
    else {
        controlReg = (controlReg & 0xE3) | (freq << RS1);
    }
    writeRTC(RTC_CONTROL, controlReg);
    1016:	0c 94 de 06 	jmp	0xdbc	; 0xdbc <_ZN9DS3232RTC8writeRTCEhh>

0000101a <_Z13monthShortStrh>:
}

char* monthShortStr(uint8_t month)
{
   for (int i=0; i < dt_SHORT_STR_LEN; i++)      
      buffer[i] = pgm_read_byte(&(monthShortNames_P[i+ (month*dt_SHORT_STR_LEN)]));  
    101a:	23 e0       	ldi	r18, 0x03	; 3
    101c:	82 9f       	mul	r24, r18
    101e:	c0 01       	movw	r24, r0
    1020:	11 24       	eor	r1, r1
    1022:	ac e1       	ldi	r26, 0x1C	; 28
    1024:	b2 e0       	ldi	r27, 0x02	; 2
    return buffer;
}

char* monthShortStr(uint8_t month)
{
   for (int i=0; i < dt_SHORT_STR_LEN; i++)      
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	f9 01       	movw	r30, r18
    102c:	e8 0f       	add	r30, r24
    102e:	f9 1f       	adc	r31, r25
    1030:	e8 59       	subi	r30, 0x98	; 152
    1032:	ff 4f       	sbci	r31, 0xFF	; 255
      buffer[i] = pgm_read_byte(&(monthShortNames_P[i+ (month*dt_SHORT_STR_LEN)]));  
    1034:	e4 91       	lpm	r30, Z
    1036:	ed 93       	st	X+, r30
    return buffer;
}

char* monthShortStr(uint8_t month)
{
   for (int i=0; i < dt_SHORT_STR_LEN; i++)      
    1038:	2f 5f       	subi	r18, 0xFF	; 255
    103a:	3f 4f       	sbci	r19, 0xFF	; 255
    103c:	23 30       	cpi	r18, 0x03	; 3
    103e:	31 05       	cpc	r19, r1
    1040:	a1 f7       	brne	.-24     	; 0x102a <_Z13monthShortStrh+0x10>
      buffer[i] = pgm_read_byte(&(monthShortNames_P[i+ (month*dt_SHORT_STR_LEN)]));  
   buffer[dt_SHORT_STR_LEN] = 0;
    1042:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <_ZL6buffer+0x3>
   return buffer;
}
    1046:	8c e1       	ldi	r24, 0x1C	; 28
    1048:	92 e0       	ldi	r25, 0x02	; 2
    104a:	08 95       	ret

0000104c <_Z9breakTimemR12tmElements_t>:
}

int weekday(time_t t) {
  refreshCache(t);
  return tm.Wday;
}
    104c:	6f 92       	push	r6
    104e:	7f 92       	push	r7
    1050:	8f 92       	push	r8
    1052:	9f 92       	push	r9
    1054:	af 92       	push	r10
    1056:	bf 92       	push	r11
    1058:	cf 92       	push	r12
    105a:	df 92       	push	r13
    105c:	ef 92       	push	r14
    105e:	ff 92       	push	r15
    1060:	0f 93       	push	r16
    1062:	1f 93       	push	r17
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	ea 01       	movw	r28, r20
    106a:	2c e3       	ldi	r18, 0x3C	; 60
    106c:	c2 2e       	mov	r12, r18
    106e:	d1 2c       	mov	r13, r1
    1070:	e1 2c       	mov	r14, r1
    1072:	f1 2c       	mov	r15, r1
    1074:	a7 01       	movw	r20, r14
    1076:	96 01       	movw	r18, r12
    1078:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__udivmodsi4>
    107c:	68 83       	st	Y, r22
    107e:	ca 01       	movw	r24, r20
    1080:	b9 01       	movw	r22, r18
    1082:	a7 01       	movw	r20, r14
    1084:	96 01       	movw	r18, r12
    1086:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__udivmodsi4>
    108a:	69 83       	std	Y+1, r22	; 0x01
    108c:	ca 01       	movw	r24, r20
    108e:	b9 01       	movw	r22, r18
    1090:	28 e1       	ldi	r18, 0x18	; 24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	40 e0       	ldi	r20, 0x00	; 0
    1096:	50 e0       	ldi	r21, 0x00	; 0
    1098:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__udivmodsi4>
    109c:	69 01       	movw	r12, r18
    109e:	7a 01       	movw	r14, r20
    10a0:	6a 83       	std	Y+2, r22	; 0x02
    10a2:	ca 01       	movw	r24, r20
    10a4:	b9 01       	movw	r22, r18
    10a6:	6c 5f       	subi	r22, 0xFC	; 252
    10a8:	7f 4f       	sbci	r23, 0xFF	; 255
    10aa:	8f 4f       	sbci	r24, 0xFF	; 255
    10ac:	9f 4f       	sbci	r25, 0xFF	; 255
    10ae:	27 e0       	ldi	r18, 0x07	; 7
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	40 e0       	ldi	r20, 0x00	; 0
    10b4:	50 e0       	ldi	r21, 0x00	; 0
    10b6:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__udivmodsi4>
    10ba:	6f 5f       	subi	r22, 0xFF	; 255
    10bc:	6b 83       	std	Y+3, r22	; 0x03
    10be:	81 2c       	mov	r8, r1
    10c0:	91 2c       	mov	r9, r1
    10c2:	54 01       	movw	r10, r8
    10c4:	40 e0       	ldi	r20, 0x00	; 0
    10c6:	34 e6       	ldi	r19, 0x64	; 100
    10c8:	63 2e       	mov	r6, r19
    10ca:	71 2c       	mov	r7, r1
    10cc:	00 e9       	ldi	r16, 0x90	; 144
    10ce:	11 e0       	ldi	r17, 0x01	; 1
    10d0:	24 2f       	mov	r18, r20
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	2e 54       	subi	r18, 0x4E	; 78
    10d6:	38 4f       	sbci	r19, 0xF8	; 248
    10d8:	f9 01       	movw	r30, r18
    10da:	e3 70       	andi	r30, 0x03	; 3
    10dc:	ff 27       	eor	r31, r31
    10de:	30 97       	sbiw	r30, 0x00	; 0
    10e0:	89 f4       	brne	.+34     	; 0x1104 <_Z9breakTimemR12tmElements_t+0xb8>
    10e2:	c9 01       	movw	r24, r18
    10e4:	b3 01       	movw	r22, r6
    10e6:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__divmodhi4>
    10ea:	89 2b       	or	r24, r25
    10ec:	31 f4       	brne	.+12     	; 0x10fa <_Z9breakTimemR12tmElements_t+0xae>
    10ee:	c9 01       	movw	r24, r18
    10f0:	b8 01       	movw	r22, r16
    10f2:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__divmodhi4>
    10f6:	89 2b       	or	r24, r25
    10f8:	29 f4       	brne	.+10     	; 0x1104 <_Z9breakTimemR12tmElements_t+0xb8>
    10fa:	8e e6       	ldi	r24, 0x6E	; 110
    10fc:	91 e0       	ldi	r25, 0x01	; 1
    10fe:	a0 e0       	ldi	r26, 0x00	; 0
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	04 c0       	rjmp	.+8      	; 0x110c <_Z9breakTimemR12tmElements_t+0xc0>
    1104:	8d e6       	ldi	r24, 0x6D	; 109
    1106:	91 e0       	ldi	r25, 0x01	; 1
    1108:	a0 e0       	ldi	r26, 0x00	; 0
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	88 0e       	add	r8, r24
    110e:	99 1e       	adc	r9, r25
    1110:	aa 1e       	adc	r10, r26
    1112:	bb 1e       	adc	r11, r27
    1114:	d5 01       	movw	r26, r10
    1116:	c4 01       	movw	r24, r8
    1118:	aa 27       	eor	r26, r26
    111a:	bb 27       	eor	r27, r27
    111c:	c8 16       	cp	r12, r24
    111e:	d9 06       	cpc	r13, r25
    1120:	ea 06       	cpc	r14, r26
    1122:	fb 06       	cpc	r15, r27
    1124:	10 f0       	brcs	.+4      	; 0x112a <_Z9breakTimemR12tmElements_t+0xde>
    1126:	4f 5f       	subi	r20, 0xFF	; 255
    1128:	d3 cf       	rjmp	.-90     	; 0x10d0 <_Z9breakTimemR12tmElements_t+0x84>
    112a:	4e 83       	std	Y+6, r20	; 0x06
    112c:	30 97       	sbiw	r30, 0x00	; 0
    112e:	99 f4       	brne	.+38     	; 0x1156 <_Z9breakTimemR12tmElements_t+0x10a>
    1130:	c9 01       	movw	r24, r18
    1132:	64 e6       	ldi	r22, 0x64	; 100
    1134:	70 e0       	ldi	r23, 0x00	; 0
    1136:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__divmodhi4>
    113a:	89 2b       	or	r24, r25
    113c:	39 f4       	brne	.+14     	; 0x114c <_Z9breakTimemR12tmElements_t+0x100>
    113e:	c9 01       	movw	r24, r18
    1140:	60 e9       	ldi	r22, 0x90	; 144
    1142:	71 e0       	ldi	r23, 0x01	; 1
    1144:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__divmodhi4>
    1148:	89 2b       	or	r24, r25
    114a:	29 f4       	brne	.+10     	; 0x1156 <_Z9breakTimemR12tmElements_t+0x10a>
    114c:	8e e6       	ldi	r24, 0x6E	; 110
    114e:	91 e0       	ldi	r25, 0x01	; 1
    1150:	a0 e0       	ldi	r26, 0x00	; 0
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	04 c0       	rjmp	.+8      	; 0x115e <_Z9breakTimemR12tmElements_t+0x112>
    1156:	8d e6       	ldi	r24, 0x6D	; 109
    1158:	91 e0       	ldi	r25, 0x01	; 1
    115a:	a0 e0       	ldi	r26, 0x00	; 0
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	88 1a       	sub	r8, r24
    1160:	99 0a       	sbc	r9, r25
    1162:	aa 0a       	sbc	r10, r26
    1164:	bb 0a       	sbc	r11, r27
    1166:	c8 18       	sub	r12, r8
    1168:	d9 08       	sbc	r13, r9
    116a:	ea 08       	sbc	r14, r10
    116c:	fb 08       	sbc	r15, r11
    116e:	c9 01       	movw	r24, r18
    1170:	64 e6       	ldi	r22, 0x64	; 100
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__divmodhi4>
    1178:	8c 01       	movw	r16, r24
    117a:	c9 01       	movw	r24, r18
    117c:	60 e9       	ldi	r22, 0x90	; 144
    117e:	71 e0       	ldi	r23, 0x01	; 1
    1180:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__divmodhi4>
    1184:	a5 e5       	ldi	r26, 0x55	; 85
    1186:	b1 e0       	ldi	r27, 0x01	; 1
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	21 30       	cpi	r18, 0x01	; 1
    118c:	41 f4       	brne	.+16     	; 0x119e <_Z9breakTimemR12tmElements_t+0x152>
    118e:	30 97       	sbiw	r30, 0x00	; 0
    1190:	51 f4       	brne	.+20     	; 0x11a6 <_Z9breakTimemR12tmElements_t+0x15a>
    1192:	01 15       	cp	r16, r1
    1194:	11 05       	cpc	r17, r1
    1196:	29 f4       	brne	.+10     	; 0x11a2 <_Z9breakTimemR12tmElements_t+0x156>
    1198:	00 97       	sbiw	r24, 0x00	; 0
    119a:	29 f4       	brne	.+10     	; 0x11a6 <_Z9breakTimemR12tmElements_t+0x15a>
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <_Z9breakTimemR12tmElements_t+0x156>
    119e:	4c 91       	ld	r20, X
    11a0:	03 c0       	rjmp	.+6      	; 0x11a8 <_Z9breakTimemR12tmElements_t+0x15c>
    11a2:	4d e1       	ldi	r20, 0x1D	; 29
    11a4:	01 c0       	rjmp	.+2      	; 0x11a8 <_Z9breakTimemR12tmElements_t+0x15c>
    11a6:	4c e1       	ldi	r20, 0x1C	; 28
    11a8:	50 e0       	ldi	r21, 0x00	; 0
    11aa:	60 e0       	ldi	r22, 0x00	; 0
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    11ae:	c4 16       	cp	r12, r20
    11b0:	d5 06       	cpc	r13, r21
    11b2:	e6 06       	cpc	r14, r22
    11b4:	f7 06       	cpc	r15, r23
    11b6:	40 f0       	brcs	.+16     	; 0x11c8 <_Z9breakTimemR12tmElements_t+0x17c>
    11b8:	c4 1a       	sub	r12, r20
    11ba:	d5 0a       	sbc	r13, r21
    11bc:	e6 0a       	sbc	r14, r22
    11be:	f7 0a       	sbc	r15, r23
    11c0:	2f 5f       	subi	r18, 0xFF	; 255
    11c2:	11 96       	adiw	r26, 0x01	; 1
    11c4:	2c 30       	cpi	r18, 0x0C	; 12
    11c6:	09 f7       	brne	.-62     	; 0x118a <_Z9breakTimemR12tmElements_t+0x13e>
    11c8:	2f 5f       	subi	r18, 0xFF	; 255
    11ca:	2d 83       	std	Y+5, r18	; 0x05
    11cc:	c3 94       	inc	r12
    11ce:	cc 82       	std	Y+4, r12	; 0x04
    11d0:	df 91       	pop	r29
    11d2:	cf 91       	pop	r28
    11d4:	1f 91       	pop	r17
    11d6:	0f 91       	pop	r16
    11d8:	ff 90       	pop	r15
    11da:	ef 90       	pop	r14
    11dc:	df 90       	pop	r13
    11de:	cf 90       	pop	r12
    11e0:	bf 90       	pop	r11
    11e2:	af 90       	pop	r10
    11e4:	9f 90       	pop	r9
    11e6:	8f 90       	pop	r8
    11e8:	7f 90       	pop	r7
    11ea:	6f 90       	pop	r6
    11ec:	08 95       	ret

000011ee <_Z12refreshCachem>:
    11ee:	cf 92       	push	r12
    11f0:	df 92       	push	r13
    11f2:	ef 92       	push	r14
    11f4:	ff 92       	push	r15
    11f6:	c0 90 26 02 	lds	r12, 0x0226	; 0x800226 <_ZL9cacheTime>
    11fa:	d0 90 27 02 	lds	r13, 0x0227	; 0x800227 <_ZL9cacheTime+0x1>
    11fe:	e0 90 28 02 	lds	r14, 0x0228	; 0x800228 <_ZL9cacheTime+0x2>
    1202:	f0 90 29 02 	lds	r15, 0x0229	; 0x800229 <_ZL9cacheTime+0x3>
    1206:	6c 15       	cp	r22, r12
    1208:	7d 05       	cpc	r23, r13
    120a:	8e 05       	cpc	r24, r14
    120c:	9f 05       	cpc	r25, r15
    120e:	71 f0       	breq	.+28     	; 0x122c <_Z12refreshCachem+0x3e>
    1210:	6b 01       	movw	r12, r22
    1212:	7c 01       	movw	r14, r24
    1214:	4a e2       	ldi	r20, 0x2A	; 42
    1216:	52 e0       	ldi	r21, 0x02	; 2
    1218:	0e 94 26 08 	call	0x104c	; 0x104c <_Z9breakTimemR12tmElements_t>
    121c:	c0 92 26 02 	sts	0x0226, r12	; 0x800226 <_ZL9cacheTime>
    1220:	d0 92 27 02 	sts	0x0227, r13	; 0x800227 <_ZL9cacheTime+0x1>
    1224:	e0 92 28 02 	sts	0x0228, r14	; 0x800228 <_ZL9cacheTime+0x2>
    1228:	f0 92 29 02 	sts	0x0229, r15	; 0x800229 <_ZL9cacheTime+0x3>
    122c:	ff 90       	pop	r15
    122e:	ef 90       	pop	r14
    1230:	df 90       	pop	r13
    1232:	cf 90       	pop	r12
    1234:	08 95       	ret

00001236 <_Z4hourm>:
    1236:	0e 94 f7 08 	call	0x11ee	; 0x11ee <_Z12refreshCachem>
    123a:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <_ZL2tm+0x2>
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	08 95       	ret

00001242 <_Z6minutem>:
    1242:	0e 94 f7 08 	call	0x11ee	; 0x11ee <_Z12refreshCachem>
    1246:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <_ZL2tm+0x1>
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	08 95       	ret

0000124e <_Z6secondm>:
    124e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <_Z12refreshCachem>
    1252:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <_ZL2tm>
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	08 95       	ret

0000125a <_Z3daym>:
    125a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <_Z12refreshCachem>
    125e:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <_ZL2tm+0x4>
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	08 95       	ret

00001266 <_Z5monthm>:
int month(){
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
  refreshCache(t);
    1266:	0e 94 f7 08 	call	0x11ee	; 0x11ee <_Z12refreshCachem>
  return tm.Month;
    126a:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <_ZL2tm+0x5>
}
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	08 95       	ret

00001272 <_Z4yearm>:
int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
    1272:	0e 94 f7 08 	call	0x11ee	; 0x11ee <_Z12refreshCachem>
  return tmYearToCalendar(tm.Year);
    1276:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <_ZL2tm+0x6>
    127a:	90 e0       	ldi	r25, 0x00	; 0
}
    127c:	8e 54       	subi	r24, 0x4E	; 78
    127e:	98 4f       	sbci	r25, 0xF8	; 248
    1280:	08 95       	ret

00001282 <_Z8makeTimeR12tmElements_t>:
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
}

time_t makeTime(tmElements_t &tm){   
    1282:	6f 92       	push	r6
    1284:	7f 92       	push	r7
    1286:	8f 92       	push	r8
    1288:	9f 92       	push	r9
    128a:	af 92       	push	r10
    128c:	bf 92       	push	r11
    128e:	cf 92       	push	r12
    1290:	df 92       	push	r13
    1292:	ef 92       	push	r14
    1294:	ff 92       	push	r15
    1296:	0f 93       	push	r16
    1298:	1f 93       	push	r17
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
    129e:	ec 01       	movw	r28, r24
  
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
    12a0:	ee 81       	ldd	r30, Y+6	; 0x06
    12a2:	ae 2f       	mov	r26, r30
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	20 e8       	ldi	r18, 0x80	; 128
    12a8:	33 e3       	ldi	r19, 0x33	; 51
    12aa:	41 ee       	ldi	r20, 0xE1	; 225
    12ac:	51 e0       	ldi	r21, 0x01	; 1
    12ae:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <__muluhisi3>
    12b2:	4b 01       	movw	r8, r22
    12b4:	5c 01       	movw	r10, r24
  for (i = 0; i < tm.Year; i++) {
    12b6:	22 eb       	ldi	r18, 0xB2	; 178
    12b8:	37 e0       	ldi	r19, 0x07	; 7
    12ba:	fd 01       	movw	r30, r26
    if (LEAP_YEAR(i)) {
    12bc:	04 e6       	ldi	r16, 0x64	; 100
    12be:	10 e0       	ldi	r17, 0x00	; 0
    12c0:	80 e9       	ldi	r24, 0x90	; 144
    12c2:	e8 2e       	mov	r14, r24
    12c4:	ff 24       	eor	r15, r15
    12c6:	f3 94       	inc	r15
    12c8:	c9 01       	movw	r24, r18
    12ca:	82 5b       	subi	r24, 0xB2	; 178
    12cc:	97 40       	sbci	r25, 0x07	; 7
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    12ce:	8e 17       	cp	r24, r30
    12d0:	9f 07       	cpc	r25, r31
    12d2:	dc f4       	brge	.+54     	; 0x130a <_Z8makeTimeR12tmElements_t+0x88>
    if (LEAP_YEAR(i)) {
    12d4:	c9 01       	movw	r24, r18
    12d6:	83 70       	andi	r24, 0x03	; 3
    12d8:	99 27       	eor	r25, r25
    12da:	89 2b       	or	r24, r25
    12dc:	99 f4       	brne	.+38     	; 0x1304 <_Z8makeTimeR12tmElements_t+0x82>
    12de:	c9 01       	movw	r24, r18
    12e0:	b8 01       	movw	r22, r16
    12e2:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__divmodhi4>
    12e6:	89 2b       	or	r24, r25
    12e8:	31 f4       	brne	.+12     	; 0x12f6 <_Z8makeTimeR12tmElements_t+0x74>
    12ea:	c9 01       	movw	r24, r18
    12ec:	b7 01       	movw	r22, r14
    12ee:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__divmodhi4>
    12f2:	89 2b       	or	r24, r25
    12f4:	39 f4       	brne	.+14     	; 0x1304 <_Z8makeTimeR12tmElements_t+0x82>
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    12f6:	80 e8       	ldi	r24, 0x80	; 128
    12f8:	88 0e       	add	r8, r24
    12fa:	81 e5       	ldi	r24, 0x51	; 81
    12fc:	98 1e       	adc	r9, r24
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	a8 1e       	adc	r10, r24
    1302:	b1 1c       	adc	r11, r1
    1304:	2f 5f       	subi	r18, 0xFF	; 255
    1306:	3f 4f       	sbci	r19, 0xFF	; 255
    1308:	df cf       	rjmp	.-66     	; 0x12c8 <_Z8makeTimeR12tmElements_t+0x46>
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    130a:	6d 80       	ldd	r6, Y+5	; 0x05
    130c:	71 2c       	mov	r7, r1
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    130e:	ee 54       	subi	r30, 0x4E	; 78
    1310:	f8 4f       	sbci	r31, 0xF8	; 248
    1312:	cf 01       	movw	r24, r30
    1314:	64 e6       	ldi	r22, 0x64	; 100
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__divmodhi4>
    131c:	7c 01       	movw	r14, r24
    131e:	cf 01       	movw	r24, r30
    1320:	60 e9       	ldi	r22, 0x90	; 144
    1322:	71 e0       	ldi	r23, 0x01	; 1
    1324:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__divmodhi4>
    1328:	6c 01       	movw	r12, r24
    132a:	01 e0       	ldi	r16, 0x01	; 1
    132c:	10 e0       	ldi	r17, 0x00	; 0
    132e:	e3 70       	andi	r30, 0x03	; 3
    1330:	ff 27       	eor	r31, r31
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    1332:	06 15       	cp	r16, r6
    1334:	17 05       	cpc	r17, r7
    1336:	2c f5       	brge	.+74     	; 0x1382 <_Z8makeTimeR12tmElements_t+0x100>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    1338:	02 30       	cpi	r16, 0x02	; 2
    133a:	11 05       	cpc	r17, r1
    133c:	81 f4       	brne	.+32     	; 0x135e <_Z8makeTimeR12tmElements_t+0xdc>
    133e:	30 97       	sbiw	r30, 0x00	; 0
    1340:	71 f4       	brne	.+28     	; 0x135e <_Z8makeTimeR12tmElements_t+0xdc>
    1342:	e1 14       	cp	r14, r1
    1344:	f1 04       	cpc	r15, r1
    1346:	19 f4       	brne	.+6      	; 0x134e <_Z8makeTimeR12tmElements_t+0xcc>
    1348:	c1 14       	cp	r12, r1
    134a:	d1 04       	cpc	r13, r1
    134c:	41 f4       	brne	.+16     	; 0x135e <_Z8makeTimeR12tmElements_t+0xdc>
      seconds += SECS_PER_DAY * 29;
    134e:	80 e8       	ldi	r24, 0x80	; 128
    1350:	88 0e       	add	r8, r24
    1352:	8b e3       	ldi	r24, 0x3B	; 59
    1354:	98 1e       	adc	r9, r24
    1356:	86 e2       	ldi	r24, 0x26	; 38
    1358:	a8 1e       	adc	r10, r24
    135a:	b1 1c       	adc	r11, r1
    135c:	0f c0       	rjmp	.+30     	; 0x137c <_Z8makeTimeR12tmElements_t+0xfa>
    135e:	d8 01       	movw	r26, r16
    1360:	ac 5a       	subi	r26, 0xAC	; 172
    1362:	be 4f       	sbci	r27, 0xFE	; 254
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    1364:	ac 91       	ld	r26, X
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	20 e8       	ldi	r18, 0x80	; 128
    136a:	31 e5       	ldi	r19, 0x51	; 81
    136c:	41 e0       	ldi	r20, 0x01	; 1
    136e:	50 e0       	ldi	r21, 0x00	; 0
    1370:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <__muluhisi3>
    1374:	86 0e       	add	r8, r22
    1376:	97 1e       	adc	r9, r23
    1378:	a8 1e       	adc	r10, r24
    137a:	b9 1e       	adc	r11, r25
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    137c:	0f 5f       	subi	r16, 0xFF	; 255
    137e:	1f 4f       	sbci	r17, 0xFF	; 255
    1380:	d8 cf       	rjmp	.-80     	; 0x1332 <_Z8makeTimeR12tmElements_t+0xb0>
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    }
  }
  seconds+= (tm.Day-1) * SECS_PER_DAY;
  seconds+= tm.Hour * SECS_PER_HOUR;
  seconds+= tm.Minute * SECS_PER_MIN;
    1382:	49 81       	ldd	r20, Y+1	; 0x01
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    }
  }
  seconds+= (tm.Day-1) * SECS_PER_DAY;
  seconds+= tm.Hour * SECS_PER_HOUR;
    1384:	2a 81       	ldd	r18, Y+2	; 0x02
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	a0 e1       	ldi	r26, 0x10	; 16
    138a:	be e0       	ldi	r27, 0x0E	; 14
    138c:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__umulhisi3>
    1390:	6b 01       	movw	r12, r22
    1392:	7c 01       	movw	r14, r24
  seconds+= tm.Minute * SECS_PER_MIN;
    1394:	24 2f       	mov	r18, r20
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	ac e3       	ldi	r26, 0x3C	; 60
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__umulhisi3>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	8c 0d       	add	r24, r12
    13a6:	9d 1d       	adc	r25, r13
    13a8:	ae 1d       	adc	r26, r14
    13aa:	bf 1d       	adc	r27, r15
  seconds+= tm.Second;
    13ac:	28 81       	ld	r18, Y
    13ae:	6c 01       	movw	r12, r24
    13b0:	7d 01       	movw	r14, r26
    13b2:	c2 0e       	add	r12, r18
    13b4:	d1 1c       	adc	r13, r1
    13b6:	e1 1c       	adc	r14, r1
    13b8:	f1 1c       	adc	r15, r1
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    }
  }
  seconds+= (tm.Day-1) * SECS_PER_DAY;
    13ba:	ac 81       	ldd	r26, Y+4	; 0x04
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	11 97       	sbiw	r26, 0x01	; 1
    13c0:	20 e8       	ldi	r18, 0x80	; 128
    13c2:	31 e5       	ldi	r19, 0x51	; 81
    13c4:	41 e0       	ldi	r20, 0x01	; 1
    13c6:	50 e0       	ldi	r21, 0x00	; 0
    13c8:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__mulshisi3>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	8c 0d       	add	r24, r12
    13d2:	9d 1d       	adc	r25, r13
    13d4:	ae 1d       	adc	r26, r14
    13d6:	bf 1d       	adc	r27, r15
  seconds+= tm.Hour * SECS_PER_HOUR;
  seconds+= tm.Minute * SECS_PER_MIN;
  seconds+= tm.Second;
    13d8:	bc 01       	movw	r22, r24
    13da:	cd 01       	movw	r24, r26
    13dc:	68 0d       	add	r22, r8
    13de:	79 1d       	adc	r23, r9
    13e0:	8a 1d       	adc	r24, r10
    13e2:	9b 1d       	adc	r25, r11
  return (time_t)seconds; 
}
    13e4:	df 91       	pop	r29
    13e6:	cf 91       	pop	r28
    13e8:	1f 91       	pop	r17
    13ea:	0f 91       	pop	r16
    13ec:	ff 90       	pop	r15
    13ee:	ef 90       	pop	r14
    13f0:	df 90       	pop	r13
    13f2:	cf 90       	pop	r12
    13f4:	bf 90       	pop	r11
    13f6:	af 90       	pop	r10
    13f8:	9f 90       	pop	r9
    13fa:	8f 90       	pop	r8
    13fc:	7f 90       	pop	r7
    13fe:	6f 90       	pop	r6
    1400:	08 95       	ret

00001402 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1402:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <_ZN7TwoWire14rxBufferLengthE>
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <_ZN7TwoWire13rxBufferIndexE>
    140c:	82 1b       	sub	r24, r18
    140e:	91 09       	sbc	r25, r1
    1410:	08 95       	ret

00001412 <_ZN7TwoWire4readEv>:
    1412:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <_ZN7TwoWire13rxBufferIndexE>
    1416:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <_ZN7TwoWire14rxBufferLengthE>
    141a:	98 17       	cp	r25, r24
    141c:	50 f4       	brcc	.+20     	; 0x1432 <_ZN7TwoWire4readEv+0x20>
    141e:	e9 2f       	mov	r30, r25
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	ed 59       	subi	r30, 0x9D	; 157
    1424:	fd 4f       	sbci	r31, 0xFD	; 253
    1426:	20 81       	ld	r18, Z
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	9f 5f       	subi	r25, 0xFF	; 255
    142c:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <_ZN7TwoWire13rxBufferIndexE>
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <_ZN7TwoWire4readEv+0x24>
    1432:	2f ef       	ldi	r18, 0xFF	; 255
    1434:	3f ef       	ldi	r19, 0xFF	; 255
    1436:	c9 01       	movw	r24, r18
    1438:	08 95       	ret

0000143a <_ZN7TwoWire4peekEv>:
    143a:	e0 91 62 02 	lds	r30, 0x0262	; 0x800262 <_ZN7TwoWire13rxBufferIndexE>
    143e:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <_ZN7TwoWire14rxBufferLengthE>
    1442:	e8 17       	cp	r30, r24
    1444:	30 f4       	brcc	.+12     	; 0x1452 <_ZN7TwoWire4peekEv+0x18>
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	ed 59       	subi	r30, 0x9D	; 157
    144a:	fd 4f       	sbci	r31, 0xFD	; 253
    144c:	80 81       	ld	r24, Z
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	08 95       	ret
    1452:	8f ef       	ldi	r24, 0xFF	; 255
    1454:	9f ef       	ldi	r25, 0xFF	; 255
    1456:	08 95       	ret

00001458 <_ZN7TwoWire5flushEv>:
    1458:	08 95       	ret

0000145a <_ZN7TwoWire5writeEPKhj>:
    145a:	cf 92       	push	r12
    145c:	df 92       	push	r13
    145e:	ef 92       	push	r14
    1460:	ff 92       	push	r15
    1462:	0f 93       	push	r16
    1464:	1f 93       	push	r17
    1466:	cf 93       	push	r28
    1468:	df 93       	push	r29
    146a:	7c 01       	movw	r14, r24
    146c:	26 2f       	mov	r18, r22
    146e:	97 2f       	mov	r25, r23
    1470:	8a 01       	movw	r16, r20
    1472:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <_ZN7TwoWire12transmittingE>
    1476:	88 23       	and	r24, r24
    1478:	91 f0       	breq	.+36     	; 0x149e <_ZN7TwoWire5writeEPKhj+0x44>
    147a:	c6 2f       	mov	r28, r22
    147c:	d7 2f       	mov	r29, r23
    147e:	6e 01       	movw	r12, r28
    1480:	c4 0e       	add	r12, r20
    1482:	d5 1e       	adc	r13, r21
    1484:	cc 15       	cp	r28, r12
    1486:	dd 05       	cpc	r29, r13
    1488:	71 f0       	breq	.+28     	; 0x14a6 <_ZN7TwoWire5writeEPKhj+0x4c>
    148a:	69 91       	ld	r22, Y+
    148c:	d7 01       	movw	r26, r14
    148e:	ed 91       	ld	r30, X+
    1490:	fc 91       	ld	r31, X
    1492:	01 90       	ld	r0, Z+
    1494:	f0 81       	ld	r31, Z
    1496:	e0 2d       	mov	r30, r0
    1498:	c7 01       	movw	r24, r14
    149a:	09 95       	icall
    149c:	f3 cf       	rjmp	.-26     	; 0x1484 <_ZN7TwoWire5writeEPKhj+0x2a>
    149e:	64 2f       	mov	r22, r20
    14a0:	82 2f       	mov	r24, r18
    14a2:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <twi_transmit>
    14a6:	c8 01       	movw	r24, r16
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	1f 91       	pop	r17
    14ae:	0f 91       	pop	r16
    14b0:	ff 90       	pop	r15
    14b2:	ef 90       	pop	r14
    14b4:	df 90       	pop	r13
    14b6:	cf 90       	pop	r12
    14b8:	08 95       	ret

000014ba <_ZN7TwoWire5writeEh>:
    14ba:	cf 93       	push	r28
    14bc:	df 93       	push	r29
    14be:	1f 92       	push	r1
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
    14c4:	69 83       	std	Y+1, r22	; 0x01
    14c6:	20 91 3d 02 	lds	r18, 0x023D	; 0x80023d <_ZN7TwoWire12transmittingE>
    14ca:	22 23       	and	r18, r18
    14cc:	d1 f0       	breq	.+52     	; 0x1502 <_ZN7TwoWire5writeEh+0x48>
    14ce:	20 91 3e 02 	lds	r18, 0x023E	; 0x80023e <_ZN7TwoWire14txBufferLengthE>
    14d2:	20 32       	cpi	r18, 0x20	; 32
    14d4:	40 f0       	brcs	.+16     	; 0x14e6 <_ZN7TwoWire5writeEh+0x2c>
    14d6:	21 e0       	ldi	r18, 0x01	; 1
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	fc 01       	movw	r30, r24
    14dc:	33 83       	std	Z+3, r19	; 0x03
    14de:	22 83       	std	Z+2, r18	; 0x02
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	15 c0       	rjmp	.+42     	; 0x1510 <_ZN7TwoWire5writeEh+0x56>
    14e6:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <_ZN7TwoWire13txBufferIndexE>
    14ea:	e8 2f       	mov	r30, r24
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	e0 5c       	subi	r30, 0xC0	; 192
    14f0:	fd 4f       	sbci	r31, 0xFD	; 253
    14f2:	99 81       	ldd	r25, Y+1	; 0x01
    14f4:	90 83       	st	Z, r25
    14f6:	8f 5f       	subi	r24, 0xFF	; 255
    14f8:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <_ZN7TwoWire13txBufferIndexE>
    14fc:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <_ZN7TwoWire14txBufferLengthE>
    1500:	05 c0       	rjmp	.+10     	; 0x150c <_ZN7TwoWire5writeEh+0x52>
    1502:	61 e0       	ldi	r22, 0x01	; 1
    1504:	ce 01       	movw	r24, r28
    1506:	01 96       	adiw	r24, 0x01	; 1
    1508:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <twi_transmit>
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	0f 90       	pop	r0
    1512:	df 91       	pop	r29
    1514:	cf 91       	pop	r28
    1516:	08 95       	ret

00001518 <_ZN7TwoWireC1Ev>:
    1518:	fc 01       	movw	r30, r24
    151a:	13 82       	std	Z+3, r1	; 0x03
    151c:	12 82       	std	Z+2, r1	; 0x02
    151e:	88 ee       	ldi	r24, 0xE8	; 232
    1520:	93 e0       	ldi	r25, 0x03	; 3
    1522:	a0 e0       	ldi	r26, 0x00	; 0
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	84 83       	std	Z+4, r24	; 0x04
    1528:	95 83       	std	Z+5, r25	; 0x05
    152a:	a6 83       	std	Z+6, r26	; 0x06
    152c:	b7 83       	std	Z+7, r27	; 0x07
    152e:	85 e6       	ldi	r24, 0x65	; 101
    1530:	91 e0       	ldi	r25, 0x01	; 1
    1532:	91 83       	std	Z+1, r25	; 0x01
    1534:	80 83       	st	Z, r24
    1536:	08 95       	ret

00001538 <_ZN7TwoWire5beginEv>:
    1538:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <_ZN7TwoWire13rxBufferIndexE>
    153c:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <_ZN7TwoWire14rxBufferLengthE>
    1540:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <_ZN7TwoWire13txBufferIndexE>
    1544:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <_ZN7TwoWire14txBufferLengthE>
    1548:	0c 94 37 0b 	jmp	0x166e	; 0x166e <twi_init>

0000154c <_ZN7TwoWire17beginTransmissionEh>:
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <_ZN7TwoWire12transmittingE>
    1552:	60 93 60 02 	sts	0x0260, r22	; 0x800260 <_ZN7TwoWire9txAddressE>
    1556:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <_ZN7TwoWire13txBufferIndexE>
    155a:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <_ZN7TwoWire14txBufferLengthE>
    155e:	08 95       	ret

00001560 <_ZN7TwoWire17beginTransmissionEi>:
    1560:	0c 94 a6 0a 	jmp	0x154c	; 0x154c <_ZN7TwoWire17beginTransmissionEh>

00001564 <_ZN7TwoWire15endTransmissionEh>:
    1564:	0f 93       	push	r16
    1566:	06 2f       	mov	r16, r22
    1568:	21 e0       	ldi	r18, 0x01	; 1
    156a:	40 91 3e 02 	lds	r20, 0x023E	; 0x80023e <_ZN7TwoWire14txBufferLengthE>
    156e:	60 e4       	ldi	r22, 0x40	; 64
    1570:	72 e0       	ldi	r23, 0x02	; 2
    1572:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <_ZN7TwoWire9txAddressE>
    1576:	0e 94 9d 0b 	call	0x173a	; 0x173a <twi_writeTo>
    157a:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <_ZN7TwoWire13txBufferIndexE>
    157e:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <_ZN7TwoWire14txBufferLengthE>
    1582:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <_ZN7TwoWire12transmittingE>
    1586:	0f 91       	pop	r16
    1588:	08 95       	ret

0000158a <_ZN7TwoWire11requestFromEhhmhh>:
    158a:	4f 92       	push	r4
    158c:	5f 92       	push	r5
    158e:	6f 92       	push	r6
    1590:	7f 92       	push	r7
    1592:	af 92       	push	r10
    1594:	bf 92       	push	r11
    1596:	cf 92       	push	r12
    1598:	ef 92       	push	r14
    159a:	ff 92       	push	r15
    159c:	0f 93       	push	r16
    159e:	1f 93       	push	r17
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
    15a4:	5c 01       	movw	r10, r24
    15a6:	f6 2e       	mov	r15, r22
    15a8:	d4 2f       	mov	r29, r20
    15aa:	28 01       	movw	r4, r16
    15ac:	39 01       	movw	r6, r18
    15ae:	ee 20       	and	r14, r14
    15b0:	21 f1       	breq	.+72     	; 0x15fa <_ZN7TwoWire11requestFromEhhmhh+0x70>
    15b2:	0e 94 a6 0a 	call	0x154c	; 0x154c <_ZN7TwoWire17beginTransmissionEh>
    15b6:	ce 2d       	mov	r28, r14
    15b8:	c4 30       	cpi	r28, 0x04	; 4
    15ba:	08 f0       	brcs	.+2      	; 0x15be <_ZN7TwoWire11requestFromEhhmhh+0x34>
    15bc:	c3 e0       	ldi	r28, 0x03	; 3
    15be:	c1 50       	subi	r28, 0x01	; 1
    15c0:	c0 f0       	brcs	.+48     	; 0x15f2 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    15c2:	d5 01       	movw	r26, r10
    15c4:	ed 91       	ld	r30, X+
    15c6:	fc 91       	ld	r31, X
    15c8:	b8 e0       	ldi	r27, 0x08	; 8
    15ca:	cb 9f       	mul	r28, r27
    15cc:	c0 01       	movw	r24, r0
    15ce:	11 24       	eor	r1, r1
    15d0:	a3 01       	movw	r20, r6
    15d2:	92 01       	movw	r18, r4
    15d4:	04 c0       	rjmp	.+8      	; 0x15de <_ZN7TwoWire11requestFromEhhmhh+0x54>
    15d6:	56 95       	lsr	r21
    15d8:	47 95       	ror	r20
    15da:	37 95       	ror	r19
    15dc:	27 95       	ror	r18
    15de:	8a 95       	dec	r24
    15e0:	d2 f7       	brpl	.-12     	; 0x15d6 <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    15e2:	ca 01       	movw	r24, r20
    15e4:	b9 01       	movw	r22, r18
    15e6:	01 90       	ld	r0, Z+
    15e8:	f0 81       	ld	r31, Z
    15ea:	e0 2d       	mov	r30, r0
    15ec:	c5 01       	movw	r24, r10
    15ee:	09 95       	icall
    15f0:	e6 cf       	rjmp	.-52     	; 0x15be <_ZN7TwoWire11requestFromEhhmhh+0x34>
    15f2:	60 e0       	ldi	r22, 0x00	; 0
    15f4:	c5 01       	movw	r24, r10
    15f6:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZN7TwoWire15endTransmissionEh>
    15fa:	4d 2f       	mov	r20, r29
    15fc:	d1 32       	cpi	r29, 0x21	; 33
    15fe:	08 f0       	brcs	.+2      	; 0x1602 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    1600:	40 e2       	ldi	r20, 0x20	; 32
    1602:	2c 2d       	mov	r18, r12
    1604:	63 e6       	ldi	r22, 0x63	; 99
    1606:	72 e0       	ldi	r23, 0x02	; 2
    1608:	8f 2d       	mov	r24, r15
    160a:	0e 94 55 0b 	call	0x16aa	; 0x16aa <twi_readFrom>
    160e:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <_ZN7TwoWire13rxBufferIndexE>
    1612:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <_ZN7TwoWire14rxBufferLengthE>
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
    161a:	1f 91       	pop	r17
    161c:	0f 91       	pop	r16
    161e:	ff 90       	pop	r15
    1620:	ef 90       	pop	r14
    1622:	cf 90       	pop	r12
    1624:	bf 90       	pop	r11
    1626:	af 90       	pop	r10
    1628:	7f 90       	pop	r7
    162a:	6f 90       	pop	r6
    162c:	5f 90       	pop	r5
    162e:	4f 90       	pop	r4
    1630:	08 95       	ret

00001632 <_ZN7TwoWire11requestFromEhhh>:
    1632:	cf 92       	push	r12
    1634:	ef 92       	push	r14
    1636:	0f 93       	push	r16
    1638:	1f 93       	push	r17
    163a:	c2 2e       	mov	r12, r18
    163c:	e1 2c       	mov	r14, r1
    163e:	00 e0       	ldi	r16, 0x00	; 0
    1640:	10 e0       	ldi	r17, 0x00	; 0
    1642:	98 01       	movw	r18, r16
    1644:	0e 94 c5 0a 	call	0x158a	; 0x158a <_ZN7TwoWire11requestFromEhhmhh>
    1648:	1f 91       	pop	r17
    164a:	0f 91       	pop	r16
    164c:	ef 90       	pop	r14
    164e:	cf 90       	pop	r12
    1650:	08 95       	ret

00001652 <_ZN7TwoWire11requestFromEhh>:
    1652:	21 e0       	ldi	r18, 0x01	; 1
    1654:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <_ZN7TwoWire11requestFromEhhh>

00001658 <_ZN7TwoWire11requestFromEii>:
    1658:	21 e0       	ldi	r18, 0x01	; 1
    165a:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <_ZN7TwoWire11requestFromEhhh>

0000165e <_ZN7TwoWire15endTransmissionEv>:
    165e:	61 e0       	ldi	r22, 0x01	; 1
    1660:	0c 94 b2 0a 	jmp	0x1564	; 0x1564 <_ZN7TwoWire15endTransmissionEh>

00001664 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1664:	81 e3       	ldi	r24, 0x31	; 49
    1666:	92 e0       	ldi	r25, 0x02	; 2
    1668:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <_ZN7TwoWireC1Ev>

0000166c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    166c:	08 95       	ret

0000166e <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    166e:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <twi_state>
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <twi_sendStop>
    1678:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <twi_inRepStart>
    167c:	61 e0       	ldi	r22, 0x01	; 1
    167e:	82 e1       	ldi	r24, 0x12	; 18
    1680:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <digitalWrite>
    1684:	61 e0       	ldi	r22, 0x01	; 1
    1686:	83 e1       	ldi	r24, 0x13	; 19
    1688:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <digitalWrite>
    168c:	e9 eb       	ldi	r30, 0xB9	; 185
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	8e 7f       	andi	r24, 0xFE	; 254
    1694:	80 83       	st	Z, r24
    1696:	80 81       	ld	r24, Z
    1698:	8d 7f       	andi	r24, 0xFD	; 253
    169a:	80 83       	st	Z, r24
    169c:	88 e4       	ldi	r24, 0x48	; 72
    169e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    16a2:	85 e4       	ldi	r24, 0x45	; 69
    16a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    16a8:	08 95       	ret

000016aa <twi_readFrom>:
    16aa:	41 32       	cpi	r20, 0x21	; 33
    16ac:	08 f0       	brcs	.+2      	; 0x16b0 <twi_readFrom+0x6>
    16ae:	43 c0       	rjmp	.+134    	; 0x1736 <twi_readFrom+0x8c>
    16b0:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <twi_state>
    16b4:	91 11       	cpse	r25, r1
    16b6:	fc cf       	rjmp	.-8      	; 0x16b0 <twi_readFrom+0x6>
    16b8:	91 e0       	ldi	r25, 0x01	; 1
    16ba:	90 93 f0 02 	sts	0x02F0, r25	; 0x8002f0 <twi_state>
    16be:	20 93 ee 02 	sts	0x02EE, r18	; 0x8002ee <twi_sendStop>
    16c2:	2f ef       	ldi	r18, 0xFF	; 255
    16c4:	20 93 83 02 	sts	0x0283, r18	; 0x800283 <twi_error>
    16c8:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <twi_masterBufferIndex>
    16cc:	24 0f       	add	r18, r20
    16ce:	20 93 c7 02 	sts	0x02C7, r18	; 0x8002c7 <twi_masterBufferLength>
    16d2:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <twi_slarw>
    16d6:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <twi_slarw>
    16da:	88 0f       	add	r24, r24
    16dc:	89 2b       	or	r24, r25
    16de:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <twi_slarw>
    16e2:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <twi_inRepStart>
    16e6:	81 30       	cpi	r24, 0x01	; 1
    16e8:	61 f4       	brne	.+24     	; 0x1702 <twi_readFrom+0x58>
    16ea:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <twi_inRepStart>
    16ee:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <twi_slarw>
    16f2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    16f6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    16fa:	83 fd       	sbrc	r24, 3
    16fc:	f8 cf       	rjmp	.-16     	; 0x16ee <twi_readFrom+0x44>
    16fe:	85 ec       	ldi	r24, 0xC5	; 197
    1700:	01 c0       	rjmp	.+2      	; 0x1704 <twi_readFrom+0x5a>
    1702:	85 ee       	ldi	r24, 0xE5	; 229
    1704:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1708:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <twi_state>
    170c:	81 30       	cpi	r24, 0x01	; 1
    170e:	e1 f3       	breq	.-8      	; 0x1708 <twi_readFrom+0x5e>
    1710:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <twi_masterBufferIndex>
    1714:	84 17       	cp	r24, r20
    1716:	10 f4       	brcc	.+4      	; 0x171c <twi_readFrom+0x72>
    1718:	40 91 c8 02 	lds	r20, 0x02C8	; 0x8002c8 <twi_masterBufferIndex>
    171c:	29 ec       	ldi	r18, 0xC9	; 201
    171e:	32 e0       	ldi	r19, 0x02	; 2
    1720:	fb 01       	movw	r30, r22
    1722:	d9 01       	movw	r26, r18
    1724:	8a 2f       	mov	r24, r26
    1726:	82 1b       	sub	r24, r18
    1728:	84 17       	cp	r24, r20
    172a:	18 f4       	brcc	.+6      	; 0x1732 <twi_readFrom+0x88>
    172c:	8d 91       	ld	r24, X+
    172e:	81 93       	st	Z+, r24
    1730:	f9 cf       	rjmp	.-14     	; 0x1724 <twi_readFrom+0x7a>
    1732:	84 2f       	mov	r24, r20
    1734:	08 95       	ret
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	08 95       	ret

0000173a <twi_writeTo>:
    173a:	0f 93       	push	r16
    173c:	41 32       	cpi	r20, 0x21	; 33
    173e:	08 f0       	brcs	.+2      	; 0x1742 <twi_writeTo+0x8>
    1740:	4a c0       	rjmp	.+148    	; 0x17d6 <twi_writeTo+0x9c>
    1742:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <twi_state>
    1746:	91 11       	cpse	r25, r1
    1748:	fc cf       	rjmp	.-8      	; 0x1742 <twi_writeTo+0x8>
    174a:	32 e0       	ldi	r19, 0x02	; 2
    174c:	30 93 f0 02 	sts	0x02F0, r19	; 0x8002f0 <twi_state>
    1750:	00 93 ee 02 	sts	0x02EE, r16	; 0x8002ee <twi_sendStop>
    1754:	3f ef       	ldi	r19, 0xFF	; 255
    1756:	30 93 83 02 	sts	0x0283, r19	; 0x800283 <twi_error>
    175a:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <twi_masterBufferIndex>
    175e:	40 93 c7 02 	sts	0x02C7, r20	; 0x8002c7 <twi_masterBufferLength>
    1762:	fb 01       	movw	r30, r22
    1764:	69 ec       	ldi	r22, 0xC9	; 201
    1766:	72 e0       	ldi	r23, 0x02	; 2
    1768:	db 01       	movw	r26, r22
    176a:	3a 2f       	mov	r19, r26
    176c:	36 1b       	sub	r19, r22
    176e:	34 17       	cp	r19, r20
    1770:	18 f4       	brcc	.+6      	; 0x1778 <twi_writeTo+0x3e>
    1772:	31 91       	ld	r19, Z+
    1774:	3d 93       	st	X+, r19
    1776:	f9 cf       	rjmp	.-14     	; 0x176a <twi_writeTo+0x30>
    1778:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <twi_slarw>
    177c:	30 91 ef 02 	lds	r19, 0x02EF	; 0x8002ef <twi_slarw>
    1780:	88 0f       	add	r24, r24
    1782:	83 2b       	or	r24, r19
    1784:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <twi_slarw>
    1788:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <twi_inRepStart>
    178c:	81 30       	cpi	r24, 0x01	; 1
    178e:	61 f4       	brne	.+24     	; 0x17a8 <twi_writeTo+0x6e>
    1790:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <twi_inRepStart>
    1794:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <twi_slarw>
    1798:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    179c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    17a0:	83 fd       	sbrc	r24, 3
    17a2:	f8 cf       	rjmp	.-16     	; 0x1794 <twi_writeTo+0x5a>
    17a4:	85 ec       	ldi	r24, 0xC5	; 197
    17a6:	01 c0       	rjmp	.+2      	; 0x17aa <twi_writeTo+0x70>
    17a8:	85 ee       	ldi	r24, 0xE5	; 229
    17aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    17ae:	22 23       	and	r18, r18
    17b0:	21 f0       	breq	.+8      	; 0x17ba <twi_writeTo+0x80>
    17b2:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <twi_state>
    17b6:	82 30       	cpi	r24, 0x02	; 2
    17b8:	d1 f3       	breq	.-12     	; 0x17ae <twi_writeTo+0x74>
    17ba:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <twi_error>
    17be:	8f 3f       	cpi	r24, 0xFF	; 255
    17c0:	79 f0       	breq	.+30     	; 0x17e0 <twi_writeTo+0xa6>
    17c2:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <twi_error>
    17c6:	80 32       	cpi	r24, 0x20	; 32
    17c8:	41 f0       	breq	.+16     	; 0x17da <twi_writeTo+0xa0>
    17ca:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <twi_error>
    17ce:	80 33       	cpi	r24, 0x30	; 48
    17d0:	31 f0       	breq	.+12     	; 0x17de <twi_writeTo+0xa4>
    17d2:	94 e0       	ldi	r25, 0x04	; 4
    17d4:	05 c0       	rjmp	.+10     	; 0x17e0 <twi_writeTo+0xa6>
    17d6:	91 e0       	ldi	r25, 0x01	; 1
    17d8:	03 c0       	rjmp	.+6      	; 0x17e0 <twi_writeTo+0xa6>
    17da:	92 e0       	ldi	r25, 0x02	; 2
    17dc:	01 c0       	rjmp	.+2      	; 0x17e0 <twi_writeTo+0xa6>
    17de:	93 e0       	ldi	r25, 0x03	; 3
    17e0:	89 2f       	mov	r24, r25
    17e2:	0f 91       	pop	r16
    17e4:	08 95       	ret

000017e6 <twi_transmit>:
    17e6:	40 91 a5 02 	lds	r20, 0x02A5	; 0x8002a5 <twi_txBufferLength>
    17ea:	26 2f       	mov	r18, r22
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	24 0f       	add	r18, r20
    17f0:	31 1d       	adc	r19, r1
    17f2:	21 32       	cpi	r18, 0x21	; 33
    17f4:	31 05       	cpc	r19, r1
    17f6:	dc f4       	brge	.+54     	; 0x182e <twi_transmit+0x48>
    17f8:	20 91 f0 02 	lds	r18, 0x02F0	; 0x8002f0 <twi_state>
    17fc:	24 30       	cpi	r18, 0x04	; 4
    17fe:	c9 f4       	brne	.+50     	; 0x1832 <twi_transmit+0x4c>
    1800:	fc 01       	movw	r30, r24
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	86 17       	cp	r24, r22
    1808:	58 f4       	brcc	.+22     	; 0x1820 <twi_transmit+0x3a>
    180a:	30 91 a5 02 	lds	r19, 0x02A5	; 0x8002a5 <twi_txBufferLength>
    180e:	21 91       	ld	r18, Z+
    1810:	dc 01       	movw	r26, r24
    1812:	a9 55       	subi	r26, 0x59	; 89
    1814:	bd 4f       	sbci	r27, 0xFD	; 253
    1816:	a3 0f       	add	r26, r19
    1818:	b1 1d       	adc	r27, r1
    181a:	2c 93       	st	X, r18
    181c:	01 96       	adiw	r24, 0x01	; 1
    181e:	f3 cf       	rjmp	.-26     	; 0x1806 <twi_transmit+0x20>
    1820:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <twi_txBufferLength>
    1824:	68 0f       	add	r22, r24
    1826:	60 93 a5 02 	sts	0x02A5, r22	; 0x8002a5 <twi_txBufferLength>
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	08 95       	ret
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	08 95       	ret
    1832:	82 e0       	ldi	r24, 0x02	; 2
    1834:	08 95       	ret

00001836 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1836:	85 ed       	ldi	r24, 0xD5	; 213
    1838:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    183c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1840:	84 fd       	sbrc	r24, 4
    1842:	fc cf       	rjmp	.-8      	; 0x183c <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1844:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <twi_state>
    1848:	08 95       	ret

0000184a <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    184a:	85 ec       	ldi	r24, 0xC5	; 197
    184c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    1850:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <twi_state>
    1854:	08 95       	ret

00001856 <__vector_24>:
}

ISR(TWI_vect)
{
    1856:	1f 92       	push	r1
    1858:	0f 92       	push	r0
    185a:	0f b6       	in	r0, 0x3f	; 63
    185c:	0f 92       	push	r0
    185e:	11 24       	eor	r1, r1
    1860:	2f 93       	push	r18
    1862:	3f 93       	push	r19
    1864:	4f 93       	push	r20
    1866:	5f 93       	push	r21
    1868:	6f 93       	push	r22
    186a:	7f 93       	push	r23
    186c:	8f 93       	push	r24
    186e:	9f 93       	push	r25
    1870:	af 93       	push	r26
    1872:	bf 93       	push	r27
    1874:	ef 93       	push	r30
    1876:	ff 93       	push	r31
  switch(TW_STATUS){
    1878:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    187c:	88 7f       	andi	r24, 0xF8	; 248
    187e:	80 36       	cpi	r24, 0x60	; 96
    1880:	09 f4       	brne	.+2      	; 0x1884 <__vector_24+0x2e>
    1882:	9e c0       	rjmp	.+316    	; 0x19c0 <__vector_24+0x16a>
    1884:	78 f5       	brcc	.+94     	; 0x18e4 <__vector_24+0x8e>
    1886:	88 32       	cpi	r24, 0x28	; 40
    1888:	09 f4       	brne	.+2      	; 0x188c <__vector_24+0x36>
    188a:	5d c0       	rjmp	.+186    	; 0x1946 <__vector_24+0xf0>
    188c:	90 f4       	brcc	.+36     	; 0x18b2 <__vector_24+0x5c>
    188e:	80 31       	cpi	r24, 0x10	; 16
    1890:	09 f4       	brne	.+2      	; 0x1894 <__vector_24+0x3e>
    1892:	56 c0       	rjmp	.+172    	; 0x1940 <__vector_24+0xea>
    1894:	38 f4       	brcc	.+14     	; 0x18a4 <__vector_24+0x4e>
    1896:	88 23       	and	r24, r24
    1898:	09 f4       	brne	.+2      	; 0x189c <__vector_24+0x46>
    189a:	f5 c0       	rjmp	.+490    	; 0x1a86 <__vector_24+0x230>
    189c:	88 30       	cpi	r24, 0x08	; 8
    189e:	09 f4       	brne	.+2      	; 0x18a2 <__vector_24+0x4c>
    18a0:	4f c0       	rjmp	.+158    	; 0x1940 <__vector_24+0xea>
    18a2:	f5 c0       	rjmp	.+490    	; 0x1a8e <__vector_24+0x238>
    18a4:	88 31       	cpi	r24, 0x18	; 24
    18a6:	09 f4       	brne	.+2      	; 0x18aa <__vector_24+0x54>
    18a8:	4e c0       	rjmp	.+156    	; 0x1946 <__vector_24+0xf0>
    18aa:	80 32       	cpi	r24, 0x20	; 32
    18ac:	09 f4       	brne	.+2      	; 0x18b0 <__vector_24+0x5a>
    18ae:	5f c0       	rjmp	.+190    	; 0x196e <__vector_24+0x118>
    18b0:	ee c0       	rjmp	.+476    	; 0x1a8e <__vector_24+0x238>
    18b2:	80 34       	cpi	r24, 0x40	; 64
    18b4:	09 f4       	brne	.+2      	; 0x18b8 <__vector_24+0x62>
    18b6:	6a c0       	rjmp	.+212    	; 0x198c <__vector_24+0x136>
    18b8:	58 f4       	brcc	.+22     	; 0x18d0 <__vector_24+0x7a>
    18ba:	80 33       	cpi	r24, 0x30	; 48
    18bc:	09 f4       	brne	.+2      	; 0x18c0 <__vector_24+0x6a>
    18be:	57 c0       	rjmp	.+174    	; 0x196e <__vector_24+0x118>
    18c0:	88 33       	cpi	r24, 0x38	; 56
    18c2:	09 f0       	breq	.+2      	; 0x18c6 <__vector_24+0x70>
    18c4:	e4 c0       	rjmp	.+456    	; 0x1a8e <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    18c6:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <twi_error>
      twi_releaseBus();
    18ca:	0e 94 25 0c 	call	0x184a	; 0x184a <twi_releaseBus>
      break;
    18ce:	df c0       	rjmp	.+446    	; 0x1a8e <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    18d0:	80 35       	cpi	r24, 0x50	; 80
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <__vector_24+0x80>
    18d4:	4f c0       	rjmp	.+158    	; 0x1974 <__vector_24+0x11e>
    18d6:	88 35       	cpi	r24, 0x58	; 88
    18d8:	09 f4       	brne	.+2      	; 0x18dc <__vector_24+0x86>
    18da:	5d c0       	rjmp	.+186    	; 0x1996 <__vector_24+0x140>
    18dc:	88 34       	cpi	r24, 0x48	; 72
    18de:	09 f0       	breq	.+2      	; 0x18e2 <__vector_24+0x8c>
    18e0:	d6 c0       	rjmp	.+428    	; 0x1a8e <__vector_24+0x238>
    18e2:	d3 c0       	rjmp	.+422    	; 0x1a8a <__vector_24+0x234>
    18e4:	88 39       	cpi	r24, 0x98	; 152
    18e6:	09 f4       	brne	.+2      	; 0x18ea <__vector_24+0x94>
    18e8:	c4 c0       	rjmp	.+392    	; 0x1a72 <__vector_24+0x21c>
    18ea:	a8 f4       	brcc	.+42     	; 0x1916 <__vector_24+0xc0>
    18ec:	88 37       	cpi	r24, 0x78	; 120
    18ee:	09 f4       	brne	.+2      	; 0x18f2 <__vector_24+0x9c>
    18f0:	67 c0       	rjmp	.+206    	; 0x19c0 <__vector_24+0x16a>
    18f2:	38 f4       	brcc	.+14     	; 0x1902 <__vector_24+0xac>
    18f4:	88 36       	cpi	r24, 0x68	; 104
    18f6:	09 f4       	brne	.+2      	; 0x18fa <__vector_24+0xa4>
    18f8:	63 c0       	rjmp	.+198    	; 0x19c0 <__vector_24+0x16a>
    18fa:	80 37       	cpi	r24, 0x70	; 112
    18fc:	09 f4       	brne	.+2      	; 0x1900 <__vector_24+0xaa>
    18fe:	60 c0       	rjmp	.+192    	; 0x19c0 <__vector_24+0x16a>
    1900:	c6 c0       	rjmp	.+396    	; 0x1a8e <__vector_24+0x238>
    1902:	88 38       	cpi	r24, 0x88	; 136
    1904:	09 f4       	brne	.+2      	; 0x1908 <__vector_24+0xb2>
    1906:	b5 c0       	rjmp	.+362    	; 0x1a72 <__vector_24+0x21c>
    1908:	80 39       	cpi	r24, 0x90	; 144
    190a:	09 f4       	brne	.+2      	; 0x190e <__vector_24+0xb8>
    190c:	5f c0       	rjmp	.+190    	; 0x19cc <__vector_24+0x176>
    190e:	80 38       	cpi	r24, 0x80	; 128
    1910:	09 f0       	breq	.+2      	; 0x1914 <__vector_24+0xbe>
    1912:	bd c0       	rjmp	.+378    	; 0x1a8e <__vector_24+0x238>
    1914:	5b c0       	rjmp	.+182    	; 0x19cc <__vector_24+0x176>
    1916:	80 3b       	cpi	r24, 0xB0	; 176
    1918:	09 f4       	brne	.+2      	; 0x191c <__vector_24+0xc6>
    191a:	83 c0       	rjmp	.+262    	; 0x1a22 <__vector_24+0x1cc>
    191c:	38 f4       	brcc	.+14     	; 0x192c <__vector_24+0xd6>
    191e:	80 3a       	cpi	r24, 0xA0	; 160
    1920:	09 f4       	brne	.+2      	; 0x1924 <__vector_24+0xce>
    1922:	66 c0       	rjmp	.+204    	; 0x19f0 <__vector_24+0x19a>
    1924:	88 3a       	cpi	r24, 0xA8	; 168
    1926:	09 f4       	brne	.+2      	; 0x192a <__vector_24+0xd4>
    1928:	7c c0       	rjmp	.+248    	; 0x1a22 <__vector_24+0x1cc>
    192a:	b1 c0       	rjmp	.+354    	; 0x1a8e <__vector_24+0x238>
    192c:	80 3c       	cpi	r24, 0xC0	; 192
    192e:	09 f4       	brne	.+2      	; 0x1932 <__vector_24+0xdc>
    1930:	a4 c0       	rjmp	.+328    	; 0x1a7a <__vector_24+0x224>
    1932:	88 3c       	cpi	r24, 0xC8	; 200
    1934:	09 f4       	brne	.+2      	; 0x1938 <__vector_24+0xe2>
    1936:	a1 c0       	rjmp	.+322    	; 0x1a7a <__vector_24+0x224>
    1938:	88 3b       	cpi	r24, 0xB8	; 184
    193a:	09 f4       	brne	.+2      	; 0x193e <__vector_24+0xe8>
    193c:	87 c0       	rjmp	.+270    	; 0x1a4c <__vector_24+0x1f6>
    193e:	a7 c0       	rjmp	.+334    	; 0x1a8e <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1940:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <twi_slarw>
    1944:	10 c0       	rjmp	.+32     	; 0x1966 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1946:	90 91 c8 02 	lds	r25, 0x02C8	; 0x8002c8 <twi_masterBufferIndex>
    194a:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <twi_masterBufferLength>
    194e:	98 17       	cp	r25, r24
    1950:	70 f5       	brcc	.+92     	; 0x19ae <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1952:	e0 91 c8 02 	lds	r30, 0x02C8	; 0x8002c8 <twi_masterBufferIndex>
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	8e 0f       	add	r24, r30
    195a:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <twi_masterBufferIndex>
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	e7 53       	subi	r30, 0x37	; 55
    1962:	fd 4f       	sbci	r31, 0xFD	; 253
    1964:	80 81       	ld	r24, Z
    1966:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    196a:	85 ec       	ldi	r24, 0xC5	; 197
    196c:	83 c0       	rjmp	.+262    	; 0x1a74 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    196e:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <twi_error>
    1972:	8b c0       	rjmp	.+278    	; 0x1a8a <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1974:	e0 91 c8 02 	lds	r30, 0x02C8	; 0x8002c8 <twi_masterBufferIndex>
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	8e 0f       	add	r24, r30
    197c:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <twi_masterBufferIndex>
    1980:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	e7 53       	subi	r30, 0x37	; 55
    1988:	fd 4f       	sbci	r31, 0xFD	; 253
    198a:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    198c:	90 91 c8 02 	lds	r25, 0x02C8	; 0x8002c8 <twi_masterBufferIndex>
    1990:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <twi_masterBufferLength>
    1994:	6b c0       	rjmp	.+214    	; 0x1a6c <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1996:	e0 91 c8 02 	lds	r30, 0x02C8	; 0x8002c8 <twi_masterBufferIndex>
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	8e 0f       	add	r24, r30
    199e:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <twi_masterBufferIndex>
    19a2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	e7 53       	subi	r30, 0x37	; 55
    19aa:	fd 4f       	sbci	r31, 0xFD	; 253
    19ac:	80 83       	st	Z, r24
	if (twi_sendStop)
    19ae:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <twi_sendStop>
    19b2:	81 11       	cpse	r24, r1
    19b4:	6a c0       	rjmp	.+212    	; 0x1a8a <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    19bc:	84 ea       	ldi	r24, 0xA4	; 164
    19be:	5e c0       	rjmp	.+188    	; 0x1a7c <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    19c0:	83 e0       	ldi	r24, 0x03	; 3
    19c2:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    19c6:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <twi_rxBufferIndex>
    19ca:	cf cf       	rjmp	.-98     	; 0x196a <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    19cc:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <twi_rxBufferIndex>
    19d0:	80 32       	cpi	r24, 0x20	; 32
    19d2:	08 f0       	brcs	.+2      	; 0x19d6 <__vector_24+0x180>
    19d4:	4e c0       	rjmp	.+156    	; 0x1a72 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    19d6:	e0 91 84 02 	lds	r30, 0x0284	; 0x800284 <twi_rxBufferIndex>
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	8e 0f       	add	r24, r30
    19de:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <twi_rxBufferIndex>
    19e2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	eb 57       	subi	r30, 0x7B	; 123
    19ea:	fd 4f       	sbci	r31, 0xFD	; 253
    19ec:	80 83       	st	Z, r24
    19ee:	bd cf       	rjmp	.-134    	; 0x196a <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    19f0:	0e 94 25 0c 	call	0x184a	; 0x184a <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    19f4:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <twi_rxBufferIndex>
    19f8:	80 32       	cpi	r24, 0x20	; 32
    19fa:	30 f4       	brcc	.+12     	; 0x1a08 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    19fc:	e0 91 84 02 	lds	r30, 0x0284	; 0x800284 <twi_rxBufferIndex>
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	eb 57       	subi	r30, 0x7B	; 123
    1a04:	fd 4f       	sbci	r31, 0xFD	; 253
    1a06:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1a08:	60 91 84 02 	lds	r22, 0x0284	; 0x800284 <twi_rxBufferIndex>
    1a0c:	70 e0       	ldi	r23, 0x00	; 0
    1a0e:	e0 91 e9 02 	lds	r30, 0x02E9	; 0x8002e9 <twi_onSlaveReceive>
    1a12:	f0 91 ea 02 	lds	r31, 0x02EA	; 0x8002ea <twi_onSlaveReceive+0x1>
    1a16:	85 e8       	ldi	r24, 0x85	; 133
    1a18:	92 e0       	ldi	r25, 0x02	; 2
    1a1a:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1a1c:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <twi_rxBufferIndex>
      break;
    1a20:	36 c0       	rjmp	.+108    	; 0x1a8e <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1a22:	84 e0       	ldi	r24, 0x04	; 4
    1a24:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1a28:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1a2c:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1a30:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <twi_onSlaveTransmit>
    1a34:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <twi_onSlaveTransmit+0x1>
    1a38:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1a3a:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <twi_txBufferLength>
    1a3e:	81 11       	cpse	r24, r1
    1a40:	05 c0       	rjmp	.+10     	; 0x1a4c <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    1a48:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1a4c:	e0 91 a6 02 	lds	r30, 0x02A6	; 0x8002a6 <twi_txBufferIndex>
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	8e 0f       	add	r24, r30
    1a54:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <twi_txBufferIndex>
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	e9 55       	subi	r30, 0x59	; 89
    1a5c:	fd 4f       	sbci	r31, 0xFD	; 253
    1a5e:	80 81       	ld	r24, Z
    1a60:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1a64:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <twi_txBufferIndex>
    1a68:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <twi_txBufferLength>
    1a6c:	98 17       	cp	r25, r24
    1a6e:	08 f4       	brcc	.+2      	; 0x1a72 <__vector_24+0x21c>
    1a70:	7c cf       	rjmp	.-264    	; 0x196a <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1a72:	85 e8       	ldi	r24, 0x85	; 133
    1a74:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1a78:	0a c0       	rjmp	.+20     	; 0x1a8e <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1a7a:	85 ec       	ldi	r24, 0xC5	; 197
    1a7c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1a80:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <twi_state>
      break;
    1a84:	04 c0       	rjmp	.+8      	; 0x1a8e <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1a86:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <twi_error>
      twi_stop();
    1a8a:	0e 94 1b 0c 	call	0x1836	; 0x1836 <twi_stop>
      break;
  }
}
    1a8e:	ff 91       	pop	r31
    1a90:	ef 91       	pop	r30
    1a92:	bf 91       	pop	r27
    1a94:	af 91       	pop	r26
    1a96:	9f 91       	pop	r25
    1a98:	8f 91       	pop	r24
    1a9a:	7f 91       	pop	r23
    1a9c:	6f 91       	pop	r22
    1a9e:	5f 91       	pop	r21
    1aa0:	4f 91       	pop	r20
    1aa2:	3f 91       	pop	r19
    1aa4:	2f 91       	pop	r18
    1aa6:	0f 90       	pop	r0
    1aa8:	0f be       	out	0x3f, r0	; 63
    1aaa:	0f 90       	pop	r0
    1aac:	1f 90       	pop	r1
    1aae:	18 95       	reti

00001ab0 <turnOffPWM>:
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
    1ab0:	83 30       	cpi	r24, 0x03	; 3
    1ab2:	81 f0       	breq	.+32     	; 0x1ad4 <turnOffPWM+0x24>
    1ab4:	28 f4       	brcc	.+10     	; 0x1ac0 <turnOffPWM+0x10>
    1ab6:	81 30       	cpi	r24, 0x01	; 1
    1ab8:	99 f0       	breq	.+38     	; 0x1ae0 <turnOffPWM+0x30>
    1aba:	82 30       	cpi	r24, 0x02	; 2
    1abc:	a1 f0       	breq	.+40     	; 0x1ae6 <turnOffPWM+0x36>
    1abe:	08 95       	ret
    1ac0:	87 30       	cpi	r24, 0x07	; 7
    1ac2:	a9 f0       	breq	.+42     	; 0x1aee <turnOffPWM+0x3e>
    1ac4:	88 30       	cpi	r24, 0x08	; 8
    1ac6:	b9 f0       	breq	.+46     	; 0x1af6 <turnOffPWM+0x46>
    1ac8:	84 30       	cpi	r24, 0x04	; 4
    1aca:	d1 f4       	brne	.+52     	; 0x1b00 <turnOffPWM+0x50>
    1acc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1ad0:	8f 7d       	andi	r24, 0xDF	; 223
    1ad2:	03 c0       	rjmp	.+6      	; 0x1ada <turnOffPWM+0x2a>
    1ad4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1ad8:	8f 77       	andi	r24, 0x7F	; 127
    1ada:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1ade:	08 95       	ret
    1ae0:	84 b5       	in	r24, 0x24	; 36
    1ae2:	8f 77       	andi	r24, 0x7F	; 127
    1ae4:	02 c0       	rjmp	.+4      	; 0x1aea <turnOffPWM+0x3a>
    1ae6:	84 b5       	in	r24, 0x24	; 36
    1ae8:	8f 7d       	andi	r24, 0xDF	; 223
    1aea:	84 bd       	out	0x24, r24	; 36
    1aec:	08 95       	ret
    1aee:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1af2:	8f 77       	andi	r24, 0x7F	; 127
    1af4:	03 c0       	rjmp	.+6      	; 0x1afc <turnOffPWM+0x4c>
    1af6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1afa:	8f 7d       	andi	r24, 0xDF	; 223
    1afc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1b00:	08 95       	ret

00001b02 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1b02:	1f 93       	push	r17
    1b04:	cf 93       	push	r28
    1b06:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1b08:	28 2f       	mov	r18, r24
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	f9 01       	movw	r30, r18
    1b0e:	e0 57       	subi	r30, 0x70	; 112
    1b10:	ff 4f       	sbci	r31, 0xFF	; 255
    1b12:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1b14:	f9 01       	movw	r30, r18
    1b16:	ec 55       	subi	r30, 0x5C	; 92
    1b18:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1b1c:	f9 01       	movw	r30, r18
    1b1e:	e8 54       	subi	r30, 0x48	; 72
    1b20:	ff 4f       	sbci	r31, 0xFF	; 255
    1b22:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1b24:	cc 23       	and	r28, r28
    1b26:	c9 f0       	breq	.+50     	; 0x1b5a <digitalWrite+0x58>
    1b28:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1b2a:	81 11       	cpse	r24, r1
    1b2c:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <turnOffPWM>

	out = portOutputRegister(port);
    1b30:	ec 2f       	mov	r30, r28
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	ee 0f       	add	r30, r30
    1b36:	ff 1f       	adc	r31, r31
    1b38:	e4 53       	subi	r30, 0x34	; 52
    1b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3c:	a5 91       	lpm	r26, Z+
    1b3e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1b40:	8f b7       	in	r24, 0x3f	; 63
	cli();
    1b42:	f8 94       	cli

	if (val == LOW) {
    1b44:	11 11       	cpse	r17, r1
    1b46:	05 c0       	rjmp	.+10     	; 0x1b52 <digitalWrite+0x50>
		*out &= ~bit;
    1b48:	9c 91       	ld	r25, X
    1b4a:	ed 2f       	mov	r30, r29
    1b4c:	e0 95       	com	r30
    1b4e:	e9 23       	and	r30, r25
    1b50:	02 c0       	rjmp	.+4      	; 0x1b56 <digitalWrite+0x54>
	} else {
		*out |= bit;
    1b52:	ec 91       	ld	r30, X
    1b54:	ed 2b       	or	r30, r29
    1b56:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    1b58:	8f bf       	out	0x3f, r24	; 63
}
    1b5a:	df 91       	pop	r29
    1b5c:	cf 91       	pop	r28
    1b5e:	1f 91       	pop	r17
    1b60:	08 95       	ret

00001b62 <__divmodhi4>:
    1b62:	97 fb       	bst	r25, 7
    1b64:	07 2e       	mov	r0, r23
    1b66:	16 f4       	brtc	.+4      	; 0x1b6c <__divmodhi4+0xa>
    1b68:	00 94       	com	r0
    1b6a:	07 d0       	rcall	.+14     	; 0x1b7a <__divmodhi4_neg1>
    1b6c:	77 fd       	sbrc	r23, 7
    1b6e:	09 d0       	rcall	.+18     	; 0x1b82 <__divmodhi4_neg2>
    1b70:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <__udivmodhi4>
    1b74:	07 fc       	sbrc	r0, 7
    1b76:	05 d0       	rcall	.+10     	; 0x1b82 <__divmodhi4_neg2>
    1b78:	3e f4       	brtc	.+14     	; 0x1b88 <__divmodhi4_exit>

00001b7a <__divmodhi4_neg1>:
    1b7a:	90 95       	com	r25
    1b7c:	81 95       	neg	r24
    1b7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b80:	08 95       	ret

00001b82 <__divmodhi4_neg2>:
    1b82:	70 95       	com	r23
    1b84:	61 95       	neg	r22
    1b86:	7f 4f       	sbci	r23, 0xFF	; 255

00001b88 <__divmodhi4_exit>:
    1b88:	08 95       	ret

00001b8a <__udivmodsi4>:
    1b8a:	a1 e2       	ldi	r26, 0x21	; 33
    1b8c:	1a 2e       	mov	r1, r26
    1b8e:	aa 1b       	sub	r26, r26
    1b90:	bb 1b       	sub	r27, r27
    1b92:	fd 01       	movw	r30, r26
    1b94:	0d c0       	rjmp	.+26     	; 0x1bb0 <__udivmodsi4_ep>

00001b96 <__udivmodsi4_loop>:
    1b96:	aa 1f       	adc	r26, r26
    1b98:	bb 1f       	adc	r27, r27
    1b9a:	ee 1f       	adc	r30, r30
    1b9c:	ff 1f       	adc	r31, r31
    1b9e:	a2 17       	cp	r26, r18
    1ba0:	b3 07       	cpc	r27, r19
    1ba2:	e4 07       	cpc	r30, r20
    1ba4:	f5 07       	cpc	r31, r21
    1ba6:	20 f0       	brcs	.+8      	; 0x1bb0 <__udivmodsi4_ep>
    1ba8:	a2 1b       	sub	r26, r18
    1baa:	b3 0b       	sbc	r27, r19
    1bac:	e4 0b       	sbc	r30, r20
    1bae:	f5 0b       	sbc	r31, r21

00001bb0 <__udivmodsi4_ep>:
    1bb0:	66 1f       	adc	r22, r22
    1bb2:	77 1f       	adc	r23, r23
    1bb4:	88 1f       	adc	r24, r24
    1bb6:	99 1f       	adc	r25, r25
    1bb8:	1a 94       	dec	r1
    1bba:	69 f7       	brne	.-38     	; 0x1b96 <__udivmodsi4_loop>
    1bbc:	60 95       	com	r22
    1bbe:	70 95       	com	r23
    1bc0:	80 95       	com	r24
    1bc2:	90 95       	com	r25
    1bc4:	9b 01       	movw	r18, r22
    1bc6:	ac 01       	movw	r20, r24
    1bc8:	bd 01       	movw	r22, r26
    1bca:	cf 01       	movw	r24, r30
    1bcc:	08 95       	ret

00001bce <__umulhisi3>:
    1bce:	a2 9f       	mul	r26, r18
    1bd0:	b0 01       	movw	r22, r0
    1bd2:	b3 9f       	mul	r27, r19
    1bd4:	c0 01       	movw	r24, r0
    1bd6:	a3 9f       	mul	r26, r19
    1bd8:	70 0d       	add	r23, r0
    1bda:	81 1d       	adc	r24, r1
    1bdc:	11 24       	eor	r1, r1
    1bde:	91 1d       	adc	r25, r1
    1be0:	b2 9f       	mul	r27, r18
    1be2:	70 0d       	add	r23, r0
    1be4:	81 1d       	adc	r24, r1
    1be6:	11 24       	eor	r1, r1
    1be8:	91 1d       	adc	r25, r1
    1bea:	08 95       	ret

00001bec <__muluhisi3>:
    1bec:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__umulhisi3>
    1bf0:	a5 9f       	mul	r26, r21
    1bf2:	90 0d       	add	r25, r0
    1bf4:	b4 9f       	mul	r27, r20
    1bf6:	90 0d       	add	r25, r0
    1bf8:	a4 9f       	mul	r26, r20
    1bfa:	80 0d       	add	r24, r0
    1bfc:	91 1d       	adc	r25, r1
    1bfe:	11 24       	eor	r1, r1
    1c00:	08 95       	ret

00001c02 <__mulshisi3>:
    1c02:	b7 ff       	sbrs	r27, 7
    1c04:	0c 94 f6 0d 	jmp	0x1bec	; 0x1bec <__muluhisi3>

00001c08 <__mulohisi3>:
    1c08:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <__muluhisi3>
    1c0c:	82 1b       	sub	r24, r18
    1c0e:	93 0b       	sbc	r25, r19
    1c10:	08 95       	ret

00001c12 <__udivmodhi4>:
    1c12:	aa 1b       	sub	r26, r26
    1c14:	bb 1b       	sub	r27, r27
    1c16:	51 e1       	ldi	r21, 0x11	; 17
    1c18:	07 c0       	rjmp	.+14     	; 0x1c28 <__udivmodhi4_ep>

00001c1a <__udivmodhi4_loop>:
    1c1a:	aa 1f       	adc	r26, r26
    1c1c:	bb 1f       	adc	r27, r27
    1c1e:	a6 17       	cp	r26, r22
    1c20:	b7 07       	cpc	r27, r23
    1c22:	10 f0       	brcs	.+4      	; 0x1c28 <__udivmodhi4_ep>
    1c24:	a6 1b       	sub	r26, r22
    1c26:	b7 0b       	sbc	r27, r23

00001c28 <__udivmodhi4_ep>:
    1c28:	88 1f       	adc	r24, r24
    1c2a:	99 1f       	adc	r25, r25
    1c2c:	5a 95       	dec	r21
    1c2e:	a9 f7       	brne	.-22     	; 0x1c1a <__udivmodhi4_loop>
    1c30:	80 95       	com	r24
    1c32:	90 95       	com	r25
    1c34:	bc 01       	movw	r22, r24
    1c36:	cd 01       	movw	r24, r26
    1c38:	08 95       	ret

00001c3a <__tablejump2__>:
    1c3a:	ee 0f       	add	r30, r30
    1c3c:	ff 1f       	adc	r31, r31
    1c3e:	05 90       	lpm	r0, Z+
    1c40:	f4 91       	lpm	r31, Z
    1c42:	e0 2d       	mov	r30, r0
    1c44:	09 94       	ijmp

00001c46 <_exit>:
    1c46:	f8 94       	cli

00001c48 <__stop_program>:
    1c48:	ff cf       	rjmp	.-2      	; 0x1c48 <__stop_program>
