
ArduSketch3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000086  00800100  000022dc  00002370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001aa  00800186  00800186  000023f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000023f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002428  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007e8  00000000  00000000  00002468  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00010667  00000000  00000000  00002c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003058  00000000  00000000  000132b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000043ea  00000000  00000000  0001630f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001798  00000000  00000000  0001a6fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003bb2  00000000  00000000  0001be94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000082a9  00000000  00000000  0001fa46  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007c0  00000000  00000000  00027cef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__ctors_end>
       4:	0c 94 de 06 	jmp	0xdbc	; 0xdbc <__vector_1>
       8:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__vector_2>
       c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      10:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      14:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      18:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      1c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      20:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      24:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      28:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      2c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__vector_11>
      30:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      34:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      38:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      3c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      40:	0c 94 2c 07 	jmp	0xe58	; 0xe58 <__vector_16>
      44:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      48:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <__vector_18>
      4c:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__vector_19>
      50:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      54:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      58:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      5c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      60:	0c 94 c5 0f 	jmp	0x1f8a	; 0x1f8a <__vector_24>
      64:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <_ZL17monthShortNames_P>:
      b8:	45 72 72 4a 61 6e 46 65 62 4d 61 72 41 70 72 4d     ErrJanFebMarAprM
      c8:	61 79 4a 75 6e 4a 75 6c 41 75 67 53 65 70 4f 63     ayJunJulAugSepOc
      d8:	74 4e 6f 76 44 65 63 00                             tNovDec.

000000e0 <__ctors_start>:
      e0:	f8 03       	fmulsu	r23, r16
      e2:	9f 05       	cpc	r25, r15
      e4:	b9 08       	sbc	r11, r9
      e6:	cc 0e       	add	r12, r28

000000e8 <__ctors_end>:
      e8:	11 24       	eor	r1, r1
      ea:	1f be       	out	0x3f, r1	; 63
      ec:	cf ef       	ldi	r28, 0xFF	; 255
      ee:	d8 e0       	ldi	r29, 0x08	; 8
      f0:	de bf       	out	0x3e, r29	; 62
      f2:	cd bf       	out	0x3d, r28	; 61

000000f4 <__do_copy_data>:
      f4:	11 e0       	ldi	r17, 0x01	; 1
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b1 e0       	ldi	r27, 0x01	; 1
      fa:	ec ed       	ldi	r30, 0xDC	; 220
      fc:	f2 e2       	ldi	r31, 0x22	; 34
      fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x10>
     100:	05 90       	lpm	r0, Z+
     102:	0d 92       	st	X+, r0
     104:	a6 38       	cpi	r26, 0x86	; 134
     106:	b1 07       	cpc	r27, r17
     108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0xc>

0000010a <__do_clear_bss>:
     10a:	23 e0       	ldi	r18, 0x03	; 3
     10c:	a6 e8       	ldi	r26, 0x86	; 134
     10e:	b1 e0       	ldi	r27, 0x01	; 1
     110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
     112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
     114:	a0 33       	cpi	r26, 0x30	; 48
     116:	b2 07       	cpc	r27, r18
     118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>

0000011a <__do_global_ctors>:
     11a:	10 e0       	ldi	r17, 0x00	; 0
     11c:	c4 e7       	ldi	r28, 0x74	; 116
     11e:	d0 e0       	ldi	r29, 0x00	; 0
     120:	04 c0       	rjmp	.+8      	; 0x12a <__do_global_ctors+0x10>
     122:	21 97       	sbiw	r28, 0x01	; 1
     124:	fe 01       	movw	r30, r28
     126:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__tablejump2__>
     12a:	c0 37       	cpi	r28, 0x70	; 112
     12c:	d1 07       	cpc	r29, r17
     12e:	c9 f7       	brne	.-14     	; 0x122 <__do_global_ctors+0x8>
     130:	0e 94 45 03 	call	0x68a	; 0x68a <main>
     134:	0c 94 6c 11 	jmp	0x22d8	; 0x22d8 <_exit>

00000138 <__bad_interrupt>:
     138:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000013c <_Z8alarmIsrv>:
		eeprom_write_byte((uint8_t *)alarm2_addr+i, u.byte_array[0+i]);
	}
}


liftRelayArray::liftRelayArray()
     13c:	81 e0       	ldi	r24, 0x01	; 1
     13e:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <alarmIsrWasCalled>
     142:	08 95       	ret

00000144 <_ZlsR5PrintRK6_BASED>:
     144:	cf 93       	push	r28
     146:	df 93       	push	r29
     148:	ec 01       	movw	r28, r24
     14a:	fb 01       	movw	r30, r22
     14c:	24 81       	ldd	r18, Z+4	; 0x04
     14e:	35 81       	ldd	r19, Z+5	; 0x05
     150:	40 81       	ld	r20, Z
     152:	51 81       	ldd	r21, Z+1	; 0x01
     154:	62 81       	ldd	r22, Z+2	; 0x02
     156:	73 81       	ldd	r23, Z+3	; 0x03
     158:	0e 94 75 06 	call	0xcea	; 0xcea <_ZN5Print5printEli>
     15c:	ce 01       	movw	r24, r28
     15e:	df 91       	pop	r29
     160:	cf 91       	pop	r28
     162:	08 95       	ret

00000164 <__vector_11>:
     164:	1f 92       	push	r1
     166:	0f 92       	push	r0
     168:	0f b6       	in	r0, 0x3f	; 63
     16a:	0f 92       	push	r0
     16c:	11 24       	eor	r1, r1
     16e:	2f 93       	push	r18
     170:	8f 93       	push	r24
     172:	9f 93       	push	r25
     174:	8f e2       	ldi	r24, 0x2F	; 47
     176:	98 ef       	ldi	r25, 0xF8	; 248
     178:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     17c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     180:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <T1Timer>
     184:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <T1Timer+0x1>
     188:	84 3f       	cpi	r24, 0xF4	; 244
     18a:	91 40       	sbci	r25, 0x01	; 1
     18c:	50 f0       	brcs	.+20     	; 0x1a2 <__vector_11+0x3e>
     18e:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <test>
     192:	8f 5f       	subi	r24, 0xFF	; 255
     194:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <test>
     198:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <T1Timer+0x1>
     19c:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <T1Timer>
     1a0:	09 c0       	rjmp	.+18     	; 0x1b4 <__vector_11+0x50>
     1a2:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <T1Timer>
     1a6:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <T1Timer+0x1>
     1aa:	01 96       	adiw	r24, 0x01	; 1
     1ac:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <T1Timer+0x1>
     1b0:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <T1Timer>
     1b4:	9f 91       	pop	r25
     1b6:	8f 91       	pop	r24
     1b8:	2f 91       	pop	r18
     1ba:	0f 90       	pop	r0
     1bc:	0f be       	out	0x3f, r0	; 63
     1be:	0f 90       	pop	r0
     1c0:	1f 90       	pop	r1
     1c2:	18 95       	reti

000001c4 <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t>:
     1c4:	ef 92       	push	r14
     1c6:	ff 92       	push	r15
     1c8:	0f 93       	push	r16
     1ca:	1f 93       	push	r17
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29
     1d0:	cd b7       	in	r28, 0x3d	; 61
     1d2:	de b7       	in	r29, 0x3e	; 62
     1d4:	27 97       	sbiw	r28, 0x07	; 7
     1d6:	0f b6       	in	r0, 0x3f	; 63
     1d8:	f8 94       	cli
     1da:	de bf       	out	0x3e, r29	; 62
     1dc:	0f be       	out	0x3f, r0	; 63
     1de:	cd bf       	out	0x3d, r28	; 61
     1e0:	5e 83       	std	Y+6, r21	; 0x06
     1e2:	f2 2e       	mov	r15, r18
     1e4:	e4 2e       	mov	r14, r20
     1e6:	89 e0       	ldi	r24, 0x09	; 9
     1e8:	84 17       	cp	r24, r20
     1ea:	18 f4       	brcc	.+6      	; 0x1f2 <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0x2e>
     1ec:	6e e4       	ldi	r22, 0x4E	; 78
     1ee:	71 e0       	ldi	r23, 0x01	; 1
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0x32>
     1f2:	65 e0       	ldi	r22, 0x05	; 5
     1f4:	71 e0       	ldi	r23, 0x01	; 1
     1f6:	83 eb       	ldi	r24, 0xB3	; 179
     1f8:	91 e0       	ldi	r25, 0x01	; 1
     1fa:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN5Print5printEPKc>
     1fe:	4a e0       	ldi	r20, 0x0A	; 10
     200:	50 e0       	ldi	r21, 0x00	; 0
     202:	6e 2d       	mov	r22, r14
     204:	83 eb       	ldi	r24, 0xB3	; 179
     206:	91 e0       	ldi	r25, 0x01	; 1
     208:	0e 94 6e 06 	call	0xcdc	; 0xcdc <_ZN5Print5printEhi>
     20c:	60 e2       	ldi	r22, 0x20	; 32
     20e:	83 eb       	ldi	r24, 0xB3	; 179
     210:	91 e0       	ldi	r25, 0x01	; 1
     212:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_ZN5Print5printEc>
     216:	8e 81       	ldd	r24, Y+6	; 0x06
     218:	0e 94 8e 0b 	call	0x171c	; 0x171c <_Z13monthShortStrh>
     21c:	bc 01       	movw	r22, r24
     21e:	83 eb       	ldi	r24, 0xB3	; 179
     220:	91 e0       	ldi	r25, 0x01	; 1
     222:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN5Print5printEPKc>
     226:	60 e2       	ldi	r22, 0x20	; 32
     228:	83 eb       	ldi	r24, 0xB3	; 179
     22a:	91 e0       	ldi	r25, 0x01	; 1
     22c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_ZN5Print5printEc>
     230:	89 e0       	ldi	r24, 0x09	; 9
     232:	8f 15       	cp	r24, r15
     234:	18 f4       	brcc	.+6      	; 0x23c <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0x78>
     236:	6e e4       	ldi	r22, 0x4E	; 78
     238:	71 e0       	ldi	r23, 0x01	; 1
     23a:	02 c0       	rjmp	.+4      	; 0x240 <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0x7c>
     23c:	65 e0       	ldi	r22, 0x05	; 5
     23e:	71 e0       	ldi	r23, 0x01	; 1
     240:	83 eb       	ldi	r24, 0xB3	; 179
     242:	91 e0       	ldi	r25, 0x01	; 1
     244:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN5Print5printEPKc>
     248:	4a e0       	ldi	r20, 0x0A	; 10
     24a:	50 e0       	ldi	r21, 0x00	; 0
     24c:	6f 2d       	mov	r22, r15
     24e:	83 eb       	ldi	r24, 0xB3	; 179
     250:	91 e0       	ldi	r25, 0x01	; 1
     252:	0e 94 6e 06 	call	0xcdc	; 0xcdc <_ZN5Print5printEhi>
     256:	6a e3       	ldi	r22, 0x3A	; 58
     258:	83 eb       	ldi	r24, 0xB3	; 179
     25a:	91 e0       	ldi	r25, 0x01	; 1
     25c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_ZN5Print5printEc>
     260:	1a 30       	cpi	r17, 0x0A	; 10
     262:	18 f0       	brcs	.+6      	; 0x26a <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0xa6>
     264:	6e e4       	ldi	r22, 0x4E	; 78
     266:	71 e0       	ldi	r23, 0x01	; 1
     268:	02 c0       	rjmp	.+4      	; 0x26e <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0xaa>
     26a:	65 e0       	ldi	r22, 0x05	; 5
     26c:	71 e0       	ldi	r23, 0x01	; 1
     26e:	83 eb       	ldi	r24, 0xB3	; 179
     270:	91 e0       	ldi	r25, 0x01	; 1
     272:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN5Print5printEPKc>
     276:	4a e0       	ldi	r20, 0x0A	; 10
     278:	50 e0       	ldi	r21, 0x00	; 0
     27a:	61 2f       	mov	r22, r17
     27c:	83 eb       	ldi	r24, 0xB3	; 179
     27e:	91 e0       	ldi	r25, 0x01	; 1
     280:	0e 94 6e 06 	call	0xcdc	; 0xcdc <_ZN5Print5printEhi>
     284:	6a e3       	ldi	r22, 0x3A	; 58
     286:	83 eb       	ldi	r24, 0xB3	; 179
     288:	91 e0       	ldi	r25, 0x01	; 1
     28a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_ZN5Print5printEc>
     28e:	0a 30       	cpi	r16, 0x0A	; 10
     290:	18 f0       	brcs	.+6      	; 0x298 <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0xd4>
     292:	6e e4       	ldi	r22, 0x4E	; 78
     294:	71 e0       	ldi	r23, 0x01	; 1
     296:	02 c0       	rjmp	.+4      	; 0x29c <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0xd8>
     298:	65 e0       	ldi	r22, 0x05	; 5
     29a:	71 e0       	ldi	r23, 0x01	; 1
     29c:	83 eb       	ldi	r24, 0xB3	; 179
     29e:	91 e0       	ldi	r25, 0x01	; 1
     2a0:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN5Print5printEPKc>
     2a4:	4a e0       	ldi	r20, 0x0A	; 10
     2a6:	50 e0       	ldi	r21, 0x00	; 0
     2a8:	60 2f       	mov	r22, r16
     2aa:	83 eb       	ldi	r24, 0xB3	; 179
     2ac:	91 e0       	ldi	r25, 0x01	; 1
     2ae:	0e 94 6e 06 	call	0xcdc	; 0xcdc <_ZN5Print5printEhi>
     2b2:	83 eb       	ldi	r24, 0xB3	; 179
     2b4:	91 e0       	ldi	r25, 0x01	; 1
     2b6:	27 96       	adiw	r28, 0x07	; 7
     2b8:	0f b6       	in	r0, 0x3f	; 63
     2ba:	f8 94       	cli
     2bc:	de bf       	out	0x3e, r29	; 62
     2be:	0f be       	out	0x3f, r0	; 63
     2c0:	cd bf       	out	0x3d, r28	; 61
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	1f 91       	pop	r17
     2c8:	0f 91       	pop	r16
     2ca:	ff 90       	pop	r15
     2cc:	ef 90       	pop	r14
     2ce:	0c 94 14 06 	jmp	0xc28	; 0xc28 <_ZN5Print7printlnEv>

000002d2 <_ZN23Human_Machine_Interface13printDateTimeEm>:
     2d2:	cf 92       	push	r12
     2d4:	df 92       	push	r13
     2d6:	ef 92       	push	r14
     2d8:	ff 92       	push	r15
     2da:	0f 93       	push	r16
     2dc:	1f 93       	push	r17
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	00 d0       	rcall	.+0      	; 0x2e4 <_ZN23Human_Machine_Interface13printDateTimeEm+0x12>
     2e4:	00 d0       	rcall	.+0      	; 0x2e6 <_ZN23Human_Machine_Interface13printDateTimeEm+0x14>
     2e6:	00 d0       	rcall	.+0      	; 0x2e8 <_ZN23Human_Machine_Interface13printDateTimeEm+0x16>
     2e8:	cd b7       	in	r28, 0x3d	; 61
     2ea:	de b7       	in	r29, 0x3e	; 62
     2ec:	6a 01       	movw	r12, r20
     2ee:	7b 01       	movw	r14, r22
     2f0:	cb 01       	movw	r24, r22
     2f2:	ba 01       	movw	r22, r20
     2f4:	0e 94 c2 0c 	call	0x1984	; 0x1984 <_Z3daym>
     2f8:	09 2e       	mov	r0, r25
     2fa:	00 0c       	add	r0, r0
     2fc:	aa 0b       	sbc	r26, r26
     2fe:	bb 0b       	sbc	r27, r27
     300:	89 83       	std	Y+1, r24	; 0x01
     302:	9a 83       	std	Y+2, r25	; 0x02
     304:	ab 83       	std	Y+3, r26	; 0x03
     306:	bc 83       	std	Y+4, r27	; 0x04
     308:	8a e0       	ldi	r24, 0x0A	; 10
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	9e 83       	std	Y+6, r25	; 0x06
     30e:	8d 83       	std	Y+5, r24	; 0x05
     310:	c7 01       	movw	r24, r14
     312:	b6 01       	movw	r22, r12
     314:	0e 94 c2 0c 	call	0x1984	; 0x1984 <_Z3daym>
     318:	0a 97       	sbiw	r24, 0x0a	; 10
     31a:	1c f0       	brlt	.+6      	; 0x322 <_ZN23Human_Machine_Interface13printDateTimeEm+0x50>
     31c:	6e e4       	ldi	r22, 0x4E	; 78
     31e:	71 e0       	ldi	r23, 0x01	; 1
     320:	02 c0       	rjmp	.+4      	; 0x326 <_ZN23Human_Machine_Interface13printDateTimeEm+0x54>
     322:	65 e0       	ldi	r22, 0x05	; 5
     324:	71 e0       	ldi	r23, 0x01	; 1
     326:	83 eb       	ldi	r24, 0xB3	; 179
     328:	91 e0       	ldi	r25, 0x01	; 1
     32a:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN5Print5printEPKc>
     32e:	be 01       	movw	r22, r28
     330:	6f 5f       	subi	r22, 0xFF	; 255
     332:	7f 4f       	sbci	r23, 0xFF	; 255
     334:	83 eb       	ldi	r24, 0xB3	; 179
     336:	91 e0       	ldi	r25, 0x01	; 1
     338:	0e 94 a2 00 	call	0x144	; 0x144 <_ZlsR5PrintRK6_BASED>
     33c:	60 e2       	ldi	r22, 0x20	; 32
     33e:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_ZN5Print5printEc>
     342:	c7 01       	movw	r24, r14
     344:	b6 01       	movw	r22, r12
     346:	0e 94 ce 0c 	call	0x199c	; 0x199c <_Z4yearm>
     34a:	09 2e       	mov	r0, r25
     34c:	00 0c       	add	r0, r0
     34e:	aa 0b       	sbc	r26, r26
     350:	bb 0b       	sbc	r27, r27
     352:	89 83       	std	Y+1, r24	; 0x01
     354:	9a 83       	std	Y+2, r25	; 0x02
     356:	ab 83       	std	Y+3, r26	; 0x03
     358:	bc 83       	std	Y+4, r27	; 0x04
     35a:	0a e0       	ldi	r16, 0x0A	; 10
     35c:	10 e0       	ldi	r17, 0x00	; 0
     35e:	1e 83       	std	Y+6, r17	; 0x06
     360:	0d 83       	std	Y+5, r16	; 0x05
     362:	c7 01       	movw	r24, r14
     364:	b6 01       	movw	r22, r12
     366:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_Z5monthm>
     36a:	0e 94 8e 0b 	call	0x171c	; 0x171c <_Z13monthShortStrh>
     36e:	bc 01       	movw	r22, r24
     370:	83 eb       	ldi	r24, 0xB3	; 179
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN5Print5printEPKc>
     378:	67 e1       	ldi	r22, 0x17	; 23
     37a:	71 e0       	ldi	r23, 0x01	; 1
     37c:	83 eb       	ldi	r24, 0xB3	; 179
     37e:	91 e0       	ldi	r25, 0x01	; 1
     380:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN5Print5printEPKc>
     384:	be 01       	movw	r22, r28
     386:	6f 5f       	subi	r22, 0xFF	; 255
     388:	7f 4f       	sbci	r23, 0xFF	; 255
     38a:	83 eb       	ldi	r24, 0xB3	; 179
     38c:	91 e0       	ldi	r25, 0x01	; 1
     38e:	0e 94 a2 00 	call	0x144	; 0x144 <_ZlsR5PrintRK6_BASED>
     392:	60 e2       	ldi	r22, 0x20	; 32
     394:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_ZN5Print5printEc>
     398:	c7 01       	movw	r24, r14
     39a:	b6 01       	movw	r22, r12
     39c:	0e 94 b0 0c 	call	0x1960	; 0x1960 <_Z4hourm>
     3a0:	09 2e       	mov	r0, r25
     3a2:	00 0c       	add	r0, r0
     3a4:	aa 0b       	sbc	r26, r26
     3a6:	bb 0b       	sbc	r27, r27
     3a8:	89 83       	std	Y+1, r24	; 0x01
     3aa:	9a 83       	std	Y+2, r25	; 0x02
     3ac:	ab 83       	std	Y+3, r26	; 0x03
     3ae:	bc 83       	std	Y+4, r27	; 0x04
     3b0:	1e 83       	std	Y+6, r17	; 0x06
     3b2:	0d 83       	std	Y+5, r16	; 0x05
     3b4:	c7 01       	movw	r24, r14
     3b6:	b6 01       	movw	r22, r12
     3b8:	0e 94 b0 0c 	call	0x1960	; 0x1960 <_Z4hourm>
     3bc:	0a 97       	sbiw	r24, 0x0a	; 10
     3be:	1c f0       	brlt	.+6      	; 0x3c6 <_ZN23Human_Machine_Interface13printDateTimeEm+0xf4>
     3c0:	6e e4       	ldi	r22, 0x4E	; 78
     3c2:	71 e0       	ldi	r23, 0x01	; 1
     3c4:	02 c0       	rjmp	.+4      	; 0x3ca <_ZN23Human_Machine_Interface13printDateTimeEm+0xf8>
     3c6:	65 e0       	ldi	r22, 0x05	; 5
     3c8:	71 e0       	ldi	r23, 0x01	; 1
     3ca:	83 eb       	ldi	r24, 0xB3	; 179
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN5Print5printEPKc>
     3d2:	be 01       	movw	r22, r28
     3d4:	6f 5f       	subi	r22, 0xFF	; 255
     3d6:	7f 4f       	sbci	r23, 0xFF	; 255
     3d8:	83 eb       	ldi	r24, 0xB3	; 179
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	0e 94 a2 00 	call	0x144	; 0x144 <_ZlsR5PrintRK6_BASED>
     3e0:	6a e3       	ldi	r22, 0x3A	; 58
     3e2:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_ZN5Print5printEc>
     3e6:	c7 01       	movw	r24, r14
     3e8:	b6 01       	movw	r22, r12
     3ea:	0e 94 b6 0c 	call	0x196c	; 0x196c <_Z6minutem>
     3ee:	09 2e       	mov	r0, r25
     3f0:	00 0c       	add	r0, r0
     3f2:	aa 0b       	sbc	r26, r26
     3f4:	bb 0b       	sbc	r27, r27
     3f6:	89 83       	std	Y+1, r24	; 0x01
     3f8:	9a 83       	std	Y+2, r25	; 0x02
     3fa:	ab 83       	std	Y+3, r26	; 0x03
     3fc:	bc 83       	std	Y+4, r27	; 0x04
     3fe:	8a e0       	ldi	r24, 0x0A	; 10
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	9e 83       	std	Y+6, r25	; 0x06
     404:	8d 83       	std	Y+5, r24	; 0x05
     406:	c7 01       	movw	r24, r14
     408:	b6 01       	movw	r22, r12
     40a:	0e 94 b6 0c 	call	0x196c	; 0x196c <_Z6minutem>
     40e:	0a 97       	sbiw	r24, 0x0a	; 10
     410:	1c f0       	brlt	.+6      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     412:	6e e4       	ldi	r22, 0x4E	; 78
     414:	71 e0       	ldi	r23, 0x01	; 1
     416:	02 c0       	rjmp	.+4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     418:	65 e0       	ldi	r22, 0x05	; 5
     41a:	71 e0       	ldi	r23, 0x01	; 1
     41c:	83 eb       	ldi	r24, 0xB3	; 179
     41e:	91 e0       	ldi	r25, 0x01	; 1
     420:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN5Print5printEPKc>
     424:	be 01       	movw	r22, r28
     426:	6f 5f       	subi	r22, 0xFF	; 255
     428:	7f 4f       	sbci	r23, 0xFF	; 255
     42a:	83 eb       	ldi	r24, 0xB3	; 179
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	0e 94 a2 00 	call	0x144	; 0x144 <_ZlsR5PrintRK6_BASED>
     432:	6a e3       	ldi	r22, 0x3A	; 58
     434:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_ZN5Print5printEc>
     438:	c7 01       	movw	r24, r14
     43a:	b6 01       	movw	r22, r12
     43c:	0e 94 bc 0c 	call	0x1978	; 0x1978 <_Z6secondm>
     440:	09 2e       	mov	r0, r25
     442:	00 0c       	add	r0, r0
     444:	aa 0b       	sbc	r26, r26
     446:	bb 0b       	sbc	r27, r27
     448:	89 83       	std	Y+1, r24	; 0x01
     44a:	9a 83       	std	Y+2, r25	; 0x02
     44c:	ab 83       	std	Y+3, r26	; 0x03
     44e:	bc 83       	std	Y+4, r27	; 0x04
     450:	8a e0       	ldi	r24, 0x0A	; 10
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	9e 83       	std	Y+6, r25	; 0x06
     456:	8d 83       	std	Y+5, r24	; 0x05
     458:	c7 01       	movw	r24, r14
     45a:	b6 01       	movw	r22, r12
     45c:	0e 94 bc 0c 	call	0x1978	; 0x1978 <_Z6secondm>
     460:	0a 97       	sbiw	r24, 0x0a	; 10
     462:	1c f0       	brlt	.+6      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     464:	6e e4       	ldi	r22, 0x4E	; 78
     466:	71 e0       	ldi	r23, 0x01	; 1
     468:	02 c0       	rjmp	.+4      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     46a:	65 e0       	ldi	r22, 0x05	; 5
     46c:	71 e0       	ldi	r23, 0x01	; 1
     46e:	83 eb       	ldi	r24, 0xB3	; 179
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN5Print5printEPKc>
     476:	be 01       	movw	r22, r28
     478:	6f 5f       	subi	r22, 0xFF	; 255
     47a:	7f 4f       	sbci	r23, 0xFF	; 255
     47c:	83 eb       	ldi	r24, 0xB3	; 179
     47e:	91 e0       	ldi	r25, 0x01	; 1
     480:	0e 94 a2 00 	call	0x144	; 0x144 <_ZlsR5PrintRK6_BASED>
     484:	26 96       	adiw	r28, 0x06	; 6
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	f8 94       	cli
     48a:	de bf       	out	0x3e, r29	; 62
     48c:	0f be       	out	0x3f, r0	; 63
     48e:	cd bf       	out	0x3d, r28	; 61
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	1f 91       	pop	r17
     496:	0f 91       	pop	r16
     498:	ff 90       	pop	r15
     49a:	ef 90       	pop	r14
     49c:	df 90       	pop	r13
     49e:	cf 90       	pop	r12
     4a0:	08 95       	ret

000004a2 <_ZN23Human_Machine_Interface8ConvTotmEm>:
     4a2:	9f 92       	push	r9
     4a4:	af 92       	push	r10
     4a6:	bf 92       	push	r11
     4a8:	cf 92       	push	r12
     4aa:	df 92       	push	r13
     4ac:	ef 92       	push	r14
     4ae:	ff 92       	push	r15
     4b0:	0f 93       	push	r16
     4b2:	1f 93       	push	r17
     4b4:	cf 93       	push	r28
     4b6:	df 93       	push	r29
     4b8:	cd b7       	in	r28, 0x3d	; 61
     4ba:	de b7       	in	r29, 0x3e	; 62
     4bc:	27 97       	sbiw	r28, 0x07	; 7
     4be:	0f b6       	in	r0, 0x3f	; 63
     4c0:	f8 94       	cli
     4c2:	de bf       	out	0x3e, r29	; 62
     4c4:	0f be       	out	0x3f, r0	; 63
     4c6:	cd bf       	out	0x3d, r28	; 61
     4c8:	6a 01       	movw	r12, r20
     4ca:	7b 01       	movw	r14, r22
     4cc:	cb 01       	movw	r24, r22
     4ce:	ba 01       	movw	r22, r20
     4d0:	0e 94 ce 0c 	call	0x199c	; 0x199c <_Z4yearm>
     4d4:	18 2f       	mov	r17, r24
     4d6:	c7 01       	movw	r24, r14
     4d8:	b6 01       	movw	r22, r12
     4da:	0e 94 c2 0c 	call	0x1984	; 0x1984 <_Z3daym>
     4de:	b8 2e       	mov	r11, r24
     4e0:	c7 01       	movw	r24, r14
     4e2:	b6 01       	movw	r22, r12
     4e4:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_Z5monthm>
     4e8:	08 2f       	mov	r16, r24
     4ea:	c7 01       	movw	r24, r14
     4ec:	b6 01       	movw	r22, r12
     4ee:	0e 94 b0 0c 	call	0x1960	; 0x1960 <_Z4hourm>
     4f2:	a8 2e       	mov	r10, r24
     4f4:	c7 01       	movw	r24, r14
     4f6:	b6 01       	movw	r22, r12
     4f8:	0e 94 b6 0c 	call	0x196c	; 0x196c <_Z6minutem>
     4fc:	98 2e       	mov	r9, r24
     4fe:	c7 01       	movw	r24, r14
     500:	b6 01       	movw	r22, r12
     502:	0e 94 bc 0c 	call	0x1978	; 0x1978 <_Z6secondm>
     506:	5c 81       	ldd	r21, Y+4	; 0x04
     508:	28 2f       	mov	r18, r24
     50a:	39 2d       	mov	r19, r9
     50c:	4a 2d       	mov	r20, r10
     50e:	6b 2d       	mov	r22, r11
     510:	70 2f       	mov	r23, r16
     512:	81 2f       	mov	r24, r17
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	27 96       	adiw	r28, 0x07	; 7
     518:	0f b6       	in	r0, 0x3f	; 63
     51a:	f8 94       	cli
     51c:	de bf       	out	0x3e, r29	; 62
     51e:	0f be       	out	0x3f, r0	; 63
     520:	cd bf       	out	0x3d, r28	; 61
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	1f 91       	pop	r17
     528:	0f 91       	pop	r16
     52a:	ff 90       	pop	r15
     52c:	ef 90       	pop	r14
     52e:	df 90       	pop	r13
     530:	cf 90       	pop	r12
     532:	bf 90       	pop	r11
     534:	af 90       	pop	r10
     536:	9f 90       	pop	r9
     538:	08 95       	ret

0000053a <_ZN16DS3231RTC_Alarms11init_alarmsEv>:
     53a:	ef 92       	push	r14
     53c:	ff 92       	push	r15
     53e:	0f 93       	push	r16
     540:	1f 93       	push	r17
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	ec 01       	movw	r28, r24
     548:	52 98       	cbi	0x0a, 2	; 10
     54a:	5a 9a       	sbi	0x0b, 2	; 11
     54c:	42 e0       	ldi	r20, 0x02	; 2
     54e:	50 e0       	ldi	r21, 0x00	; 0
     550:	6e e9       	ldi	r22, 0x9E	; 158
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	0e 94 be 06 	call	0xd7c	; 0xd7c <attachInterrupt>
     55a:	64 e0       	ldi	r22, 0x04	; 4
     55c:	89 e5       	ldi	r24, 0x59	; 89
     55e:	92 e0       	ldi	r25, 0x02	; 2
     560:	0e 94 f7 09 	call	0x13ee	; 0x13ee <_ZN9DS3232RTC10squareWaveE14SQWAVE_FREQS_t>
     564:	61 e0       	ldi	r22, 0x01	; 1
     566:	89 e5       	ldi	r24, 0x59	; 89
     568:	92 e0       	ldi	r25, 0x02	; 2
     56a:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_ZN9DS3232RTC5alarmEh>
     56e:	41 e0       	ldi	r20, 0x01	; 1
     570:	61 e0       	ldi	r22, 0x01	; 1
     572:	89 e5       	ldi	r24, 0x59	; 89
     574:	92 e0       	ldi	r25, 0x02	; 2
     576:	0e 94 b6 09 	call	0x136c	; 0x136c <_ZN9DS3232RTC14alarmInterruptEhb>
     57a:	62 e0       	ldi	r22, 0x02	; 2
     57c:	89 e5       	ldi	r24, 0x59	; 89
     57e:	92 e0       	ldi	r25, 0x02	; 2
     580:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_ZN9DS3232RTC5alarmEh>
     584:	41 e0       	ldi	r20, 0x01	; 1
     586:	62 e0       	ldi	r22, 0x02	; 2
     588:	89 e5       	ldi	r24, 0x59	; 89
     58a:	92 e0       	ldi	r25, 0x02	; 2
     58c:	0e 94 b6 09 	call	0x136c	; 0x136c <_ZN9DS3232RTC14alarmInterruptEhb>
     590:	00 91 ae 01 	lds	r16, 0x01AE	; 0x8001ae <alarm1_addr>
     594:	10 e0       	ldi	r17, 0x00	; 0
     596:	7e 01       	movw	r14, r28
     598:	87 e0       	ldi	r24, 0x07	; 7
     59a:	e8 0e       	add	r14, r24
     59c:	f1 1c       	adc	r15, r1
     59e:	0c 1b       	sub	r16, r28
     5a0:	1d 0b       	sbc	r17, r29
     5a2:	c8 01       	movw	r24, r16
     5a4:	8c 0f       	add	r24, r28
     5a6:	9d 1f       	adc	r25, r29
     5a8:	0e 94 64 11 	call	0x22c8	; 0x22c8 <eeprom_read_byte>
     5ac:	89 93       	st	Y+, r24
     5ae:	ce 15       	cp	r28, r14
     5b0:	df 05       	cpc	r29, r15
     5b2:	b9 f7       	brne	.-18     	; 0x5a2 <_ZN16DS3231RTC_Alarms11init_alarmsEv+0x68>
     5b4:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__data_start>
     5b8:	10 e0       	ldi	r17, 0x00	; 0
     5ba:	c0 e0       	ldi	r28, 0x00	; 0
     5bc:	d0 e0       	ldi	r29, 0x00	; 0
     5be:	ce 01       	movw	r24, r28
     5c0:	80 0f       	add	r24, r16
     5c2:	91 1f       	adc	r25, r17
     5c4:	0e 94 64 11 	call	0x22c8	; 0x22c8 <eeprom_read_byte>
     5c8:	f7 01       	movw	r30, r14
     5ca:	81 93       	st	Z+, r24
     5cc:	7f 01       	movw	r14, r30
     5ce:	21 96       	adiw	r28, 0x01	; 1
     5d0:	c7 30       	cpi	r28, 0x07	; 7
     5d2:	d1 05       	cpc	r29, r1
     5d4:	a1 f7       	brne	.-24     	; 0x5be <_ZN16DS3231RTC_Alarms11init_alarmsEv+0x84>
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	1f 91       	pop	r17
     5dc:	0f 91       	pop	r16
     5de:	ff 90       	pop	r15
     5e0:	ef 90       	pop	r14
     5e2:	08 95       	ret

000005e4 <_ZN16DS3231RTC_Alarms11alarm_CheckEPh>:
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
     5e8:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <alarmIsrWasCalled>
     5ec:	88 23       	and	r24, r24
     5ee:	b1 f0       	breq	.+44     	; 0x61c <_ZN16DS3231RTC_Alarms11alarm_CheckEPh+0x38>
     5f0:	eb 01       	movw	r28, r22
     5f2:	61 e0       	ldi	r22, 0x01	; 1
     5f4:	89 e5       	ldi	r24, 0x59	; 89
     5f6:	92 e0       	ldi	r25, 0x02	; 2
     5f8:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_ZN9DS3232RTC5alarmEh>
     5fc:	88 23       	and	r24, r24
     5fe:	11 f0       	breq	.+4      	; 0x604 <_ZN16DS3231RTC_Alarms11alarm_CheckEPh+0x20>
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	08 c0       	rjmp	.+16     	; 0x614 <_ZN16DS3231RTC_Alarms11alarm_CheckEPh+0x30>
     604:	62 e0       	ldi	r22, 0x02	; 2
     606:	89 e5       	ldi	r24, 0x59	; 89
     608:	92 e0       	ldi	r25, 0x02	; 2
     60a:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_ZN9DS3232RTC5alarmEh>
     60e:	88 23       	and	r24, r24
     610:	11 f0       	breq	.+4      	; 0x616 <_ZN16DS3231RTC_Alarms11alarm_CheckEPh+0x32>
     612:	82 e0       	ldi	r24, 0x02	; 2
     614:	88 83       	st	Y, r24
     616:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <alarmIsrWasCalled>
     61a:	02 c0       	rjmp	.+4      	; 0x620 <_ZN16DS3231RTC_Alarms11alarm_CheckEPh+0x3c>
     61c:	fb 01       	movw	r30, r22
     61e:	10 82       	st	Z, r1
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	08 95       	ret

00000626 <_ZN14liftRelayArray14relayArrayInitEv>:
}

void liftRelayArray::relayArrayInit(void)
{
	// Initialize Buttons
	DDRD |= (1 << ARControl1) | (1 << ARControl2) | (1 << ARControl3) | (1 << ARControl4);		// Marks pins as output.
     626:	8a b1       	in	r24, 0x0a	; 10
     628:	80 6f       	ori	r24, 0xF0	; 240
     62a:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1 << ARControl1) & ~(1 << ARControl2) & ~(1 << ARControl3) & ~(1 << ARControl4);	// Puts pins into off state.
     62c:	8b b1       	in	r24, 0x0b	; 11
     62e:	8f 70       	andi	r24, 0x0F	; 15
     630:	8b b9       	out	0x0b, r24	; 11
	PORTC |= (1 << DDC1);	// Make PC1 = 1 (on)
	PORTC &= ~(1 << DDC1);	// Puts PC1 = 0 (off).
	*/

	// setup timer1 to make an interrupt every 1 ms
	noInterrupts();           // disable all interrupts
     632:	f8 94       	cli
	TCCR1A = 0;
     634:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0;
     638:	e1 e8       	ldi	r30, 0x81	; 129
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	10 82       	st	Z, r1
	TCNT1  = 0;
     63e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     642:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

	OCR1A = 16000;            // compare match register 16MHz/1000
     646:	80 e8       	ldi	r24, 0x80	; 128
     648:	9e e3       	ldi	r25, 0x3E	; 62
     64a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     64e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1B |= (1 << WGM12);   // CTC mode
     652:	80 81       	ld	r24, Z
     654:	88 60       	ori	r24, 0x08	; 8
     656:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS10);    // No prescaler
     658:	80 81       	ld	r24, Z
     65a:	81 60       	ori	r24, 0x01	; 1
     65c:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);  // enable timer compare interrupt
     65e:	ef e6       	ldi	r30, 0x6F	; 111
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	80 81       	ld	r24, Z
     664:	82 60       	ori	r24, 0x02	; 2
     666:	80 83       	st	Z, r24
	interrupts();             // enable all interrupts
     668:	78 94       	sei
     66a:	08 95       	ret

0000066c <_ZN14liftRelayArray17relayArrayCommandEh>:
}

void liftRelayArray::relayArrayCommand(uint8_t cmd)
{
	switch (cmd)
     66c:	61 30       	cpi	r22, 0x01	; 1
     66e:	29 f0       	breq	.+10     	; 0x67a <_ZN14liftRelayArray17relayArrayCommandEh+0xe>
     670:	62 30       	cpi	r22, 0x02	; 2
     672:	39 f4       	brne	.+14     	; 0x682 <_ZN14liftRelayArray17relayArrayCommandEh+0x16>
			PORTD |= (1 << ARControl1);
			PORTD &= ~(1 << ARControl2);
			PORTD |= (1 << ARControl3);
		break;
		case liftCCW:
			PORTD |= (1 << ARControl1);
     674:	5c 9a       	sbi	0x0b, 4	; 11
			PORTD |= (1 << ARControl2);
     676:	5d 9a       	sbi	0x0b, 5	; 11
     678:	02 c0       	rjmp	.+4      	; 0x67e <_ZN14liftRelayArray17relayArrayCommandEh+0x12>
void liftRelayArray::relayArrayCommand(uint8_t cmd)
{
	switch (cmd)
	{
		case liftCW:
			PORTD |= (1 << ARControl1);
     67a:	5c 9a       	sbi	0x0b, 4	; 11
			PORTD &= ~(1 << ARControl2);
     67c:	5d 98       	cbi	0x0b, 5	; 11
			PORTD |= (1 << ARControl3);
		break;
		case liftCCW:
			PORTD |= (1 << ARControl1);
			PORTD |= (1 << ARControl2);
			PORTD |= (1 << ARControl3);
     67e:	5e 9a       	sbi	0x0b, 6	; 11
		break;
     680:	08 95       	ret
		default:	// default, aka. liftSTOP
			PORTD &= ~(1 << ARControl1);
     682:	5c 98       	cbi	0x0b, 4	; 11
			PORTD &= ~(1 << ARControl2);
     684:	5d 98       	cbi	0x0b, 5	; 11
			PORTD &= ~(1 << ARControl3);
     686:	5e 98       	cbi	0x0b, 6	; 11
     688:	08 95       	ret

0000068a <main>:

//extern volatile uint8_t test;


int main(void)
{
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
     68e:	cd b7       	in	r28, 0x3d	; 61
     690:	de b7       	in	r29, 0x3e	; 62
     692:	28 97       	sbiw	r28, 0x08	; 8
     694:	0f b6       	in	r0, 0x3f	; 63
     696:	f8 94       	cli
     698:	de bf       	out	0x3e, r29	; 62
     69a:	0f be       	out	0x3f, r0	; 63
     69c:	cd bf       	out	0x3d, r28	; 61
	init();						// Initializes the Arduino Core.
     69e:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <init>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     6a2:	26 e0       	ldi	r18, 0x06	; 6
     6a4:	40 e8       	ldi	r20, 0x80	; 128
     6a6:	55 e2       	ldi	r21, 0x25	; 37
     6a8:	60 e0       	ldi	r22, 0x00	; 0
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	83 eb       	ldi	r24, 0xB3	; 179
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	0e 94 de 04 	call	0x9bc	; 0x9bc <_ZN14HardwareSerial5beginEmh>
	Serial.begin(9600);			// Start the serial communication at 9600 a baud rate.
	lcd.begin(16, 2);			// Start LCD.
     6b4:	20 e0       	ldi	r18, 0x00	; 0
     6b6:	42 e0       	ldi	r20, 0x02	; 2
     6b8:	60 e1       	ldi	r22, 0x10	; 16
     6ba:	86 e8       	ldi	r24, 0x86	; 134
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	0e 94 c3 0a 	call	0x1586	; 0x1586 <_ZN13LiquidCrystal5beginEhhh>
	RTC_alarm.init_alarms();	// Start the alarms.
     6c2:	8f e9       	ldi	r24, 0x9F	; 159
     6c4:	91 e0       	ldi	r25, 0x01	; 1
     6c6:	0e 94 9d 02 	call	0x53a	; 0x53a <_ZN16DS3231RTC_Alarms11init_alarmsEv>
	relayArray.relayArrayInit();
     6ca:	8e e9       	ldi	r24, 0x9E	; 158
     6cc:	91 e0       	ldi	r25, 0x01	; 1
     6ce:	0e 94 13 03 	call	0x626	; 0x626 <_ZN14liftRelayArray14relayArrayInitEv>

	
	// Local Variables:
	uint8_t alarm_stat = 0;
     6d2:	18 86       	std	Y+8, r1	; 0x08
#define STREAMING_LIBRARY_VERSION 5

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     6d4:	67 e0       	ldi	r22, 0x07	; 7
     6d6:	71 e0       	ldi	r23, 0x01	; 1
     6d8:	83 eb       	ldi	r24, 0xB3	; 179
     6da:	91 e0       	ldi	r25, 0x01	; 1
     6dc:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN5Print5printEPKc>
	
	
	// print he current time:
	Serial << "Current time is: ";
	HMI.printDateTime(RTC.get());
     6e0:	0e 94 4f 09 	call	0x129e	; 0x129e <_ZN9DS3232RTC3getEv>
     6e4:	ab 01       	movw	r20, r22
     6e6:	bc 01       	movw	r22, r24
     6e8:	8d ea       	ldi	r24, 0xAD	; 173
     6ea:	91 e0       	ldi	r25, 0x01	; 1
     6ec:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_ZN23Human_Machine_Interface13printDateTimeEm>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
     6f0:	83 eb       	ldi	r24, 0xB3	; 179
     6f2:	91 e0       	ldi	r25, 0x01	; 1
     6f4:	0e 94 14 06 	call	0xc28	; 0xc28 <_ZN5Print7printlnEv>
#define STREAMING_LIBRARY_VERSION 5

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     6f8:	69 e1       	ldi	r22, 0x19	; 25
     6fa:	71 e0       	ldi	r23, 0x01	; 1
     6fc:	86 e8       	ldi	r24, 0x86	; 134
     6fe:	91 e0       	ldi	r25, 0x01	; 1
     700:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN5Print5printEPKc>
	Serial << endl;
	lcd << "Test";
	
	tmElements_t tidtemp = HMI.ConvTotm(RTC.get());
     704:	0e 94 4f 09 	call	0x129e	; 0x129e <_ZN9DS3232RTC3getEv>
     708:	ab 01       	movw	r20, r22
     70a:	bc 01       	movw	r22, r24
     70c:	8d ea       	ldi	r24, 0xAD	; 173
     70e:	91 e0       	ldi	r25, 0x01	; 1
     710:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_ZN23Human_Machine_Interface8ConvTotmEm>
     714:	29 83       	std	Y+1, r18	; 0x01
     716:	3a 83       	std	Y+2, r19	; 0x02
     718:	4b 83       	std	Y+3, r20	; 0x03
     71a:	5c 83       	std	Y+4, r21	; 0x04
     71c:	6d 83       	std	Y+5, r22	; 0x05
     71e:	7e 83       	std	Y+6, r23	; 0x06
     720:	8f 83       	std	Y+7, r24	; 0x07
	HMI.printDateTime(tidtemp);
     722:	89 01       	movw	r16, r18
     724:	9a 01       	movw	r18, r20
     726:	ab 01       	movw	r20, r22
     728:	68 2f       	mov	r22, r24
     72a:	8d ea       	ldi	r24, 0xAD	; 173
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t>
	
	while (1)
	{
		lcd.clear();
     732:	86 e8       	ldi	r24, 0x86	; 134
     734:	91 e0       	ldi	r25, 0x01	; 1
     736:	0e 94 b4 0a 	call	0x1568	; 0x1568 <_ZN13LiquidCrystal5clearEv>
		lcd << test;
     73a:	60 91 af 01 	lds	r22, 0x01AF	; 0x8001af <test>
     73e:	4a e0       	ldi	r20, 0x0A	; 10
     740:	50 e0       	ldi	r21, 0x00	; 0
     742:	86 e8       	ldi	r24, 0x86	; 134
     744:	91 e0       	ldi	r25, 0x01	; 1
     746:	0e 94 6e 06 	call	0xcdc	; 0xcdc <_ZN5Print5printEhi>

		RTC_alarm.alarm_Check(&alarm_stat);	// get the alarm status.
     74a:	be 01       	movw	r22, r28
     74c:	68 5f       	subi	r22, 0xF8	; 248
     74e:	7f 4f       	sbci	r23, 0xFF	; 255
     750:	8f e9       	ldi	r24, 0x9F	; 159
     752:	91 e0       	ldi	r25, 0x01	; 1
     754:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <_ZN16DS3231RTC_Alarms11alarm_CheckEPh>
		
		switch(alarm_stat)					// switch statement to decide what should happen if alarm has happened.
     758:	88 85       	ldd	r24, Y+8	; 0x08
     75a:	81 30       	cpi	r24, 0x01	; 1
     75c:	09 f1       	breq	.+66     	; 0x7a0 <main+0x116>
     75e:	82 30       	cpi	r24, 0x02	; 2
     760:	09 f0       	breq	.+2      	; 0x764 <main+0xda>
     762:	3f c0       	rjmp	.+126    	; 0x7e2 <main+0x158>
				Serial << " --> Alarm 1!" << endl;
				relayArray.relayArrayCommand(liftCW);
			break;
			
			case 2:							// alarm1:
				HMI.printDateTime( RTC.get() );
     764:	0e 94 4f 09 	call	0x129e	; 0x129e <_ZN9DS3232RTC3getEv>
     768:	ab 01       	movw	r20, r22
     76a:	bc 01       	movw	r22, r24
     76c:	8d ea       	ldi	r24, 0xAD	; 173
     76e:	91 e0       	ldi	r25, 0x01	; 1
     770:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_ZN23Human_Machine_Interface13printDateTimeEm>
				lcd.clear();
     774:	86 e8       	ldi	r24, 0x86	; 134
     776:	91 e0       	ldi	r25, 0x01	; 1
     778:	0e 94 b4 0a 	call	0x1568	; 0x1568 <_ZN13LiquidCrystal5clearEv>
     77c:	6c e2       	ldi	r22, 0x2C	; 44
     77e:	71 e0       	ldi	r23, 0x01	; 1
     780:	86 e8       	ldi	r24, 0x86	; 134
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN5Print5printEPKc>
     788:	6c e2       	ldi	r22, 0x2C	; 44
     78a:	71 e0       	ldi	r23, 0x01	; 1
     78c:	83 eb       	ldi	r24, 0xB3	; 179
     78e:	91 e0       	ldi	r25, 0x01	; 1
     790:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN5Print5printEPKc>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
     794:	83 eb       	ldi	r24, 0xB3	; 179
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	0e 94 14 06 	call	0xc28	; 0xc28 <_ZN5Print7printlnEv>
				lcd << " --> Alarm 2!";
				Serial << " --> Alarm 2!" << endl;
				relayArray.relayArrayCommand(liftCCW);
     79c:	62 e0       	ldi	r22, 0x02	; 2
     79e:	1d c0       	rjmp	.+58     	; 0x7da <main+0x150>
		RTC_alarm.alarm_Check(&alarm_stat);	// get the alarm status.
		
		switch(alarm_stat)					// switch statement to decide what should happen if alarm has happened.
		{
			case 1:							// alarm1:
				HMI.printDateTime( RTC.get() );
     7a0:	0e 94 4f 09 	call	0x129e	; 0x129e <_ZN9DS3232RTC3getEv>
     7a4:	ab 01       	movw	r20, r22
     7a6:	bc 01       	movw	r22, r24
     7a8:	8d ea       	ldi	r24, 0xAD	; 173
     7aa:	91 e0       	ldi	r25, 0x01	; 1
     7ac:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_ZN23Human_Machine_Interface13printDateTimeEm>
				lcd.clear();
     7b0:	86 e8       	ldi	r24, 0x86	; 134
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	0e 94 b4 0a 	call	0x1568	; 0x1568 <_ZN13LiquidCrystal5clearEv>
#define STREAMING_LIBRARY_VERSION 5

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     7b8:	6e e1       	ldi	r22, 0x1E	; 30
     7ba:	71 e0       	ldi	r23, 0x01	; 1
     7bc:	86 e8       	ldi	r24, 0x86	; 134
     7be:	91 e0       	ldi	r25, 0x01	; 1
     7c0:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN5Print5printEPKc>
     7c4:	6e e1       	ldi	r22, 0x1E	; 30
     7c6:	71 e0       	ldi	r23, 0x01	; 1
     7c8:	83 eb       	ldi	r24, 0xB3	; 179
     7ca:	91 e0       	ldi	r25, 0x01	; 1
     7cc:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN5Print5printEPKc>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
     7d0:	83 eb       	ldi	r24, 0xB3	; 179
     7d2:	91 e0       	ldi	r25, 0x01	; 1
     7d4:	0e 94 14 06 	call	0xc28	; 0xc28 <_ZN5Print7printlnEv>
				lcd << " --> Alarm 1!";
				Serial << " --> Alarm 1!" << endl;
				relayArray.relayArrayCommand(liftCW);
     7d8:	61 e0       	ldi	r22, 0x01	; 1
			case 2:							// alarm1:
				HMI.printDateTime( RTC.get() );
				lcd.clear();
				lcd << " --> Alarm 2!";
				Serial << " --> Alarm 2!" << endl;
				relayArray.relayArrayCommand(liftCCW);
     7da:	8e e9       	ldi	r24, 0x9E	; 158
     7dc:	91 e0       	ldi	r25, 0x01	; 1
     7de:	0e 94 36 03 	call	0x66c	; 0x66c <_ZN14liftRelayArray17relayArrayCommandEh>
				
			default:						// if there was no alarm:
				
			break;
		}
		delay(100);	// small delay
     7e2:	64 e6       	ldi	r22, 0x64	; 100
     7e4:	70 e0       	ldi	r23, 0x00	; 0
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	0e 94 9b 07 	call	0xf36	; 0xf36 <delay>
	lcd << "Test";
	
	tmElements_t tidtemp = HMI.ConvTotm(RTC.get());
	HMI.printDateTime(tidtemp);
	
	while (1)
     7ee:	a1 cf       	rjmp	.-190    	; 0x732 <main+0xa8>

000007f0 <_GLOBAL__sub_I_alarmIsrWasCalled>:
				
			break;
		}
		delay(100);	// small delay
	}
     7f0:	cf 92       	push	r12
     7f2:	ef 92       	push	r14
     7f4:	0f 93       	push	r16



Human_Machine_Interface::Human_Machine_Interface()
{
	UIstate = 0;
     7f6:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <HMI>
}


DS3231RTC_Alarms::DS3231RTC_Alarms()
{
	alarm1_time.long_time = 0;
     7fa:	ef e9       	ldi	r30, 0x9F	; 159
     7fc:	f1 e0       	ldi	r31, 0x01	; 1
     7fe:	10 82       	st	Z, r1
     800:	11 82       	std	Z+1, r1	; 0x01
     802:	12 82       	std	Z+2, r1	; 0x02
     804:	13 82       	std	Z+3, r1	; 0x03
	alarm2_time.long_time = 0;
     806:	17 82       	std	Z+7, r1	; 0x07
     808:	10 86       	std	Z+8, r1	; 0x08
     80a:	11 86       	std	Z+9, r1	; 0x09
     80c:	12 86       	std	Z+10, r1	; 0x0a
  * LCD VSS pin to ground
  * LCD VCC pin to 5V
  * 10K resistor: Mounted
  * ends to +5V and ground
  */
LiquidCrystal lcd(13, 12, 8, 9, 10, 11);
     80e:	8b e0       	ldi	r24, 0x0B	; 11
     810:	c8 2e       	mov	r12, r24
     812:	9a e0       	ldi	r25, 0x0A	; 10
     814:	e9 2e       	mov	r14, r25
     816:	09 e0       	ldi	r16, 0x09	; 9
     818:	28 e0       	ldi	r18, 0x08	; 8
     81a:	4c e0       	ldi	r20, 0x0C	; 12
     81c:	6d e0       	ldi	r22, 0x0D	; 13
     81e:	86 e8       	ldi	r24, 0x86	; 134
     820:	91 e0       	ldi	r25, 0x01	; 1
     822:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <_ZN13LiquidCrystalC1Ehhhhhh>
				
			break;
		}
		delay(100);	// small delay
	}
     826:	0f 91       	pop	r16
     828:	ef 90       	pop	r14
     82a:	cf 90       	pop	r12
     82c:	08 95       	ret

0000082e <_ZN14HardwareSerial9availableEv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     82e:	fc 01       	movw	r30, r24
     830:	91 8d       	ldd	r25, Z+25	; 0x19
     832:	22 8d       	ldd	r18, Z+26	; 0x1a
     834:	89 2f       	mov	r24, r25
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	80 5c       	subi	r24, 0xC0	; 192
     83a:	9f 4f       	sbci	r25, 0xFF	; 255
     83c:	82 1b       	sub	r24, r18
     83e:	91 09       	sbc	r25, r1
     840:	8f 73       	andi	r24, 0x3F	; 63
     842:	99 27       	eor	r25, r25
     844:	08 95       	ret

00000846 <_ZN14HardwareSerial4peekEv>:
     846:	fc 01       	movw	r30, r24
     848:	91 8d       	ldd	r25, Z+25	; 0x19
     84a:	82 8d       	ldd	r24, Z+26	; 0x1a
     84c:	98 17       	cp	r25, r24
     84e:	31 f0       	breq	.+12     	; 0x85c <_ZN14HardwareSerial4peekEv+0x16>
     850:	82 8d       	ldd	r24, Z+26	; 0x1a
     852:	e8 0f       	add	r30, r24
     854:	f1 1d       	adc	r31, r1
     856:	85 8d       	ldd	r24, Z+29	; 0x1d
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	08 95       	ret
     85c:	8f ef       	ldi	r24, 0xFF	; 255
     85e:	9f ef       	ldi	r25, 0xFF	; 255
     860:	08 95       	ret

00000862 <_ZN14HardwareSerial4readEv>:
     862:	fc 01       	movw	r30, r24
     864:	91 8d       	ldd	r25, Z+25	; 0x19
     866:	82 8d       	ldd	r24, Z+26	; 0x1a
     868:	98 17       	cp	r25, r24
     86a:	61 f0       	breq	.+24     	; 0x884 <_ZN14HardwareSerial4readEv+0x22>
     86c:	82 8d       	ldd	r24, Z+26	; 0x1a
     86e:	df 01       	movw	r26, r30
     870:	a8 0f       	add	r26, r24
     872:	b1 1d       	adc	r27, r1
     874:	5d 96       	adiw	r26, 0x1d	; 29
     876:	8c 91       	ld	r24, X
     878:	92 8d       	ldd	r25, Z+26	; 0x1a
     87a:	9f 5f       	subi	r25, 0xFF	; 255
     87c:	9f 73       	andi	r25, 0x3F	; 63
     87e:	92 8f       	std	Z+26, r25	; 0x1a
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	08 95       	ret
     884:	8f ef       	ldi	r24, 0xFF	; 255
     886:	9f ef       	ldi	r25, 0xFF	; 255
     888:	08 95       	ret

0000088a <_ZN14HardwareSerial17availableForWriteEv>:
     88a:	fc 01       	movw	r30, r24
     88c:	53 8d       	ldd	r21, Z+27	; 0x1b
     88e:	44 8d       	ldd	r20, Z+28	; 0x1c
     890:	25 2f       	mov	r18, r21
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	84 2f       	mov	r24, r20
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	82 1b       	sub	r24, r18
     89a:	93 0b       	sbc	r25, r19
     89c:	54 17       	cp	r21, r20
     89e:	10 f0       	brcs	.+4      	; 0x8a4 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     8a0:	cf 96       	adiw	r24, 0x3f	; 63
     8a2:	08 95       	ret
     8a4:	01 97       	sbiw	r24, 0x01	; 1
     8a6:	08 95       	ret

000008a8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     8a8:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     8aa:	84 8d       	ldd	r24, Z+28	; 0x1c
     8ac:	df 01       	movw	r26, r30
     8ae:	a8 0f       	add	r26, r24
     8b0:	b1 1d       	adc	r27, r1
     8b2:	a3 5a       	subi	r26, 0xA3	; 163
     8b4:	bf 4f       	sbci	r27, 0xFF	; 255
     8b6:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     8b8:	84 8d       	ldd	r24, Z+28	; 0x1c
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	01 96       	adiw	r24, 0x01	; 1
     8be:	8f 73       	andi	r24, 0x3F	; 63
     8c0:	99 27       	eor	r25, r25
     8c2:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     8c4:	a6 89       	ldd	r26, Z+22	; 0x16
     8c6:	b7 89       	ldd	r27, Z+23	; 0x17
     8c8:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     8ca:	a0 89       	ldd	r26, Z+16	; 0x10
     8cc:	b1 89       	ldd	r27, Z+17	; 0x11
     8ce:	8c 91       	ld	r24, X
     8d0:	80 64       	ori	r24, 0x40	; 64
     8d2:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     8d4:	93 8d       	ldd	r25, Z+27	; 0x1b
     8d6:	84 8d       	ldd	r24, Z+28	; 0x1c
     8d8:	98 13       	cpse	r25, r24
     8da:	06 c0       	rjmp	.+12     	; 0x8e8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     8dc:	02 88       	ldd	r0, Z+18	; 0x12
     8de:	f3 89       	ldd	r31, Z+19	; 0x13
     8e0:	e0 2d       	mov	r30, r0
     8e2:	80 81       	ld	r24, Z
     8e4:	8f 7d       	andi	r24, 0xDF	; 223
     8e6:	80 83       	st	Z, r24
     8e8:	08 95       	ret

000008ea <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     8ea:	ef 92       	push	r14
     8ec:	ff 92       	push	r15
     8ee:	0f 93       	push	r16
     8f0:	1f 93       	push	r17
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
     8f6:	ec 01       	movw	r28, r24
  _written = true;
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     8fc:	9b 8d       	ldd	r25, Y+27	; 0x1b
     8fe:	8c 8d       	ldd	r24, Y+28	; 0x1c
     900:	98 13       	cpse	r25, r24
     902:	05 c0       	rjmp	.+10     	; 0x90e <__stack+0xf>
     904:	e8 89       	ldd	r30, Y+16	; 0x10
     906:	f9 89       	ldd	r31, Y+17	; 0x11
     908:	80 81       	ld	r24, Z
     90a:	85 fd       	sbrc	r24, 5
     90c:	24 c0       	rjmp	.+72     	; 0x956 <__stack+0x57>
     90e:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     910:	0b 8d       	ldd	r16, Y+27	; 0x1b
     912:	10 e0       	ldi	r17, 0x00	; 0
     914:	0f 5f       	subi	r16, 0xFF	; 255
     916:	1f 4f       	sbci	r17, 0xFF	; 255
     918:	0f 73       	andi	r16, 0x3F	; 63
     91a:	11 27       	eor	r17, r17
     91c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     91e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     920:	e8 12       	cpse	r14, r24
     922:	0c c0       	rjmp	.+24     	; 0x93c <__stack+0x3d>
    if (bit_is_clear(SREG, SREG_I)) {
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	07 fc       	sbrc	r0, 7
     928:	fa cf       	rjmp	.-12     	; 0x91e <__stack+0x1f>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     92a:	e8 89       	ldd	r30, Y+16	; 0x10
     92c:	f9 89       	ldd	r31, Y+17	; 0x11
     92e:	80 81       	ld	r24, Z
     930:	85 ff       	sbrs	r24, 5
     932:	f5 cf       	rjmp	.-22     	; 0x91e <__stack+0x1f>
	_tx_udr_empty_irq();
     934:	ce 01       	movw	r24, r28
     936:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     93a:	f1 cf       	rjmp	.-30     	; 0x91e <__stack+0x1f>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     93c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     93e:	fe 01       	movw	r30, r28
     940:	e8 0f       	add	r30, r24
     942:	f1 1d       	adc	r31, r1
     944:	e3 5a       	subi	r30, 0xA3	; 163
     946:	ff 4f       	sbci	r31, 0xFF	; 255
     948:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     94a:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     94c:	ea 89       	ldd	r30, Y+18	; 0x12
     94e:	fb 89       	ldd	r31, Y+19	; 0x13
     950:	80 81       	ld	r24, Z
     952:	80 62       	ori	r24, 0x20	; 32
     954:	07 c0       	rjmp	.+14     	; 0x964 <__stack+0x65>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     956:	ee 89       	ldd	r30, Y+22	; 0x16
     958:	ff 89       	ldd	r31, Y+23	; 0x17
     95a:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     95c:	e8 89       	ldd	r30, Y+16	; 0x10
     95e:	f9 89       	ldd	r31, Y+17	; 0x11
     960:	80 81       	ld	r24, Z
     962:	80 64       	ori	r24, 0x40	; 64
     964:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	1f 91       	pop	r17
     970:	0f 91       	pop	r16
     972:	ff 90       	pop	r15
     974:	ef 90       	pop	r14
     976:	08 95       	ret

00000978 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     978:	cf 93       	push	r28
     97a:	df 93       	push	r29
     97c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     97e:	88 8d       	ldd	r24, Y+24	; 0x18
     980:	88 23       	and	r24, r24
     982:	c9 f0       	breq	.+50     	; 0x9b6 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     984:	ea 89       	ldd	r30, Y+18	; 0x12
     986:	fb 89       	ldd	r31, Y+19	; 0x13
     988:	80 81       	ld	r24, Z
     98a:	85 fd       	sbrc	r24, 5
     98c:	05 c0       	rjmp	.+10     	; 0x998 <_ZN14HardwareSerial5flushEv+0x20>
     98e:	a8 89       	ldd	r26, Y+16	; 0x10
     990:	b9 89       	ldd	r27, Y+17	; 0x11
     992:	8c 91       	ld	r24, X
     994:	86 fd       	sbrc	r24, 6
     996:	0f c0       	rjmp	.+30     	; 0x9b6 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     998:	0f b6       	in	r0, 0x3f	; 63
     99a:	07 fc       	sbrc	r0, 7
     99c:	f5 cf       	rjmp	.-22     	; 0x988 <_ZN14HardwareSerial5flushEv+0x10>
     99e:	80 81       	ld	r24, Z
     9a0:	85 ff       	sbrs	r24, 5
     9a2:	f2 cf       	rjmp	.-28     	; 0x988 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     9a4:	a8 89       	ldd	r26, Y+16	; 0x10
     9a6:	b9 89       	ldd	r27, Y+17	; 0x11
     9a8:	8c 91       	ld	r24, X
     9aa:	85 ff       	sbrs	r24, 5
     9ac:	ed cf       	rjmp	.-38     	; 0x988 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     9ae:	ce 01       	movw	r24, r28
     9b0:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     9b4:	e7 cf       	rjmp	.-50     	; 0x984 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     9b6:	df 91       	pop	r29
     9b8:	cf 91       	pop	r28
     9ba:	08 95       	ret

000009bc <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     9bc:	cf 92       	push	r12
     9be:	df 92       	push	r13
     9c0:	ef 92       	push	r14
     9c2:	ff 92       	push	r15
     9c4:	1f 93       	push	r17
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	ec 01       	movw	r28, r24
     9cc:	6a 01       	movw	r12, r20
     9ce:	7b 01       	movw	r14, r22
     9d0:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     9d2:	e8 89       	ldd	r30, Y+16	; 0x10
     9d4:	f9 89       	ldd	r31, Y+17	; 0x11
     9d6:	82 e0       	ldi	r24, 0x02	; 2
     9d8:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     9da:	41 15       	cp	r20, r1
     9dc:	51 4e       	sbci	r21, 0xE1	; 225
     9de:	61 05       	cpc	r22, r1
     9e0:	71 05       	cpc	r23, r1
     9e2:	b1 f0       	breq	.+44     	; 0xa10 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     9e4:	60 e0       	ldi	r22, 0x00	; 0
     9e6:	79 e0       	ldi	r23, 0x09	; 9
     9e8:	8d e3       	ldi	r24, 0x3D	; 61
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	a7 01       	movw	r20, r14
     9ee:	96 01       	movw	r18, r12
     9f0:	0e 94 06 11 	call	0x220c	; 0x220c <__udivmodsi4>
     9f4:	da 01       	movw	r26, r20
     9f6:	c9 01       	movw	r24, r18
     9f8:	01 97       	sbiw	r24, 0x01	; 1
     9fa:	a1 09       	sbc	r26, r1
     9fc:	b1 09       	sbc	r27, r1
     9fe:	b6 95       	lsr	r27
     a00:	a7 95       	ror	r26
     a02:	97 95       	ror	r25
     a04:	87 95       	ror	r24
     a06:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     a08:	21 15       	cp	r18, r1
     a0a:	80 e1       	ldi	r24, 0x10	; 16
     a0c:	38 07       	cpc	r19, r24
     a0e:	a8 f0       	brcs	.+42     	; 0xa3a <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     a10:	e8 89       	ldd	r30, Y+16	; 0x10
     a12:	f9 89       	ldd	r31, Y+17	; 0x11
     a14:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     a16:	60 e8       	ldi	r22, 0x80	; 128
     a18:	74 e8       	ldi	r23, 0x84	; 132
     a1a:	8e e1       	ldi	r24, 0x1E	; 30
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	a7 01       	movw	r20, r14
     a20:	96 01       	movw	r18, r12
     a22:	0e 94 06 11 	call	0x220c	; 0x220c <__udivmodsi4>
     a26:	da 01       	movw	r26, r20
     a28:	c9 01       	movw	r24, r18
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	b6 95       	lsr	r27
     a32:	a7 95       	ror	r26
     a34:	97 95       	ror	r25
     a36:	87 95       	ror	r24
     a38:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     a3a:	ec 85       	ldd	r30, Y+12	; 0x0c
     a3c:	fd 85       	ldd	r31, Y+13	; 0x0d
     a3e:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     a40:	ee 85       	ldd	r30, Y+14	; 0x0e
     a42:	ff 85       	ldd	r31, Y+15	; 0x0f
     a44:	20 83       	st	Z, r18

  _written = false;
     a46:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     a48:	ec 89       	ldd	r30, Y+20	; 0x14
     a4a:	fd 89       	ldd	r31, Y+21	; 0x15
     a4c:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     a4e:	ea 89       	ldd	r30, Y+18	; 0x12
     a50:	fb 89       	ldd	r31, Y+19	; 0x13
     a52:	80 81       	ld	r24, Z
     a54:	80 61       	ori	r24, 0x10	; 16
     a56:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     a58:	ea 89       	ldd	r30, Y+18	; 0x12
     a5a:	fb 89       	ldd	r31, Y+19	; 0x13
     a5c:	80 81       	ld	r24, Z
     a5e:	88 60       	ori	r24, 0x08	; 8
     a60:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     a62:	ea 89       	ldd	r30, Y+18	; 0x12
     a64:	fb 89       	ldd	r31, Y+19	; 0x13
     a66:	80 81       	ld	r24, Z
     a68:	80 68       	ori	r24, 0x80	; 128
     a6a:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     a6c:	ea 89       	ldd	r30, Y+18	; 0x12
     a6e:	fb 89       	ldd	r31, Y+19	; 0x13
     a70:	80 81       	ld	r24, Z
     a72:	8f 7d       	andi	r24, 0xDF	; 223
     a74:	80 83       	st	Z, r24
}
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	ff 90       	pop	r15
     a7e:	ef 90       	pop	r14
     a80:	df 90       	pop	r13
     a82:	cf 90       	pop	r12
     a84:	08 95       	ret

00000a86 <_ZN5Print17availableForWriteEv>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	08 95       	ret

00000a8c <_ZN5Print5flushEv>:
     a8c:	08 95       	ret

00000a8e <__vector_18>:
     a8e:	1f 92       	push	r1
     a90:	0f 92       	push	r0
     a92:	0f b6       	in	r0, 0x3f	; 63
     a94:	0f 92       	push	r0
     a96:	11 24       	eor	r1, r1
     a98:	2f 93       	push	r18
     a9a:	8f 93       	push	r24
     a9c:	9f 93       	push	r25
     a9e:	ef 93       	push	r30
     aa0:	ff 93       	push	r31
     aa2:	e0 91 c3 01 	lds	r30, 0x01C3	; 0x8001c3 <Serial+0x10>
     aa6:	f0 91 c4 01 	lds	r31, 0x01C4	; 0x8001c4 <Serial+0x11>
     aaa:	80 81       	ld	r24, Z
     aac:	e0 91 c9 01 	lds	r30, 0x01C9	; 0x8001c9 <Serial+0x16>
     ab0:	f0 91 ca 01 	lds	r31, 0x01CA	; 0x8001ca <Serial+0x17>
     ab4:	82 fd       	sbrc	r24, 2
     ab6:	12 c0       	rjmp	.+36     	; 0xadc <__vector_18+0x4e>
     ab8:	90 81       	ld	r25, Z
     aba:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <Serial+0x19>
     abe:	8f 5f       	subi	r24, 0xFF	; 255
     ac0:	8f 73       	andi	r24, 0x3F	; 63
     ac2:	20 91 cd 01 	lds	r18, 0x01CD	; 0x8001cd <Serial+0x1a>
     ac6:	82 17       	cp	r24, r18
     ac8:	51 f0       	breq	.+20     	; 0xade <__vector_18+0x50>
     aca:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <Serial+0x19>
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	ed 54       	subi	r30, 0x4D	; 77
     ad2:	fe 4f       	sbci	r31, 0xFE	; 254
     ad4:	95 8f       	std	Z+29, r25	; 0x1d
     ad6:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <Serial+0x19>
     ada:	01 c0       	rjmp	.+2      	; 0xade <__vector_18+0x50>
     adc:	80 81       	ld	r24, Z
     ade:	ff 91       	pop	r31
     ae0:	ef 91       	pop	r30
     ae2:	9f 91       	pop	r25
     ae4:	8f 91       	pop	r24
     ae6:	2f 91       	pop	r18
     ae8:	0f 90       	pop	r0
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	0f 90       	pop	r0
     aee:	1f 90       	pop	r1
     af0:	18 95       	reti

00000af2 <__vector_19>:
     af2:	1f 92       	push	r1
     af4:	0f 92       	push	r0
     af6:	0f b6       	in	r0, 0x3f	; 63
     af8:	0f 92       	push	r0
     afa:	11 24       	eor	r1, r1
     afc:	2f 93       	push	r18
     afe:	3f 93       	push	r19
     b00:	4f 93       	push	r20
     b02:	5f 93       	push	r21
     b04:	6f 93       	push	r22
     b06:	7f 93       	push	r23
     b08:	8f 93       	push	r24
     b0a:	9f 93       	push	r25
     b0c:	af 93       	push	r26
     b0e:	bf 93       	push	r27
     b10:	ef 93       	push	r30
     b12:	ff 93       	push	r31
     b14:	83 eb       	ldi	r24, 0xB3	; 179
     b16:	91 e0       	ldi	r25, 0x01	; 1
     b18:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     b1c:	ff 91       	pop	r31
     b1e:	ef 91       	pop	r30
     b20:	bf 91       	pop	r27
     b22:	af 91       	pop	r26
     b24:	9f 91       	pop	r25
     b26:	8f 91       	pop	r24
     b28:	7f 91       	pop	r23
     b2a:	6f 91       	pop	r22
     b2c:	5f 91       	pop	r21
     b2e:	4f 91       	pop	r20
     b30:	3f 91       	pop	r19
     b32:	2f 91       	pop	r18
     b34:	0f 90       	pop	r0
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	0f 90       	pop	r0
     b3a:	1f 90       	pop	r1
     b3c:	18 95       	reti

00000b3e <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     b3e:	e3 eb       	ldi	r30, 0xB3	; 179
     b40:	f1 e0       	ldi	r31, 0x01	; 1
     b42:	13 82       	std	Z+3, r1	; 0x03
     b44:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     b46:	88 ee       	ldi	r24, 0xE8	; 232
     b48:	93 e0       	ldi	r25, 0x03	; 3
     b4a:	a0 e0       	ldi	r26, 0x00	; 0
     b4c:	b0 e0       	ldi	r27, 0x00	; 0
     b4e:	84 83       	std	Z+4, r24	; 0x04
     b50:	95 83       	std	Z+5, r25	; 0x05
     b52:	a6 83       	std	Z+6, r26	; 0x06
     b54:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     b56:	8e e3       	ldi	r24, 0x3E	; 62
     b58:	91 e0       	ldi	r25, 0x01	; 1
     b5a:	91 83       	std	Z+1, r25	; 0x01
     b5c:	80 83       	st	Z, r24
     b5e:	85 ec       	ldi	r24, 0xC5	; 197
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	95 87       	std	Z+13, r25	; 0x0d
     b64:	84 87       	std	Z+12, r24	; 0x0c
     b66:	84 ec       	ldi	r24, 0xC4	; 196
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	97 87       	std	Z+15, r25	; 0x0f
     b6c:	86 87       	std	Z+14, r24	; 0x0e
     b6e:	80 ec       	ldi	r24, 0xC0	; 192
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	91 8b       	std	Z+17, r25	; 0x11
     b74:	80 8b       	std	Z+16, r24	; 0x10
     b76:	81 ec       	ldi	r24, 0xC1	; 193
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	93 8b       	std	Z+19, r25	; 0x13
     b7c:	82 8b       	std	Z+18, r24	; 0x12
     b7e:	82 ec       	ldi	r24, 0xC2	; 194
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	95 8b       	std	Z+21, r25	; 0x15
     b84:	84 8b       	std	Z+20, r24	; 0x14
     b86:	86 ec       	ldi	r24, 0xC6	; 198
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	97 8b       	std	Z+23, r25	; 0x17
     b8c:	86 8b       	std	Z+22, r24	; 0x16
     b8e:	11 8e       	std	Z+25, r1	; 0x19
     b90:	12 8e       	std	Z+26, r1	; 0x1a
     b92:	13 8e       	std	Z+27, r1	; 0x1b
     b94:	14 8e       	std	Z+28, r1	; 0x1c
     b96:	08 95       	ret

00000b98 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     b98:	cf 92       	push	r12
     b9a:	df 92       	push	r13
     b9c:	ef 92       	push	r14
     b9e:	ff 92       	push	r15
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	6c 01       	movw	r12, r24
     baa:	7a 01       	movw	r14, r20
     bac:	8b 01       	movw	r16, r22
     bae:	c0 e0       	ldi	r28, 0x00	; 0
     bb0:	d0 e0       	ldi	r29, 0x00	; 0
     bb2:	ce 15       	cp	r28, r14
     bb4:	df 05       	cpc	r29, r15
     bb6:	81 f0       	breq	.+32     	; 0xbd8 <_ZN5Print5writeEPKhj+0x40>
     bb8:	d8 01       	movw	r26, r16
     bba:	6d 91       	ld	r22, X+
     bbc:	8d 01       	movw	r16, r26
     bbe:	d6 01       	movw	r26, r12
     bc0:	ed 91       	ld	r30, X+
     bc2:	fc 91       	ld	r31, X
     bc4:	01 90       	ld	r0, Z+
     bc6:	f0 81       	ld	r31, Z
     bc8:	e0 2d       	mov	r30, r0
     bca:	c6 01       	movw	r24, r12
     bcc:	09 95       	icall
     bce:	89 2b       	or	r24, r25
     bd0:	11 f0       	breq	.+4      	; 0xbd6 <_ZN5Print5writeEPKhj+0x3e>
     bd2:	21 96       	adiw	r28, 0x01	; 1
     bd4:	ee cf       	rjmp	.-36     	; 0xbb2 <_ZN5Print5writeEPKhj+0x1a>
     bd6:	7e 01       	movw	r14, r28
     bd8:	c7 01       	movw	r24, r14
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	1f 91       	pop	r17
     be0:	0f 91       	pop	r16
     be2:	ff 90       	pop	r15
     be4:	ef 90       	pop	r14
     be6:	df 90       	pop	r13
     be8:	cf 90       	pop	r12
     bea:	08 95       	ret

00000bec <_ZN5Print5writeEPKc>:
     bec:	61 15       	cp	r22, r1
     bee:	71 05       	cpc	r23, r1
     bf0:	79 f0       	breq	.+30     	; 0xc10 <_ZN5Print5writeEPKc+0x24>
     bf2:	fb 01       	movw	r30, r22
     bf4:	01 90       	ld	r0, Z+
     bf6:	00 20       	and	r0, r0
     bf8:	e9 f7       	brne	.-6      	; 0xbf4 <_ZN5Print5writeEPKc+0x8>
     bfa:	31 97       	sbiw	r30, 0x01	; 1
     bfc:	af 01       	movw	r20, r30
     bfe:	46 1b       	sub	r20, r22
     c00:	57 0b       	sbc	r21, r23
     c02:	dc 01       	movw	r26, r24
     c04:	ed 91       	ld	r30, X+
     c06:	fc 91       	ld	r31, X
     c08:	02 80       	ldd	r0, Z+2	; 0x02
     c0a:	f3 81       	ldd	r31, Z+3	; 0x03
     c0c:	e0 2d       	mov	r30, r0
     c0e:	09 94       	ijmp
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	08 95       	ret

00000c16 <_ZN5Print5printEPKc>:
     c16:	0c 94 f6 05 	jmp	0xbec	; 0xbec <_ZN5Print5writeEPKc>

00000c1a <_ZN5Print5printEc>:
     c1a:	dc 01       	movw	r26, r24
     c1c:	ed 91       	ld	r30, X+
     c1e:	fc 91       	ld	r31, X
     c20:	01 90       	ld	r0, Z+
     c22:	f0 81       	ld	r31, Z
     c24:	e0 2d       	mov	r30, r0
     c26:	09 94       	ijmp

00000c28 <_ZN5Print7printlnEv>:
     c28:	6c e4       	ldi	r22, 0x4C	; 76
     c2a:	71 e0       	ldi	r23, 0x01	; 1
     c2c:	0c 94 f6 05 	jmp	0xbec	; 0xbec <_ZN5Print5writeEPKc>

00000c30 <_ZN5Print11printNumberEmh>:
     c30:	8f 92       	push	r8
     c32:	9f 92       	push	r9
     c34:	af 92       	push	r10
     c36:	bf 92       	push	r11
     c38:	ef 92       	push	r14
     c3a:	ff 92       	push	r15
     c3c:	0f 93       	push	r16
     c3e:	1f 93       	push	r17
     c40:	cf 93       	push	r28
     c42:	df 93       	push	r29
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62
     c48:	a1 97       	sbiw	r28, 0x21	; 33
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	f8 94       	cli
     c4e:	de bf       	out	0x3e, r29	; 62
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	cd bf       	out	0x3d, r28	; 61
     c54:	7c 01       	movw	r14, r24
     c56:	fa 01       	movw	r30, r20
     c58:	cb 01       	movw	r24, r22
     c5a:	19 a2       	std	Y+33, r1	; 0x21
     c5c:	22 30       	cpi	r18, 0x02	; 2
     c5e:	08 f4       	brcc	.+2      	; 0xc62 <_ZN5Print11printNumberEmh+0x32>
     c60:	2a e0       	ldi	r18, 0x0A	; 10
     c62:	8e 01       	movw	r16, r28
     c64:	0f 5d       	subi	r16, 0xDF	; 223
     c66:	1f 4f       	sbci	r17, 0xFF	; 255
     c68:	82 2e       	mov	r8, r18
     c6a:	91 2c       	mov	r9, r1
     c6c:	a1 2c       	mov	r10, r1
     c6e:	b1 2c       	mov	r11, r1
     c70:	bf 01       	movw	r22, r30
     c72:	a5 01       	movw	r20, r10
     c74:	94 01       	movw	r18, r8
     c76:	0e 94 06 11 	call	0x220c	; 0x220c <__udivmodsi4>
     c7a:	f9 01       	movw	r30, r18
     c7c:	ca 01       	movw	r24, r20
     c7e:	01 50       	subi	r16, 0x01	; 1
     c80:	11 09       	sbc	r17, r1
     c82:	6a 30       	cpi	r22, 0x0A	; 10
     c84:	10 f4       	brcc	.+4      	; 0xc8a <_ZN5Print11printNumberEmh+0x5a>
     c86:	60 5d       	subi	r22, 0xD0	; 208
     c88:	01 c0       	rjmp	.+2      	; 0xc8c <_ZN5Print11printNumberEmh+0x5c>
     c8a:	69 5c       	subi	r22, 0xC9	; 201
     c8c:	d8 01       	movw	r26, r16
     c8e:	6c 93       	st	X, r22
     c90:	23 2b       	or	r18, r19
     c92:	24 2b       	or	r18, r20
     c94:	25 2b       	or	r18, r21
     c96:	61 f7       	brne	.-40     	; 0xc70 <_ZN5Print11printNumberEmh+0x40>
     c98:	b8 01       	movw	r22, r16
     c9a:	c7 01       	movw	r24, r14
     c9c:	0e 94 f6 05 	call	0xbec	; 0xbec <_ZN5Print5writeEPKc>
     ca0:	a1 96       	adiw	r28, 0x21	; 33
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	f8 94       	cli
     ca6:	de bf       	out	0x3e, r29	; 62
     ca8:	0f be       	out	0x3f, r0	; 63
     caa:	cd bf       	out	0x3d, r28	; 61
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	1f 91       	pop	r17
     cb2:	0f 91       	pop	r16
     cb4:	ff 90       	pop	r15
     cb6:	ef 90       	pop	r14
     cb8:	bf 90       	pop	r11
     cba:	af 90       	pop	r10
     cbc:	9f 90       	pop	r9
     cbe:	8f 90       	pop	r8
     cc0:	08 95       	ret

00000cc2 <_ZN5Print5printEmi>:
     cc2:	21 15       	cp	r18, r1
     cc4:	31 05       	cpc	r19, r1
     cc6:	41 f4       	brne	.+16     	; 0xcd8 <_ZN5Print5printEmi+0x16>
     cc8:	dc 01       	movw	r26, r24
     cca:	ed 91       	ld	r30, X+
     ccc:	fc 91       	ld	r31, X
     cce:	01 90       	ld	r0, Z+
     cd0:	f0 81       	ld	r31, Z
     cd2:	e0 2d       	mov	r30, r0
     cd4:	64 2f       	mov	r22, r20
     cd6:	09 94       	ijmp
     cd8:	0c 94 18 06 	jmp	0xc30	; 0xc30 <_ZN5Print11printNumberEmh>

00000cdc <_ZN5Print5printEhi>:
     cdc:	9a 01       	movw	r18, r20
     cde:	46 2f       	mov	r20, r22
     ce0:	50 e0       	ldi	r21, 0x00	; 0
     ce2:	60 e0       	ldi	r22, 0x00	; 0
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	0c 94 61 06 	jmp	0xcc2	; 0xcc2 <_ZN5Print5printEmi>

00000cea <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     cea:	cf 92       	push	r12
     cec:	df 92       	push	r13
     cee:	ef 92       	push	r14
     cf0:	ff 92       	push	r15
     cf2:	0f 93       	push	r16
     cf4:	1f 93       	push	r17
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
  if (base == 0) {
     cfa:	21 15       	cp	r18, r1
     cfc:	31 05       	cpc	r19, r1
     cfe:	81 f4       	brne	.+32     	; 0xd20 <_ZN5Print5printEli+0x36>
    return write(n);
     d00:	dc 01       	movw	r26, r24
     d02:	ed 91       	ld	r30, X+
     d04:	fc 91       	ld	r31, X
     d06:	01 90       	ld	r0, Z+
     d08:	f0 81       	ld	r31, Z
     d0a:	e0 2d       	mov	r30, r0
     d0c:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	1f 91       	pop	r17
     d14:	0f 91       	pop	r16
     d16:	ff 90       	pop	r15
     d18:	ef 90       	pop	r14
     d1a:	df 90       	pop	r13
     d1c:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     d1e:	09 94       	ijmp
  } else if (base == 10) {
     d20:	2a 30       	cpi	r18, 0x0A	; 10
     d22:	31 05       	cpc	r19, r1
     d24:	01 f5       	brne	.+64     	; 0xd66 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
     d26:	77 ff       	sbrs	r23, 7
     d28:	1d c0       	rjmp	.+58     	; 0xd64 <_ZN5Print5printEli+0x7a>
     d2a:	6a 01       	movw	r12, r20
     d2c:	7b 01       	movw	r14, r22
     d2e:	ec 01       	movw	r28, r24
      int t = print('-');
     d30:	6d e2       	ldi	r22, 0x2D	; 45
     d32:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_ZN5Print5printEc>
     d36:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
     d38:	44 27       	eor	r20, r20
     d3a:	55 27       	eor	r21, r21
     d3c:	ba 01       	movw	r22, r20
     d3e:	4c 19       	sub	r20, r12
     d40:	5d 09       	sbc	r21, r13
     d42:	6e 09       	sbc	r22, r14
     d44:	7f 09       	sbc	r23, r15
     d46:	2a e0       	ldi	r18, 0x0A	; 10
     d48:	ce 01       	movw	r24, r28
     d4a:	0e 94 18 06 	call	0xc30	; 0xc30 <_ZN5Print11printNumberEmh>
     d4e:	80 0f       	add	r24, r16
     d50:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     d52:	df 91       	pop	r29
     d54:	cf 91       	pop	r28
     d56:	1f 91       	pop	r17
     d58:	0f 91       	pop	r16
     d5a:	ff 90       	pop	r15
     d5c:	ef 90       	pop	r14
     d5e:	df 90       	pop	r13
     d60:	cf 90       	pop	r12
     d62:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     d64:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
     d66:	df 91       	pop	r29
     d68:	cf 91       	pop	r28
     d6a:	1f 91       	pop	r17
     d6c:	0f 91       	pop	r16
     d6e:	ff 90       	pop	r15
     d70:	ef 90       	pop	r14
     d72:	df 90       	pop	r13
     d74:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     d76:	0c 94 18 06 	jmp	0xc30	; 0xc30 <_ZN5Print11printNumberEmh>

00000d7a <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
     d7a:	08 95       	ret

00000d7c <attachInterrupt>:
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	e8 f4       	brcc	.+58     	; 0xdba <attachInterrupt+0x3e>
     d80:	e8 2f       	mov	r30, r24
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	ee 0f       	add	r30, r30
     d86:	ff 1f       	adc	r31, r31
     d88:	ef 5f       	subi	r30, 0xFF	; 255
     d8a:	fe 4f       	sbci	r31, 0xFE	; 254
     d8c:	71 83       	std	Z+1, r23	; 0x01
     d8e:	60 83       	st	Z, r22
     d90:	81 30       	cpi	r24, 0x01	; 1
     d92:	41 f0       	breq	.+16     	; 0xda4 <attachInterrupt+0x28>
     d94:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     d98:	8c 7f       	andi	r24, 0xFC	; 252
     d9a:	48 2b       	or	r20, r24
     d9c:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     da0:	e8 9a       	sbi	0x1d, 0	; 29
     da2:	08 95       	ret
     da4:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     da8:	83 7f       	andi	r24, 0xF3	; 243
     daa:	44 0f       	add	r20, r20
     dac:	55 1f       	adc	r21, r21
     dae:	44 0f       	add	r20, r20
     db0:	55 1f       	adc	r21, r21
     db2:	48 2b       	or	r20, r24
     db4:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     db8:	e9 9a       	sbi	0x1d, 1	; 29
     dba:	08 95       	ret

00000dbc <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
     dbc:	1f 92       	push	r1
     dbe:	0f 92       	push	r0
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	0f 92       	push	r0
     dc4:	11 24       	eor	r1, r1
     dc6:	2f 93       	push	r18
     dc8:	3f 93       	push	r19
     dca:	4f 93       	push	r20
     dcc:	5f 93       	push	r21
     dce:	6f 93       	push	r22
     dd0:	7f 93       	push	r23
     dd2:	8f 93       	push	r24
     dd4:	9f 93       	push	r25
     dd6:	af 93       	push	r26
     dd8:	bf 93       	push	r27
     dda:	ef 93       	push	r30
     ddc:	ff 93       	push	r31
     dde:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <intFunc>
     de2:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <intFunc+0x1>
     de6:	09 95       	icall
     de8:	ff 91       	pop	r31
     dea:	ef 91       	pop	r30
     dec:	bf 91       	pop	r27
     dee:	af 91       	pop	r26
     df0:	9f 91       	pop	r25
     df2:	8f 91       	pop	r24
     df4:	7f 91       	pop	r23
     df6:	6f 91       	pop	r22
     df8:	5f 91       	pop	r21
     dfa:	4f 91       	pop	r20
     dfc:	3f 91       	pop	r19
     dfe:	2f 91       	pop	r18
     e00:	0f 90       	pop	r0
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	0f 90       	pop	r0
     e06:	1f 90       	pop	r1
     e08:	18 95       	reti

00000e0a <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
     e0a:	1f 92       	push	r1
     e0c:	0f 92       	push	r0
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	0f 92       	push	r0
     e12:	11 24       	eor	r1, r1
     e14:	2f 93       	push	r18
     e16:	3f 93       	push	r19
     e18:	4f 93       	push	r20
     e1a:	5f 93       	push	r21
     e1c:	6f 93       	push	r22
     e1e:	7f 93       	push	r23
     e20:	8f 93       	push	r24
     e22:	9f 93       	push	r25
     e24:	af 93       	push	r26
     e26:	bf 93       	push	r27
     e28:	ef 93       	push	r30
     e2a:	ff 93       	push	r31
     e2c:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <intFunc+0x2>
     e30:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <intFunc+0x3>
     e34:	09 95       	icall
     e36:	ff 91       	pop	r31
     e38:	ef 91       	pop	r30
     e3a:	bf 91       	pop	r27
     e3c:	af 91       	pop	r26
     e3e:	9f 91       	pop	r25
     e40:	8f 91       	pop	r24
     e42:	7f 91       	pop	r23
     e44:	6f 91       	pop	r22
     e46:	5f 91       	pop	r21
     e48:	4f 91       	pop	r20
     e4a:	3f 91       	pop	r19
     e4c:	2f 91       	pop	r18
     e4e:	0f 90       	pop	r0
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	0f 90       	pop	r0
     e54:	1f 90       	pop	r1
     e56:	18 95       	reti

00000e58 <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
     e58:	1f 92       	push	r1
     e5a:	0f 92       	push	r0
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	0f 92       	push	r0
     e60:	11 24       	eor	r1, r1
     e62:	2f 93       	push	r18
     e64:	3f 93       	push	r19
     e66:	8f 93       	push	r24
     e68:	9f 93       	push	r25
     e6a:	af 93       	push	r26
     e6c:	bf 93       	push	r27
     e6e:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <timer0_millis>
     e72:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <timer0_millis+0x1>
     e76:	a0 91 53 02 	lds	r26, 0x0253	; 0x800253 <timer0_millis+0x2>
     e7a:	b0 91 54 02 	lds	r27, 0x0254	; 0x800254 <timer0_millis+0x3>
     e7e:	30 91 50 02 	lds	r19, 0x0250	; 0x800250 <timer0_fract>
     e82:	23 e0       	ldi	r18, 0x03	; 3
     e84:	23 0f       	add	r18, r19
     e86:	2d 37       	cpi	r18, 0x7D	; 125
     e88:	20 f4       	brcc	.+8      	; 0xe92 <__vector_16+0x3a>
     e8a:	01 96       	adiw	r24, 0x01	; 1
     e8c:	a1 1d       	adc	r26, r1
     e8e:	b1 1d       	adc	r27, r1
     e90:	05 c0       	rjmp	.+10     	; 0xe9c <__vector_16+0x44>
     e92:	26 e8       	ldi	r18, 0x86	; 134
     e94:	23 0f       	add	r18, r19
     e96:	02 96       	adiw	r24, 0x02	; 2
     e98:	a1 1d       	adc	r26, r1
     e9a:	b1 1d       	adc	r27, r1
     e9c:	20 93 50 02 	sts	0x0250, r18	; 0x800250 <timer0_fract>
     ea0:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <timer0_millis>
     ea4:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <timer0_millis+0x1>
     ea8:	a0 93 53 02 	sts	0x0253, r26	; 0x800253 <timer0_millis+0x2>
     eac:	b0 93 54 02 	sts	0x0254, r27	; 0x800254 <timer0_millis+0x3>
     eb0:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <timer0_overflow_count>
     eb4:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <timer0_overflow_count+0x1>
     eb8:	a0 91 57 02 	lds	r26, 0x0257	; 0x800257 <timer0_overflow_count+0x2>
     ebc:	b0 91 58 02 	lds	r27, 0x0258	; 0x800258 <timer0_overflow_count+0x3>
     ec0:	01 96       	adiw	r24, 0x01	; 1
     ec2:	a1 1d       	adc	r26, r1
     ec4:	b1 1d       	adc	r27, r1
     ec6:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <timer0_overflow_count>
     eca:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <timer0_overflow_count+0x1>
     ece:	a0 93 57 02 	sts	0x0257, r26	; 0x800257 <timer0_overflow_count+0x2>
     ed2:	b0 93 58 02 	sts	0x0258, r27	; 0x800258 <timer0_overflow_count+0x3>
     ed6:	bf 91       	pop	r27
     ed8:	af 91       	pop	r26
     eda:	9f 91       	pop	r25
     edc:	8f 91       	pop	r24
     ede:	3f 91       	pop	r19
     ee0:	2f 91       	pop	r18
     ee2:	0f 90       	pop	r0
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	0f 90       	pop	r0
     ee8:	1f 90       	pop	r1
     eea:	18 95       	reti

00000eec <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     eec:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     eee:	f8 94       	cli
	m = timer0_overflow_count;
     ef0:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <timer0_overflow_count>
     ef4:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <timer0_overflow_count+0x1>
     ef8:	a0 91 57 02 	lds	r26, 0x0257	; 0x800257 <timer0_overflow_count+0x2>
     efc:	b0 91 58 02 	lds	r27, 0x0258	; 0x800258 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     f00:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     f02:	a8 9b       	sbis	0x15, 0	; 21
     f04:	05 c0       	rjmp	.+10     	; 0xf10 <micros+0x24>
     f06:	2f 3f       	cpi	r18, 0xFF	; 255
     f08:	19 f0       	breq	.+6      	; 0xf10 <micros+0x24>
		m++;
     f0a:	01 96       	adiw	r24, 0x01	; 1
     f0c:	a1 1d       	adc	r26, r1
     f0e:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     f10:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     f12:	ba 2f       	mov	r27, r26
     f14:	a9 2f       	mov	r26, r25
     f16:	98 2f       	mov	r25, r24
     f18:	88 27       	eor	r24, r24
     f1a:	82 0f       	add	r24, r18
     f1c:	91 1d       	adc	r25, r1
     f1e:	a1 1d       	adc	r26, r1
     f20:	b1 1d       	adc	r27, r1
     f22:	bc 01       	movw	r22, r24
     f24:	cd 01       	movw	r24, r26
     f26:	42 e0       	ldi	r20, 0x02	; 2
     f28:	66 0f       	add	r22, r22
     f2a:	77 1f       	adc	r23, r23
     f2c:	88 1f       	adc	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	4a 95       	dec	r20
     f32:	d1 f7       	brne	.-12     	; 0xf28 <micros+0x3c>
}
     f34:	08 95       	ret

00000f36 <delay>:

void delay(unsigned long ms)
{
     f36:	8f 92       	push	r8
     f38:	9f 92       	push	r9
     f3a:	af 92       	push	r10
     f3c:	bf 92       	push	r11
     f3e:	cf 92       	push	r12
     f40:	df 92       	push	r13
     f42:	ef 92       	push	r14
     f44:	ff 92       	push	r15
     f46:	6b 01       	movw	r12, r22
     f48:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     f4a:	0e 94 76 07 	call	0xeec	; 0xeec <micros>
     f4e:	4b 01       	movw	r8, r22
     f50:	5c 01       	movw	r10, r24

	while (ms > 0) {
     f52:	c1 14       	cp	r12, r1
     f54:	d1 04       	cpc	r13, r1
     f56:	e1 04       	cpc	r14, r1
     f58:	f1 04       	cpc	r15, r1
     f5a:	01 f1       	breq	.+64     	; 0xf9c <delay+0x66>
		yield();
     f5c:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
     f60:	0e 94 76 07 	call	0xeec	; 0xeec <micros>
     f64:	dc 01       	movw	r26, r24
     f66:	cb 01       	movw	r24, r22
     f68:	88 19       	sub	r24, r8
     f6a:	99 09       	sbc	r25, r9
     f6c:	aa 09       	sbc	r26, r10
     f6e:	bb 09       	sbc	r27, r11
     f70:	88 3e       	cpi	r24, 0xE8	; 232
     f72:	93 40       	sbci	r25, 0x03	; 3
     f74:	a1 05       	cpc	r26, r1
     f76:	b1 05       	cpc	r27, r1
     f78:	60 f3       	brcs	.-40     	; 0xf52 <delay+0x1c>
			ms--;
     f7a:	21 e0       	ldi	r18, 0x01	; 1
     f7c:	c2 1a       	sub	r12, r18
     f7e:	d1 08       	sbc	r13, r1
     f80:	e1 08       	sbc	r14, r1
     f82:	f1 08       	sbc	r15, r1
			start += 1000;
     f84:	88 ee       	ldi	r24, 0xE8	; 232
     f86:	88 0e       	add	r8, r24
     f88:	83 e0       	ldi	r24, 0x03	; 3
     f8a:	98 1e       	adc	r9, r24
     f8c:	a1 1c       	adc	r10, r1
     f8e:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     f90:	c1 14       	cp	r12, r1
     f92:	d1 04       	cpc	r13, r1
     f94:	e1 04       	cpc	r14, r1
     f96:	f1 04       	cpc	r15, r1
     f98:	19 f7       	brne	.-58     	; 0xf60 <delay+0x2a>
     f9a:	db cf       	rjmp	.-74     	; 0xf52 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
     f9c:	ff 90       	pop	r15
     f9e:	ef 90       	pop	r14
     fa0:	df 90       	pop	r13
     fa2:	cf 90       	pop	r12
     fa4:	bf 90       	pop	r11
     fa6:	af 90       	pop	r10
     fa8:	9f 90       	pop	r9
     faa:	8f 90       	pop	r8
     fac:	08 95       	ret

00000fae <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     fae:	82 30       	cpi	r24, 0x02	; 2
     fb0:	91 05       	cpc	r25, r1
     fb2:	38 f0       	brcs	.+14     	; 0xfc2 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     fbc:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     fbe:	01 97       	sbiw	r24, 0x01	; 1
     fc0:	f1 f7       	brne	.-4      	; 0xfbe <delayMicroseconds+0x10>
     fc2:	08 95       	ret

00000fc4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     fc4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     fc6:	84 b5       	in	r24, 0x24	; 36
     fc8:	82 60       	ori	r24, 0x02	; 2
     fca:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     fcc:	84 b5       	in	r24, 0x24	; 36
     fce:	81 60       	ori	r24, 0x01	; 1
     fd0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     fd2:	85 b5       	in	r24, 0x25	; 37
     fd4:	82 60       	ori	r24, 0x02	; 2
     fd6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     fd8:	85 b5       	in	r24, 0x25	; 37
     fda:	81 60       	ori	r24, 0x01	; 1
     fdc:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     fde:	ee e6       	ldi	r30, 0x6E	; 110
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	81 60       	ori	r24, 0x01	; 1
     fe6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     fe8:	e1 e8       	ldi	r30, 0x81	; 129
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     fee:	80 81       	ld	r24, Z
     ff0:	82 60       	ori	r24, 0x02	; 2
     ff2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     ff4:	80 81       	ld	r24, Z
     ff6:	81 60       	ori	r24, 0x01	; 1
     ff8:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     ffa:	e0 e8       	ldi	r30, 0x80	; 128
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	81 60       	ori	r24, 0x01	; 1
    1002:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1004:	e1 eb       	ldi	r30, 0xB1	; 177
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	84 60       	ori	r24, 0x04	; 4
    100c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    100e:	e0 eb       	ldi	r30, 0xB0	; 176
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	81 60       	ori	r24, 0x01	; 1
    1016:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1018:	ea e7       	ldi	r30, 0x7A	; 122
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	84 60       	ori	r24, 0x04	; 4
    1020:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1022:	80 81       	ld	r24, Z
    1024:	82 60       	ori	r24, 0x02	; 2
    1026:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1028:	80 81       	ld	r24, Z
    102a:	81 60       	ori	r24, 0x01	; 1
    102c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    102e:	80 81       	ld	r24, Z
    1030:	80 68       	ori	r24, 0x80	; 128
    1032:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1034:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1038:	08 95       	ret

0000103a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    103a:	83 30       	cpi	r24, 0x03	; 3
    103c:	81 f0       	breq	.+32     	; 0x105e <turnOffPWM+0x24>
    103e:	28 f4       	brcc	.+10     	; 0x104a <turnOffPWM+0x10>
    1040:	81 30       	cpi	r24, 0x01	; 1
    1042:	99 f0       	breq	.+38     	; 0x106a <turnOffPWM+0x30>
    1044:	82 30       	cpi	r24, 0x02	; 2
    1046:	a1 f0       	breq	.+40     	; 0x1070 <turnOffPWM+0x36>
    1048:	08 95       	ret
    104a:	87 30       	cpi	r24, 0x07	; 7
    104c:	a9 f0       	breq	.+42     	; 0x1078 <turnOffPWM+0x3e>
    104e:	88 30       	cpi	r24, 0x08	; 8
    1050:	b9 f0       	breq	.+46     	; 0x1080 <turnOffPWM+0x46>
    1052:	84 30       	cpi	r24, 0x04	; 4
    1054:	d1 f4       	brne	.+52     	; 0x108a <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1056:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    105a:	8f 7d       	andi	r24, 0xDF	; 223
    105c:	03 c0       	rjmp	.+6      	; 0x1064 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    105e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1062:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1064:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1068:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    106a:	84 b5       	in	r24, 0x24	; 36
    106c:	8f 77       	andi	r24, 0x7F	; 127
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1070:	84 b5       	in	r24, 0x24	; 36
    1072:	8f 7d       	andi	r24, 0xDF	; 223
    1074:	84 bd       	out	0x24, r24	; 36
    1076:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1078:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    107c:	8f 77       	andi	r24, 0x7F	; 127
    107e:	03 c0       	rjmp	.+6      	; 0x1086 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1080:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1084:	8f 7d       	andi	r24, 0xDF	; 223
    1086:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    108a:	08 95       	ret

0000108c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	fc 01       	movw	r30, r24
    1094:	e4 58       	subi	r30, 0x84	; 132
    1096:	ff 4f       	sbci	r31, 0xFF	; 255
    1098:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    109a:	fc 01       	movw	r30, r24
    109c:	e0 57       	subi	r30, 0x70	; 112
    109e:	ff 4f       	sbci	r31, 0xFF	; 255
    10a0:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    10a2:	88 23       	and	r24, r24
    10a4:	61 f1       	breq	.+88     	; 0x10fe <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	fc 01       	movw	r30, r24
    10ae:	e2 55       	subi	r30, 0x52	; 82
    10b0:	ff 4f       	sbci	r31, 0xFF	; 255
    10b2:	c5 91       	lpm	r28, Z+
    10b4:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    10b6:	fc 01       	movw	r30, r24
    10b8:	ec 55       	subi	r30, 0x5C	; 92
    10ba:	ff 4f       	sbci	r31, 0xFF	; 255
    10bc:	a5 91       	lpm	r26, Z+
    10be:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    10c0:	61 11       	cpse	r22, r1
    10c2:	09 c0       	rjmp	.+18     	; 0x10d6 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    10c4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    10c6:	f8 94       	cli
		*reg &= ~bit;
    10c8:	88 81       	ld	r24, Y
    10ca:	20 95       	com	r18
    10cc:	82 23       	and	r24, r18
    10ce:	88 83       	st	Y, r24
		*out &= ~bit;
    10d0:	ec 91       	ld	r30, X
    10d2:	2e 23       	and	r18, r30
    10d4:	0b c0       	rjmp	.+22     	; 0x10ec <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    10d6:	62 30       	cpi	r22, 0x02	; 2
    10d8:	61 f4       	brne	.+24     	; 0x10f2 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    10da:	9f b7       	in	r25, 0x3f	; 63
                cli();
    10dc:	f8 94       	cli
		*reg &= ~bit;
    10de:	88 81       	ld	r24, Y
    10e0:	32 2f       	mov	r19, r18
    10e2:	30 95       	com	r19
    10e4:	83 23       	and	r24, r19
    10e6:	88 83       	st	Y, r24
		*out |= bit;
    10e8:	ec 91       	ld	r30, X
    10ea:	2e 2b       	or	r18, r30
    10ec:	2c 93       	st	X, r18
		SREG = oldSREG;
    10ee:	9f bf       	out	0x3f, r25	; 63
    10f0:	06 c0       	rjmp	.+12     	; 0x10fe <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    10f2:	8f b7       	in	r24, 0x3f	; 63
                cli();
    10f4:	f8 94       	cli
		*reg |= bit;
    10f6:	e8 81       	ld	r30, Y
    10f8:	2e 2b       	or	r18, r30
    10fa:	28 83       	st	Y, r18
		SREG = oldSREG;
    10fc:	8f bf       	out	0x3f, r24	; 63
	}
}
    10fe:	df 91       	pop	r29
    1100:	cf 91       	pop	r28
    1102:	08 95       	ret

00001104 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1104:	1f 93       	push	r17
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	f9 01       	movw	r30, r18
    1110:	e8 59       	subi	r30, 0x98	; 152
    1112:	ff 4f       	sbci	r31, 0xFF	; 255
    1114:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1116:	f9 01       	movw	r30, r18
    1118:	e4 58       	subi	r30, 0x84	; 132
    111a:	ff 4f       	sbci	r31, 0xFF	; 255
    111c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    111e:	f9 01       	movw	r30, r18
    1120:	e0 57       	subi	r30, 0x70	; 112
    1122:	ff 4f       	sbci	r31, 0xFF	; 255
    1124:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1126:	cc 23       	and	r28, r28
    1128:	c1 f0       	breq	.+48     	; 0x115a <digitalWrite+0x56>
    112a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    112c:	81 11       	cpse	r24, r1
    112e:	0e 94 1d 08 	call	0x103a	; 0x103a <turnOffPWM>

	out = portOutputRegister(port);
    1132:	ec 2f       	mov	r30, r28
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	ee 0f       	add	r30, r30
    1138:	ff 1f       	adc	r31, r31
    113a:	ec 55       	subi	r30, 0x5C	; 92
    113c:	ff 4f       	sbci	r31, 0xFF	; 255
    113e:	a5 91       	lpm	r26, Z+
    1140:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1142:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1144:	f8 94       	cli

	if (val == LOW) {
    1146:	11 11       	cpse	r17, r1
    1148:	04 c0       	rjmp	.+8      	; 0x1152 <digitalWrite+0x4e>
		*out &= ~bit;
    114a:	8c 91       	ld	r24, X
    114c:	d0 95       	com	r29
    114e:	d8 23       	and	r29, r24
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1152:	ec 91       	ld	r30, X
    1154:	de 2b       	or	r29, r30
    1156:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1158:	9f bf       	out	0x3f, r25	; 63
}
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	1f 91       	pop	r17
    1160:	08 95       	ret

00001162 <_ZN9DS3232RTC7bcd2decEh>:
{
    tmElements_t tm;

    breakTime(t, tm);
    return ( write(tm) );
}
    1162:	98 2f       	mov	r25, r24
    1164:	92 95       	swap	r25
    1166:	9f 70       	andi	r25, 0x0F	; 15
    1168:	2a ef       	ldi	r18, 0xFA	; 250
    116a:	92 9f       	mul	r25, r18
    116c:	80 0d       	add	r24, r0
    116e:	11 24       	eor	r1, r1
    1170:	08 95       	ret

00001172 <_GLOBAL__sub_I__ZN9DS3232RTC7errCodeE>:
    1172:	80 e7       	ldi	r24, 0x70	; 112
    1174:	92 e0       	ldi	r25, 0x02	; 2
    1176:	0c 94 36 0e 	jmp	0x1c6c	; 0x1c6c <_ZN7TwoWire5beginEv>

0000117a <_ZN9DS3232RTC8writeRTCEhPhh>:
    117a:	ff 92       	push	r15
    117c:	0f 93       	push	r16
    117e:	1f 93       	push	r17
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
    1184:	c6 2f       	mov	r28, r22
    1186:	f4 2e       	mov	r15, r20
    1188:	05 2f       	mov	r16, r21
    118a:	12 2f       	mov	r17, r18
    118c:	68 e6       	ldi	r22, 0x68	; 104
    118e:	70 e0       	ldi	r23, 0x00	; 0
    1190:	80 e7       	ldi	r24, 0x70	; 112
    1192:	92 e0       	ldi	r25, 0x02	; 2
    1194:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <_ZN7TwoWire17beginTransmissionEi>
    1198:	6c 2f       	mov	r22, r28
    119a:	80 e7       	ldi	r24, 0x70	; 112
    119c:	92 e0       	ldi	r25, 0x02	; 2
    119e:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <_ZN7TwoWire5writeEh>
    11a2:	cf 2d       	mov	r28, r15
    11a4:	d0 2f       	mov	r29, r16
    11a6:	ce 01       	movw	r24, r28
    11a8:	81 0f       	add	r24, r17
    11aa:	91 1d       	adc	r25, r1
    11ac:	8c 01       	movw	r16, r24
    11ae:	c0 17       	cp	r28, r16
    11b0:	d1 07       	cpc	r29, r17
    11b2:	31 f0       	breq	.+12     	; 0x11c0 <_ZN9DS3232RTC8writeRTCEhPhh+0x46>
    11b4:	69 91       	ld	r22, Y+
    11b6:	80 e7       	ldi	r24, 0x70	; 112
    11b8:	92 e0       	ldi	r25, 0x02	; 2
    11ba:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <_ZN7TwoWire5writeEh>
    11be:	f7 cf       	rjmp	.-18     	; 0x11ae <_ZN9DS3232RTC8writeRTCEhPhh+0x34>
    11c0:	80 e7       	ldi	r24, 0x70	; 112
    11c2:	92 e0       	ldi	r25, 0x02	; 2
    11c4:	df 91       	pop	r29
    11c6:	cf 91       	pop	r28
    11c8:	1f 91       	pop	r17
    11ca:	0f 91       	pop	r16
    11cc:	ff 90       	pop	r15
    11ce:	0c 94 c9 0e 	jmp	0x1d92	; 0x1d92 <_ZN7TwoWire15endTransmissionEv>

000011d2 <_ZN9DS3232RTC8writeRTCEhh>:
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
    11d6:	1f 92       	push	r1
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    11dc:	49 83       	std	Y+1, r20	; 0x01
    11de:	21 e0       	ldi	r18, 0x01	; 1
    11e0:	ae 01       	movw	r20, r28
    11e2:	4f 5f       	subi	r20, 0xFF	; 255
    11e4:	5f 4f       	sbci	r21, 0xFF	; 255
    11e6:	0e 94 bd 08 	call	0x117a	; 0x117a <_ZN9DS3232RTC8writeRTCEhPhh>
    11ea:	0f 90       	pop	r0
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	08 95       	ret

000011f2 <_ZN9DS3232RTC4readER12tmElements_t>:
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	ec 01       	movw	r28, r24
    11f8:	68 e6       	ldi	r22, 0x68	; 104
    11fa:	70 e0       	ldi	r23, 0x00	; 0
    11fc:	80 e7       	ldi	r24, 0x70	; 112
    11fe:	92 e0       	ldi	r25, 0x02	; 2
    1200:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <_ZN7TwoWire17beginTransmissionEi>
    1204:	60 e0       	ldi	r22, 0x00	; 0
    1206:	80 e7       	ldi	r24, 0x70	; 112
    1208:	92 e0       	ldi	r25, 0x02	; 2
    120a:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <_ZN7TwoWire5writeEh>
    120e:	80 e7       	ldi	r24, 0x70	; 112
    1210:	92 e0       	ldi	r25, 0x02	; 2
    1212:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <_ZN7TwoWire15endTransmissionEv>
    1216:	88 23       	and	r24, r24
    1218:	19 f0       	breq	.+6      	; 0x1220 <_ZN9DS3232RTC4readER12tmElements_t+0x2e>
    121a:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <_ZN9DS3232RTC7errCodeE>
    121e:	3c c0       	rjmp	.+120    	; 0x1298 <_ZN9DS3232RTC4readER12tmElements_t+0xa6>
    1220:	47 e0       	ldi	r20, 0x07	; 7
    1222:	50 e0       	ldi	r21, 0x00	; 0
    1224:	68 e6       	ldi	r22, 0x68	; 104
    1226:	70 e0       	ldi	r23, 0x00	; 0
    1228:	80 e7       	ldi	r24, 0x70	; 112
    122a:	92 e0       	ldi	r25, 0x02	; 2
    122c:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <_ZN7TwoWire11requestFromEii>
    1230:	80 e7       	ldi	r24, 0x70	; 112
    1232:	92 e0       	ldi	r25, 0x02	; 2
    1234:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <_ZN7TwoWire4readEv>
    1238:	8f 77       	andi	r24, 0x7F	; 127
    123a:	0e 94 b1 08 	call	0x1162	; 0x1162 <_ZN9DS3232RTC7bcd2decEh>
    123e:	88 83       	st	Y, r24
    1240:	80 e7       	ldi	r24, 0x70	; 112
    1242:	92 e0       	ldi	r25, 0x02	; 2
    1244:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <_ZN7TwoWire4readEv>
    1248:	0e 94 b1 08 	call	0x1162	; 0x1162 <_ZN9DS3232RTC7bcd2decEh>
    124c:	89 83       	std	Y+1, r24	; 0x01
    124e:	80 e7       	ldi	r24, 0x70	; 112
    1250:	92 e0       	ldi	r25, 0x02	; 2
    1252:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <_ZN7TwoWire4readEv>
    1256:	8f 7b       	andi	r24, 0xBF	; 191
    1258:	0e 94 b1 08 	call	0x1162	; 0x1162 <_ZN9DS3232RTC7bcd2decEh>
    125c:	8a 83       	std	Y+2, r24	; 0x02
    125e:	80 e7       	ldi	r24, 0x70	; 112
    1260:	92 e0       	ldi	r25, 0x02	; 2
    1262:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <_ZN7TwoWire4readEv>
    1266:	8b 83       	std	Y+3, r24	; 0x03
    1268:	80 e7       	ldi	r24, 0x70	; 112
    126a:	92 e0       	ldi	r25, 0x02	; 2
    126c:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <_ZN7TwoWire4readEv>
    1270:	0e 94 b1 08 	call	0x1162	; 0x1162 <_ZN9DS3232RTC7bcd2decEh>
    1274:	8c 83       	std	Y+4, r24	; 0x04
    1276:	80 e7       	ldi	r24, 0x70	; 112
    1278:	92 e0       	ldi	r25, 0x02	; 2
    127a:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <_ZN7TwoWire4readEv>
    127e:	8f 77       	andi	r24, 0x7F	; 127
    1280:	0e 94 b1 08 	call	0x1162	; 0x1162 <_ZN9DS3232RTC7bcd2decEh>
    1284:	8d 83       	std	Y+5, r24	; 0x05
    1286:	80 e7       	ldi	r24, 0x70	; 112
    1288:	92 e0       	ldi	r25, 0x02	; 2
    128a:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <_ZN7TwoWire4readEv>
    128e:	0e 94 b1 08 	call	0x1162	; 0x1162 <_ZN9DS3232RTC7bcd2decEh>
    1292:	82 5e       	subi	r24, 0xE2	; 226
    1294:	8e 83       	std	Y+6, r24	; 0x06
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	df 91       	pop	r29
    129a:	cf 91       	pop	r28
    129c:	08 95       	ret

0000129e <_ZN9DS3232RTC3getEv>:
    129e:	cf 93       	push	r28
    12a0:	df 93       	push	r29
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	27 97       	sbiw	r28, 0x07	; 7
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	cd bf       	out	0x3d, r28	; 61
    12b2:	ce 01       	movw	r24, r28
    12b4:	01 96       	adiw	r24, 0x01	; 1
    12b6:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_ZN9DS3232RTC4readER12tmElements_t>
    12ba:	81 11       	cpse	r24, r1
    12bc:	05 c0       	rjmp	.+10     	; 0x12c8 <_ZN9DS3232RTC3getEv+0x2a>
    12be:	ce 01       	movw	r24, r28
    12c0:	01 96       	adiw	r24, 0x01	; 1
    12c2:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_Z8makeTimeR12tmElements_t>
    12c6:	03 c0       	rjmp	.+6      	; 0x12ce <_ZN9DS3232RTC3getEv+0x30>
    12c8:	60 e0       	ldi	r22, 0x00	; 0
    12ca:	70 e0       	ldi	r23, 0x00	; 0
    12cc:	cb 01       	movw	r24, r22
    12ce:	27 96       	adiw	r28, 0x07	; 7
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	f8 94       	cli
    12d4:	de bf       	out	0x3e, r29	; 62
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	cd bf       	out	0x3d, r28	; 61
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
    12de:	08 95       	ret

000012e0 <_ZN9DS3232RTC7readRTCEhPhh>:
    12e0:	ff 92       	push	r15
    12e2:	0f 93       	push	r16
    12e4:	1f 93       	push	r17
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
    12ea:	c6 2f       	mov	r28, r22
    12ec:	f4 2e       	mov	r15, r20
    12ee:	05 2f       	mov	r16, r21
    12f0:	12 2f       	mov	r17, r18
    12f2:	68 e6       	ldi	r22, 0x68	; 104
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	80 e7       	ldi	r24, 0x70	; 112
    12f8:	92 e0       	ldi	r25, 0x02	; 2
    12fa:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <_ZN7TwoWire17beginTransmissionEi>
    12fe:	6c 2f       	mov	r22, r28
    1300:	80 e7       	ldi	r24, 0x70	; 112
    1302:	92 e0       	ldi	r25, 0x02	; 2
    1304:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <_ZN7TwoWire5writeEh>
    1308:	80 e7       	ldi	r24, 0x70	; 112
    130a:	92 e0       	ldi	r25, 0x02	; 2
    130c:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <_ZN7TwoWire15endTransmissionEv>
    1310:	81 11       	cpse	r24, r1
    1312:	16 c0       	rjmp	.+44     	; 0x1340 <_ZN9DS3232RTC7readRTCEhPhh+0x60>
    1314:	41 2f       	mov	r20, r17
    1316:	68 e6       	ldi	r22, 0x68	; 104
    1318:	80 e7       	ldi	r24, 0x70	; 112
    131a:	92 e0       	ldi	r25, 0x02	; 2
    131c:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <_ZN7TwoWire11requestFromEhh>
    1320:	cf 2d       	mov	r28, r15
    1322:	d0 2f       	mov	r29, r16
    1324:	ce 01       	movw	r24, r28
    1326:	81 0f       	add	r24, r17
    1328:	91 1d       	adc	r25, r1
    132a:	8c 01       	movw	r16, r24
    132c:	c0 17       	cp	r28, r16
    132e:	d1 07       	cpc	r29, r17
    1330:	31 f0       	breq	.+12     	; 0x133e <_ZN9DS3232RTC7readRTCEhPhh+0x5e>
    1332:	80 e7       	ldi	r24, 0x70	; 112
    1334:	92 e0       	ldi	r25, 0x02	; 2
    1336:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <_ZN7TwoWire4readEv>
    133a:	89 93       	st	Y+, r24
    133c:	f7 cf       	rjmp	.-18     	; 0x132c <_ZN9DS3232RTC7readRTCEhPhh+0x4c>
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	1f 91       	pop	r17
    1346:	0f 91       	pop	r16
    1348:	ff 90       	pop	r15
    134a:	08 95       	ret

0000134c <_ZN9DS3232RTC7readRTCEh>:
    134c:	cf 93       	push	r28
    134e:	df 93       	push	r29
    1350:	1f 92       	push	r1
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
    1356:	21 e0       	ldi	r18, 0x01	; 1
    1358:	ae 01       	movw	r20, r28
    135a:	4f 5f       	subi	r20, 0xFF	; 255
    135c:	5f 4f       	sbci	r21, 0xFF	; 255
    135e:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_ZN9DS3232RTC7readRTCEhPhh>
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	0f 90       	pop	r0
    1366:	df 91       	pop	r29
    1368:	cf 91       	pop	r28
    136a:	08 95       	ret

0000136c <_ZN9DS3232RTC14alarmInterruptEhb>:
/*----------------------------------------------------------------------*
 * Enable or disable an alarm "interrupt" which asserts the INT pin     *
 * on the RTC.                                                          *
 *----------------------------------------------------------------------*/
void DS3232RTC::alarmInterrupt(byte alarmNumber, bool interruptEnabled)
{
    136c:	0f 93       	push	r16
    136e:	1f 93       	push	r17
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	8c 01       	movw	r16, r24
    1376:	c6 2f       	mov	r28, r22
    1378:	d4 2f       	mov	r29, r20
    uint8_t controlReg, mask;
    
    controlReg = readRTC(RTC_CONTROL);
    137a:	6e e0       	ldi	r22, 0x0E	; 14
    137c:	0e 94 a6 09 	call	0x134c	; 0x134c <_ZN9DS3232RTC7readRTCEh>
    mask = _BV(A1IE) << (alarmNumber - 1);
    1380:	c1 50       	subi	r28, 0x01	; 1
    1382:	21 e0       	ldi	r18, 0x01	; 1
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	01 c0       	rjmp	.+2      	; 0x138a <_ZN9DS3232RTC14alarmInterruptEhb+0x1e>
    1388:	22 0f       	add	r18, r18
    138a:	ca 95       	dec	r28
    138c:	ea f7       	brpl	.-6      	; 0x1388 <_ZN9DS3232RTC14alarmInterruptEhb+0x1c>
    if (interruptEnabled)
    138e:	dd 23       	and	r29, r29
    1390:	19 f0       	breq	.+6      	; 0x1398 <_ZN9DS3232RTC14alarmInterruptEhb+0x2c>
        controlReg |= mask;
    1392:	48 2f       	mov	r20, r24
    1394:	42 2b       	or	r20, r18
    1396:	03 c0       	rjmp	.+6      	; 0x139e <_ZN9DS3232RTC14alarmInterruptEhb+0x32>
    else
        controlReg &= ~mask;
    1398:	20 95       	com	r18
    139a:	42 2f       	mov	r20, r18
    139c:	48 23       	and	r20, r24
    writeRTC(RTC_CONTROL, controlReg); 
    139e:	6e e0       	ldi	r22, 0x0E	; 14
    13a0:	c8 01       	movw	r24, r16
}
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	1f 91       	pop	r17
    13a8:	0f 91       	pop	r16
    mask = _BV(A1IE) << (alarmNumber - 1);
    if (interruptEnabled)
        controlReg |= mask;
    else
        controlReg &= ~mask;
    writeRTC(RTC_CONTROL, controlReg); 
    13aa:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <_ZN9DS3232RTC8writeRTCEhh>

000013ae <_ZN9DS3232RTC5alarmEh>:
/*----------------------------------------------------------------------*
 * Returns true or false depending on whether the given alarm has been  *
 * triggered, and resets the alarm flag bit.                            *
 *----------------------------------------------------------------------*/
bool DS3232RTC::alarm(byte alarmNumber)
{
    13ae:	0f 93       	push	r16
    13b0:	1f 93       	push	r17
    13b2:	cf 93       	push	r28
    13b4:	8c 01       	movw	r16, r24
    13b6:	c6 2f       	mov	r28, r22
    uint8_t statusReg, mask;
    
    statusReg = readRTC(RTC_STATUS);
    13b8:	6f e0       	ldi	r22, 0x0F	; 15
    13ba:	0e 94 a6 09 	call	0x134c	; 0x134c <_ZN9DS3232RTC7readRTCEh>
    mask = _BV(A1F) << (alarmNumber - 1);
    13be:	c1 50       	subi	r28, 0x01	; 1
    13c0:	21 e0       	ldi	r18, 0x01	; 1
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	01 c0       	rjmp	.+2      	; 0x13c8 <_ZN9DS3232RTC5alarmEh+0x1a>
    13c6:	22 0f       	add	r18, r18
    13c8:	ca 95       	dec	r28
    13ca:	ea f7       	brpl	.-6      	; 0x13c6 <_ZN9DS3232RTC5alarmEh+0x18>
    if (statusReg & mask) {
    13cc:	98 2f       	mov	r25, r24
    13ce:	92 23       	and	r25, r18
    13d0:	49 f0       	breq	.+18     	; 0x13e4 <_ZN9DS3232RTC5alarmEh+0x36>
        statusReg &= ~mask;
    13d2:	20 95       	com	r18
    13d4:	42 2f       	mov	r20, r18
    13d6:	48 23       	and	r20, r24
        writeRTC(RTC_STATUS, statusReg);
    13d8:	6f e0       	ldi	r22, 0x0F	; 15
    13da:	c8 01       	movw	r24, r16
    13dc:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN9DS3232RTC8writeRTCEhh>
        return true;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	01 c0       	rjmp	.+2      	; 0x13e6 <_ZN9DS3232RTC5alarmEh+0x38>
    }
    else {
        return false;
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    13e6:	cf 91       	pop	r28
    13e8:	1f 91       	pop	r17
    13ea:	0f 91       	pop	r16
    13ec:	08 95       	ret

000013ee <_ZN9DS3232RTC10squareWaveE14SQWAVE_FREQS_t>:
/*----------------------------------------------------------------------*
 * Enable or disable the square wave output.                            *
 * Use a value from the SQWAVE_FREQS_t enumeration for the parameter.   *
 *----------------------------------------------------------------------*/
void DS3232RTC::squareWave(SQWAVE_FREQS_t freq)
{
    13ee:	0f 93       	push	r16
    13f0:	1f 93       	push	r17
    13f2:	cf 93       	push	r28
    13f4:	8c 01       	movw	r16, r24
    13f6:	c6 2f       	mov	r28, r22
    uint8_t controlReg;

    controlReg = readRTC(RTC_CONTROL);
    13f8:	6e e0       	ldi	r22, 0x0E	; 14
    13fa:	0e 94 a6 09 	call	0x134c	; 0x134c <_ZN9DS3232RTC7readRTCEh>
    if (freq >= SQWAVE_NONE) {
        controlReg |= _BV(INTCN);
    13fe:	48 2f       	mov	r20, r24
void DS3232RTC::squareWave(SQWAVE_FREQS_t freq)
{
    uint8_t controlReg;

    controlReg = readRTC(RTC_CONTROL);
    if (freq >= SQWAVE_NONE) {
    1400:	c4 30       	cpi	r28, 0x04	; 4
    1402:	10 f0       	brcs	.+4      	; 0x1408 <_ZN9DS3232RTC10squareWaveE14SQWAVE_FREQS_t+0x1a>
        controlReg |= _BV(INTCN);
    1404:	44 60       	ori	r20, 0x04	; 4
    1406:	06 c0       	rjmp	.+12     	; 0x1414 <_ZN9DS3232RTC10squareWaveE14SQWAVE_FREQS_t+0x26>
    }
    else {
        controlReg = (controlReg & 0xE3) | (freq << RS1);
    1408:	43 7e       	andi	r20, 0xE3	; 227
    140a:	88 e0       	ldi	r24, 0x08	; 8
    140c:	c8 9f       	mul	r28, r24
    140e:	b0 01       	movw	r22, r0
    1410:	11 24       	eor	r1, r1
    1412:	46 2b       	or	r20, r22
    }
    writeRTC(RTC_CONTROL, controlReg);
    1414:	6e e0       	ldi	r22, 0x0E	; 14
    1416:	c8 01       	movw	r24, r16
}
    1418:	cf 91       	pop	r28
    141a:	1f 91       	pop	r17
    141c:	0f 91       	pop	r16
        controlReg |= _BV(INTCN);
    }
    else {
        controlReg = (controlReg & 0xE3) | (freq << RS1);
    }
    writeRTC(RTC_CONTROL, controlReg);
    141e:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <_ZN9DS3232RTC8writeRTCEhh>

00001422 <_ZN13LiquidCrystal11pulseEnableEv>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	ec 01       	movw	r28, r24
    1428:	60 e0       	ldi	r22, 0x00	; 0
    142a:	8e 81       	ldd	r24, Y+6	; 0x06
    142c:	0e 94 82 08 	call	0x1104	; 0x1104 <digitalWrite>
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	0e 94 d7 07 	call	0xfae	; 0xfae <delayMicroseconds>
    1438:	61 e0       	ldi	r22, 0x01	; 1
    143a:	8e 81       	ldd	r24, Y+6	; 0x06
    143c:	0e 94 82 08 	call	0x1104	; 0x1104 <digitalWrite>
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	0e 94 d7 07 	call	0xfae	; 0xfae <delayMicroseconds>
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	8e 81       	ldd	r24, Y+6	; 0x06
    144c:	0e 94 82 08 	call	0x1104	; 0x1104 <digitalWrite>
    1450:	84 e6       	ldi	r24, 0x64	; 100
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	df 91       	pop	r29
    1456:	cf 91       	pop	r28
    1458:	0c 94 d7 07 	jmp	0xfae	; 0xfae <delayMicroseconds>

0000145c <_ZN13LiquidCrystal10write4bitsEh>:
    145c:	cf 92       	push	r12
    145e:	df 92       	push	r13
    1460:	ef 92       	push	r14
    1462:	ff 92       	push	r15
    1464:	0f 93       	push	r16
    1466:	1f 93       	push	r17
    1468:	cf 93       	push	r28
    146a:	df 93       	push	r29
    146c:	6c 01       	movw	r12, r24
    146e:	7c 01       	movw	r14, r24
    1470:	87 e0       	ldi	r24, 0x07	; 7
    1472:	e8 0e       	add	r14, r24
    1474:	f1 1c       	adc	r15, r1
    1476:	c0 e0       	ldi	r28, 0x00	; 0
    1478:	d0 e0       	ldi	r29, 0x00	; 0
    147a:	06 2f       	mov	r16, r22
    147c:	10 e0       	ldi	r17, 0x00	; 0
    147e:	b8 01       	movw	r22, r16
    1480:	0c 2e       	mov	r0, r28
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <_ZN13LiquidCrystal10write4bitsEh+0x2c>
    1484:	75 95       	asr	r23
    1486:	67 95       	ror	r22
    1488:	0a 94       	dec	r0
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <_ZN13LiquidCrystal10write4bitsEh+0x28>
    148c:	61 70       	andi	r22, 0x01	; 1
    148e:	f7 01       	movw	r30, r14
    1490:	81 91       	ld	r24, Z+
    1492:	7f 01       	movw	r14, r30
    1494:	0e 94 82 08 	call	0x1104	; 0x1104 <digitalWrite>
    1498:	21 96       	adiw	r28, 0x01	; 1
    149a:	c4 30       	cpi	r28, 0x04	; 4
    149c:	d1 05       	cpc	r29, r1
    149e:	79 f7       	brne	.-34     	; 0x147e <_ZN13LiquidCrystal10write4bitsEh+0x22>
    14a0:	c6 01       	movw	r24, r12
    14a2:	df 91       	pop	r29
    14a4:	cf 91       	pop	r28
    14a6:	1f 91       	pop	r17
    14a8:	0f 91       	pop	r16
    14aa:	ff 90       	pop	r15
    14ac:	ef 90       	pop	r14
    14ae:	df 90       	pop	r13
    14b0:	cf 90       	pop	r12
    14b2:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <_ZN13LiquidCrystal11pulseEnableEv>

000014b6 <_ZN13LiquidCrystal10write8bitsEh>:
    14b6:	cf 92       	push	r12
    14b8:	df 92       	push	r13
    14ba:	ef 92       	push	r14
    14bc:	ff 92       	push	r15
    14be:	0f 93       	push	r16
    14c0:	1f 93       	push	r17
    14c2:	cf 93       	push	r28
    14c4:	df 93       	push	r29
    14c6:	6c 01       	movw	r12, r24
    14c8:	7c 01       	movw	r14, r24
    14ca:	87 e0       	ldi	r24, 0x07	; 7
    14cc:	e8 0e       	add	r14, r24
    14ce:	f1 1c       	adc	r15, r1
    14d0:	c0 e0       	ldi	r28, 0x00	; 0
    14d2:	d0 e0       	ldi	r29, 0x00	; 0
    14d4:	06 2f       	mov	r16, r22
    14d6:	10 e0       	ldi	r17, 0x00	; 0
    14d8:	b8 01       	movw	r22, r16
    14da:	0c 2e       	mov	r0, r28
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <_ZN13LiquidCrystal10write8bitsEh+0x2c>
    14de:	75 95       	asr	r23
    14e0:	67 95       	ror	r22
    14e2:	0a 94       	dec	r0
    14e4:	e2 f7       	brpl	.-8      	; 0x14de <_ZN13LiquidCrystal10write8bitsEh+0x28>
    14e6:	61 70       	andi	r22, 0x01	; 1
    14e8:	f7 01       	movw	r30, r14
    14ea:	81 91       	ld	r24, Z+
    14ec:	7f 01       	movw	r14, r30
    14ee:	0e 94 82 08 	call	0x1104	; 0x1104 <digitalWrite>
    14f2:	21 96       	adiw	r28, 0x01	; 1
    14f4:	c8 30       	cpi	r28, 0x08	; 8
    14f6:	d1 05       	cpc	r29, r1
    14f8:	79 f7       	brne	.-34     	; 0x14d8 <_ZN13LiquidCrystal10write8bitsEh+0x22>
    14fa:	c6 01       	movw	r24, r12
    14fc:	df 91       	pop	r29
    14fe:	cf 91       	pop	r28
    1500:	1f 91       	pop	r17
    1502:	0f 91       	pop	r16
    1504:	ff 90       	pop	r15
    1506:	ef 90       	pop	r14
    1508:	df 90       	pop	r13
    150a:	cf 90       	pop	r12
    150c:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <_ZN13LiquidCrystal11pulseEnableEv>

00001510 <_ZN13LiquidCrystal4sendEhh>:
    1510:	1f 93       	push	r17
    1512:	cf 93       	push	r28
    1514:	df 93       	push	r29
    1516:	ec 01       	movw	r28, r24
    1518:	16 2f       	mov	r17, r22
    151a:	64 2f       	mov	r22, r20
    151c:	8c 81       	ldd	r24, Y+4	; 0x04
    151e:	0e 94 82 08 	call	0x1104	; 0x1104 <digitalWrite>
    1522:	8d 81       	ldd	r24, Y+5	; 0x05
    1524:	8f 3f       	cpi	r24, 0xFF	; 255
    1526:	19 f0       	breq	.+6      	; 0x152e <_ZN13LiquidCrystal4sendEhh+0x1e>
    1528:	60 e0       	ldi	r22, 0x00	; 0
    152a:	0e 94 82 08 	call	0x1104	; 0x1104 <digitalWrite>
    152e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1530:	61 2f       	mov	r22, r17
    1532:	84 ff       	sbrs	r24, 4
    1534:	06 c0       	rjmp	.+12     	; 0x1542 <_ZN13LiquidCrystal4sendEhh+0x32>
    1536:	ce 01       	movw	r24, r28
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	1f 91       	pop	r17
    153e:	0c 94 5b 0a 	jmp	0x14b6	; 0x14b6 <_ZN13LiquidCrystal10write8bitsEh>
    1542:	70 e0       	ldi	r23, 0x00	; 0
    1544:	84 e0       	ldi	r24, 0x04	; 4
    1546:	75 95       	asr	r23
    1548:	67 95       	ror	r22
    154a:	8a 95       	dec	r24
    154c:	e1 f7       	brne	.-8      	; 0x1546 <_ZN13LiquidCrystal4sendEhh+0x36>
    154e:	ce 01       	movw	r24, r28
    1550:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN13LiquidCrystal10write4bitsEh>
    1554:	61 2f       	mov	r22, r17
    1556:	ce 01       	movw	r24, r28
    1558:	df 91       	pop	r29
    155a:	cf 91       	pop	r28
    155c:	1f 91       	pop	r17
    155e:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <_ZN13LiquidCrystal10write4bitsEh>

00001562 <_ZN13LiquidCrystal7commandEh>:
    1562:	40 e0       	ldi	r20, 0x00	; 0
    1564:	0c 94 88 0a 	jmp	0x1510	; 0x1510 <_ZN13LiquidCrystal4sendEhh>

00001568 <_ZN13LiquidCrystal5clearEv>:
    1568:	61 e0       	ldi	r22, 0x01	; 1
    156a:	0e 94 b1 0a 	call	0x1562	; 0x1562 <_ZN13LiquidCrystal7commandEh>
    156e:	80 ed       	ldi	r24, 0xD0	; 208
    1570:	97 e0       	ldi	r25, 0x07	; 7
    1572:	0c 94 d7 07 	jmp	0xfae	; 0xfae <delayMicroseconds>

00001576 <_ZN13LiquidCrystal7displayEv>:
    1576:	fc 01       	movw	r30, r24
    1578:	60 89       	ldd	r22, Z+16	; 0x10
    157a:	26 2f       	mov	r18, r22
    157c:	24 60       	ori	r18, 0x04	; 4
    157e:	20 8b       	std	Z+16, r18	; 0x10
    1580:	6c 60       	ori	r22, 0x0C	; 12
    1582:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <_ZN13LiquidCrystal7commandEh>

00001586 <_ZN13LiquidCrystal5beginEhhh>:
    1586:	ef 92       	push	r14
    1588:	ff 92       	push	r15
    158a:	0f 93       	push	r16
    158c:	1f 93       	push	r17
    158e:	cf 93       	push	r28
    1590:	df 93       	push	r29
    1592:	ec 01       	movw	r28, r24
    1594:	42 30       	cpi	r20, 0x02	; 2
    1596:	18 f0       	brcs	.+6      	; 0x159e <_ZN13LiquidCrystal5beginEhhh+0x18>
    1598:	8f 85       	ldd	r24, Y+15	; 0x0f
    159a:	88 60       	ori	r24, 0x08	; 8
    159c:	8f 87       	std	Y+15, r24	; 0x0f
    159e:	4b 8b       	std	Y+19, r20	; 0x13
    15a0:	1c 8a       	std	Y+20, r1	; 0x14
    15a2:	80 e4       	ldi	r24, 0x40	; 64
    15a4:	8d 8b       	std	Y+21, r24	; 0x15
    15a6:	6e 8b       	std	Y+22, r22	; 0x16
    15a8:	70 e0       	ldi	r23, 0x00	; 0
    15aa:	60 5c       	subi	r22, 0xC0	; 192
    15ac:	7f 4f       	sbci	r23, 0xFF	; 255
    15ae:	6f 8b       	std	Y+23, r22	; 0x17
    15b0:	22 23       	and	r18, r18
    15b2:	29 f0       	breq	.+10     	; 0x15be <_ZN13LiquidCrystal5beginEhhh+0x38>
    15b4:	41 30       	cpi	r20, 0x01	; 1
    15b6:	19 f4       	brne	.+6      	; 0x15be <_ZN13LiquidCrystal5beginEhhh+0x38>
    15b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    15ba:	84 60       	ori	r24, 0x04	; 4
    15bc:	8f 87       	std	Y+15, r24	; 0x0f
    15be:	61 e0       	ldi	r22, 0x01	; 1
    15c0:	8c 81       	ldd	r24, Y+4	; 0x04
    15c2:	0e 94 46 08 	call	0x108c	; 0x108c <pinMode>
    15c6:	8d 81       	ldd	r24, Y+5	; 0x05
    15c8:	8f 3f       	cpi	r24, 0xFF	; 255
    15ca:	19 f0       	breq	.+6      	; 0x15d2 <_ZN13LiquidCrystal5beginEhhh+0x4c>
    15cc:	61 e0       	ldi	r22, 0x01	; 1
    15ce:	0e 94 46 08 	call	0x108c	; 0x108c <pinMode>
    15d2:	61 e0       	ldi	r22, 0x01	; 1
    15d4:	8e 81       	ldd	r24, Y+6	; 0x06
    15d6:	0e 94 46 08 	call	0x108c	; 0x108c <pinMode>
    15da:	7e 01       	movw	r14, r28
    15dc:	87 e0       	ldi	r24, 0x07	; 7
    15de:	e8 0e       	add	r14, r24
    15e0:	f1 1c       	adc	r15, r1
    15e2:	00 e0       	ldi	r16, 0x00	; 0
    15e4:	10 e0       	ldi	r17, 0x00	; 0
    15e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    15e8:	84 fd       	sbrc	r24, 4
    15ea:	03 c0       	rjmp	.+6      	; 0x15f2 <_ZN13LiquidCrystal5beginEhhh+0x6c>
    15ec:	84 e0       	ldi	r24, 0x04	; 4
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <_ZN13LiquidCrystal5beginEhhh+0x70>
    15f2:	88 e0       	ldi	r24, 0x08	; 8
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	08 17       	cp	r16, r24
    15f8:	19 07       	cpc	r17, r25
    15fa:	4c f4       	brge	.+18     	; 0x160e <_ZN13LiquidCrystal5beginEhhh+0x88>
    15fc:	61 e0       	ldi	r22, 0x01	; 1
    15fe:	f7 01       	movw	r30, r14
    1600:	81 91       	ld	r24, Z+
    1602:	7f 01       	movw	r14, r30
    1604:	0e 94 46 08 	call	0x108c	; 0x108c <pinMode>
    1608:	0f 5f       	subi	r16, 0xFF	; 255
    160a:	1f 4f       	sbci	r17, 0xFF	; 255
    160c:	ec cf       	rjmp	.-40     	; 0x15e6 <_ZN13LiquidCrystal5beginEhhh+0x60>
    160e:	80 e5       	ldi	r24, 0x50	; 80
    1610:	93 ec       	ldi	r25, 0xC3	; 195
    1612:	0e 94 d7 07 	call	0xfae	; 0xfae <delayMicroseconds>
    1616:	60 e0       	ldi	r22, 0x00	; 0
    1618:	8c 81       	ldd	r24, Y+4	; 0x04
    161a:	0e 94 82 08 	call	0x1104	; 0x1104 <digitalWrite>
    161e:	60 e0       	ldi	r22, 0x00	; 0
    1620:	8e 81       	ldd	r24, Y+6	; 0x06
    1622:	0e 94 82 08 	call	0x1104	; 0x1104 <digitalWrite>
    1626:	8d 81       	ldd	r24, Y+5	; 0x05
    1628:	8f 3f       	cpi	r24, 0xFF	; 255
    162a:	19 f0       	breq	.+6      	; 0x1632 <_ZN13LiquidCrystal5beginEhhh+0xac>
    162c:	60 e0       	ldi	r22, 0x00	; 0
    162e:	0e 94 82 08 	call	0x1104	; 0x1104 <digitalWrite>
    1632:	6f 85       	ldd	r22, Y+15	; 0x0f
    1634:	64 fd       	sbrc	r22, 4
    1636:	1d c0       	rjmp	.+58     	; 0x1672 <_ZN13LiquidCrystal5beginEhhh+0xec>
    1638:	63 e0       	ldi	r22, 0x03	; 3
    163a:	ce 01       	movw	r24, r28
    163c:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN13LiquidCrystal10write4bitsEh>
    1640:	84 e9       	ldi	r24, 0x94	; 148
    1642:	91 e1       	ldi	r25, 0x11	; 17
    1644:	0e 94 d7 07 	call	0xfae	; 0xfae <delayMicroseconds>
    1648:	63 e0       	ldi	r22, 0x03	; 3
    164a:	ce 01       	movw	r24, r28
    164c:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN13LiquidCrystal10write4bitsEh>
    1650:	84 e9       	ldi	r24, 0x94	; 148
    1652:	91 e1       	ldi	r25, 0x11	; 17
    1654:	0e 94 d7 07 	call	0xfae	; 0xfae <delayMicroseconds>
    1658:	63 e0       	ldi	r22, 0x03	; 3
    165a:	ce 01       	movw	r24, r28
    165c:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN13LiquidCrystal10write4bitsEh>
    1660:	86 e9       	ldi	r24, 0x96	; 150
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	0e 94 d7 07 	call	0xfae	; 0xfae <delayMicroseconds>
    1668:	62 e0       	ldi	r22, 0x02	; 2
    166a:	ce 01       	movw	r24, r28
    166c:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN13LiquidCrystal10write4bitsEh>
    1670:	16 c0       	rjmp	.+44     	; 0x169e <_ZN13LiquidCrystal5beginEhhh+0x118>
    1672:	60 62       	ori	r22, 0x20	; 32
    1674:	ce 01       	movw	r24, r28
    1676:	0e 94 b1 0a 	call	0x1562	; 0x1562 <_ZN13LiquidCrystal7commandEh>
    167a:	84 e9       	ldi	r24, 0x94	; 148
    167c:	91 e1       	ldi	r25, 0x11	; 17
    167e:	0e 94 d7 07 	call	0xfae	; 0xfae <delayMicroseconds>
    1682:	6f 85       	ldd	r22, Y+15	; 0x0f
    1684:	60 62       	ori	r22, 0x20	; 32
    1686:	ce 01       	movw	r24, r28
    1688:	0e 94 b1 0a 	call	0x1562	; 0x1562 <_ZN13LiquidCrystal7commandEh>
    168c:	86 e9       	ldi	r24, 0x96	; 150
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	0e 94 d7 07 	call	0xfae	; 0xfae <delayMicroseconds>
    1694:	6f 85       	ldd	r22, Y+15	; 0x0f
    1696:	60 62       	ori	r22, 0x20	; 32
    1698:	ce 01       	movw	r24, r28
    169a:	0e 94 b1 0a 	call	0x1562	; 0x1562 <_ZN13LiquidCrystal7commandEh>
    169e:	6f 85       	ldd	r22, Y+15	; 0x0f
    16a0:	60 62       	ori	r22, 0x20	; 32
    16a2:	ce 01       	movw	r24, r28
    16a4:	0e 94 b1 0a 	call	0x1562	; 0x1562 <_ZN13LiquidCrystal7commandEh>
    16a8:	84 e0       	ldi	r24, 0x04	; 4
    16aa:	88 8b       	std	Y+16, r24	; 0x10
    16ac:	ce 01       	movw	r24, r28
    16ae:	0e 94 bb 0a 	call	0x1576	; 0x1576 <_ZN13LiquidCrystal7displayEv>
    16b2:	ce 01       	movw	r24, r28
    16b4:	0e 94 b4 0a 	call	0x1568	; 0x1568 <_ZN13LiquidCrystal5clearEv>
    16b8:	82 e0       	ldi	r24, 0x02	; 2
    16ba:	89 8b       	std	Y+17, r24	; 0x11
    16bc:	66 e0       	ldi	r22, 0x06	; 6
    16be:	ce 01       	movw	r24, r28
    16c0:	df 91       	pop	r29
    16c2:	cf 91       	pop	r28
    16c4:	1f 91       	pop	r17
    16c6:	0f 91       	pop	r16
    16c8:	ff 90       	pop	r15
    16ca:	ef 90       	pop	r14
    16cc:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <_ZN13LiquidCrystal7commandEh>

000016d0 <_ZN13LiquidCrystalC1Ehhhhhh>:
    16d0:	cf 92       	push	r12
    16d2:	ef 92       	push	r14
    16d4:	0f 93       	push	r16
    16d6:	fc 01       	movw	r30, r24
    16d8:	13 82       	std	Z+3, r1	; 0x03
    16da:	12 82       	std	Z+2, r1	; 0x02
    16dc:	8f e5       	ldi	r24, 0x5F	; 95
    16de:	91 e0       	ldi	r25, 0x01	; 1
    16e0:	91 83       	std	Z+1, r25	; 0x01
    16e2:	80 83       	st	Z, r24
    16e4:	64 83       	std	Z+4, r22	; 0x04
    16e6:	8f ef       	ldi	r24, 0xFF	; 255
    16e8:	85 83       	std	Z+5, r24	; 0x05
    16ea:	46 83       	std	Z+6, r20	; 0x06
    16ec:	27 83       	std	Z+7, r18	; 0x07
    16ee:	00 87       	std	Z+8, r16	; 0x08
    16f0:	e1 86       	std	Z+9, r14	; 0x09
    16f2:	c2 86       	std	Z+10, r12	; 0x0a
    16f4:	13 86       	std	Z+11, r1	; 0x0b
    16f6:	14 86       	std	Z+12, r1	; 0x0c
    16f8:	15 86       	std	Z+13, r1	; 0x0d
    16fa:	16 86       	std	Z+14, r1	; 0x0e
    16fc:	17 86       	std	Z+15, r1	; 0x0f
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	41 e0       	ldi	r20, 0x01	; 1
    1702:	60 e1       	ldi	r22, 0x10	; 16
    1704:	cf 01       	movw	r24, r30
    1706:	0f 91       	pop	r16
    1708:	ef 90       	pop	r14
    170a:	cf 90       	pop	r12
    170c:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <_ZN13LiquidCrystal5beginEhhh>

00001710 <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
    1710:	41 e0       	ldi	r20, 0x01	; 1
    1712:	0e 94 88 0a 	call	0x1510	; 0x1510 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	08 95       	ret

0000171c <_Z13monthShortStrh>:
}

char* monthShortStr(uint8_t month)
{
   for (int i=0; i < dt_SHORT_STR_LEN; i++)      
      buffer[i] = pgm_read_byte(&(monthShortNames_P[i+ (month*dt_SHORT_STR_LEN)]));  
    171c:	23 e0       	ldi	r18, 0x03	; 3
    171e:	82 9f       	mul	r24, r18
    1720:	c0 01       	movw	r24, r0
    1722:	11 24       	eor	r1, r1
    1724:	ab e5       	ldi	r26, 0x5B	; 91
    1726:	b2 e0       	ldi	r27, 0x02	; 2
    return buffer;
}

char* monthShortStr(uint8_t month)
{
   for (int i=0; i < dt_SHORT_STR_LEN; i++)      
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
      buffer[i] = pgm_read_byte(&(monthShortNames_P[i+ (month*dt_SHORT_STR_LEN)]));  
    172c:	fc 01       	movw	r30, r24
    172e:	e2 0f       	add	r30, r18
    1730:	f3 1f       	adc	r31, r19
    1732:	e8 54       	subi	r30, 0x48	; 72
    1734:	ff 4f       	sbci	r31, 0xFF	; 255
    1736:	e4 91       	lpm	r30, Z
    1738:	ed 93       	st	X+, r30
    return buffer;
}

char* monthShortStr(uint8_t month)
{
   for (int i=0; i < dt_SHORT_STR_LEN; i++)      
    173a:	2f 5f       	subi	r18, 0xFF	; 255
    173c:	3f 4f       	sbci	r19, 0xFF	; 255
    173e:	23 30       	cpi	r18, 0x03	; 3
    1740:	31 05       	cpc	r19, r1
    1742:	a1 f7       	brne	.-24     	; 0x172c <_Z13monthShortStrh+0x10>
      buffer[i] = pgm_read_byte(&(monthShortNames_P[i+ (month*dt_SHORT_STR_LEN)]));  
   buffer[dt_SHORT_STR_LEN] = 0;
    1744:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <_ZL6buffer+0x3>
   return buffer;
}
    1748:	8b e5       	ldi	r24, 0x5B	; 91
    174a:	92 e0       	ldi	r25, 0x02	; 2
    174c:	08 95       	ret

0000174e <_Z9breakTimemR12tmElements_t>:
}

int weekday(time_t t) {
  refreshCache(t);
  return tm.Wday;
}
    174e:	6f 92       	push	r6
    1750:	7f 92       	push	r7
    1752:	8f 92       	push	r8
    1754:	9f 92       	push	r9
    1756:	af 92       	push	r10
    1758:	bf 92       	push	r11
    175a:	cf 92       	push	r12
    175c:	df 92       	push	r13
    175e:	ef 92       	push	r14
    1760:	ff 92       	push	r15
    1762:	0f 93       	push	r16
    1764:	1f 93       	push	r17
    1766:	cf 93       	push	r28
    1768:	df 93       	push	r29
    176a:	6b 01       	movw	r12, r22
    176c:	7c 01       	movw	r14, r24
    176e:	ea 01       	movw	r28, r20
    1770:	8c e3       	ldi	r24, 0x3C	; 60
    1772:	88 2e       	mov	r8, r24
    1774:	91 2c       	mov	r9, r1
    1776:	a1 2c       	mov	r10, r1
    1778:	b1 2c       	mov	r11, r1
    177a:	c7 01       	movw	r24, r14
    177c:	b6 01       	movw	r22, r12
    177e:	a5 01       	movw	r20, r10
    1780:	94 01       	movw	r18, r8
    1782:	0e 94 06 11 	call	0x220c	; 0x220c <__udivmodsi4>
    1786:	68 83       	st	Y, r22
    1788:	ca 01       	movw	r24, r20
    178a:	b9 01       	movw	r22, r18
    178c:	a5 01       	movw	r20, r10
    178e:	94 01       	movw	r18, r8
    1790:	0e 94 06 11 	call	0x220c	; 0x220c <__udivmodsi4>
    1794:	69 83       	std	Y+1, r22	; 0x01
    1796:	c7 01       	movw	r24, r14
    1798:	b6 01       	movw	r22, r12
    179a:	20 e1       	ldi	r18, 0x10	; 16
    179c:	3e e0       	ldi	r19, 0x0E	; 14
    179e:	40 e0       	ldi	r20, 0x00	; 0
    17a0:	50 e0       	ldi	r21, 0x00	; 0
    17a2:	0e 94 06 11 	call	0x220c	; 0x220c <__udivmodsi4>
    17a6:	ca 01       	movw	r24, r20
    17a8:	b9 01       	movw	r22, r18
    17aa:	28 e1       	ldi	r18, 0x18	; 24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	40 e0       	ldi	r20, 0x00	; 0
    17b0:	50 e0       	ldi	r21, 0x00	; 0
    17b2:	0e 94 06 11 	call	0x220c	; 0x220c <__udivmodsi4>
    17b6:	6a 83       	std	Y+2, r22	; 0x02
    17b8:	c7 01       	movw	r24, r14
    17ba:	b6 01       	movw	r22, r12
    17bc:	20 e8       	ldi	r18, 0x80	; 128
    17be:	31 e5       	ldi	r19, 0x51	; 81
    17c0:	41 e0       	ldi	r20, 0x01	; 1
    17c2:	50 e0       	ldi	r21, 0x00	; 0
    17c4:	0e 94 06 11 	call	0x220c	; 0x220c <__udivmodsi4>
    17c8:	69 01       	movw	r12, r18
    17ca:	7a 01       	movw	r14, r20
    17cc:	ca 01       	movw	r24, r20
    17ce:	b9 01       	movw	r22, r18
    17d0:	6c 5f       	subi	r22, 0xFC	; 252
    17d2:	7f 4f       	sbci	r23, 0xFF	; 255
    17d4:	8f 4f       	sbci	r24, 0xFF	; 255
    17d6:	9f 4f       	sbci	r25, 0xFF	; 255
    17d8:	27 e0       	ldi	r18, 0x07	; 7
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	40 e0       	ldi	r20, 0x00	; 0
    17de:	50 e0       	ldi	r21, 0x00	; 0
    17e0:	0e 94 06 11 	call	0x220c	; 0x220c <__udivmodsi4>
    17e4:	6f 5f       	subi	r22, 0xFF	; 255
    17e6:	6b 83       	std	Y+3, r22	; 0x03
    17e8:	81 2c       	mov	r8, r1
    17ea:	91 2c       	mov	r9, r1
    17ec:	54 01       	movw	r10, r8
    17ee:	40 e0       	ldi	r20, 0x00	; 0
    17f0:	94 e6       	ldi	r25, 0x64	; 100
    17f2:	69 2e       	mov	r6, r25
    17f4:	71 2c       	mov	r7, r1
    17f6:	00 e9       	ldi	r16, 0x90	; 144
    17f8:	11 e0       	ldi	r17, 0x01	; 1
    17fa:	24 2f       	mov	r18, r20
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	2e 54       	subi	r18, 0x4E	; 78
    1800:	38 4f       	sbci	r19, 0xF8	; 248
    1802:	f9 01       	movw	r30, r18
    1804:	e3 70       	andi	r30, 0x03	; 3
    1806:	ff 27       	eor	r31, r31
    1808:	30 97       	sbiw	r30, 0x00	; 0
    180a:	89 f4       	brne	.+34     	; 0x182e <_Z9breakTimemR12tmElements_t+0xe0>
    180c:	c9 01       	movw	r24, r18
    180e:	b3 01       	movw	r22, r6
    1810:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__divmodhi4>
    1814:	89 2b       	or	r24, r25
    1816:	31 f4       	brne	.+12     	; 0x1824 <_Z9breakTimemR12tmElements_t+0xd6>
    1818:	c9 01       	movw	r24, r18
    181a:	b8 01       	movw	r22, r16
    181c:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__divmodhi4>
    1820:	89 2b       	or	r24, r25
    1822:	29 f4       	brne	.+10     	; 0x182e <_Z9breakTimemR12tmElements_t+0xe0>
    1824:	8e e6       	ldi	r24, 0x6E	; 110
    1826:	91 e0       	ldi	r25, 0x01	; 1
    1828:	a0 e0       	ldi	r26, 0x00	; 0
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	04 c0       	rjmp	.+8      	; 0x1836 <_Z9breakTimemR12tmElements_t+0xe8>
    182e:	8d e6       	ldi	r24, 0x6D	; 109
    1830:	91 e0       	ldi	r25, 0x01	; 1
    1832:	a0 e0       	ldi	r26, 0x00	; 0
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	88 0e       	add	r8, r24
    1838:	99 1e       	adc	r9, r25
    183a:	aa 1e       	adc	r10, r26
    183c:	bb 1e       	adc	r11, r27
    183e:	d5 01       	movw	r26, r10
    1840:	c4 01       	movw	r24, r8
    1842:	aa 27       	eor	r26, r26
    1844:	bb 27       	eor	r27, r27
    1846:	c8 16       	cp	r12, r24
    1848:	d9 06       	cpc	r13, r25
    184a:	ea 06       	cpc	r14, r26
    184c:	fb 06       	cpc	r15, r27
    184e:	10 f0       	brcs	.+4      	; 0x1854 <_Z9breakTimemR12tmElements_t+0x106>
    1850:	4f 5f       	subi	r20, 0xFF	; 255
    1852:	d3 cf       	rjmp	.-90     	; 0x17fa <_Z9breakTimemR12tmElements_t+0xac>
    1854:	4e 83       	std	Y+6, r20	; 0x06
    1856:	30 97       	sbiw	r30, 0x00	; 0
    1858:	99 f4       	brne	.+38     	; 0x1880 <_Z9breakTimemR12tmElements_t+0x132>
    185a:	c9 01       	movw	r24, r18
    185c:	64 e6       	ldi	r22, 0x64	; 100
    185e:	70 e0       	ldi	r23, 0x00	; 0
    1860:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__divmodhi4>
    1864:	89 2b       	or	r24, r25
    1866:	39 f4       	brne	.+14     	; 0x1876 <_Z9breakTimemR12tmElements_t+0x128>
    1868:	c9 01       	movw	r24, r18
    186a:	60 e9       	ldi	r22, 0x90	; 144
    186c:	71 e0       	ldi	r23, 0x01	; 1
    186e:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__divmodhi4>
    1872:	89 2b       	or	r24, r25
    1874:	29 f4       	brne	.+10     	; 0x1880 <_Z9breakTimemR12tmElements_t+0x132>
    1876:	8e e6       	ldi	r24, 0x6E	; 110
    1878:	91 e0       	ldi	r25, 0x01	; 1
    187a:	a0 e0       	ldi	r26, 0x00	; 0
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	04 c0       	rjmp	.+8      	; 0x1888 <_Z9breakTimemR12tmElements_t+0x13a>
    1880:	8d e6       	ldi	r24, 0x6D	; 109
    1882:	91 e0       	ldi	r25, 0x01	; 1
    1884:	a0 e0       	ldi	r26, 0x00	; 0
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	88 1a       	sub	r8, r24
    188a:	99 0a       	sbc	r9, r25
    188c:	aa 0a       	sbc	r10, r26
    188e:	bb 0a       	sbc	r11, r27
    1890:	c8 18       	sub	r12, r8
    1892:	d9 08       	sbc	r13, r9
    1894:	ea 08       	sbc	r14, r10
    1896:	fb 08       	sbc	r15, r11
    1898:	c9 01       	movw	r24, r18
    189a:	64 e6       	ldi	r22, 0x64	; 100
    189c:	70 e0       	ldi	r23, 0x00	; 0
    189e:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__divmodhi4>
    18a2:	8c 01       	movw	r16, r24
    18a4:	c9 01       	movw	r24, r18
    18a6:	60 e9       	ldi	r22, 0x90	; 144
    18a8:	71 e0       	ldi	r23, 0x01	; 1
    18aa:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__divmodhi4>
    18ae:	a7 e6       	ldi	r26, 0x67	; 103
    18b0:	b1 e0       	ldi	r27, 0x01	; 1
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	21 30       	cpi	r18, 0x01	; 1
    18b6:	41 f4       	brne	.+16     	; 0x18c8 <_Z9breakTimemR12tmElements_t+0x17a>
    18b8:	30 97       	sbiw	r30, 0x00	; 0
    18ba:	51 f4       	brne	.+20     	; 0x18d0 <_Z9breakTimemR12tmElements_t+0x182>
    18bc:	01 15       	cp	r16, r1
    18be:	11 05       	cpc	r17, r1
    18c0:	29 f4       	brne	.+10     	; 0x18cc <_Z9breakTimemR12tmElements_t+0x17e>
    18c2:	00 97       	sbiw	r24, 0x00	; 0
    18c4:	29 f4       	brne	.+10     	; 0x18d0 <_Z9breakTimemR12tmElements_t+0x182>
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <_Z9breakTimemR12tmElements_t+0x17e>
    18c8:	4c 91       	ld	r20, X
    18ca:	03 c0       	rjmp	.+6      	; 0x18d2 <_Z9breakTimemR12tmElements_t+0x184>
    18cc:	4d e1       	ldi	r20, 0x1D	; 29
    18ce:	01 c0       	rjmp	.+2      	; 0x18d2 <_Z9breakTimemR12tmElements_t+0x184>
    18d0:	4c e1       	ldi	r20, 0x1C	; 28
    18d2:	50 e0       	ldi	r21, 0x00	; 0
    18d4:	60 e0       	ldi	r22, 0x00	; 0
    18d6:	70 e0       	ldi	r23, 0x00	; 0
    18d8:	c4 16       	cp	r12, r20
    18da:	d5 06       	cpc	r13, r21
    18dc:	e6 06       	cpc	r14, r22
    18de:	f7 06       	cpc	r15, r23
    18e0:	40 f0       	brcs	.+16     	; 0x18f2 <_Z9breakTimemR12tmElements_t+0x1a4>
    18e2:	c4 1a       	sub	r12, r20
    18e4:	d5 0a       	sbc	r13, r21
    18e6:	e6 0a       	sbc	r14, r22
    18e8:	f7 0a       	sbc	r15, r23
    18ea:	2f 5f       	subi	r18, 0xFF	; 255
    18ec:	11 96       	adiw	r26, 0x01	; 1
    18ee:	2c 30       	cpi	r18, 0x0C	; 12
    18f0:	09 f7       	brne	.-62     	; 0x18b4 <_Z9breakTimemR12tmElements_t+0x166>
    18f2:	2f 5f       	subi	r18, 0xFF	; 255
    18f4:	2d 83       	std	Y+5, r18	; 0x05
    18f6:	c3 94       	inc	r12
    18f8:	cc 82       	std	Y+4, r12	; 0x04
    18fa:	df 91       	pop	r29
    18fc:	cf 91       	pop	r28
    18fe:	1f 91       	pop	r17
    1900:	0f 91       	pop	r16
    1902:	ff 90       	pop	r15
    1904:	ef 90       	pop	r14
    1906:	df 90       	pop	r13
    1908:	cf 90       	pop	r12
    190a:	bf 90       	pop	r11
    190c:	af 90       	pop	r10
    190e:	9f 90       	pop	r9
    1910:	8f 90       	pop	r8
    1912:	7f 90       	pop	r7
    1914:	6f 90       	pop	r6
    1916:	08 95       	ret

00001918 <_Z12refreshCachem>:
    1918:	cf 92       	push	r12
    191a:	df 92       	push	r13
    191c:	ef 92       	push	r14
    191e:	ff 92       	push	r15
    1920:	c0 90 65 02 	lds	r12, 0x0265	; 0x800265 <_ZL9cacheTime>
    1924:	d0 90 66 02 	lds	r13, 0x0266	; 0x800266 <_ZL9cacheTime+0x1>
    1928:	e0 90 67 02 	lds	r14, 0x0267	; 0x800267 <_ZL9cacheTime+0x2>
    192c:	f0 90 68 02 	lds	r15, 0x0268	; 0x800268 <_ZL9cacheTime+0x3>
    1930:	c6 16       	cp	r12, r22
    1932:	d7 06       	cpc	r13, r23
    1934:	e8 06       	cpc	r14, r24
    1936:	f9 06       	cpc	r15, r25
    1938:	71 f0       	breq	.+28     	; 0x1956 <_Z12refreshCachem+0x3e>
    193a:	6b 01       	movw	r12, r22
    193c:	7c 01       	movw	r14, r24
    193e:	49 e6       	ldi	r20, 0x69	; 105
    1940:	52 e0       	ldi	r21, 0x02	; 2
    1942:	0e 94 a7 0b 	call	0x174e	; 0x174e <_Z9breakTimemR12tmElements_t>
    1946:	c0 92 65 02 	sts	0x0265, r12	; 0x800265 <_ZL9cacheTime>
    194a:	d0 92 66 02 	sts	0x0266, r13	; 0x800266 <_ZL9cacheTime+0x1>
    194e:	e0 92 67 02 	sts	0x0267, r14	; 0x800267 <_ZL9cacheTime+0x2>
    1952:	f0 92 68 02 	sts	0x0268, r15	; 0x800268 <_ZL9cacheTime+0x3>
    1956:	ff 90       	pop	r15
    1958:	ef 90       	pop	r14
    195a:	df 90       	pop	r13
    195c:	cf 90       	pop	r12
    195e:	08 95       	ret

00001960 <_Z4hourm>:
    1960:	0e 94 8c 0c 	call	0x1918	; 0x1918 <_Z12refreshCachem>
    1964:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <_ZL2tm+0x2>
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	08 95       	ret

0000196c <_Z6minutem>:
    196c:	0e 94 8c 0c 	call	0x1918	; 0x1918 <_Z12refreshCachem>
    1970:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <_ZL2tm+0x1>
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	08 95       	ret

00001978 <_Z6secondm>:
    1978:	0e 94 8c 0c 	call	0x1918	; 0x1918 <_Z12refreshCachem>
    197c:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <_ZL2tm>
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	08 95       	ret

00001984 <_Z3daym>:
    1984:	0e 94 8c 0c 	call	0x1918	; 0x1918 <_Z12refreshCachem>
    1988:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <_ZL2tm+0x4>
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	08 95       	ret

00001990 <_Z5monthm>:
int month(){
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
  refreshCache(t);
    1990:	0e 94 8c 0c 	call	0x1918	; 0x1918 <_Z12refreshCachem>
  return tm.Month;
    1994:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <_ZL2tm+0x5>
}
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	08 95       	ret

0000199c <_Z4yearm>:
int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
    199c:	0e 94 8c 0c 	call	0x1918	; 0x1918 <_Z12refreshCachem>
  return tmYearToCalendar(tm.Year);
    19a0:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <_ZL2tm+0x6>
    19a4:	90 e0       	ldi	r25, 0x00	; 0
}
    19a6:	8e 54       	subi	r24, 0x4E	; 78
    19a8:	98 4f       	sbci	r25, 0xF8	; 248
    19aa:	08 95       	ret

000019ac <_Z8makeTimeR12tmElements_t>:
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
}

time_t makeTime(tmElements_t &tm){   
    19ac:	4f 92       	push	r4
    19ae:	5f 92       	push	r5
    19b0:	6f 92       	push	r6
    19b2:	7f 92       	push	r7
    19b4:	8f 92       	push	r8
    19b6:	9f 92       	push	r9
    19b8:	af 92       	push	r10
    19ba:	bf 92       	push	r11
    19bc:	cf 92       	push	r12
    19be:	df 92       	push	r13
    19c0:	ef 92       	push	r14
    19c2:	ff 92       	push	r15
    19c4:	0f 93       	push	r16
    19c6:	1f 93       	push	r17
    19c8:	cf 93       	push	r28
    19ca:	df 93       	push	r29
    19cc:	fc 01       	movw	r30, r24
  
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
    19ce:	16 81       	ldd	r17, Z+6	; 0x06
    19d0:	a1 2f       	mov	r26, r17
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	20 e8       	ldi	r18, 0x80	; 128
    19d6:	33 e3       	ldi	r19, 0x33	; 51
    19d8:	41 ee       	ldi	r20, 0xE1	; 225
    19da:	51 e0       	ldi	r21, 0x01	; 1
    19dc:	0e 94 37 11 	call	0x226e	; 0x226e <__muluhisi3>
    19e0:	4b 01       	movw	r8, r22
    19e2:	5c 01       	movw	r10, r24
    19e4:	c2 eb       	ldi	r28, 0xB2	; 178
    19e6:	d7 e0       	ldi	r29, 0x07	; 7
  for (i = 0; i < tm.Year; i++) {
    19e8:	9d 01       	movw	r18, r26
    if (LEAP_YEAR(i)) {
    19ea:	04 e6       	ldi	r16, 0x64	; 100
    19ec:	10 e0       	ldi	r17, 0x00	; 0
    19ee:	80 e9       	ldi	r24, 0x90	; 144
    19f0:	e8 2e       	mov	r14, r24
    19f2:	ff 24       	eor	r15, r15
    19f4:	f3 94       	inc	r15
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    19f6:	ce 01       	movw	r24, r28
    19f8:	82 5b       	subi	r24, 0xB2	; 178
    19fa:	97 40       	sbci	r25, 0x07	; 7
    19fc:	82 17       	cp	r24, r18
    19fe:	93 07       	cpc	r25, r19
    1a00:	d4 f4       	brge	.+52     	; 0x1a36 <_Z8makeTimeR12tmElements_t+0x8a>
    if (LEAP_YEAR(i)) {
    1a02:	ce 01       	movw	r24, r28
    1a04:	83 70       	andi	r24, 0x03	; 3
    1a06:	99 27       	eor	r25, r25
    1a08:	89 2b       	or	r24, r25
    1a0a:	99 f4       	brne	.+38     	; 0x1a32 <_Z8makeTimeR12tmElements_t+0x86>
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	b8 01       	movw	r22, r16
    1a10:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__divmodhi4>
    1a14:	89 2b       	or	r24, r25
    1a16:	31 f4       	brne	.+12     	; 0x1a24 <_Z8makeTimeR12tmElements_t+0x78>
    1a18:	ce 01       	movw	r24, r28
    1a1a:	b7 01       	movw	r22, r14
    1a1c:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__divmodhi4>
    1a20:	89 2b       	or	r24, r25
    1a22:	39 f4       	brne	.+14     	; 0x1a32 <_Z8makeTimeR12tmElements_t+0x86>
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    1a24:	80 e8       	ldi	r24, 0x80	; 128
    1a26:	88 0e       	add	r8, r24
    1a28:	81 e5       	ldi	r24, 0x51	; 81
    1a2a:	98 1e       	adc	r9, r24
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	a8 1e       	adc	r10, r24
    1a30:	b1 1c       	adc	r11, r1
    1a32:	21 96       	adiw	r28, 0x01	; 1
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    1a34:	e0 cf       	rjmp	.-64     	; 0x19f6 <_Z8makeTimeR12tmElements_t+0x4a>
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    1a36:	45 80       	ldd	r4, Z+5	; 0x05
    1a38:	51 2c       	mov	r5, r1
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    1a3a:	2e 54       	subi	r18, 0x4E	; 78
    1a3c:	38 4f       	sbci	r19, 0xF8	; 248
    1a3e:	c9 01       	movw	r24, r18
    1a40:	64 e6       	ldi	r22, 0x64	; 100
    1a42:	70 e0       	ldi	r23, 0x00	; 0
    1a44:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__divmodhi4>
    1a48:	7c 01       	movw	r14, r24
    1a4a:	c9 01       	movw	r24, r18
    1a4c:	60 e9       	ldi	r22, 0x90	; 144
    1a4e:	71 e0       	ldi	r23, 0x01	; 1
    1a50:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__divmodhi4>
    1a54:	6c 01       	movw	r12, r24
    1a56:	07 e6       	ldi	r16, 0x67	; 103
    1a58:	11 e0       	ldi	r17, 0x01	; 1
    1a5a:	c1 e0       	ldi	r28, 0x01	; 1
    1a5c:	d0 e0       	ldi	r29, 0x00	; 0
    1a5e:	39 01       	movw	r6, r18
    1a60:	a3 e0       	ldi	r26, 0x03	; 3
    1a62:	6a 22       	and	r6, r26
    1a64:	77 24       	eor	r7, r7
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    1a66:	c4 15       	cp	r28, r4
    1a68:	d5 05       	cpc	r29, r5
    1a6a:	34 f5       	brge	.+76     	; 0x1ab8 <_Z8makeTimeR12tmElements_t+0x10c>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    1a6c:	c2 30       	cpi	r28, 0x02	; 2
    1a6e:	d1 05       	cpc	r29, r1
    1a70:	89 f4       	brne	.+34     	; 0x1a94 <_Z8makeTimeR12tmElements_t+0xe8>
    1a72:	61 14       	cp	r6, r1
    1a74:	71 04       	cpc	r7, r1
    1a76:	71 f4       	brne	.+28     	; 0x1a94 <_Z8makeTimeR12tmElements_t+0xe8>
    1a78:	e1 14       	cp	r14, r1
    1a7a:	f1 04       	cpc	r15, r1
    1a7c:	19 f4       	brne	.+6      	; 0x1a84 <_Z8makeTimeR12tmElements_t+0xd8>
    1a7e:	c1 14       	cp	r12, r1
    1a80:	d1 04       	cpc	r13, r1
    1a82:	41 f4       	brne	.+16     	; 0x1a94 <_Z8makeTimeR12tmElements_t+0xe8>
      seconds += SECS_PER_DAY * 29;
    1a84:	b0 e8       	ldi	r27, 0x80	; 128
    1a86:	8b 0e       	add	r8, r27
    1a88:	bb e3       	ldi	r27, 0x3B	; 59
    1a8a:	9b 1e       	adc	r9, r27
    1a8c:	b6 e2       	ldi	r27, 0x26	; 38
    1a8e:	ab 1e       	adc	r10, r27
    1a90:	b1 1c       	adc	r11, r1
    1a92:	0e c0       	rjmp	.+28     	; 0x1ab0 <_Z8makeTimeR12tmElements_t+0x104>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    1a94:	d8 01       	movw	r26, r16
    1a96:	8c 91       	ld	r24, X
    1a98:	a8 2f       	mov	r26, r24
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	20 e8       	ldi	r18, 0x80	; 128
    1a9e:	31 e5       	ldi	r19, 0x51	; 81
    1aa0:	41 e0       	ldi	r20, 0x01	; 1
    1aa2:	50 e0       	ldi	r21, 0x00	; 0
    1aa4:	0e 94 37 11 	call	0x226e	; 0x226e <__muluhisi3>
    1aa8:	86 0e       	add	r8, r22
    1aaa:	97 1e       	adc	r9, r23
    1aac:	a8 1e       	adc	r10, r24
    1aae:	b9 1e       	adc	r11, r25
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    1ab0:	21 96       	adiw	r28, 0x01	; 1
    1ab2:	0f 5f       	subi	r16, 0xFF	; 255
    1ab4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab6:	d7 cf       	rjmp	.-82     	; 0x1a66 <_Z8makeTimeR12tmElements_t+0xba>
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    }
  }
  seconds+= (tm.Day-1) * SECS_PER_DAY;
  seconds+= tm.Hour * SECS_PER_HOUR;
  seconds+= tm.Minute * SECS_PER_MIN;
    1ab8:	41 81       	ldd	r20, Z+1	; 0x01
  seconds+= tm.Second;
  return (time_t)seconds; 
    1aba:	22 81       	ldd	r18, Z+2	; 0x02
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	a0 e1       	ldi	r26, 0x10	; 16
    1ac0:	be e0       	ldi	r27, 0x0E	; 14
    1ac2:	0e 94 28 11 	call	0x2250	; 0x2250 <__umulhisi3>
    1ac6:	6b 01       	movw	r12, r22
    1ac8:	7c 01       	movw	r14, r24
    1aca:	24 2f       	mov	r18, r20
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	ac e3       	ldi	r26, 0x3C	; 60
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	0e 94 28 11 	call	0x2250	; 0x2250 <__umulhisi3>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	8c 0d       	add	r24, r12
    1adc:	9d 1d       	adc	r25, r13
    1ade:	ae 1d       	adc	r26, r14
    1ae0:	bf 1d       	adc	r27, r15
    1ae2:	20 81       	ld	r18, Z
    1ae4:	6c 01       	movw	r12, r24
    1ae6:	7d 01       	movw	r14, r26
    1ae8:	c2 0e       	add	r12, r18
    1aea:	d1 1c       	adc	r13, r1
    1aec:	e1 1c       	adc	r14, r1
    1aee:	f1 1c       	adc	r15, r1
    1af0:	a4 81       	ldd	r26, Z+4	; 0x04
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	11 97       	sbiw	r26, 0x01	; 1
    1af6:	20 e8       	ldi	r18, 0x80	; 128
    1af8:	31 e5       	ldi	r19, 0x51	; 81
    1afa:	41 e0       	ldi	r20, 0x01	; 1
    1afc:	50 e0       	ldi	r21, 0x00	; 0
    1afe:	0e 94 42 11 	call	0x2284	; 0x2284 <__mulshisi3>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	8c 0d       	add	r24, r12
    1b08:	9d 1d       	adc	r25, r13
    1b0a:	ae 1d       	adc	r26, r14
    1b0c:	bf 1d       	adc	r27, r15
    1b0e:	bc 01       	movw	r22, r24
    1b10:	cd 01       	movw	r24, r26
    1b12:	68 0d       	add	r22, r8
    1b14:	79 1d       	adc	r23, r9
    1b16:	8a 1d       	adc	r24, r10
    1b18:	9b 1d       	adc	r25, r11
}
    1b1a:	df 91       	pop	r29
    1b1c:	cf 91       	pop	r28
    1b1e:	1f 91       	pop	r17
    1b20:	0f 91       	pop	r16
    1b22:	ff 90       	pop	r15
    1b24:	ef 90       	pop	r14
    1b26:	df 90       	pop	r13
    1b28:	cf 90       	pop	r12
    1b2a:	bf 90       	pop	r11
    1b2c:	af 90       	pop	r10
    1b2e:	9f 90       	pop	r9
    1b30:	8f 90       	pop	r8
    1b32:	7f 90       	pop	r7
    1b34:	6f 90       	pop	r6
    1b36:	5f 90       	pop	r5
    1b38:	4f 90       	pop	r4
    1b3a:	08 95       	ret

00001b3c <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1b3c:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <_ZN7TwoWire14rxBufferLengthE>
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	20 91 a1 02 	lds	r18, 0x02A1	; 0x8002a1 <_ZN7TwoWire13rxBufferIndexE>
    1b46:	82 1b       	sub	r24, r18
    1b48:	91 09       	sbc	r25, r1
    1b4a:	08 95       	ret

00001b4c <_ZN7TwoWire4readEv>:
    1b4c:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <_ZN7TwoWire13rxBufferIndexE>
    1b50:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <_ZN7TwoWire14rxBufferLengthE>
    1b54:	98 17       	cp	r25, r24
    1b56:	50 f4       	brcc	.+20     	; 0x1b6c <_ZN7TwoWire4readEv+0x20>
    1b58:	e9 2f       	mov	r30, r25
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	ee 55       	subi	r30, 0x5E	; 94
    1b5e:	fd 4f       	sbci	r31, 0xFD	; 253
    1b60:	20 81       	ld	r18, Z
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	9f 5f       	subi	r25, 0xFF	; 255
    1b66:	90 93 a1 02 	sts	0x02A1, r25	; 0x8002a1 <_ZN7TwoWire13rxBufferIndexE>
    1b6a:	02 c0       	rjmp	.+4      	; 0x1b70 <_ZN7TwoWire4readEv+0x24>
    1b6c:	2f ef       	ldi	r18, 0xFF	; 255
    1b6e:	3f ef       	ldi	r19, 0xFF	; 255
    1b70:	c9 01       	movw	r24, r18
    1b72:	08 95       	ret

00001b74 <_ZN7TwoWire4peekEv>:
    1b74:	e0 91 a1 02 	lds	r30, 0x02A1	; 0x8002a1 <_ZN7TwoWire13rxBufferIndexE>
    1b78:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <_ZN7TwoWire14rxBufferLengthE>
    1b7c:	e8 17       	cp	r30, r24
    1b7e:	30 f4       	brcc	.+12     	; 0x1b8c <_ZN7TwoWire4peekEv+0x18>
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	ee 55       	subi	r30, 0x5E	; 94
    1b84:	fd 4f       	sbci	r31, 0xFD	; 253
    1b86:	80 81       	ld	r24, Z
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	08 95       	ret
    1b8c:	8f ef       	ldi	r24, 0xFF	; 255
    1b8e:	9f ef       	ldi	r25, 0xFF	; 255
    1b90:	08 95       	ret

00001b92 <_ZN7TwoWire5flushEv>:
    1b92:	08 95       	ret

00001b94 <_ZN7TwoWire5writeEPKhj>:
    1b94:	cf 92       	push	r12
    1b96:	df 92       	push	r13
    1b98:	ef 92       	push	r14
    1b9a:	ff 92       	push	r15
    1b9c:	0f 93       	push	r16
    1b9e:	1f 93       	push	r17
    1ba0:	cf 93       	push	r28
    1ba2:	df 93       	push	r29
    1ba4:	7c 01       	movw	r14, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	8a 01       	movw	r16, r20
    1baa:	20 91 7c 02 	lds	r18, 0x027C	; 0x80027c <_ZN7TwoWire12transmittingE>
    1bae:	22 23       	and	r18, r18
    1bb0:	89 f0       	breq	.+34     	; 0x1bd4 <_ZN7TwoWire5writeEPKhj+0x40>
    1bb2:	eb 01       	movw	r28, r22
    1bb4:	6b 01       	movw	r12, r22
    1bb6:	c4 0e       	add	r12, r20
    1bb8:	d5 1e       	adc	r13, r21
    1bba:	cc 15       	cp	r28, r12
    1bbc:	dd 05       	cpc	r29, r13
    1bbe:	69 f0       	breq	.+26     	; 0x1bda <_ZN7TwoWire5writeEPKhj+0x46>
    1bc0:	69 91       	ld	r22, Y+
    1bc2:	d7 01       	movw	r26, r14
    1bc4:	ed 91       	ld	r30, X+
    1bc6:	fc 91       	ld	r31, X
    1bc8:	01 90       	ld	r0, Z+
    1bca:	f0 81       	ld	r31, Z
    1bcc:	e0 2d       	mov	r30, r0
    1bce:	c7 01       	movw	r24, r14
    1bd0:	09 95       	icall
    1bd2:	f3 cf       	rjmp	.-26     	; 0x1bba <_ZN7TwoWire5writeEPKhj+0x26>
    1bd4:	64 2f       	mov	r22, r20
    1bd6:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <twi_transmit>
    1bda:	c8 01       	movw	r24, r16
    1bdc:	df 91       	pop	r29
    1bde:	cf 91       	pop	r28
    1be0:	1f 91       	pop	r17
    1be2:	0f 91       	pop	r16
    1be4:	ff 90       	pop	r15
    1be6:	ef 90       	pop	r14
    1be8:	df 90       	pop	r13
    1bea:	cf 90       	pop	r12
    1bec:	08 95       	ret

00001bee <_ZN7TwoWire5writeEh>:
    1bee:	cf 93       	push	r28
    1bf0:	df 93       	push	r29
    1bf2:	1f 92       	push	r1
    1bf4:	cd b7       	in	r28, 0x3d	; 61
    1bf6:	de b7       	in	r29, 0x3e	; 62
    1bf8:	69 83       	std	Y+1, r22	; 0x01
    1bfa:	20 91 7c 02 	lds	r18, 0x027C	; 0x80027c <_ZN7TwoWire12transmittingE>
    1bfe:	22 23       	and	r18, r18
    1c00:	d1 f0       	breq	.+52     	; 0x1c36 <_ZN7TwoWire5writeEh+0x48>
    1c02:	20 91 7d 02 	lds	r18, 0x027D	; 0x80027d <_ZN7TwoWire14txBufferLengthE>
    1c06:	20 32       	cpi	r18, 0x20	; 32
    1c08:	40 f0       	brcs	.+16     	; 0x1c1a <_ZN7TwoWire5writeEh+0x2c>
    1c0a:	21 e0       	ldi	r18, 0x01	; 1
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	fc 01       	movw	r30, r24
    1c10:	33 83       	std	Z+3, r19	; 0x03
    1c12:	22 83       	std	Z+2, r18	; 0x02
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	15 c0       	rjmp	.+42     	; 0x1c44 <_ZN7TwoWire5writeEh+0x56>
    1c1a:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <_ZN7TwoWire13txBufferIndexE>
    1c1e:	e8 2f       	mov	r30, r24
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	e1 58       	subi	r30, 0x81	; 129
    1c24:	fd 4f       	sbci	r31, 0xFD	; 253
    1c26:	99 81       	ldd	r25, Y+1	; 0x01
    1c28:	90 83       	st	Z, r25
    1c2a:	8f 5f       	subi	r24, 0xFF	; 255
    1c2c:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <_ZN7TwoWire13txBufferIndexE>
    1c30:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <_ZN7TwoWire14txBufferLengthE>
    1c34:	05 c0       	rjmp	.+10     	; 0x1c40 <_ZN7TwoWire5writeEh+0x52>
    1c36:	61 e0       	ldi	r22, 0x01	; 1
    1c38:	ce 01       	movw	r24, r28
    1c3a:	01 96       	adiw	r24, 0x01	; 1
    1c3c:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <twi_transmit>
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	0f 90       	pop	r0
    1c46:	df 91       	pop	r29
    1c48:	cf 91       	pop	r28
    1c4a:	08 95       	ret

00001c4c <_ZN7TwoWireC1Ev>:
    1c4c:	fc 01       	movw	r30, r24
    1c4e:	13 82       	std	Z+3, r1	; 0x03
    1c50:	12 82       	std	Z+2, r1	; 0x02
    1c52:	88 ee       	ldi	r24, 0xE8	; 232
    1c54:	93 e0       	ldi	r25, 0x03	; 3
    1c56:	a0 e0       	ldi	r26, 0x00	; 0
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	84 83       	std	Z+4, r24	; 0x04
    1c5c:	95 83       	std	Z+5, r25	; 0x05
    1c5e:	a6 83       	std	Z+6, r26	; 0x06
    1c60:	b7 83       	std	Z+7, r27	; 0x07
    1c62:	87 e7       	ldi	r24, 0x77	; 119
    1c64:	91 e0       	ldi	r25, 0x01	; 1
    1c66:	91 83       	std	Z+1, r25	; 0x01
    1c68:	80 83       	st	Z, r24
    1c6a:	08 95       	ret

00001c6c <_ZN7TwoWire5beginEv>:
    1c6c:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <_ZN7TwoWire13rxBufferIndexE>
    1c70:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <_ZN7TwoWire14rxBufferLengthE>
    1c74:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <_ZN7TwoWire13txBufferIndexE>
    1c78:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <_ZN7TwoWire14txBufferLengthE>
    1c7c:	0c 94 d1 0e 	jmp	0x1da2	; 0x1da2 <twi_init>

00001c80 <_ZN7TwoWire17beginTransmissionEh>:
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <_ZN7TwoWire12transmittingE>
    1c86:	60 93 9f 02 	sts	0x029F, r22	; 0x80029f <_ZN7TwoWire9txAddressE>
    1c8a:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <_ZN7TwoWire13txBufferIndexE>
    1c8e:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <_ZN7TwoWire14txBufferLengthE>
    1c92:	08 95       	ret

00001c94 <_ZN7TwoWire17beginTransmissionEi>:
    1c94:	0c 94 40 0e 	jmp	0x1c80	; 0x1c80 <_ZN7TwoWire17beginTransmissionEh>

00001c98 <_ZN7TwoWire15endTransmissionEh>:
    1c98:	0f 93       	push	r16
    1c9a:	06 2f       	mov	r16, r22
    1c9c:	21 e0       	ldi	r18, 0x01	; 1
    1c9e:	40 91 7d 02 	lds	r20, 0x027D	; 0x80027d <_ZN7TwoWire14txBufferLengthE>
    1ca2:	6f e7       	ldi	r22, 0x7F	; 127
    1ca4:	72 e0       	ldi	r23, 0x02	; 2
    1ca6:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <_ZN7TwoWire9txAddressE>
    1caa:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <twi_writeTo>
    1cae:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <_ZN7TwoWire13txBufferIndexE>
    1cb2:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <_ZN7TwoWire14txBufferLengthE>
    1cb6:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <_ZN7TwoWire12transmittingE>
    1cba:	0f 91       	pop	r16
    1cbc:	08 95       	ret

00001cbe <_ZN7TwoWire11requestFromEhhmhh>:
    1cbe:	4f 92       	push	r4
    1cc0:	5f 92       	push	r5
    1cc2:	6f 92       	push	r6
    1cc4:	7f 92       	push	r7
    1cc6:	af 92       	push	r10
    1cc8:	bf 92       	push	r11
    1cca:	cf 92       	push	r12
    1ccc:	ef 92       	push	r14
    1cce:	ff 92       	push	r15
    1cd0:	0f 93       	push	r16
    1cd2:	1f 93       	push	r17
    1cd4:	cf 93       	push	r28
    1cd6:	df 93       	push	r29
    1cd8:	5c 01       	movw	r10, r24
    1cda:	f6 2e       	mov	r15, r22
    1cdc:	d4 2f       	mov	r29, r20
    1cde:	28 01       	movw	r4, r16
    1ce0:	39 01       	movw	r6, r18
    1ce2:	ee 20       	and	r14, r14
    1ce4:	21 f1       	breq	.+72     	; 0x1d2e <_ZN7TwoWire11requestFromEhhmhh+0x70>
    1ce6:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <_ZN7TwoWire17beginTransmissionEh>
    1cea:	ce 2d       	mov	r28, r14
    1cec:	c4 30       	cpi	r28, 0x04	; 4
    1cee:	08 f0       	brcs	.+2      	; 0x1cf2 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1cf0:	c3 e0       	ldi	r28, 0x03	; 3
    1cf2:	c1 50       	subi	r28, 0x01	; 1
    1cf4:	c0 f0       	brcs	.+48     	; 0x1d26 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    1cf6:	28 e0       	ldi	r18, 0x08	; 8
    1cf8:	c2 9f       	mul	r28, r18
    1cfa:	c0 01       	movw	r24, r0
    1cfc:	11 24       	eor	r1, r1
    1cfe:	a3 01       	movw	r20, r6
    1d00:	92 01       	movw	r18, r4
    1d02:	04 c0       	rjmp	.+8      	; 0x1d0c <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    1d04:	56 95       	lsr	r21
    1d06:	47 95       	ror	r20
    1d08:	37 95       	ror	r19
    1d0a:	27 95       	ror	r18
    1d0c:	8a 95       	dec	r24
    1d0e:	d2 f7       	brpl	.-12     	; 0x1d04 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    1d10:	ca 01       	movw	r24, r20
    1d12:	b9 01       	movw	r22, r18
    1d14:	d5 01       	movw	r26, r10
    1d16:	ed 91       	ld	r30, X+
    1d18:	fc 91       	ld	r31, X
    1d1a:	01 90       	ld	r0, Z+
    1d1c:	f0 81       	ld	r31, Z
    1d1e:	e0 2d       	mov	r30, r0
    1d20:	c5 01       	movw	r24, r10
    1d22:	09 95       	icall
    1d24:	e6 cf       	rjmp	.-52     	; 0x1cf2 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1d26:	60 e0       	ldi	r22, 0x00	; 0
    1d28:	c5 01       	movw	r24, r10
    1d2a:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <_ZN7TwoWire15endTransmissionEh>
    1d2e:	4d 2f       	mov	r20, r29
    1d30:	d1 32       	cpi	r29, 0x21	; 33
    1d32:	08 f0       	brcs	.+2      	; 0x1d36 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    1d34:	40 e2       	ldi	r20, 0x20	; 32
    1d36:	2c 2d       	mov	r18, r12
    1d38:	62 ea       	ldi	r22, 0xA2	; 162
    1d3a:	72 e0       	ldi	r23, 0x02	; 2
    1d3c:	8f 2d       	mov	r24, r15
    1d3e:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <twi_readFrom>
    1d42:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <_ZN7TwoWire13rxBufferIndexE>
    1d46:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <_ZN7TwoWire14rxBufferLengthE>
    1d4a:	df 91       	pop	r29
    1d4c:	cf 91       	pop	r28
    1d4e:	1f 91       	pop	r17
    1d50:	0f 91       	pop	r16
    1d52:	ff 90       	pop	r15
    1d54:	ef 90       	pop	r14
    1d56:	cf 90       	pop	r12
    1d58:	bf 90       	pop	r11
    1d5a:	af 90       	pop	r10
    1d5c:	7f 90       	pop	r7
    1d5e:	6f 90       	pop	r6
    1d60:	5f 90       	pop	r5
    1d62:	4f 90       	pop	r4
    1d64:	08 95       	ret

00001d66 <_ZN7TwoWire11requestFromEhhh>:
    1d66:	cf 92       	push	r12
    1d68:	ef 92       	push	r14
    1d6a:	0f 93       	push	r16
    1d6c:	1f 93       	push	r17
    1d6e:	c2 2e       	mov	r12, r18
    1d70:	e1 2c       	mov	r14, r1
    1d72:	00 e0       	ldi	r16, 0x00	; 0
    1d74:	10 e0       	ldi	r17, 0x00	; 0
    1d76:	98 01       	movw	r18, r16
    1d78:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <_ZN7TwoWire11requestFromEhhmhh>
    1d7c:	1f 91       	pop	r17
    1d7e:	0f 91       	pop	r16
    1d80:	ef 90       	pop	r14
    1d82:	cf 90       	pop	r12
    1d84:	08 95       	ret

00001d86 <_ZN7TwoWire11requestFromEhh>:
    1d86:	21 e0       	ldi	r18, 0x01	; 1
    1d88:	0c 94 b3 0e 	jmp	0x1d66	; 0x1d66 <_ZN7TwoWire11requestFromEhhh>

00001d8c <_ZN7TwoWire11requestFromEii>:
    1d8c:	21 e0       	ldi	r18, 0x01	; 1
    1d8e:	0c 94 b3 0e 	jmp	0x1d66	; 0x1d66 <_ZN7TwoWire11requestFromEhhh>

00001d92 <_ZN7TwoWire15endTransmissionEv>:
    1d92:	61 e0       	ldi	r22, 0x01	; 1
    1d94:	0c 94 4c 0e 	jmp	0x1c98	; 0x1c98 <_ZN7TwoWire15endTransmissionEh>

00001d98 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1d98:	80 e7       	ldi	r24, 0x70	; 112
    1d9a:	92 e0       	ldi	r25, 0x02	; 2
    1d9c:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <_ZN7TwoWireC1Ev>

00001da0 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1da0:	08 95       	ret

00001da2 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1da2:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <twi_state>
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <twi_sendStop>
    1dac:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <twi_inRepStart>
    1db0:	61 e0       	ldi	r22, 0x01	; 1
    1db2:	82 e1       	ldi	r24, 0x12	; 18
    1db4:	0e 94 82 08 	call	0x1104	; 0x1104 <digitalWrite>
    1db8:	61 e0       	ldi	r22, 0x01	; 1
    1dba:	83 e1       	ldi	r24, 0x13	; 19
    1dbc:	0e 94 82 08 	call	0x1104	; 0x1104 <digitalWrite>
    1dc0:	e9 eb       	ldi	r30, 0xB9	; 185
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	8e 7f       	andi	r24, 0xFE	; 254
    1dc8:	80 83       	st	Z, r24
    1dca:	80 81       	ld	r24, Z
    1dcc:	8d 7f       	andi	r24, 0xFD	; 253
    1dce:	80 83       	st	Z, r24
    1dd0:	88 e4       	ldi	r24, 0x48	; 72
    1dd2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1dd6:	85 e4       	ldi	r24, 0x45	; 69
    1dd8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1ddc:	08 95       	ret

00001dde <twi_readFrom>:
    1dde:	41 32       	cpi	r20, 0x21	; 33
    1de0:	08 f0       	brcs	.+2      	; 0x1de4 <twi_readFrom+0x6>
    1de2:	43 c0       	rjmp	.+134    	; 0x1e6a <twi_readFrom+0x8c>
    1de4:	90 91 2f 03 	lds	r25, 0x032F	; 0x80032f <twi_state>
    1de8:	91 11       	cpse	r25, r1
    1dea:	fc cf       	rjmp	.-8      	; 0x1de4 <twi_readFrom+0x6>
    1dec:	91 e0       	ldi	r25, 0x01	; 1
    1dee:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <twi_state>
    1df2:	20 93 2d 03 	sts	0x032D, r18	; 0x80032d <twi_sendStop>
    1df6:	2f ef       	ldi	r18, 0xFF	; 255
    1df8:	20 93 c2 02 	sts	0x02C2, r18	; 0x8002c2 <twi_error>
    1dfc:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <twi_masterBufferIndex>
    1e00:	24 0f       	add	r18, r20
    1e02:	20 93 06 03 	sts	0x0306, r18	; 0x800306 <twi_masterBufferLength>
    1e06:	90 93 2e 03 	sts	0x032E, r25	; 0x80032e <twi_slarw>
    1e0a:	90 91 2e 03 	lds	r25, 0x032E	; 0x80032e <twi_slarw>
    1e0e:	88 0f       	add	r24, r24
    1e10:	89 2b       	or	r24, r25
    1e12:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <twi_slarw>
    1e16:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <twi_inRepStart>
    1e1a:	81 30       	cpi	r24, 0x01	; 1
    1e1c:	61 f4       	brne	.+24     	; 0x1e36 <twi_readFrom+0x58>
    1e1e:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <twi_inRepStart>
    1e22:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <twi_slarw>
    1e26:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1e2a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1e2e:	83 fd       	sbrc	r24, 3
    1e30:	f8 cf       	rjmp	.-16     	; 0x1e22 <twi_readFrom+0x44>
    1e32:	85 ec       	ldi	r24, 0xC5	; 197
    1e34:	01 c0       	rjmp	.+2      	; 0x1e38 <twi_readFrom+0x5a>
    1e36:	85 ee       	ldi	r24, 0xE5	; 229
    1e38:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1e3c:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <twi_state>
    1e40:	81 30       	cpi	r24, 0x01	; 1
    1e42:	e1 f3       	breq	.-8      	; 0x1e3c <twi_readFrom+0x5e>
    1e44:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <twi_masterBufferIndex>
    1e48:	84 17       	cp	r24, r20
    1e4a:	10 f4       	brcc	.+4      	; 0x1e50 <twi_readFrom+0x72>
    1e4c:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <twi_masterBufferIndex>
    1e50:	a8 e0       	ldi	r26, 0x08	; 8
    1e52:	b3 e0       	ldi	r27, 0x03	; 3
    1e54:	96 2f       	mov	r25, r22
    1e56:	fb 01       	movw	r30, r22
    1e58:	8e 2f       	mov	r24, r30
    1e5a:	89 1b       	sub	r24, r25
    1e5c:	84 17       	cp	r24, r20
    1e5e:	18 f4       	brcc	.+6      	; 0x1e66 <twi_readFrom+0x88>
    1e60:	8d 91       	ld	r24, X+
    1e62:	81 93       	st	Z+, r24
    1e64:	f9 cf       	rjmp	.-14     	; 0x1e58 <twi_readFrom+0x7a>
    1e66:	84 2f       	mov	r24, r20
    1e68:	08 95       	ret
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	08 95       	ret

00001e6e <twi_writeTo>:
    1e6e:	0f 93       	push	r16
    1e70:	41 32       	cpi	r20, 0x21	; 33
    1e72:	08 f0       	brcs	.+2      	; 0x1e76 <twi_writeTo+0x8>
    1e74:	4a c0       	rjmp	.+148    	; 0x1f0a <twi_writeTo+0x9c>
    1e76:	90 91 2f 03 	lds	r25, 0x032F	; 0x80032f <twi_state>
    1e7a:	91 11       	cpse	r25, r1
    1e7c:	fc cf       	rjmp	.-8      	; 0x1e76 <twi_writeTo+0x8>
    1e7e:	32 e0       	ldi	r19, 0x02	; 2
    1e80:	30 93 2f 03 	sts	0x032F, r19	; 0x80032f <twi_state>
    1e84:	00 93 2d 03 	sts	0x032D, r16	; 0x80032d <twi_sendStop>
    1e88:	3f ef       	ldi	r19, 0xFF	; 255
    1e8a:	30 93 c2 02 	sts	0x02C2, r19	; 0x8002c2 <twi_error>
    1e8e:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <twi_masterBufferIndex>
    1e92:	40 93 06 03 	sts	0x0306, r20	; 0x800306 <twi_masterBufferLength>
    1e96:	56 2f       	mov	r21, r22
    1e98:	a8 e0       	ldi	r26, 0x08	; 8
    1e9a:	b3 e0       	ldi	r27, 0x03	; 3
    1e9c:	fb 01       	movw	r30, r22
    1e9e:	3e 2f       	mov	r19, r30
    1ea0:	35 1b       	sub	r19, r21
    1ea2:	34 17       	cp	r19, r20
    1ea4:	18 f4       	brcc	.+6      	; 0x1eac <twi_writeTo+0x3e>
    1ea6:	31 91       	ld	r19, Z+
    1ea8:	3d 93       	st	X+, r19
    1eaa:	f9 cf       	rjmp	.-14     	; 0x1e9e <twi_writeTo+0x30>
    1eac:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <twi_slarw>
    1eb0:	30 91 2e 03 	lds	r19, 0x032E	; 0x80032e <twi_slarw>
    1eb4:	88 0f       	add	r24, r24
    1eb6:	83 2b       	or	r24, r19
    1eb8:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <twi_slarw>
    1ebc:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <twi_inRepStart>
    1ec0:	81 30       	cpi	r24, 0x01	; 1
    1ec2:	61 f4       	brne	.+24     	; 0x1edc <twi_writeTo+0x6e>
    1ec4:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <twi_inRepStart>
    1ec8:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <twi_slarw>
    1ecc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1ed0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1ed4:	83 fd       	sbrc	r24, 3
    1ed6:	f8 cf       	rjmp	.-16     	; 0x1ec8 <twi_writeTo+0x5a>
    1ed8:	85 ec       	ldi	r24, 0xC5	; 197
    1eda:	01 c0       	rjmp	.+2      	; 0x1ede <twi_writeTo+0x70>
    1edc:	85 ee       	ldi	r24, 0xE5	; 229
    1ede:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1ee2:	22 23       	and	r18, r18
    1ee4:	21 f0       	breq	.+8      	; 0x1eee <twi_writeTo+0x80>
    1ee6:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <twi_state>
    1eea:	82 30       	cpi	r24, 0x02	; 2
    1eec:	d1 f3       	breq	.-12     	; 0x1ee2 <twi_writeTo+0x74>
    1eee:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <twi_error>
    1ef2:	8f 3f       	cpi	r24, 0xFF	; 255
    1ef4:	79 f0       	breq	.+30     	; 0x1f14 <twi_writeTo+0xa6>
    1ef6:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <twi_error>
    1efa:	80 32       	cpi	r24, 0x20	; 32
    1efc:	41 f0       	breq	.+16     	; 0x1f0e <twi_writeTo+0xa0>
    1efe:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <twi_error>
    1f02:	80 33       	cpi	r24, 0x30	; 48
    1f04:	31 f0       	breq	.+12     	; 0x1f12 <twi_writeTo+0xa4>
    1f06:	94 e0       	ldi	r25, 0x04	; 4
    1f08:	05 c0       	rjmp	.+10     	; 0x1f14 <twi_writeTo+0xa6>
    1f0a:	91 e0       	ldi	r25, 0x01	; 1
    1f0c:	03 c0       	rjmp	.+6      	; 0x1f14 <twi_writeTo+0xa6>
    1f0e:	92 e0       	ldi	r25, 0x02	; 2
    1f10:	01 c0       	rjmp	.+2      	; 0x1f14 <twi_writeTo+0xa6>
    1f12:	93 e0       	ldi	r25, 0x03	; 3
    1f14:	89 2f       	mov	r24, r25
    1f16:	0f 91       	pop	r16
    1f18:	08 95       	ret

00001f1a <twi_transmit>:
    1f1a:	40 91 e4 02 	lds	r20, 0x02E4	; 0x8002e4 <twi_txBufferLength>
    1f1e:	26 2f       	mov	r18, r22
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	24 0f       	add	r18, r20
    1f24:	31 1d       	adc	r19, r1
    1f26:	21 32       	cpi	r18, 0x21	; 33
    1f28:	31 05       	cpc	r19, r1
    1f2a:	dc f4       	brge	.+54     	; 0x1f62 <twi_transmit+0x48>
    1f2c:	20 91 2f 03 	lds	r18, 0x032F	; 0x80032f <twi_state>
    1f30:	24 30       	cpi	r18, 0x04	; 4
    1f32:	c9 f4       	brne	.+50     	; 0x1f66 <twi_transmit+0x4c>
    1f34:	fc 01       	movw	r30, r24
    1f36:	80 e0       	ldi	r24, 0x00	; 0
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	86 17       	cp	r24, r22
    1f3c:	58 f4       	brcc	.+22     	; 0x1f54 <twi_transmit+0x3a>
    1f3e:	30 91 e4 02 	lds	r19, 0x02E4	; 0x8002e4 <twi_txBufferLength>
    1f42:	21 91       	ld	r18, Z+
    1f44:	dc 01       	movw	r26, r24
    1f46:	aa 51       	subi	r26, 0x1A	; 26
    1f48:	bd 4f       	sbci	r27, 0xFD	; 253
    1f4a:	a3 0f       	add	r26, r19
    1f4c:	b1 1d       	adc	r27, r1
    1f4e:	2c 93       	st	X, r18
    1f50:	01 96       	adiw	r24, 0x01	; 1
    1f52:	f3 cf       	rjmp	.-26     	; 0x1f3a <twi_transmit+0x20>
    1f54:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <twi_txBufferLength>
    1f58:	68 0f       	add	r22, r24
    1f5a:	60 93 e4 02 	sts	0x02E4, r22	; 0x8002e4 <twi_txBufferLength>
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	08 95       	ret
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	08 95       	ret
    1f66:	82 e0       	ldi	r24, 0x02	; 2
    1f68:	08 95       	ret

00001f6a <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1f6a:	85 ed       	ldi	r24, 0xD5	; 213
    1f6c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1f70:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1f74:	84 fd       	sbrc	r24, 4
    1f76:	fc cf       	rjmp	.-8      	; 0x1f70 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1f78:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <twi_state>
    1f7c:	08 95       	ret

00001f7e <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1f7e:	85 ec       	ldi	r24, 0xC5	; 197
    1f80:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    1f84:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <twi_state>
    1f88:	08 95       	ret

00001f8a <__vector_24>:
}

ISR(TWI_vect)
{
    1f8a:	1f 92       	push	r1
    1f8c:	0f 92       	push	r0
    1f8e:	0f b6       	in	r0, 0x3f	; 63
    1f90:	0f 92       	push	r0
    1f92:	11 24       	eor	r1, r1
    1f94:	2f 93       	push	r18
    1f96:	3f 93       	push	r19
    1f98:	4f 93       	push	r20
    1f9a:	5f 93       	push	r21
    1f9c:	6f 93       	push	r22
    1f9e:	7f 93       	push	r23
    1fa0:	8f 93       	push	r24
    1fa2:	9f 93       	push	r25
    1fa4:	af 93       	push	r26
    1fa6:	bf 93       	push	r27
    1fa8:	ef 93       	push	r30
    1faa:	ff 93       	push	r31
  switch(TW_STATUS){
    1fac:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1fb0:	88 7f       	andi	r24, 0xF8	; 248
    1fb2:	80 36       	cpi	r24, 0x60	; 96
    1fb4:	09 f4       	brne	.+2      	; 0x1fb8 <__vector_24+0x2e>
    1fb6:	9e c0       	rjmp	.+316    	; 0x20f4 <__vector_24+0x16a>
    1fb8:	78 f5       	brcc	.+94     	; 0x2018 <__vector_24+0x8e>
    1fba:	88 32       	cpi	r24, 0x28	; 40
    1fbc:	09 f4       	brne	.+2      	; 0x1fc0 <__vector_24+0x36>
    1fbe:	5d c0       	rjmp	.+186    	; 0x207a <__vector_24+0xf0>
    1fc0:	90 f4       	brcc	.+36     	; 0x1fe6 <__vector_24+0x5c>
    1fc2:	80 31       	cpi	r24, 0x10	; 16
    1fc4:	09 f4       	brne	.+2      	; 0x1fc8 <__vector_24+0x3e>
    1fc6:	56 c0       	rjmp	.+172    	; 0x2074 <__vector_24+0xea>
    1fc8:	38 f4       	brcc	.+14     	; 0x1fd8 <__vector_24+0x4e>
    1fca:	88 23       	and	r24, r24
    1fcc:	09 f4       	brne	.+2      	; 0x1fd0 <__vector_24+0x46>
    1fce:	f5 c0       	rjmp	.+490    	; 0x21ba <__vector_24+0x230>
    1fd0:	88 30       	cpi	r24, 0x08	; 8
    1fd2:	09 f4       	brne	.+2      	; 0x1fd6 <__vector_24+0x4c>
    1fd4:	4f c0       	rjmp	.+158    	; 0x2074 <__vector_24+0xea>
    1fd6:	f5 c0       	rjmp	.+490    	; 0x21c2 <__vector_24+0x238>
    1fd8:	88 31       	cpi	r24, 0x18	; 24
    1fda:	09 f4       	brne	.+2      	; 0x1fde <__vector_24+0x54>
    1fdc:	4e c0       	rjmp	.+156    	; 0x207a <__vector_24+0xf0>
    1fde:	80 32       	cpi	r24, 0x20	; 32
    1fe0:	09 f4       	brne	.+2      	; 0x1fe4 <__vector_24+0x5a>
    1fe2:	5f c0       	rjmp	.+190    	; 0x20a2 <__vector_24+0x118>
    1fe4:	ee c0       	rjmp	.+476    	; 0x21c2 <__vector_24+0x238>
    1fe6:	80 34       	cpi	r24, 0x40	; 64
    1fe8:	09 f4       	brne	.+2      	; 0x1fec <__vector_24+0x62>
    1fea:	6a c0       	rjmp	.+212    	; 0x20c0 <__vector_24+0x136>
    1fec:	58 f4       	brcc	.+22     	; 0x2004 <__vector_24+0x7a>
    1fee:	80 33       	cpi	r24, 0x30	; 48
    1ff0:	09 f4       	brne	.+2      	; 0x1ff4 <__vector_24+0x6a>
    1ff2:	57 c0       	rjmp	.+174    	; 0x20a2 <__vector_24+0x118>
    1ff4:	88 33       	cpi	r24, 0x38	; 56
    1ff6:	09 f0       	breq	.+2      	; 0x1ffa <__vector_24+0x70>
    1ff8:	e4 c0       	rjmp	.+456    	; 0x21c2 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1ffa:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <twi_error>
      twi_releaseBus();
    1ffe:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <twi_releaseBus>
      break;
    2002:	df c0       	rjmp	.+446    	; 0x21c2 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2004:	80 35       	cpi	r24, 0x50	; 80
    2006:	09 f4       	brne	.+2      	; 0x200a <__vector_24+0x80>
    2008:	4f c0       	rjmp	.+158    	; 0x20a8 <__vector_24+0x11e>
    200a:	88 35       	cpi	r24, 0x58	; 88
    200c:	09 f4       	brne	.+2      	; 0x2010 <__vector_24+0x86>
    200e:	5d c0       	rjmp	.+186    	; 0x20ca <__vector_24+0x140>
    2010:	88 34       	cpi	r24, 0x48	; 72
    2012:	09 f0       	breq	.+2      	; 0x2016 <__vector_24+0x8c>
    2014:	d6 c0       	rjmp	.+428    	; 0x21c2 <__vector_24+0x238>
    2016:	d3 c0       	rjmp	.+422    	; 0x21be <__vector_24+0x234>
    2018:	88 39       	cpi	r24, 0x98	; 152
    201a:	09 f4       	brne	.+2      	; 0x201e <__vector_24+0x94>
    201c:	c4 c0       	rjmp	.+392    	; 0x21a6 <__vector_24+0x21c>
    201e:	a8 f4       	brcc	.+42     	; 0x204a <__vector_24+0xc0>
    2020:	88 37       	cpi	r24, 0x78	; 120
    2022:	09 f4       	brne	.+2      	; 0x2026 <__vector_24+0x9c>
    2024:	67 c0       	rjmp	.+206    	; 0x20f4 <__vector_24+0x16a>
    2026:	38 f4       	brcc	.+14     	; 0x2036 <__vector_24+0xac>
    2028:	88 36       	cpi	r24, 0x68	; 104
    202a:	09 f4       	brne	.+2      	; 0x202e <__vector_24+0xa4>
    202c:	63 c0       	rjmp	.+198    	; 0x20f4 <__vector_24+0x16a>
    202e:	80 37       	cpi	r24, 0x70	; 112
    2030:	09 f4       	brne	.+2      	; 0x2034 <__vector_24+0xaa>
    2032:	60 c0       	rjmp	.+192    	; 0x20f4 <__vector_24+0x16a>
    2034:	c6 c0       	rjmp	.+396    	; 0x21c2 <__vector_24+0x238>
    2036:	88 38       	cpi	r24, 0x88	; 136
    2038:	09 f4       	brne	.+2      	; 0x203c <__vector_24+0xb2>
    203a:	b5 c0       	rjmp	.+362    	; 0x21a6 <__vector_24+0x21c>
    203c:	80 39       	cpi	r24, 0x90	; 144
    203e:	09 f4       	brne	.+2      	; 0x2042 <__vector_24+0xb8>
    2040:	5f c0       	rjmp	.+190    	; 0x2100 <__vector_24+0x176>
    2042:	80 38       	cpi	r24, 0x80	; 128
    2044:	09 f0       	breq	.+2      	; 0x2048 <__vector_24+0xbe>
    2046:	bd c0       	rjmp	.+378    	; 0x21c2 <__vector_24+0x238>
    2048:	5b c0       	rjmp	.+182    	; 0x2100 <__vector_24+0x176>
    204a:	80 3b       	cpi	r24, 0xB0	; 176
    204c:	09 f4       	brne	.+2      	; 0x2050 <__vector_24+0xc6>
    204e:	83 c0       	rjmp	.+262    	; 0x2156 <__vector_24+0x1cc>
    2050:	38 f4       	brcc	.+14     	; 0x2060 <__vector_24+0xd6>
    2052:	80 3a       	cpi	r24, 0xA0	; 160
    2054:	09 f4       	brne	.+2      	; 0x2058 <__vector_24+0xce>
    2056:	66 c0       	rjmp	.+204    	; 0x2124 <__vector_24+0x19a>
    2058:	88 3a       	cpi	r24, 0xA8	; 168
    205a:	09 f4       	brne	.+2      	; 0x205e <__vector_24+0xd4>
    205c:	7c c0       	rjmp	.+248    	; 0x2156 <__vector_24+0x1cc>
    205e:	b1 c0       	rjmp	.+354    	; 0x21c2 <__vector_24+0x238>
    2060:	80 3c       	cpi	r24, 0xC0	; 192
    2062:	09 f4       	brne	.+2      	; 0x2066 <__vector_24+0xdc>
    2064:	a4 c0       	rjmp	.+328    	; 0x21ae <__vector_24+0x224>
    2066:	88 3c       	cpi	r24, 0xC8	; 200
    2068:	09 f4       	brne	.+2      	; 0x206c <__vector_24+0xe2>
    206a:	a1 c0       	rjmp	.+322    	; 0x21ae <__vector_24+0x224>
    206c:	88 3b       	cpi	r24, 0xB8	; 184
    206e:	09 f4       	brne	.+2      	; 0x2072 <__vector_24+0xe8>
    2070:	87 c0       	rjmp	.+270    	; 0x2180 <__vector_24+0x1f6>
    2072:	a7 c0       	rjmp	.+334    	; 0x21c2 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2074:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <twi_slarw>
    2078:	10 c0       	rjmp	.+32     	; 0x209a <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    207a:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <twi_masterBufferIndex>
    207e:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <twi_masterBufferLength>
    2082:	98 17       	cp	r25, r24
    2084:	70 f5       	brcc	.+92     	; 0x20e2 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2086:	e0 91 07 03 	lds	r30, 0x0307	; 0x800307 <twi_masterBufferIndex>
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	8e 0f       	add	r24, r30
    208e:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <twi_masterBufferIndex>
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	e8 5f       	subi	r30, 0xF8	; 248
    2096:	fc 4f       	sbci	r31, 0xFC	; 252
    2098:	80 81       	ld	r24, Z
    209a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    209e:	85 ec       	ldi	r24, 0xC5	; 197
    20a0:	83 c0       	rjmp	.+262    	; 0x21a8 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    20a2:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <twi_error>
    20a6:	8b c0       	rjmp	.+278    	; 0x21be <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    20a8:	e0 91 07 03 	lds	r30, 0x0307	; 0x800307 <twi_masterBufferIndex>
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	8e 0f       	add	r24, r30
    20b0:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <twi_masterBufferIndex>
    20b4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	e8 5f       	subi	r30, 0xF8	; 248
    20bc:	fc 4f       	sbci	r31, 0xFC	; 252
    20be:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    20c0:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <twi_masterBufferIndex>
    20c4:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <twi_masterBufferLength>
    20c8:	6b c0       	rjmp	.+214    	; 0x21a0 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    20ca:	e0 91 07 03 	lds	r30, 0x0307	; 0x800307 <twi_masterBufferIndex>
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	8e 0f       	add	r24, r30
    20d2:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <twi_masterBufferIndex>
    20d6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	e8 5f       	subi	r30, 0xF8	; 248
    20de:	fc 4f       	sbci	r31, 0xFC	; 252
    20e0:	80 83       	st	Z, r24
	if (twi_sendStop)
    20e2:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <twi_sendStop>
    20e6:	81 11       	cpse	r24, r1
    20e8:	6a c0       	rjmp	.+212    	; 0x21be <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    20f0:	84 ea       	ldi	r24, 0xA4	; 164
    20f2:	5e c0       	rjmp	.+188    	; 0x21b0 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    20f4:	83 e0       	ldi	r24, 0x03	; 3
    20f6:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    20fa:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <twi_rxBufferIndex>
    20fe:	cf cf       	rjmp	.-98     	; 0x209e <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2100:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <twi_rxBufferIndex>
    2104:	80 32       	cpi	r24, 0x20	; 32
    2106:	08 f0       	brcs	.+2      	; 0x210a <__vector_24+0x180>
    2108:	4e c0       	rjmp	.+156    	; 0x21a6 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    210a:	e0 91 c3 02 	lds	r30, 0x02C3	; 0x8002c3 <twi_rxBufferIndex>
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	8e 0f       	add	r24, r30
    2112:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <twi_rxBufferIndex>
    2116:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	ec 53       	subi	r30, 0x3C	; 60
    211e:	fd 4f       	sbci	r31, 0xFD	; 253
    2120:	80 83       	st	Z, r24
    2122:	bd cf       	rjmp	.-134    	; 0x209e <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2124:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2128:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <twi_rxBufferIndex>
    212c:	80 32       	cpi	r24, 0x20	; 32
    212e:	30 f4       	brcc	.+12     	; 0x213c <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2130:	e0 91 c3 02 	lds	r30, 0x02C3	; 0x8002c3 <twi_rxBufferIndex>
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	ec 53       	subi	r30, 0x3C	; 60
    2138:	fd 4f       	sbci	r31, 0xFD	; 253
    213a:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    213c:	60 91 c3 02 	lds	r22, 0x02C3	; 0x8002c3 <twi_rxBufferIndex>
    2140:	70 e0       	ldi	r23, 0x00	; 0
    2142:	e0 91 28 03 	lds	r30, 0x0328	; 0x800328 <twi_onSlaveReceive>
    2146:	f0 91 29 03 	lds	r31, 0x0329	; 0x800329 <twi_onSlaveReceive+0x1>
    214a:	84 ec       	ldi	r24, 0xC4	; 196
    214c:	92 e0       	ldi	r25, 0x02	; 2
    214e:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2150:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <twi_rxBufferIndex>
      break;
    2154:	36 c0       	rjmp	.+108    	; 0x21c2 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2156:	84 e0       	ldi	r24, 0x04	; 4
    2158:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    215c:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2160:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2164:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <twi_onSlaveTransmit>
    2168:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <twi_onSlaveTransmit+0x1>
    216c:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    216e:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <twi_txBufferLength>
    2172:	81 11       	cpse	r24, r1
    2174:	05 c0       	rjmp	.+10     	; 0x2180 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    217c:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2180:	e0 91 e5 02 	lds	r30, 0x02E5	; 0x8002e5 <twi_txBufferIndex>
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	8e 0f       	add	r24, r30
    2188:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <twi_txBufferIndex>
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	ea 51       	subi	r30, 0x1A	; 26
    2190:	fd 4f       	sbci	r31, 0xFD	; 253
    2192:	80 81       	ld	r24, Z
    2194:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2198:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <twi_txBufferIndex>
    219c:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <twi_txBufferLength>
    21a0:	98 17       	cp	r25, r24
    21a2:	08 f4       	brcc	.+2      	; 0x21a6 <__vector_24+0x21c>
    21a4:	7c cf       	rjmp	.-264    	; 0x209e <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    21a6:	85 e8       	ldi	r24, 0x85	; 133
    21a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    21ac:	0a c0       	rjmp	.+20     	; 0x21c2 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    21ae:	85 ec       	ldi	r24, 0xC5	; 197
    21b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    21b4:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <twi_state>
      break;
    21b8:	04 c0       	rjmp	.+8      	; 0x21c2 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    21ba:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <twi_error>
      twi_stop();
    21be:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <twi_stop>
      break;
  }
}
    21c2:	ff 91       	pop	r31
    21c4:	ef 91       	pop	r30
    21c6:	bf 91       	pop	r27
    21c8:	af 91       	pop	r26
    21ca:	9f 91       	pop	r25
    21cc:	8f 91       	pop	r24
    21ce:	7f 91       	pop	r23
    21d0:	6f 91       	pop	r22
    21d2:	5f 91       	pop	r21
    21d4:	4f 91       	pop	r20
    21d6:	3f 91       	pop	r19
    21d8:	2f 91       	pop	r18
    21da:	0f 90       	pop	r0
    21dc:	0f be       	out	0x3f, r0	; 63
    21de:	0f 90       	pop	r0
    21e0:	1f 90       	pop	r1
    21e2:	18 95       	reti

000021e4 <__divmodhi4>:
    21e4:	97 fb       	bst	r25, 7
    21e6:	07 2e       	mov	r0, r23
    21e8:	16 f4       	brtc	.+4      	; 0x21ee <__divmodhi4+0xa>
    21ea:	00 94       	com	r0
    21ec:	07 d0       	rcall	.+14     	; 0x21fc <__divmodhi4_neg1>
    21ee:	77 fd       	sbrc	r23, 7
    21f0:	09 d0       	rcall	.+18     	; 0x2204 <__divmodhi4_neg2>
    21f2:	0e 94 4a 11 	call	0x2294	; 0x2294 <__udivmodhi4>
    21f6:	07 fc       	sbrc	r0, 7
    21f8:	05 d0       	rcall	.+10     	; 0x2204 <__divmodhi4_neg2>
    21fa:	3e f4       	brtc	.+14     	; 0x220a <__divmodhi4_exit>

000021fc <__divmodhi4_neg1>:
    21fc:	90 95       	com	r25
    21fe:	81 95       	neg	r24
    2200:	9f 4f       	sbci	r25, 0xFF	; 255
    2202:	08 95       	ret

00002204 <__divmodhi4_neg2>:
    2204:	70 95       	com	r23
    2206:	61 95       	neg	r22
    2208:	7f 4f       	sbci	r23, 0xFF	; 255

0000220a <__divmodhi4_exit>:
    220a:	08 95       	ret

0000220c <__udivmodsi4>:
    220c:	a1 e2       	ldi	r26, 0x21	; 33
    220e:	1a 2e       	mov	r1, r26
    2210:	aa 1b       	sub	r26, r26
    2212:	bb 1b       	sub	r27, r27
    2214:	fd 01       	movw	r30, r26
    2216:	0d c0       	rjmp	.+26     	; 0x2232 <__udivmodsi4_ep>

00002218 <__udivmodsi4_loop>:
    2218:	aa 1f       	adc	r26, r26
    221a:	bb 1f       	adc	r27, r27
    221c:	ee 1f       	adc	r30, r30
    221e:	ff 1f       	adc	r31, r31
    2220:	a2 17       	cp	r26, r18
    2222:	b3 07       	cpc	r27, r19
    2224:	e4 07       	cpc	r30, r20
    2226:	f5 07       	cpc	r31, r21
    2228:	20 f0       	brcs	.+8      	; 0x2232 <__udivmodsi4_ep>
    222a:	a2 1b       	sub	r26, r18
    222c:	b3 0b       	sbc	r27, r19
    222e:	e4 0b       	sbc	r30, r20
    2230:	f5 0b       	sbc	r31, r21

00002232 <__udivmodsi4_ep>:
    2232:	66 1f       	adc	r22, r22
    2234:	77 1f       	adc	r23, r23
    2236:	88 1f       	adc	r24, r24
    2238:	99 1f       	adc	r25, r25
    223a:	1a 94       	dec	r1
    223c:	69 f7       	brne	.-38     	; 0x2218 <__udivmodsi4_loop>
    223e:	60 95       	com	r22
    2240:	70 95       	com	r23
    2242:	80 95       	com	r24
    2244:	90 95       	com	r25
    2246:	9b 01       	movw	r18, r22
    2248:	ac 01       	movw	r20, r24
    224a:	bd 01       	movw	r22, r26
    224c:	cf 01       	movw	r24, r30
    224e:	08 95       	ret

00002250 <__umulhisi3>:
    2250:	a2 9f       	mul	r26, r18
    2252:	b0 01       	movw	r22, r0
    2254:	b3 9f       	mul	r27, r19
    2256:	c0 01       	movw	r24, r0
    2258:	a3 9f       	mul	r26, r19
    225a:	70 0d       	add	r23, r0
    225c:	81 1d       	adc	r24, r1
    225e:	11 24       	eor	r1, r1
    2260:	91 1d       	adc	r25, r1
    2262:	b2 9f       	mul	r27, r18
    2264:	70 0d       	add	r23, r0
    2266:	81 1d       	adc	r24, r1
    2268:	11 24       	eor	r1, r1
    226a:	91 1d       	adc	r25, r1
    226c:	08 95       	ret

0000226e <__muluhisi3>:
    226e:	0e 94 28 11 	call	0x2250	; 0x2250 <__umulhisi3>
    2272:	a5 9f       	mul	r26, r21
    2274:	90 0d       	add	r25, r0
    2276:	b4 9f       	mul	r27, r20
    2278:	90 0d       	add	r25, r0
    227a:	a4 9f       	mul	r26, r20
    227c:	80 0d       	add	r24, r0
    227e:	91 1d       	adc	r25, r1
    2280:	11 24       	eor	r1, r1
    2282:	08 95       	ret

00002284 <__mulshisi3>:
    2284:	b7 ff       	sbrs	r27, 7
    2286:	0c 94 37 11 	jmp	0x226e	; 0x226e <__muluhisi3>

0000228a <__mulohisi3>:
    228a:	0e 94 37 11 	call	0x226e	; 0x226e <__muluhisi3>
    228e:	82 1b       	sub	r24, r18
    2290:	93 0b       	sbc	r25, r19
    2292:	08 95       	ret

00002294 <__udivmodhi4>:
    2294:	aa 1b       	sub	r26, r26
    2296:	bb 1b       	sub	r27, r27
    2298:	51 e1       	ldi	r21, 0x11	; 17
    229a:	07 c0       	rjmp	.+14     	; 0x22aa <__udivmodhi4_ep>

0000229c <__udivmodhi4_loop>:
    229c:	aa 1f       	adc	r26, r26
    229e:	bb 1f       	adc	r27, r27
    22a0:	a6 17       	cp	r26, r22
    22a2:	b7 07       	cpc	r27, r23
    22a4:	10 f0       	brcs	.+4      	; 0x22aa <__udivmodhi4_ep>
    22a6:	a6 1b       	sub	r26, r22
    22a8:	b7 0b       	sbc	r27, r23

000022aa <__udivmodhi4_ep>:
    22aa:	88 1f       	adc	r24, r24
    22ac:	99 1f       	adc	r25, r25
    22ae:	5a 95       	dec	r21
    22b0:	a9 f7       	brne	.-22     	; 0x229c <__udivmodhi4_loop>
    22b2:	80 95       	com	r24
    22b4:	90 95       	com	r25
    22b6:	bc 01       	movw	r22, r24
    22b8:	cd 01       	movw	r24, r26
    22ba:	08 95       	ret

000022bc <__tablejump2__>:
    22bc:	ee 0f       	add	r30, r30
    22be:	ff 1f       	adc	r31, r31
    22c0:	05 90       	lpm	r0, Z+
    22c2:	f4 91       	lpm	r31, Z
    22c4:	e0 2d       	mov	r30, r0
    22c6:	09 94       	ijmp

000022c8 <eeprom_read_byte>:
    22c8:	f9 99       	sbic	0x1f, 1	; 31
    22ca:	fe cf       	rjmp	.-4      	; 0x22c8 <eeprom_read_byte>
    22cc:	92 bd       	out	0x22, r25	; 34
    22ce:	81 bd       	out	0x21, r24	; 33
    22d0:	f8 9a       	sbi	0x1f, 0	; 31
    22d2:	99 27       	eor	r25, r25
    22d4:	80 b5       	in	r24, 0x20	; 32
    22d6:	08 95       	ret

000022d8 <_exit>:
    22d8:	f8 94       	cli

000022da <__stop_program>:
    22da:	ff cf       	rjmp	.-2      	; 0x22da <__stop_program>
