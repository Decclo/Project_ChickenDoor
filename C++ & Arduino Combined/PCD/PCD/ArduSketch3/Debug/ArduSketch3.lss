
ArduSketch3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  00001a82  00001b16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000017e  00800172  00800172  00001b88  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b88  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001bb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005f8  00000000  00000000  00001bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d6c2  00000000  00000000  000021f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002b3b  00000000  00000000  0000f8b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000033c9  00000000  00000000  000123ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001198  00000000  00000000  000157b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002d46  00000000  00000000  00016950  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006006  00000000  00000000  00019696  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000630  00000000  00000000  0001f69c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__ctors_end>
       4:	0c 94 85 04 	jmp	0x90a	; 0x90a <__vector_1>
       8:	0c 94 ac 04 	jmp	0x958	; 0x958 <__vector_2>
       c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      10:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      14:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      18:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      1c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      20:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      24:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      28:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      2c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      30:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      34:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      38:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      3c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      40:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__vector_16>
      44:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      48:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__vector_18>
      4c:	0c 94 26 03 	jmp	0x64c	; 0x64c <__vector_19>
      50:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      54:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      58:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      5c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      60:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__vector_24>
      64:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	45 72       	andi	r20, 0x25	; 37
      6a:	72 4a       	sbci	r23, 0xA2	; 162
      6c:	61 6e       	ori	r22, 0xE1	; 225
      6e:	46 65       	ori	r20, 0x56	; 86
      70:	62 4d       	sbci	r22, 0xD2	; 210
      72:	61 72       	andi	r22, 0x21	; 33
      74:	41 70       	andi	r20, 0x01	; 1
      76:	72 4d       	sbci	r23, 0xD2	; 210
      78:	61 79       	andi	r22, 0x91	; 145
      7a:	4a 75       	andi	r20, 0x5A	; 90
      7c:	6e 4a       	sbci	r22, 0xAE	; 174
      7e:	75 6c       	ori	r23, 0xC5	; 197
      80:	41 75       	andi	r20, 0x51	; 81
      82:	67 53       	subi	r22, 0x37	; 55
      84:	65 70       	andi	r22, 0x05	; 5
      86:	4f 63       	ori	r20, 0x3F	; 63
      88:	74 4e       	sbci	r23, 0xE4	; 228
      8a:	6f 76       	andi	r22, 0x6F	; 111
      8c:	44 65       	ori	r20, 0x54	; 84
      8e:	63 00       	.word	0x0063	; ????

00000090 <digital_pin_to_timer_PGM>:
      90:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      a0:	00 00 00 00                                         ....

000000a4 <digital_pin_to_bit_mask_PGM>:
      a4:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      b4:	04 08 10 20                                         ... 

000000b8 <digital_pin_to_port_PGM>:
      b8:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      c8:	03 03 03 03                                         ....

000000cc <port_to_output_PGM>:
      cc:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000d6 <__ctors_start>:
      d6:	4c 03       	fmul	r20, r20
      d8:	c1 05       	cpc	r28, r1
      da:	4e 0a       	sbc	r4, r30

000000dc <__ctors_end>:
      dc:	11 24       	eor	r1, r1
      de:	1f be       	out	0x3f, r1	; 63
      e0:	cf ef       	ldi	r28, 0xFF	; 255
      e2:	d8 e0       	ldi	r29, 0x08	; 8
      e4:	de bf       	out	0x3e, r29	; 62
      e6:	cd bf       	out	0x3d, r28	; 61

000000e8 <__do_copy_data>:
      e8:	11 e0       	ldi	r17, 0x01	; 1
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b1 e0       	ldi	r27, 0x01	; 1
      ee:	e2 e8       	ldi	r30, 0x82	; 130
      f0:	fa e1       	ldi	r31, 0x1A	; 26
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x10>
      f4:	05 90       	lpm	r0, Z+
      f6:	0d 92       	st	X+, r0
      f8:	a2 37       	cpi	r26, 0x72	; 114
      fa:	b1 07       	cpc	r27, r17
      fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0xc>

000000fe <__do_clear_bss>:
      fe:	22 e0       	ldi	r18, 0x02	; 2
     100:	a2 e7       	ldi	r26, 0x72	; 114
     102:	b1 e0       	ldi	r27, 0x01	; 1
     104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
     106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
     108:	a0 3f       	cpi	r26, 0xF0	; 240
     10a:	b2 07       	cpc	r27, r18
     10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>

0000010e <__do_global_ctors>:
     10e:	10 e0       	ldi	r17, 0x00	; 0
     110:	ce e6       	ldi	r28, 0x6E	; 110
     112:	d0 e0       	ldi	r29, 0x00	; 0
     114:	04 c0       	rjmp	.+8      	; 0x11e <__do_global_ctors+0x10>
     116:	21 97       	sbiw	r28, 0x01	; 1
     118:	fe 01       	movw	r30, r28
     11a:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__tablejump2__>
     11e:	cb 36       	cpi	r28, 0x6B	; 107
     120:	d1 07       	cpc	r29, r17
     122:	c9 f7       	brne	.-14     	; 0x116 <__do_global_ctors+0x8>
     124:	0e 94 60 01 	call	0x2c0	; 0x2c0 <main>
     128:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <_exit>

0000012c <__bad_interrupt>:
     12c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000130 <_Z8alarmIsrv>:
 * 
 * \return void
 */
void alarmIsr()	// INT0 triggered function.
{
	alarmIsrWasCalled = true;
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
     136:	08 95       	ret

00000138 <_Z13printDateTimem>:
 * \param t
 * 
 * \return void
 */
void printDateTime(time_t t)
{
     138:	8f 92       	push	r8
     13a:	9f 92       	push	r9
     13c:	af 92       	push	r10
     13e:	bf 92       	push	r11
     140:	cf 92       	push	r12
     142:	df 92       	push	r13
     144:	ef 92       	push	r14
     146:	ff 92       	push	r15
     148:	cf 93       	push	r28
     14a:	df 93       	push	r29
     14c:	6b 01       	movw	r12, r22
     14e:	7c 01       	movw	r14, r24
	Serial << ((day(t)<10) ? "0" : "") << _DEC(day(t)) << ' ';
     150:	0e 94 49 08 	call	0x1092	; 0x1092 <_Z3daym>
     154:	4c 01       	movw	r8, r24
     156:	99 0f       	add	r25, r25
     158:	aa 08       	sbc	r10, r10
     15a:	bb 08       	sbc	r11, r11
     15c:	c7 01       	movw	r24, r14
     15e:	b6 01       	movw	r22, r12
     160:	0e 94 49 08 	call	0x1092	; 0x1092 <_Z3daym>
     164:	0a 97       	sbiw	r24, 0x0a	; 10
     166:	1c f0       	brlt	.+6      	; 0x16e <_Z13printDateTimem+0x36>
     168:	66 e4       	ldi	r22, 0x46	; 70
     16a:	71 e0       	ldi	r23, 0x01	; 1
     16c:	02 c0       	rjmp	.+4      	; 0x172 <_Z13printDateTimem+0x3a>
     16e:	64 e0       	ldi	r22, 0x04	; 4
     170:	71 e0       	ldi	r23, 0x01	; 1
#define STREAMING_LIBRARY_VERSION 5

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     172:	83 e7       	ldi	r24, 0x73	; 115
     174:	91 e0       	ldi	r25, 0x01	; 1
     176:	0e 94 b9 03 	call	0x772	; 0x772 <_ZN5Print5printEPKc>
// Thanks to Arduino forum user Ben Combee who suggested this 
// clever technique to allow for expressions like
//   Serial << _HEX(a);

inline Print &operator <<(Print &obj, const _BASED &arg)
{ obj.print(arg.val, arg.base); return obj; } 
     17a:	2a e0       	ldi	r18, 0x0A	; 10
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	b5 01       	movw	r22, r10
     180:	a4 01       	movw	r20, r8
     182:	83 e7       	ldi	r24, 0x73	; 115
     184:	91 e0       	ldi	r25, 0x01	; 1
     186:	0e 94 1a 04 	call	0x834	; 0x834 <_ZN5Print5printEli>
#define STREAMING_LIBRARY_VERSION 5

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     18a:	60 e2       	ldi	r22, 0x20	; 32
     18c:	83 e7       	ldi	r24, 0x73	; 115
     18e:	91 e0       	ldi	r25, 0x01	; 1
     190:	0e 94 bb 03 	call	0x776	; 0x776 <_ZN5Print5printEc>
	Serial << monthShortStr(month(t)) << " " << _DEC(year(t)) << ' ';
     194:	c7 01       	movw	r24, r14
     196:	b6 01       	movw	r22, r12
     198:	0e 94 55 08 	call	0x10aa	; 0x10aa <_Z4yearm>
     19c:	ec 01       	movw	r28, r24
     19e:	c7 01       	movw	r24, r14
     1a0:	b6 01       	movw	r22, r12
     1a2:	0e 94 4f 08 	call	0x109e	; 0x109e <_Z5monthm>
     1a6:	0e 94 29 07 	call	0xe52	; 0xe52 <_Z13monthShortStrh>
     1aa:	bc 01       	movw	r22, r24
     1ac:	83 e7       	ldi	r24, 0x73	; 115
     1ae:	91 e0       	ldi	r25, 0x01	; 1
     1b0:	0e 94 b9 03 	call	0x772	; 0x772 <_ZN5Print5printEPKc>
     1b4:	66 e1       	ldi	r22, 0x16	; 22
     1b6:	71 e0       	ldi	r23, 0x01	; 1
     1b8:	83 e7       	ldi	r24, 0x73	; 115
     1ba:	91 e0       	ldi	r25, 0x01	; 1
     1bc:	0e 94 b9 03 	call	0x772	; 0x772 <_ZN5Print5printEPKc>
     1c0:	ae 01       	movw	r20, r28
     1c2:	dd 0f       	add	r29, r29
     1c4:	66 0b       	sbc	r22, r22
     1c6:	77 0b       	sbc	r23, r23
// Thanks to Arduino forum user Ben Combee who suggested this 
// clever technique to allow for expressions like
//   Serial << _HEX(a);

inline Print &operator <<(Print &obj, const _BASED &arg)
{ obj.print(arg.val, arg.base); return obj; } 
     1c8:	2a e0       	ldi	r18, 0x0A	; 10
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	83 e7       	ldi	r24, 0x73	; 115
     1ce:	91 e0       	ldi	r25, 0x01	; 1
     1d0:	0e 94 1a 04 	call	0x834	; 0x834 <_ZN5Print5printEli>
#define STREAMING_LIBRARY_VERSION 5

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     1d4:	60 e2       	ldi	r22, 0x20	; 32
     1d6:	83 e7       	ldi	r24, 0x73	; 115
     1d8:	91 e0       	ldi	r25, 0x01	; 1
     1da:	0e 94 bb 03 	call	0x776	; 0x776 <_ZN5Print5printEc>
	Serial << ((hour(t)<10) ? "0" : "") << _DEC(hour(t)) << ':';
     1de:	c7 01       	movw	r24, r14
     1e0:	b6 01       	movw	r22, r12
     1e2:	0e 94 37 08 	call	0x106e	; 0x106e <_Z4hourm>
     1e6:	4c 01       	movw	r8, r24
     1e8:	99 0f       	add	r25, r25
     1ea:	aa 08       	sbc	r10, r10
     1ec:	bb 08       	sbc	r11, r11
     1ee:	c7 01       	movw	r24, r14
     1f0:	b6 01       	movw	r22, r12
     1f2:	0e 94 37 08 	call	0x106e	; 0x106e <_Z4hourm>
     1f6:	0a 97       	sbiw	r24, 0x0a	; 10
     1f8:	1c f0       	brlt	.+6      	; 0x200 <_Z13printDateTimem+0xc8>
     1fa:	66 e4       	ldi	r22, 0x46	; 70
     1fc:	71 e0       	ldi	r23, 0x01	; 1
     1fe:	02 c0       	rjmp	.+4      	; 0x204 <_Z13printDateTimem+0xcc>
     200:	64 e0       	ldi	r22, 0x04	; 4
     202:	71 e0       	ldi	r23, 0x01	; 1
     204:	83 e7       	ldi	r24, 0x73	; 115
     206:	91 e0       	ldi	r25, 0x01	; 1
     208:	0e 94 b9 03 	call	0x772	; 0x772 <_ZN5Print5printEPKc>
// Thanks to Arduino forum user Ben Combee who suggested this 
// clever technique to allow for expressions like
//   Serial << _HEX(a);

inline Print &operator <<(Print &obj, const _BASED &arg)
{ obj.print(arg.val, arg.base); return obj; } 
     20c:	2a e0       	ldi	r18, 0x0A	; 10
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	b5 01       	movw	r22, r10
     212:	a4 01       	movw	r20, r8
     214:	83 e7       	ldi	r24, 0x73	; 115
     216:	91 e0       	ldi	r25, 0x01	; 1
     218:	0e 94 1a 04 	call	0x834	; 0x834 <_ZN5Print5printEli>
#define STREAMING_LIBRARY_VERSION 5

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     21c:	6a e3       	ldi	r22, 0x3A	; 58
     21e:	83 e7       	ldi	r24, 0x73	; 115
     220:	91 e0       	ldi	r25, 0x01	; 1
     222:	0e 94 bb 03 	call	0x776	; 0x776 <_ZN5Print5printEc>
	Serial << ((minute(t)<10) ? "0" : "") << _DEC(minute(t)) << ':';
     226:	c7 01       	movw	r24, r14
     228:	b6 01       	movw	r22, r12
     22a:	0e 94 3d 08 	call	0x107a	; 0x107a <_Z6minutem>
     22e:	4c 01       	movw	r8, r24
     230:	99 0f       	add	r25, r25
     232:	aa 08       	sbc	r10, r10
     234:	bb 08       	sbc	r11, r11
     236:	c7 01       	movw	r24, r14
     238:	b6 01       	movw	r22, r12
     23a:	0e 94 3d 08 	call	0x107a	; 0x107a <_Z6minutem>
     23e:	0a 97       	sbiw	r24, 0x0a	; 10
     240:	1c f0       	brlt	.+6      	; 0x248 <_Z13printDateTimem+0x110>
     242:	66 e4       	ldi	r22, 0x46	; 70
     244:	71 e0       	ldi	r23, 0x01	; 1
     246:	02 c0       	rjmp	.+4      	; 0x24c <_Z13printDateTimem+0x114>
     248:	64 e0       	ldi	r22, 0x04	; 4
     24a:	71 e0       	ldi	r23, 0x01	; 1
     24c:	83 e7       	ldi	r24, 0x73	; 115
     24e:	91 e0       	ldi	r25, 0x01	; 1
     250:	0e 94 b9 03 	call	0x772	; 0x772 <_ZN5Print5printEPKc>
// Thanks to Arduino forum user Ben Combee who suggested this 
// clever technique to allow for expressions like
//   Serial << _HEX(a);

inline Print &operator <<(Print &obj, const _BASED &arg)
{ obj.print(arg.val, arg.base); return obj; } 
     254:	2a e0       	ldi	r18, 0x0A	; 10
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	b5 01       	movw	r22, r10
     25a:	a4 01       	movw	r20, r8
     25c:	83 e7       	ldi	r24, 0x73	; 115
     25e:	91 e0       	ldi	r25, 0x01	; 1
     260:	0e 94 1a 04 	call	0x834	; 0x834 <_ZN5Print5printEli>
#define STREAMING_LIBRARY_VERSION 5

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     264:	6a e3       	ldi	r22, 0x3A	; 58
     266:	83 e7       	ldi	r24, 0x73	; 115
     268:	91 e0       	ldi	r25, 0x01	; 1
     26a:	0e 94 bb 03 	call	0x776	; 0x776 <_ZN5Print5printEc>
	Serial << ((second(t)<10) ? "0" : "") << _DEC(second(t));
     26e:	c7 01       	movw	r24, r14
     270:	b6 01       	movw	r22, r12
     272:	0e 94 43 08 	call	0x1086	; 0x1086 <_Z6secondm>
     276:	4c 01       	movw	r8, r24
     278:	99 0f       	add	r25, r25
     27a:	aa 08       	sbc	r10, r10
     27c:	bb 08       	sbc	r11, r11
     27e:	c7 01       	movw	r24, r14
     280:	b6 01       	movw	r22, r12
     282:	0e 94 43 08 	call	0x1086	; 0x1086 <_Z6secondm>
     286:	0a 97       	sbiw	r24, 0x0a	; 10
     288:	1c f0       	brlt	.+6      	; 0x290 <_Z13printDateTimem+0x158>
     28a:	66 e4       	ldi	r22, 0x46	; 70
     28c:	71 e0       	ldi	r23, 0x01	; 1
     28e:	02 c0       	rjmp	.+4      	; 0x294 <_Z13printDateTimem+0x15c>
     290:	64 e0       	ldi	r22, 0x04	; 4
     292:	71 e0       	ldi	r23, 0x01	; 1
     294:	83 e7       	ldi	r24, 0x73	; 115
     296:	91 e0       	ldi	r25, 0x01	; 1
     298:	0e 94 b9 03 	call	0x772	; 0x772 <_ZN5Print5printEPKc>
// Thanks to Arduino forum user Ben Combee who suggested this 
// clever technique to allow for expressions like
//   Serial << _HEX(a);

inline Print &operator <<(Print &obj, const _BASED &arg)
{ obj.print(arg.val, arg.base); return obj; } 
     29c:	2a e0       	ldi	r18, 0x0A	; 10
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	b5 01       	movw	r22, r10
     2a2:	a4 01       	movw	r20, r8
     2a4:	83 e7       	ldi	r24, 0x73	; 115
     2a6:	91 e0       	ldi	r25, 0x01	; 1
}
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	ff 90       	pop	r15
     2ae:	ef 90       	pop	r14
     2b0:	df 90       	pop	r13
     2b2:	cf 90       	pop	r12
     2b4:	bf 90       	pop	r11
     2b6:	af 90       	pop	r10
     2b8:	9f 90       	pop	r9
     2ba:	8f 90       	pop	r8
     2bc:	0c 94 1a 04 	jmp	0x834	; 0x834 <_ZN5Print5printEli>

000002c0 <main>:
#include "Supp_Func.h"


int main(void)
{
	init();						// Initializes the Arduino Core.
     2c0:	0e 94 7e 05 	call	0xafc	; 0xafc <init>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     2c4:	26 e0       	ldi	r18, 0x06	; 6
     2c6:	40 e8       	ldi	r20, 0x80	; 128
     2c8:	55 e2       	ldi	r21, 0x25	; 37
     2ca:	60 e0       	ldi	r22, 0x00	; 0
     2cc:	70 e0       	ldi	r23, 0x00	; 0
     2ce:	83 e7       	ldi	r24, 0x73	; 115
     2d0:	91 e0       	ldi	r25, 0x01	; 1
     2d2:	0e 94 8f 02 	call	0x51e	; 0x51e <_ZN14HardwareSerial5beginEmh>
	* \return void
	*/
	void init_alarms(void)
	{
		// Setup the SQW interrupt:
		DDRD &= ~(1 << DDD2); // make INT0 an input.
     2d6:	52 98       	cbi	0x0a, 2	; 10
		PORTD |= (1 << DDD2); // enable pull-up on INT0.
     2d8:	5a 9a       	sbi	0x0b, 2	; 11
		attachInterrupt(INT0, alarmIsr, FALLING);	// Initializing the INT0 interrupt in the Arduino way.
     2da:	42 e0       	ldi	r20, 0x02	; 2
     2dc:	50 e0       	ldi	r21, 0x00	; 0
     2de:	68 e9       	ldi	r22, 0x98	; 152
     2e0:	70 e0       	ldi	r23, 0x00	; 0
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	0e 94 65 04 	call	0x8ca	; 0x8ca <attachInterrupt>
		
		//Disable the default square wave of the SQW pin.
		RTC.squareWave(SQWAVE_NONE);
     2e8:	64 e0       	ldi	r22, 0x04	; 4
     2ea:	89 e1       	ldi	r24, 0x19	; 25
     2ec:	92 e0       	ldi	r25, 0x02	; 2
     2ee:	0e 94 0f 07 	call	0xe1e	; 0xe1e <_ZN9DS3232RTC10squareWaveE14SQWAVE_FREQS_t>
		
		//Prepare alarm1 for the interrupt.
		RTC.alarm(ALARM_1);                   //ensure RTC interrupt flag is cleared
     2f2:	61 e0       	ldi	r22, 0x01	; 1
     2f4:	89 e1       	ldi	r24, 0x19	; 25
     2f6:	92 e0       	ldi	r25, 0x02	; 2
     2f8:	0e 94 ef 06 	call	0xdde	; 0xdde <_ZN9DS3232RTC5alarmEh>
		RTC.alarmInterrupt(ALARM_1, true);
     2fc:	41 e0       	ldi	r20, 0x01	; 1
     2fe:	61 e0       	ldi	r22, 0x01	; 1
     300:	89 e1       	ldi	r24, 0x19	; 25
     302:	92 e0       	ldi	r25, 0x02	; 2
     304:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_ZN9DS3232RTC14alarmInterruptEhb>

		//Prepare alarm1 for the interrupt.
		RTC.alarm(ALARM_2);                   //ensure RTC interrupt flag is cleared
     308:	62 e0       	ldi	r22, 0x02	; 2
     30a:	89 e1       	ldi	r24, 0x19	; 25
     30c:	92 e0       	ldi	r25, 0x02	; 2
     30e:	0e 94 ef 06 	call	0xdde	; 0xdde <_ZN9DS3232RTC5alarmEh>
		RTC.alarmInterrupt(ALARM_2, true);
     312:	41 e0       	ldi	r20, 0x01	; 1
     314:	62 e0       	ldi	r22, 0x02	; 2
     316:	89 e1       	ldi	r24, 0x19	; 25
     318:	92 e0       	ldi	r25, 0x02	; 2
     31a:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_ZN9DS3232RTC14alarmInterruptEhb>
#define STREAMING_LIBRARY_VERSION 5

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     31e:	66 e0       	ldi	r22, 0x06	; 6
     320:	71 e0       	ldi	r23, 0x01	; 1
     322:	83 e7       	ldi	r24, 0x73	; 115
     324:	91 e0       	ldi	r25, 0x01	; 1
     326:	0e 94 b9 03 	call	0x772	; 0x772 <_ZN5Print5printEPKc>
	uint8_t alarm_stat = 0;
	
	
	// print he current time:
	Serial << "Current time is: ";
	printDateTime(RTC.get());
     32a:	0e 94 60 06 	call	0xcc0	; 0xcc0 <_ZN9DS3232RTC3getEv>
     32e:	0e 94 9c 00 	call	0x138	; 0x138 <_Z13printDateTimem>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
     332:	83 e7       	ldi	r24, 0x73	; 115
     334:	91 e0       	ldi	r25, 0x01	; 1
     336:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN5Print7printlnEv>
	init();						// Initializes the Arduino Core.
	Serial.begin(9600);			// Start the serial commuication at 9600 a baud rate.
	RTC_alarm.init_alarms();	// Start the alarms.
	
	// Local Variables:
	uint8_t alarm_stat = 0;
     33a:	c0 e0       	ldi	r28, 0x00	; 0
	 * 
	 * \return void
	 */
	void alarm_Check(uint8_t *stat)
	{
		if (alarmIsrWasCalled)	// if the interrupt has happened
     33c:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     340:	88 23       	and	r24, r24
     342:	69 f1       	breq	.+90     	; 0x39e <main+0xde>
		{
			if (RTC.alarm(ALARM_1))	// check if alarm1 has happened and reset it.
     344:	61 e0       	ldi	r22, 0x01	; 1
     346:	89 e1       	ldi	r24, 0x19	; 25
     348:	92 e0       	ldi	r25, 0x02	; 2
     34a:	0e 94 ef 06 	call	0xdde	; 0xdde <_ZN9DS3232RTC5alarmEh>
     34e:	81 11       	cpse	r24, r1
     350:	09 c0       	rjmp	.+18     	; 0x364 <main+0xa4>
			{
				*stat = 1;
			}
			else if (RTC.alarm(ALARM_2))	// or else check if alarm2 has happened and reset it.
     352:	62 e0       	ldi	r22, 0x02	; 2
     354:	89 e1       	ldi	r24, 0x19	; 25
     356:	92 e0       	ldi	r25, 0x02	; 2
     358:	0e 94 ef 06 	call	0xdde	; 0xdde <_ZN9DS3232RTC5alarmEh>
     35c:	88 23       	and	r24, r24
     35e:	19 f0       	breq	.+6      	; 0x366 <main+0xa6>
			{
				*stat = 2;
     360:	c2 e0       	ldi	r28, 0x02	; 2
     362:	01 c0       	rjmp	.+2      	; 0x366 <main+0xa6>
	{
		if (alarmIsrWasCalled)	// if the interrupt has happened
		{
			if (RTC.alarm(ALARM_1))	// check if alarm1 has happened and reset it.
			{
				*stat = 1;
     364:	c1 e0       	ldi	r28, 0x01	; 1
			}
			else if (RTC.alarm(ALARM_2))	// or else check if alarm2 has happened and reset it.
			{
				*stat = 2;
			}
			alarmIsrWasCalled = false;
     366:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <__data_end>
  
	while (1)
	{
		RTC_alarm.alarm_Check(&alarm_stat);	// get the alarm status.
		
		switch(alarm_stat)					// switch statement to decide what should happen if alarm has happened.
     36a:	c1 30       	cpi	r28, 0x01	; 1
     36c:	49 f0       	breq	.+18     	; 0x380 <main+0xc0>
     36e:	c2 30       	cpi	r28, 0x02	; 2
     370:	b9 f4       	brne	.+46     	; 0x3a0 <main+0xe0>
				printDateTime( RTC.get() );
				Serial << " --> Alarm 1!" << endl;
			break;
			
			case 2:							// alarm1:
				printDateTime( RTC.get() );
     372:	0e 94 60 06 	call	0xcc0	; 0xcc0 <_ZN9DS3232RTC3getEv>
     376:	0e 94 9c 00 	call	0x138	; 0x138 <_Z13printDateTimem>
#define STREAMING_LIBRARY_VERSION 5

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     37a:	66 e2       	ldi	r22, 0x26	; 38
     37c:	71 e0       	ldi	r23, 0x01	; 1
     37e:	06 c0       	rjmp	.+12     	; 0x38c <main+0xcc>
		RTC_alarm.alarm_Check(&alarm_stat);	// get the alarm status.
		
		switch(alarm_stat)					// switch statement to decide what should happen if alarm has happened.
		{
			case 1:							// alarm1:
				printDateTime( RTC.get() );
     380:	0e 94 60 06 	call	0xcc0	; 0xcc0 <_ZN9DS3232RTC3getEv>
     384:	0e 94 9c 00 	call	0x138	; 0x138 <_Z13printDateTimem>
     388:	68 e1       	ldi	r22, 0x18	; 24
     38a:	71 e0       	ldi	r23, 0x01	; 1
     38c:	83 e7       	ldi	r24, 0x73	; 115
     38e:	91 e0       	ldi	r25, 0x01	; 1
     390:	0e 94 b9 03 	call	0x772	; 0x772 <_ZN5Print5printEPKc>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
     394:	83 e7       	ldi	r24, 0x73	; 115
     396:	91 e0       	ldi	r25, 0x01	; 1
     398:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN5Print7printlnEv>
     39c:	01 c0       	rjmp	.+2      	; 0x3a0 <main+0xe0>
		}
		else	// else return 0
		{
			
			*stat = 0;
     39e:	c0 e0       	ldi	r28, 0x00	; 0
				
			default:						// if there was no alarm:
				
			break;
		}
		delay(100);	// small delay
     3a0:	64 e6       	ldi	r22, 0x64	; 100
     3a2:	70 e0       	ldi	r23, 0x00	; 0
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	0e 94 42 05 	call	0xa84	; 0xa84 <delay>
	}
     3ac:	c7 cf       	rjmp	.-114    	; 0x33c <main+0x7c>

000003ae <_ZN14HardwareSerial9availableEv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     3ae:	fc 01       	movw	r30, r24
     3b0:	91 8d       	ldd	r25, Z+25	; 0x19
     3b2:	22 8d       	ldd	r18, Z+26	; 0x1a
     3b4:	89 2f       	mov	r24, r25
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	80 5c       	subi	r24, 0xC0	; 192
     3ba:	9f 4f       	sbci	r25, 0xFF	; 255
     3bc:	82 1b       	sub	r24, r18
     3be:	91 09       	sbc	r25, r1
     3c0:	8f 73       	andi	r24, 0x3F	; 63
     3c2:	99 27       	eor	r25, r25
     3c4:	08 95       	ret

000003c6 <_ZN14HardwareSerial4peekEv>:
     3c6:	fc 01       	movw	r30, r24
     3c8:	91 8d       	ldd	r25, Z+25	; 0x19
     3ca:	82 8d       	ldd	r24, Z+26	; 0x1a
     3cc:	98 17       	cp	r25, r24
     3ce:	31 f0       	breq	.+12     	; 0x3dc <_ZN14HardwareSerial4peekEv+0x16>
     3d0:	82 8d       	ldd	r24, Z+26	; 0x1a
     3d2:	e8 0f       	add	r30, r24
     3d4:	f1 1d       	adc	r31, r1
     3d6:	85 8d       	ldd	r24, Z+29	; 0x1d
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	08 95       	ret
     3dc:	8f ef       	ldi	r24, 0xFF	; 255
     3de:	9f ef       	ldi	r25, 0xFF	; 255
     3e0:	08 95       	ret

000003e2 <_ZN14HardwareSerial4readEv>:
     3e2:	fc 01       	movw	r30, r24
     3e4:	91 8d       	ldd	r25, Z+25	; 0x19
     3e6:	82 8d       	ldd	r24, Z+26	; 0x1a
     3e8:	98 17       	cp	r25, r24
     3ea:	61 f0       	breq	.+24     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3ec:	82 8d       	ldd	r24, Z+26	; 0x1a
     3ee:	df 01       	movw	r26, r30
     3f0:	a8 0f       	add	r26, r24
     3f2:	b1 1d       	adc	r27, r1
     3f4:	5d 96       	adiw	r26, 0x1d	; 29
     3f6:	8c 91       	ld	r24, X
     3f8:	92 8d       	ldd	r25, Z+26	; 0x1a
     3fa:	9f 5f       	subi	r25, 0xFF	; 255
     3fc:	9f 73       	andi	r25, 0x3F	; 63
     3fe:	92 8f       	std	Z+26, r25	; 0x1a
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	08 95       	ret
     404:	8f ef       	ldi	r24, 0xFF	; 255
     406:	9f ef       	ldi	r25, 0xFF	; 255
     408:	08 95       	ret

0000040a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     40a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     40c:	84 8d       	ldd	r24, Z+28	; 0x1c
     40e:	df 01       	movw	r26, r30
     410:	a8 0f       	add	r26, r24
     412:	b1 1d       	adc	r27, r1
     414:	a3 5a       	subi	r26, 0xA3	; 163
     416:	bf 4f       	sbci	r27, 0xFF	; 255
     418:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     41a:	84 8d       	ldd	r24, Z+28	; 0x1c
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	01 96       	adiw	r24, 0x01	; 1
     420:	8f 73       	andi	r24, 0x3F	; 63
     422:	99 27       	eor	r25, r25
     424:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     426:	a6 89       	ldd	r26, Z+22	; 0x16
     428:	b7 89       	ldd	r27, Z+23	; 0x17
     42a:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     42c:	a0 89       	ldd	r26, Z+16	; 0x10
     42e:	b1 89       	ldd	r27, Z+17	; 0x11
     430:	8c 91       	ld	r24, X
     432:	80 64       	ori	r24, 0x40	; 64
     434:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     436:	93 8d       	ldd	r25, Z+27	; 0x1b
     438:	84 8d       	ldd	r24, Z+28	; 0x1c
     43a:	98 13       	cpse	r25, r24
     43c:	06 c0       	rjmp	.+12     	; 0x44a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     43e:	02 88       	ldd	r0, Z+18	; 0x12
     440:	f3 89       	ldd	r31, Z+19	; 0x13
     442:	e0 2d       	mov	r30, r0
     444:	80 81       	ld	r24, Z
     446:	8f 7d       	andi	r24, 0xDF	; 223
     448:	80 83       	st	Z, r24
     44a:	08 95       	ret

0000044c <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     452:	88 8d       	ldd	r24, Y+24	; 0x18
     454:	88 23       	and	r24, r24
     456:	c9 f0       	breq	.+50     	; 0x48a <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     458:	ea 89       	ldd	r30, Y+18	; 0x12
     45a:	fb 89       	ldd	r31, Y+19	; 0x13
     45c:	80 81       	ld	r24, Z
     45e:	85 fd       	sbrc	r24, 5
     460:	05 c0       	rjmp	.+10     	; 0x46c <_ZN14HardwareSerial5flushEv+0x20>
     462:	a8 89       	ldd	r26, Y+16	; 0x10
     464:	b9 89       	ldd	r27, Y+17	; 0x11
     466:	8c 91       	ld	r24, X
     468:	86 fd       	sbrc	r24, 6
     46a:	0f c0       	rjmp	.+30     	; 0x48a <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     46c:	0f b6       	in	r0, 0x3f	; 63
     46e:	07 fc       	sbrc	r0, 7
     470:	f5 cf       	rjmp	.-22     	; 0x45c <_ZN14HardwareSerial5flushEv+0x10>
     472:	80 81       	ld	r24, Z
     474:	85 ff       	sbrs	r24, 5
     476:	f2 cf       	rjmp	.-28     	; 0x45c <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     478:	a8 89       	ldd	r26, Y+16	; 0x10
     47a:	b9 89       	ldd	r27, Y+17	; 0x11
     47c:	8c 91       	ld	r24, X
     47e:	85 ff       	sbrs	r24, 5
     480:	ed cf       	rjmp	.-38     	; 0x45c <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     482:	ce 01       	movw	r24, r28
     484:	0e 94 05 02 	call	0x40a	; 0x40a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     488:	e7 cf       	rjmp	.-50     	; 0x458 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	08 95       	ret

00000490 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     490:	ef 92       	push	r14
     492:	ff 92       	push	r15
     494:	0f 93       	push	r16
     496:	1f 93       	push	r17
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	ec 01       	movw	r28, r24
  _written = true;
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     4a2:	9b 8d       	ldd	r25, Y+27	; 0x1b
     4a4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     4a6:	98 13       	cpse	r25, r24
     4a8:	05 c0       	rjmp	.+10     	; 0x4b4 <_ZN14HardwareSerial5writeEh+0x24>
     4aa:	e8 89       	ldd	r30, Y+16	; 0x10
     4ac:	f9 89       	ldd	r31, Y+17	; 0x11
     4ae:	80 81       	ld	r24, Z
     4b0:	85 fd       	sbrc	r24, 5
     4b2:	24 c0       	rjmp	.+72     	; 0x4fc <_ZN14HardwareSerial5writeEh+0x6c>
     4b4:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     4b6:	0b 8d       	ldd	r16, Y+27	; 0x1b
     4b8:	10 e0       	ldi	r17, 0x00	; 0
     4ba:	0f 5f       	subi	r16, 0xFF	; 255
     4bc:	1f 4f       	sbci	r17, 0xFF	; 255
     4be:	0f 73       	andi	r16, 0x3F	; 63
     4c0:	11 27       	eor	r17, r17
     4c2:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     4c4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     4c6:	e8 12       	cpse	r14, r24
     4c8:	0c c0       	rjmp	.+24     	; 0x4e2 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	07 fc       	sbrc	r0, 7
     4ce:	fa cf       	rjmp	.-12     	; 0x4c4 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     4d0:	e8 89       	ldd	r30, Y+16	; 0x10
     4d2:	f9 89       	ldd	r31, Y+17	; 0x11
     4d4:	80 81       	ld	r24, Z
     4d6:	85 ff       	sbrs	r24, 5
     4d8:	f5 cf       	rjmp	.-22     	; 0x4c4 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     4da:	ce 01       	movw	r24, r28
     4dc:	0e 94 05 02 	call	0x40a	; 0x40a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     4e0:	f1 cf       	rjmp	.-30     	; 0x4c4 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     4e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4e4:	fe 01       	movw	r30, r28
     4e6:	e8 0f       	add	r30, r24
     4e8:	f1 1d       	adc	r31, r1
     4ea:	e3 5a       	subi	r30, 0xA3	; 163
     4ec:	ff 4f       	sbci	r31, 0xFF	; 255
     4ee:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     4f0:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     4f2:	ea 89       	ldd	r30, Y+18	; 0x12
     4f4:	fb 89       	ldd	r31, Y+19	; 0x13
     4f6:	80 81       	ld	r24, Z
     4f8:	80 62       	ori	r24, 0x20	; 32
     4fa:	07 c0       	rjmp	.+14     	; 0x50a <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     4fc:	ee 89       	ldd	r30, Y+22	; 0x16
     4fe:	ff 89       	ldd	r31, Y+23	; 0x17
     500:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     502:	e8 89       	ldd	r30, Y+16	; 0x10
     504:	f9 89       	ldd	r31, Y+17	; 0x11
     506:	80 81       	ld	r24, Z
     508:	80 64       	ori	r24, 0x40	; 64
     50a:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	1f 91       	pop	r17
     516:	0f 91       	pop	r16
     518:	ff 90       	pop	r15
     51a:	ef 90       	pop	r14
     51c:	08 95       	ret

0000051e <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     51e:	cf 92       	push	r12
     520:	df 92       	push	r13
     522:	ef 92       	push	r14
     524:	ff 92       	push	r15
     526:	1f 93       	push	r17
     528:	cf 93       	push	r28
     52a:	df 93       	push	r29
     52c:	ec 01       	movw	r28, r24
     52e:	6a 01       	movw	r12, r20
     530:	7b 01       	movw	r14, r22
     532:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     534:	e8 89       	ldd	r30, Y+16	; 0x10
     536:	f9 89       	ldd	r31, Y+17	; 0x11
     538:	82 e0       	ldi	r24, 0x02	; 2
     53a:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     53c:	41 15       	cp	r20, r1
     53e:	51 4e       	sbci	r21, 0xE1	; 225
     540:	61 05       	cpc	r22, r1
     542:	71 05       	cpc	r23, r1
     544:	b1 f0       	breq	.+44     	; 0x572 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     546:	60 e0       	ldi	r22, 0x00	; 0
     548:	79 e0       	ldi	r23, 0x09	; 9
     54a:	8d e3       	ldi	r24, 0x3D	; 61
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	a7 01       	movw	r20, r14
     550:	96 01       	movw	r18, r12
     552:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__udivmodsi4>
     556:	da 01       	movw	r26, r20
     558:	c9 01       	movw	r24, r18
     55a:	01 97       	sbiw	r24, 0x01	; 1
     55c:	a1 09       	sbc	r26, r1
     55e:	b1 09       	sbc	r27, r1
     560:	b6 95       	lsr	r27
     562:	a7 95       	ror	r26
     564:	97 95       	ror	r25
     566:	87 95       	ror	r24
     568:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     56a:	41 15       	cp	r20, r1
     56c:	80 e1       	ldi	r24, 0x10	; 16
     56e:	58 07       	cpc	r21, r24
     570:	a8 f0       	brcs	.+42     	; 0x59c <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     572:	e8 89       	ldd	r30, Y+16	; 0x10
     574:	f9 89       	ldd	r31, Y+17	; 0x11
     576:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     578:	60 e8       	ldi	r22, 0x80	; 128
     57a:	74 e8       	ldi	r23, 0x84	; 132
     57c:	8e e1       	ldi	r24, 0x1E	; 30
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	a7 01       	movw	r20, r14
     582:	96 01       	movw	r18, r12
     584:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__udivmodsi4>
     588:	ba 01       	movw	r22, r20
     58a:	a9 01       	movw	r20, r18
     58c:	41 50       	subi	r20, 0x01	; 1
     58e:	51 09       	sbc	r21, r1
     590:	61 09       	sbc	r22, r1
     592:	71 09       	sbc	r23, r1
     594:	76 95       	lsr	r23
     596:	67 95       	ror	r22
     598:	57 95       	ror	r21
     59a:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     59c:	ec 85       	ldd	r30, Y+12	; 0x0c
     59e:	fd 85       	ldd	r31, Y+13	; 0x0d
     5a0:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
     5a2:	ee 85       	ldd	r30, Y+14	; 0x0e
     5a4:	ff 85       	ldd	r31, Y+15	; 0x0f
     5a6:	40 83       	st	Z, r20

  _written = false;
     5a8:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     5aa:	ec 89       	ldd	r30, Y+20	; 0x14
     5ac:	fd 89       	ldd	r31, Y+21	; 0x15
     5ae:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     5b0:	ea 89       	ldd	r30, Y+18	; 0x12
     5b2:	fb 89       	ldd	r31, Y+19	; 0x13
     5b4:	80 81       	ld	r24, Z
     5b6:	80 61       	ori	r24, 0x10	; 16
     5b8:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     5ba:	ea 89       	ldd	r30, Y+18	; 0x12
     5bc:	fb 89       	ldd	r31, Y+19	; 0x13
     5be:	80 81       	ld	r24, Z
     5c0:	88 60       	ori	r24, 0x08	; 8
     5c2:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     5c4:	ea 89       	ldd	r30, Y+18	; 0x12
     5c6:	fb 89       	ldd	r31, Y+19	; 0x13
     5c8:	80 81       	ld	r24, Z
     5ca:	80 68       	ori	r24, 0x80	; 128
     5cc:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     5ce:	ea 89       	ldd	r30, Y+18	; 0x12
     5d0:	fb 89       	ldd	r31, Y+19	; 0x13
     5d2:	80 81       	ld	r24, Z
     5d4:	8f 7d       	andi	r24, 0xDF	; 223
     5d6:	80 83       	st	Z, r24
}
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	1f 91       	pop	r17
     5de:	ff 90       	pop	r15
     5e0:	ef 90       	pop	r14
     5e2:	df 90       	pop	r13
     5e4:	cf 90       	pop	r12
     5e6:	08 95       	ret

000005e8 <__vector_18>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
     5e8:	1f 92       	push	r1
     5ea:	0f 92       	push	r0
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	0f 92       	push	r0
     5f0:	11 24       	eor	r1, r1
     5f2:	2f 93       	push	r18
     5f4:	8f 93       	push	r24
     5f6:	9f 93       	push	r25
     5f8:	ef 93       	push	r30
     5fa:	ff 93       	push	r31
     5fc:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <Serial+0x10>
     600:	f0 91 84 01 	lds	r31, 0x0184	; 0x800184 <Serial+0x11>
     604:	80 81       	ld	r24, Z
     606:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <Serial+0x16>
     60a:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <Serial+0x17>
     60e:	82 fd       	sbrc	r24, 2
     610:	12 c0       	rjmp	.+36     	; 0x636 <__vector_18+0x4e>
     612:	90 81       	ld	r25, Z
     614:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <Serial+0x19>
     618:	8f 5f       	subi	r24, 0xFF	; 255
     61a:	8f 73       	andi	r24, 0x3F	; 63
     61c:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <Serial+0x1a>
     620:	82 17       	cp	r24, r18
     622:	51 f0       	breq	.+20     	; 0x638 <__vector_18+0x50>
     624:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <Serial+0x19>
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	ed 58       	subi	r30, 0x8D	; 141
     62c:	fe 4f       	sbci	r31, 0xFE	; 254
     62e:	95 8f       	std	Z+29, r25	; 0x1d
     630:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <Serial+0x19>
     634:	01 c0       	rjmp	.+2      	; 0x638 <__vector_18+0x50>
     636:	80 81       	ld	r24, Z
     638:	ff 91       	pop	r31
     63a:	ef 91       	pop	r30
     63c:	9f 91       	pop	r25
     63e:	8f 91       	pop	r24
     640:	2f 91       	pop	r18
     642:	0f 90       	pop	r0
     644:	0f be       	out	0x3f, r0	; 63
     646:	0f 90       	pop	r0
     648:	1f 90       	pop	r1
     64a:	18 95       	reti

0000064c <__vector_19>:
     64c:	1f 92       	push	r1
     64e:	0f 92       	push	r0
     650:	0f b6       	in	r0, 0x3f	; 63
     652:	0f 92       	push	r0
     654:	11 24       	eor	r1, r1
     656:	2f 93       	push	r18
     658:	3f 93       	push	r19
     65a:	4f 93       	push	r20
     65c:	5f 93       	push	r21
     65e:	6f 93       	push	r22
     660:	7f 93       	push	r23
     662:	8f 93       	push	r24
     664:	9f 93       	push	r25
     666:	af 93       	push	r26
     668:	bf 93       	push	r27
     66a:	ef 93       	push	r30
     66c:	ff 93       	push	r31
     66e:	83 e7       	ldi	r24, 0x73	; 115
     670:	91 e0       	ldi	r25, 0x01	; 1
     672:	0e 94 05 02 	call	0x40a	; 0x40a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     676:	ff 91       	pop	r31
     678:	ef 91       	pop	r30
     67a:	bf 91       	pop	r27
     67c:	af 91       	pop	r26
     67e:	9f 91       	pop	r25
     680:	8f 91       	pop	r24
     682:	7f 91       	pop	r23
     684:	6f 91       	pop	r22
     686:	5f 91       	pop	r21
     688:	4f 91       	pop	r20
     68a:	3f 91       	pop	r19
     68c:	2f 91       	pop	r18
     68e:	0f 90       	pop	r0
     690:	0f be       	out	0x3f, r0	; 63
     692:	0f 90       	pop	r0
     694:	1f 90       	pop	r1
     696:	18 95       	reti

00000698 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     698:	e3 e7       	ldi	r30, 0x73	; 115
     69a:	f1 e0       	ldi	r31, 0x01	; 1
     69c:	13 82       	std	Z+3, r1	; 0x03
     69e:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     6a0:	88 ee       	ldi	r24, 0xE8	; 232
     6a2:	93 e0       	ldi	r25, 0x03	; 3
     6a4:	a0 e0       	ldi	r26, 0x00	; 0
     6a6:	b0 e0       	ldi	r27, 0x00	; 0
     6a8:	84 83       	std	Z+4, r24	; 0x04
     6aa:	95 83       	std	Z+5, r25	; 0x05
     6ac:	a6 83       	std	Z+6, r26	; 0x06
     6ae:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     6b0:	88 e3       	ldi	r24, 0x38	; 56
     6b2:	91 e0       	ldi	r25, 0x01	; 1
     6b4:	91 83       	std	Z+1, r25	; 0x01
     6b6:	80 83       	st	Z, r24
     6b8:	85 ec       	ldi	r24, 0xC5	; 197
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	95 87       	std	Z+13, r25	; 0x0d
     6be:	84 87       	std	Z+12, r24	; 0x0c
     6c0:	84 ec       	ldi	r24, 0xC4	; 196
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	97 87       	std	Z+15, r25	; 0x0f
     6c6:	86 87       	std	Z+14, r24	; 0x0e
     6c8:	80 ec       	ldi	r24, 0xC0	; 192
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	91 8b       	std	Z+17, r25	; 0x11
     6ce:	80 8b       	std	Z+16, r24	; 0x10
     6d0:	81 ec       	ldi	r24, 0xC1	; 193
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	93 8b       	std	Z+19, r25	; 0x13
     6d6:	82 8b       	std	Z+18, r24	; 0x12
     6d8:	82 ec       	ldi	r24, 0xC2	; 194
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	95 8b       	std	Z+21, r25	; 0x15
     6de:	84 8b       	std	Z+20, r24	; 0x14
     6e0:	86 ec       	ldi	r24, 0xC6	; 198
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	97 8b       	std	Z+23, r25	; 0x17
     6e6:	86 8b       	std	Z+22, r24	; 0x16
     6e8:	11 8e       	std	Z+25, r1	; 0x19
     6ea:	12 8e       	std	Z+26, r1	; 0x1a
     6ec:	13 8e       	std	Z+27, r1	; 0x1b
     6ee:	14 8e       	std	Z+28, r1	; 0x1c
     6f0:	08 95       	ret

000006f2 <_ZN5Print5writeEPKhj>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
     6f2:	cf 92       	push	r12
     6f4:	df 92       	push	r13
     6f6:	ef 92       	push	r14
     6f8:	ff 92       	push	r15
     6fa:	0f 93       	push	r16
     6fc:	1f 93       	push	r17
     6fe:	cf 93       	push	r28
     700:	df 93       	push	r29
     702:	6c 01       	movw	r12, r24
     704:	7a 01       	movw	r14, r20
     706:	8b 01       	movw	r16, r22
     708:	c0 e0       	ldi	r28, 0x00	; 0
     70a:	d0 e0       	ldi	r29, 0x00	; 0
     70c:	ce 15       	cp	r28, r14
     70e:	df 05       	cpc	r29, r15
     710:	89 f0       	breq	.+34     	; 0x734 <_ZN5Print5writeEPKhj+0x42>
     712:	d8 01       	movw	r26, r16
     714:	6d 91       	ld	r22, X+
     716:	8d 01       	movw	r16, r26
     718:	d6 01       	movw	r26, r12
     71a:	ed 91       	ld	r30, X+
     71c:	fc 91       	ld	r31, X
     71e:	01 90       	ld	r0, Z+
     720:	f0 81       	ld	r31, Z
     722:	e0 2d       	mov	r30, r0
     724:	c6 01       	movw	r24, r12
     726:	09 95       	icall
     728:	89 2b       	or	r24, r25
     72a:	11 f4       	brne	.+4      	; 0x730 <_ZN5Print5writeEPKhj+0x3e>
     72c:	7e 01       	movw	r14, r28
     72e:	02 c0       	rjmp	.+4      	; 0x734 <_ZN5Print5writeEPKhj+0x42>
     730:	21 96       	adiw	r28, 0x01	; 1
     732:	ec cf       	rjmp	.-40     	; 0x70c <_ZN5Print5writeEPKhj+0x1a>
     734:	c7 01       	movw	r24, r14
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	ff 90       	pop	r15
     740:	ef 90       	pop	r14
     742:	df 90       	pop	r13
     744:	cf 90       	pop	r12
     746:	08 95       	ret

00000748 <_ZN5Print5writeEPKc>:
     748:	61 15       	cp	r22, r1
     74a:	71 05       	cpc	r23, r1
     74c:	79 f0       	breq	.+30     	; 0x76c <_ZN5Print5writeEPKc+0x24>
     74e:	fb 01       	movw	r30, r22
     750:	01 90       	ld	r0, Z+
     752:	00 20       	and	r0, r0
     754:	e9 f7       	brne	.-6      	; 0x750 <_ZN5Print5writeEPKc+0x8>
     756:	31 97       	sbiw	r30, 0x01	; 1
     758:	af 01       	movw	r20, r30
     75a:	46 1b       	sub	r20, r22
     75c:	57 0b       	sbc	r21, r23
     75e:	dc 01       	movw	r26, r24
     760:	ed 91       	ld	r30, X+
     762:	fc 91       	ld	r31, X
     764:	02 80       	ldd	r0, Z+2	; 0x02
     766:	f3 81       	ldd	r31, Z+3	; 0x03
     768:	e0 2d       	mov	r30, r0
     76a:	09 94       	ijmp
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	08 95       	ret

00000772 <_ZN5Print5printEPKc>:
     772:	0c 94 a4 03 	jmp	0x748	; 0x748 <_ZN5Print5writeEPKc>

00000776 <_ZN5Print5printEc>:
     776:	dc 01       	movw	r26, r24
     778:	ed 91       	ld	r30, X+
     77a:	fc 91       	ld	r31, X
     77c:	01 90       	ld	r0, Z+
     77e:	f0 81       	ld	r31, Z
     780:	e0 2d       	mov	r30, r0
     782:	09 94       	ijmp

00000784 <_ZN5Print7printlnEv>:
     784:	64 e4       	ldi	r22, 0x44	; 68
     786:	71 e0       	ldi	r23, 0x01	; 1
     788:	0c 94 a4 03 	jmp	0x748	; 0x748 <_ZN5Print5writeEPKc>

0000078c <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
     78c:	8f 92       	push	r8
     78e:	9f 92       	push	r9
     790:	af 92       	push	r10
     792:	bf 92       	push	r11
     794:	cf 92       	push	r12
     796:	df 92       	push	r13
     798:	ef 92       	push	r14
     79a:	ff 92       	push	r15
     79c:	0f 93       	push	r16
     79e:	1f 93       	push	r17
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	cd b7       	in	r28, 0x3d	; 61
     7a6:	de b7       	in	r29, 0x3e	; 62
     7a8:	a1 97       	sbiw	r28, 0x21	; 33
     7aa:	0f b6       	in	r0, 0x3f	; 63
     7ac:	f8 94       	cli
     7ae:	de bf       	out	0x3e, r29	; 62
     7b0:	0f be       	out	0x3f, r0	; 63
     7b2:	cd bf       	out	0x3d, r28	; 61
     7b4:	7c 01       	movw	r14, r24
     7b6:	d4 2e       	mov	r13, r20
     7b8:	c5 2e       	mov	r12, r21
     7ba:	db 01       	movw	r26, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     7bc:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     7be:	22 30       	cpi	r18, 0x02	; 2
     7c0:	08 f4       	brcc	.+2      	; 0x7c4 <_ZN5Print11printNumberEmh+0x38>
     7c2:	2a e0       	ldi	r18, 0x0A	; 10
     7c4:	8e 01       	movw	r16, r28
     7c6:	0f 5d       	subi	r16, 0xDF	; 223
     7c8:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
     7ca:	82 2e       	mov	r8, r18
     7cc:	91 2c       	mov	r9, r1
     7ce:	a1 2c       	mov	r10, r1
     7d0:	b1 2c       	mov	r11, r1
     7d2:	6d 2d       	mov	r22, r13
     7d4:	7c 2d       	mov	r23, r12
     7d6:	cd 01       	movw	r24, r26
     7d8:	a5 01       	movw	r20, r10
     7da:	94 01       	movw	r18, r8
     7dc:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__udivmodsi4>
    n /= base;
     7e0:	d2 2e       	mov	r13, r18
     7e2:	c3 2e       	mov	r12, r19
     7e4:	da 01       	movw	r26, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     7e6:	01 50       	subi	r16, 0x01	; 1
     7e8:	11 09       	sbc	r17, r1
     7ea:	6a 30       	cpi	r22, 0x0A	; 10
     7ec:	71 05       	cpc	r23, r1
     7ee:	81 05       	cpc	r24, r1
     7f0:	91 05       	cpc	r25, r1
     7f2:	10 f4       	brcc	.+4      	; 0x7f8 <_ZN5Print11printNumberEmh+0x6c>
     7f4:	60 5d       	subi	r22, 0xD0	; 208
     7f6:	01 c0       	rjmp	.+2      	; 0x7fa <_ZN5Print11printNumberEmh+0x6e>
     7f8:	69 5c       	subi	r22, 0xC9	; 201
     7fa:	f8 01       	movw	r30, r16
     7fc:	60 83       	st	Z, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
     7fe:	23 2b       	or	r18, r19
     800:	24 2b       	or	r18, r20
     802:	25 2b       	or	r18, r21
     804:	31 f7       	brne	.-52     	; 0x7d2 <_ZN5Print11printNumberEmh+0x46>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
     806:	b8 01       	movw	r22, r16
     808:	c7 01       	movw	r24, r14
     80a:	0e 94 a4 03 	call	0x748	; 0x748 <_ZN5Print5writeEPKc>
}
     80e:	a1 96       	adiw	r28, 0x21	; 33
     810:	0f b6       	in	r0, 0x3f	; 63
     812:	f8 94       	cli
     814:	de bf       	out	0x3e, r29	; 62
     816:	0f be       	out	0x3f, r0	; 63
     818:	cd bf       	out	0x3d, r28	; 61
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	1f 91       	pop	r17
     820:	0f 91       	pop	r16
     822:	ff 90       	pop	r15
     824:	ef 90       	pop	r14
     826:	df 90       	pop	r13
     828:	cf 90       	pop	r12
     82a:	bf 90       	pop	r11
     82c:	af 90       	pop	r10
     82e:	9f 90       	pop	r9
     830:	8f 90       	pop	r8
     832:	08 95       	ret

00000834 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     834:	cf 92       	push	r12
     836:	df 92       	push	r13
     838:	ef 92       	push	r14
     83a:	ff 92       	push	r15
     83c:	0f 93       	push	r16
     83e:	1f 93       	push	r17
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
     844:	ec 01       	movw	r28, r24
     846:	6a 01       	movw	r12, r20
     848:	7b 01       	movw	r14, r22
  if (base == 0) {
     84a:	21 15       	cp	r18, r1
     84c:	31 05       	cpc	r19, r1
     84e:	79 f4       	brne	.+30     	; 0x86e <_ZN5Print5printEli+0x3a>
    return write(n);
     850:	e8 81       	ld	r30, Y
     852:	f9 81       	ldd	r31, Y+1	; 0x01
     854:	01 90       	ld	r0, Z+
     856:	f0 81       	ld	r31, Z
     858:	e0 2d       	mov	r30, r0
     85a:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	1f 91       	pop	r17
     862:	0f 91       	pop	r16
     864:	ff 90       	pop	r15
     866:	ef 90       	pop	r14
     868:	df 90       	pop	r13
     86a:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     86c:	09 94       	ijmp
  } else if (base == 10) {
     86e:	2a 30       	cpi	r18, 0x0A	; 10
     870:	31 05       	cpc	r19, r1
     872:	e9 f4       	brne	.+58     	; 0x8ae <_ZN5Print5printEli+0x7a>
    if (n < 0) {
     874:	77 ff       	sbrs	r23, 7
     876:	1a c0       	rjmp	.+52     	; 0x8ac <_ZN5Print5printEli+0x78>
      int t = print('-');
     878:	6d e2       	ldi	r22, 0x2D	; 45
     87a:	0e 94 bb 03 	call	0x776	; 0x776 <_ZN5Print5printEc>
     87e:	8c 01       	movw	r16, r24
      n = -n;
     880:	44 27       	eor	r20, r20
     882:	55 27       	eor	r21, r21
     884:	ba 01       	movw	r22, r20
     886:	4c 19       	sub	r20, r12
     888:	5d 09       	sbc	r21, r13
     88a:	6e 09       	sbc	r22, r14
     88c:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
     88e:	2a e0       	ldi	r18, 0x0A	; 10
     890:	ce 01       	movw	r24, r28
     892:	0e 94 c6 03 	call	0x78c	; 0x78c <_ZN5Print11printNumberEmh>
     896:	80 0f       	add	r24, r16
     898:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	1f 91       	pop	r17
     8a0:	0f 91       	pop	r16
     8a2:	ff 90       	pop	r15
     8a4:	ef 90       	pop	r14
     8a6:	df 90       	pop	r13
     8a8:	cf 90       	pop	r12
     8aa:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     8ac:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
     8ae:	b7 01       	movw	r22, r14
     8b0:	a6 01       	movw	r20, r12
     8b2:	ce 01       	movw	r24, r28
  }
}
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
     8b8:	1f 91       	pop	r17
     8ba:	0f 91       	pop	r16
     8bc:	ff 90       	pop	r15
     8be:	ef 90       	pop	r14
     8c0:	df 90       	pop	r13
     8c2:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     8c4:	0c 94 c6 03 	jmp	0x78c	; 0x78c <_ZN5Print11printNumberEmh>

000008c8 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
     8c8:	08 95       	ret

000008ca <attachInterrupt>:
     8ca:	82 30       	cpi	r24, 0x02	; 2
     8cc:	e8 f4       	brcc	.+58     	; 0x908 <__stack+0x9>
     8ce:	e8 2f       	mov	r30, r24
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	ee 0f       	add	r30, r30
     8d4:	ff 1f       	adc	r31, r31
     8d6:	e0 50       	subi	r30, 0x00	; 0
     8d8:	ff 4f       	sbci	r31, 0xFF	; 255
     8da:	71 83       	std	Z+1, r23	; 0x01
     8dc:	60 83       	st	Z, r22
     8de:	81 30       	cpi	r24, 0x01	; 1
     8e0:	41 f0       	breq	.+16     	; 0x8f2 <attachInterrupt+0x28>
     8e2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     8e6:	8c 7f       	andi	r24, 0xFC	; 252
     8e8:	48 2b       	or	r20, r24
     8ea:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     8ee:	e8 9a       	sbi	0x1d, 0	; 29
     8f0:	08 95       	ret
     8f2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     8f6:	44 0f       	add	r20, r20
     8f8:	55 1f       	adc	r21, r21
     8fa:	44 0f       	add	r20, r20
     8fc:	55 1f       	adc	r21, r21
     8fe:	83 7f       	andi	r24, 0xF3	; 243
     900:	48 2b       	or	r20, r24
     902:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     906:	e9 9a       	sbi	0x1d, 1	; 29
     908:	08 95       	ret

0000090a <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
     90a:	1f 92       	push	r1
     90c:	0f 92       	push	r0
     90e:	0f b6       	in	r0, 0x3f	; 63
     910:	0f 92       	push	r0
     912:	11 24       	eor	r1, r1
     914:	2f 93       	push	r18
     916:	3f 93       	push	r19
     918:	4f 93       	push	r20
     91a:	5f 93       	push	r21
     91c:	6f 93       	push	r22
     91e:	7f 93       	push	r23
     920:	8f 93       	push	r24
     922:	9f 93       	push	r25
     924:	af 93       	push	r26
     926:	bf 93       	push	r27
     928:	ef 93       	push	r30
     92a:	ff 93       	push	r31
     92c:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
     930:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
     934:	09 95       	icall
     936:	ff 91       	pop	r31
     938:	ef 91       	pop	r30
     93a:	bf 91       	pop	r27
     93c:	af 91       	pop	r26
     93e:	9f 91       	pop	r25
     940:	8f 91       	pop	r24
     942:	7f 91       	pop	r23
     944:	6f 91       	pop	r22
     946:	5f 91       	pop	r21
     948:	4f 91       	pop	r20
     94a:	3f 91       	pop	r19
     94c:	2f 91       	pop	r18
     94e:	0f 90       	pop	r0
     950:	0f be       	out	0x3f, r0	; 63
     952:	0f 90       	pop	r0
     954:	1f 90       	pop	r1
     956:	18 95       	reti

00000958 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
     958:	1f 92       	push	r1
     95a:	0f 92       	push	r0
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	0f 92       	push	r0
     960:	11 24       	eor	r1, r1
     962:	2f 93       	push	r18
     964:	3f 93       	push	r19
     966:	4f 93       	push	r20
     968:	5f 93       	push	r21
     96a:	6f 93       	push	r22
     96c:	7f 93       	push	r23
     96e:	8f 93       	push	r24
     970:	9f 93       	push	r25
     972:	af 93       	push	r26
     974:	bf 93       	push	r27
     976:	ef 93       	push	r30
     978:	ff 93       	push	r31
     97a:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_start+0x2>
     97e:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__data_start+0x3>
     982:	09 95       	icall
     984:	ff 91       	pop	r31
     986:	ef 91       	pop	r30
     988:	bf 91       	pop	r27
     98a:	af 91       	pop	r26
     98c:	9f 91       	pop	r25
     98e:	8f 91       	pop	r24
     990:	7f 91       	pop	r23
     992:	6f 91       	pop	r22
     994:	5f 91       	pop	r21
     996:	4f 91       	pop	r20
     998:	3f 91       	pop	r19
     99a:	2f 91       	pop	r18
     99c:	0f 90       	pop	r0
     99e:	0f be       	out	0x3f, r0	; 63
     9a0:	0f 90       	pop	r0
     9a2:	1f 90       	pop	r1
     9a4:	18 95       	reti

000009a6 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     9a6:	1f 92       	push	r1
     9a8:	0f 92       	push	r0
     9aa:	0f b6       	in	r0, 0x3f	; 63
     9ac:	0f 92       	push	r0
     9ae:	11 24       	eor	r1, r1
     9b0:	2f 93       	push	r18
     9b2:	3f 93       	push	r19
     9b4:	8f 93       	push	r24
     9b6:	9f 93       	push	r25
     9b8:	af 93       	push	r26
     9ba:	bf 93       	push	r27
     9bc:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <timer0_millis>
     9c0:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <timer0_millis+0x1>
     9c4:	a0 91 13 02 	lds	r26, 0x0213	; 0x800213 <timer0_millis+0x2>
     9c8:	b0 91 14 02 	lds	r27, 0x0214	; 0x800214 <timer0_millis+0x3>
     9cc:	30 91 10 02 	lds	r19, 0x0210	; 0x800210 <timer0_fract>
     9d0:	23 e0       	ldi	r18, 0x03	; 3
     9d2:	23 0f       	add	r18, r19
     9d4:	2d 37       	cpi	r18, 0x7D	; 125
     9d6:	20 f4       	brcc	.+8      	; 0x9e0 <__vector_16+0x3a>
     9d8:	01 96       	adiw	r24, 0x01	; 1
     9da:	a1 1d       	adc	r26, r1
     9dc:	b1 1d       	adc	r27, r1
     9de:	05 c0       	rjmp	.+10     	; 0x9ea <__vector_16+0x44>
     9e0:	26 e8       	ldi	r18, 0x86	; 134
     9e2:	23 0f       	add	r18, r19
     9e4:	02 96       	adiw	r24, 0x02	; 2
     9e6:	a1 1d       	adc	r26, r1
     9e8:	b1 1d       	adc	r27, r1
     9ea:	20 93 10 02 	sts	0x0210, r18	; 0x800210 <timer0_fract>
     9ee:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <timer0_millis>
     9f2:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <timer0_millis+0x1>
     9f6:	a0 93 13 02 	sts	0x0213, r26	; 0x800213 <timer0_millis+0x2>
     9fa:	b0 93 14 02 	sts	0x0214, r27	; 0x800214 <timer0_millis+0x3>
     9fe:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <timer0_overflow_count>
     a02:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <timer0_overflow_count+0x1>
     a06:	a0 91 17 02 	lds	r26, 0x0217	; 0x800217 <timer0_overflow_count+0x2>
     a0a:	b0 91 18 02 	lds	r27, 0x0218	; 0x800218 <timer0_overflow_count+0x3>
     a0e:	01 96       	adiw	r24, 0x01	; 1
     a10:	a1 1d       	adc	r26, r1
     a12:	b1 1d       	adc	r27, r1
     a14:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <timer0_overflow_count>
     a18:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <timer0_overflow_count+0x1>
     a1c:	a0 93 17 02 	sts	0x0217, r26	; 0x800217 <timer0_overflow_count+0x2>
     a20:	b0 93 18 02 	sts	0x0218, r27	; 0x800218 <timer0_overflow_count+0x3>
     a24:	bf 91       	pop	r27
     a26:	af 91       	pop	r26
     a28:	9f 91       	pop	r25
     a2a:	8f 91       	pop	r24
     a2c:	3f 91       	pop	r19
     a2e:	2f 91       	pop	r18
     a30:	0f 90       	pop	r0
     a32:	0f be       	out	0x3f, r0	; 63
     a34:	0f 90       	pop	r0
     a36:	1f 90       	pop	r1
     a38:	18 95       	reti

00000a3a <micros>:
     a3a:	3f b7       	in	r19, 0x3f	; 63
     a3c:	f8 94       	cli
     a3e:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <timer0_overflow_count>
     a42:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <timer0_overflow_count+0x1>
     a46:	a0 91 17 02 	lds	r26, 0x0217	; 0x800217 <timer0_overflow_count+0x2>
     a4a:	b0 91 18 02 	lds	r27, 0x0218	; 0x800218 <timer0_overflow_count+0x3>
     a4e:	26 b5       	in	r18, 0x26	; 38
     a50:	a8 9b       	sbis	0x15, 0	; 21
     a52:	05 c0       	rjmp	.+10     	; 0xa5e <micros+0x24>
     a54:	2f 3f       	cpi	r18, 0xFF	; 255
     a56:	19 f0       	breq	.+6      	; 0xa5e <micros+0x24>
     a58:	01 96       	adiw	r24, 0x01	; 1
     a5a:	a1 1d       	adc	r26, r1
     a5c:	b1 1d       	adc	r27, r1
     a5e:	3f bf       	out	0x3f, r19	; 63
     a60:	ba 2f       	mov	r27, r26
     a62:	a9 2f       	mov	r26, r25
     a64:	98 2f       	mov	r25, r24
     a66:	88 27       	eor	r24, r24
     a68:	82 0f       	add	r24, r18
     a6a:	91 1d       	adc	r25, r1
     a6c:	a1 1d       	adc	r26, r1
     a6e:	b1 1d       	adc	r27, r1
     a70:	bc 01       	movw	r22, r24
     a72:	cd 01       	movw	r24, r26
     a74:	42 e0       	ldi	r20, 0x02	; 2
     a76:	66 0f       	add	r22, r22
     a78:	77 1f       	adc	r23, r23
     a7a:	88 1f       	adc	r24, r24
     a7c:	99 1f       	adc	r25, r25
     a7e:	4a 95       	dec	r20
     a80:	d1 f7       	brne	.-12     	; 0xa76 <micros+0x3c>
     a82:	08 95       	ret

00000a84 <delay>:
     a84:	8f 92       	push	r8
     a86:	9f 92       	push	r9
     a88:	af 92       	push	r10
     a8a:	bf 92       	push	r11
     a8c:	cf 92       	push	r12
     a8e:	df 92       	push	r13
     a90:	ef 92       	push	r14
     a92:	ff 92       	push	r15
     a94:	6b 01       	movw	r12, r22
     a96:	7c 01       	movw	r14, r24
     a98:	0e 94 1d 05 	call	0xa3a	; 0xa3a <micros>
     a9c:	4b 01       	movw	r8, r22
     a9e:	5c 01       	movw	r10, r24
     aa0:	c1 14       	cp	r12, r1
     aa2:	d1 04       	cpc	r13, r1
     aa4:	e1 04       	cpc	r14, r1
     aa6:	f1 04       	cpc	r15, r1
     aa8:	01 f1       	breq	.+64     	; 0xaea <delay+0x66>
     aaa:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <yield>
     aae:	0e 94 1d 05 	call	0xa3a	; 0xa3a <micros>
     ab2:	dc 01       	movw	r26, r24
     ab4:	cb 01       	movw	r24, r22
     ab6:	88 19       	sub	r24, r8
     ab8:	99 09       	sbc	r25, r9
     aba:	aa 09       	sbc	r26, r10
     abc:	bb 09       	sbc	r27, r11
     abe:	88 3e       	cpi	r24, 0xE8	; 232
     ac0:	93 40       	sbci	r25, 0x03	; 3
     ac2:	a1 05       	cpc	r26, r1
     ac4:	b1 05       	cpc	r27, r1
     ac6:	60 f3       	brcs	.-40     	; 0xaa0 <delay+0x1c>
     ac8:	21 e0       	ldi	r18, 0x01	; 1
     aca:	c2 1a       	sub	r12, r18
     acc:	d1 08       	sbc	r13, r1
     ace:	e1 08       	sbc	r14, r1
     ad0:	f1 08       	sbc	r15, r1
     ad2:	88 ee       	ldi	r24, 0xE8	; 232
     ad4:	88 0e       	add	r8, r24
     ad6:	83 e0       	ldi	r24, 0x03	; 3
     ad8:	98 1e       	adc	r9, r24
     ada:	a1 1c       	adc	r10, r1
     adc:	b1 1c       	adc	r11, r1
     ade:	c1 14       	cp	r12, r1
     ae0:	d1 04       	cpc	r13, r1
     ae2:	e1 04       	cpc	r14, r1
     ae4:	f1 04       	cpc	r15, r1
     ae6:	19 f7       	brne	.-58     	; 0xaae <delay+0x2a>
     ae8:	db cf       	rjmp	.-74     	; 0xaa0 <delay+0x1c>
     aea:	ff 90       	pop	r15
     aec:	ef 90       	pop	r14
     aee:	df 90       	pop	r13
     af0:	cf 90       	pop	r12
     af2:	bf 90       	pop	r11
     af4:	af 90       	pop	r10
     af6:	9f 90       	pop	r9
     af8:	8f 90       	pop	r8
     afa:	08 95       	ret

00000afc <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     afc:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     afe:	84 b5       	in	r24, 0x24	; 36
     b00:	82 60       	ori	r24, 0x02	; 2
     b02:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     b04:	84 b5       	in	r24, 0x24	; 36
     b06:	81 60       	ori	r24, 0x01	; 1
     b08:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     b0a:	85 b5       	in	r24, 0x25	; 37
     b0c:	82 60       	ori	r24, 0x02	; 2
     b0e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     b10:	85 b5       	in	r24, 0x25	; 37
     b12:	81 60       	ori	r24, 0x01	; 1
     b14:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     b16:	ee e6       	ldi	r30, 0x6E	; 110
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	80 81       	ld	r24, Z
     b1c:	81 60       	ori	r24, 0x01	; 1
     b1e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     b20:	e1 e8       	ldi	r30, 0x81	; 129
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     b26:	80 81       	ld	r24, Z
     b28:	82 60       	ori	r24, 0x02	; 2
     b2a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     b2c:	80 81       	ld	r24, Z
     b2e:	81 60       	ori	r24, 0x01	; 1
     b30:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     b32:	e0 e8       	ldi	r30, 0x80	; 128
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	80 81       	ld	r24, Z
     b38:	81 60       	ori	r24, 0x01	; 1
     b3a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     b3c:	e1 eb       	ldi	r30, 0xB1	; 177
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	80 81       	ld	r24, Z
     b42:	84 60       	ori	r24, 0x04	; 4
     b44:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     b46:	e0 eb       	ldi	r30, 0xB0	; 176
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	80 81       	ld	r24, Z
     b4c:	81 60       	ori	r24, 0x01	; 1
     b4e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     b50:	ea e7       	ldi	r30, 0x7A	; 122
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	84 60       	ori	r24, 0x04	; 4
     b58:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     b5a:	80 81       	ld	r24, Z
     b5c:	82 60       	ori	r24, 0x02	; 2
     b5e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     b60:	80 81       	ld	r24, Z
     b62:	81 60       	ori	r24, 0x01	; 1
     b64:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     b66:	80 81       	ld	r24, Z
     b68:	80 68       	ori	r24, 0x80	; 128
     b6a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     b6c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     b70:	08 95       	ret

00000b72 <_ZN9DS3232RTC7bcd2decEh>:
{
    tmElements_t tm;

    breakTime(t, tm);
    return ( write(tm) );
}
     b72:	98 2f       	mov	r25, r24
     b74:	92 95       	swap	r25
     b76:	9f 70       	andi	r25, 0x0F	; 15
     b78:	2a ef       	ldi	r18, 0xFA	; 250
     b7a:	92 9f       	mul	r25, r18
     b7c:	80 0d       	add	r24, r0
     b7e:	11 24       	eor	r1, r1
     b80:	08 95       	ret

00000b82 <_GLOBAL__sub_I__ZN9DS3232RTC7errCodeE>:
     b82:	80 e3       	ldi	r24, 0x30	; 48
     b84:	92 e0       	ldi	r25, 0x02	; 2
     b86:	0c 94 b8 09 	jmp	0x1370	; 0x1370 <_ZN7TwoWire5beginEv>

00000b8a <_ZN9DS3232RTC8writeRTCEhPhh>:
     b8a:	ef 92       	push	r14
     b8c:	ff 92       	push	r15
     b8e:	0f 93       	push	r16
     b90:	1f 93       	push	r17
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
     b96:	00 d0       	rcall	.+0      	; 0xb98 <_ZN9DS3232RTC8writeRTCEhPhh+0xe>
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
     b9c:	06 2f       	mov	r16, r22
     b9e:	12 2f       	mov	r17, r18
     ba0:	68 e6       	ldi	r22, 0x68	; 104
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	80 e3       	ldi	r24, 0x30	; 48
     ba6:	92 e0       	ldi	r25, 0x02	; 2
     ba8:	49 83       	std	Y+1, r20	; 0x01
     baa:	5a 83       	std	Y+2, r21	; 0x02
     bac:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN7TwoWire17beginTransmissionEi>
     bb0:	60 2f       	mov	r22, r16
     bb2:	80 e3       	ldi	r24, 0x30	; 48
     bb4:	92 e0       	ldi	r25, 0x02	; 2
     bb6:	0e 94 79 09 	call	0x12f2	; 0x12f2 <_ZN7TwoWire5writeEh>
     bba:	49 81       	ldd	r20, Y+1	; 0x01
     bbc:	04 2f       	mov	r16, r20
     bbe:	e4 2e       	mov	r14, r20
     bc0:	5a 81       	ldd	r21, Y+2	; 0x02
     bc2:	f5 2e       	mov	r15, r21
     bc4:	8e 2d       	mov	r24, r14
     bc6:	80 1b       	sub	r24, r16
     bc8:	81 17       	cp	r24, r17
     bca:	40 f4       	brcc	.+16     	; 0xbdc <_ZN9DS3232RTC8writeRTCEhPhh+0x52>
     bcc:	f7 01       	movw	r30, r14
     bce:	61 91       	ld	r22, Z+
     bd0:	7f 01       	movw	r14, r30
     bd2:	80 e3       	ldi	r24, 0x30	; 48
     bd4:	92 e0       	ldi	r25, 0x02	; 2
     bd6:	0e 94 79 09 	call	0x12f2	; 0x12f2 <_ZN7TwoWire5writeEh>
     bda:	f4 cf       	rjmp	.-24     	; 0xbc4 <_ZN9DS3232RTC8writeRTCEhPhh+0x3a>
     bdc:	80 e3       	ldi	r24, 0x30	; 48
     bde:	92 e0       	ldi	r25, 0x02	; 2
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
     bec:	ff 90       	pop	r15
     bee:	ef 90       	pop	r14
     bf0:	0c 94 4b 0a 	jmp	0x1496	; 0x1496 <_ZN7TwoWire15endTransmissionEv>

00000bf4 <_ZN9DS3232RTC8writeRTCEhh>:
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
     bf8:	1f 92       	push	r1
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
     bfe:	49 83       	std	Y+1, r20	; 0x01
     c00:	21 e0       	ldi	r18, 0x01	; 1
     c02:	ae 01       	movw	r20, r28
     c04:	4f 5f       	subi	r20, 0xFF	; 255
     c06:	5f 4f       	sbci	r21, 0xFF	; 255
     c08:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN9DS3232RTC8writeRTCEhPhh>
     c0c:	0f 90       	pop	r0
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	08 95       	ret

00000c14 <_ZN9DS3232RTC4readER12tmElements_t>:
     c14:	cf 93       	push	r28
     c16:	df 93       	push	r29
     c18:	ec 01       	movw	r28, r24
     c1a:	68 e6       	ldi	r22, 0x68	; 104
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	80 e3       	ldi	r24, 0x30	; 48
     c20:	92 e0       	ldi	r25, 0x02	; 2
     c22:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN7TwoWire17beginTransmissionEi>
     c26:	60 e0       	ldi	r22, 0x00	; 0
     c28:	80 e3       	ldi	r24, 0x30	; 48
     c2a:	92 e0       	ldi	r25, 0x02	; 2
     c2c:	0e 94 79 09 	call	0x12f2	; 0x12f2 <_ZN7TwoWire5writeEh>
     c30:	80 e3       	ldi	r24, 0x30	; 48
     c32:	92 e0       	ldi	r25, 0x02	; 2
     c34:	0e 94 4b 0a 	call	0x1496	; 0x1496 <_ZN7TwoWire15endTransmissionEv>
     c38:	88 23       	and	r24, r24
     c3a:	19 f0       	breq	.+6      	; 0xc42 <_ZN9DS3232RTC4readER12tmElements_t+0x2e>
     c3c:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <_ZN9DS3232RTC7errCodeE>
     c40:	3c c0       	rjmp	.+120    	; 0xcba <_ZN9DS3232RTC4readER12tmElements_t+0xa6>
     c42:	47 e0       	ldi	r20, 0x07	; 7
     c44:	50 e0       	ldi	r21, 0x00	; 0
     c46:	68 e6       	ldi	r22, 0x68	; 104
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	80 e3       	ldi	r24, 0x30	; 48
     c4c:	92 e0       	ldi	r25, 0x02	; 2
     c4e:	0e 94 48 0a 	call	0x1490	; 0x1490 <_ZN7TwoWire11requestFromEii>
     c52:	80 e3       	ldi	r24, 0x30	; 48
     c54:	92 e0       	ldi	r25, 0x02	; 2
     c56:	0e 94 25 09 	call	0x124a	; 0x124a <_ZN7TwoWire4readEv>
     c5a:	8f 77       	andi	r24, 0x7F	; 127
     c5c:	0e 94 b9 05 	call	0xb72	; 0xb72 <_ZN9DS3232RTC7bcd2decEh>
     c60:	88 83       	st	Y, r24
     c62:	80 e3       	ldi	r24, 0x30	; 48
     c64:	92 e0       	ldi	r25, 0x02	; 2
     c66:	0e 94 25 09 	call	0x124a	; 0x124a <_ZN7TwoWire4readEv>
     c6a:	0e 94 b9 05 	call	0xb72	; 0xb72 <_ZN9DS3232RTC7bcd2decEh>
     c6e:	89 83       	std	Y+1, r24	; 0x01
     c70:	80 e3       	ldi	r24, 0x30	; 48
     c72:	92 e0       	ldi	r25, 0x02	; 2
     c74:	0e 94 25 09 	call	0x124a	; 0x124a <_ZN7TwoWire4readEv>
     c78:	8f 7b       	andi	r24, 0xBF	; 191
     c7a:	0e 94 b9 05 	call	0xb72	; 0xb72 <_ZN9DS3232RTC7bcd2decEh>
     c7e:	8a 83       	std	Y+2, r24	; 0x02
     c80:	80 e3       	ldi	r24, 0x30	; 48
     c82:	92 e0       	ldi	r25, 0x02	; 2
     c84:	0e 94 25 09 	call	0x124a	; 0x124a <_ZN7TwoWire4readEv>
     c88:	8b 83       	std	Y+3, r24	; 0x03
     c8a:	80 e3       	ldi	r24, 0x30	; 48
     c8c:	92 e0       	ldi	r25, 0x02	; 2
     c8e:	0e 94 25 09 	call	0x124a	; 0x124a <_ZN7TwoWire4readEv>
     c92:	0e 94 b9 05 	call	0xb72	; 0xb72 <_ZN9DS3232RTC7bcd2decEh>
     c96:	8c 83       	std	Y+4, r24	; 0x04
     c98:	80 e3       	ldi	r24, 0x30	; 48
     c9a:	92 e0       	ldi	r25, 0x02	; 2
     c9c:	0e 94 25 09 	call	0x124a	; 0x124a <_ZN7TwoWire4readEv>
     ca0:	8f 77       	andi	r24, 0x7F	; 127
     ca2:	0e 94 b9 05 	call	0xb72	; 0xb72 <_ZN9DS3232RTC7bcd2decEh>
     ca6:	8d 83       	std	Y+5, r24	; 0x05
     ca8:	80 e3       	ldi	r24, 0x30	; 48
     caa:	92 e0       	ldi	r25, 0x02	; 2
     cac:	0e 94 25 09 	call	0x124a	; 0x124a <_ZN7TwoWire4readEv>
     cb0:	0e 94 b9 05 	call	0xb72	; 0xb72 <_ZN9DS3232RTC7bcd2decEh>
     cb4:	82 5e       	subi	r24, 0xE2	; 226
     cb6:	8e 83       	std	Y+6, r24	; 0x06
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	08 95       	ret

00000cc0 <_ZN9DS3232RTC3getEv>:
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
     cc8:	27 97       	sbiw	r28, 0x07	; 7
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	f8 94       	cli
     cce:	de bf       	out	0x3e, r29	; 62
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	cd bf       	out	0x3d, r28	; 61
     cd4:	ce 01       	movw	r24, r28
     cd6:	01 96       	adiw	r24, 0x01	; 1
     cd8:	0e 94 0a 06 	call	0xc14	; 0xc14 <_ZN9DS3232RTC4readER12tmElements_t>
     cdc:	81 11       	cpse	r24, r1
     cde:	05 c0       	rjmp	.+10     	; 0xcea <_ZN9DS3232RTC3getEv+0x2a>
     ce0:	ce 01       	movw	r24, r28
     ce2:	01 96       	adiw	r24, 0x01	; 1
     ce4:	0e 94 5d 08 	call	0x10ba	; 0x10ba <_Z8makeTimeR12tmElements_t>
     ce8:	03 c0       	rjmp	.+6      	; 0xcf0 <_ZN9DS3232RTC3getEv+0x30>
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	cb 01       	movw	r24, r22
     cf0:	27 96       	adiw	r28, 0x07	; 7
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	f8 94       	cli
     cf6:	de bf       	out	0x3e, r29	; 62
     cf8:	0f be       	out	0x3f, r0	; 63
     cfa:	cd bf       	out	0x3d, r28	; 61
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	08 95       	ret

00000d02 <_ZN9DS3232RTC7readRTCEhPhh>:
     d02:	ef 92       	push	r14
     d04:	ff 92       	push	r15
     d06:	0f 93       	push	r16
     d08:	1f 93       	push	r17
     d0a:	cf 93       	push	r28
     d0c:	df 93       	push	r29
     d0e:	c6 2f       	mov	r28, r22
     d10:	04 2f       	mov	r16, r20
     d12:	e5 2e       	mov	r14, r21
     d14:	12 2f       	mov	r17, r18
     d16:	68 e6       	ldi	r22, 0x68	; 104
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	80 e3       	ldi	r24, 0x30	; 48
     d1c:	92 e0       	ldi	r25, 0x02	; 2
     d1e:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN7TwoWire17beginTransmissionEi>
     d22:	6c 2f       	mov	r22, r28
     d24:	80 e3       	ldi	r24, 0x30	; 48
     d26:	92 e0       	ldi	r25, 0x02	; 2
     d28:	0e 94 79 09 	call	0x12f2	; 0x12f2 <_ZN7TwoWire5writeEh>
     d2c:	80 e3       	ldi	r24, 0x30	; 48
     d2e:	92 e0       	ldi	r25, 0x02	; 2
     d30:	0e 94 4b 0a 	call	0x1496	; 0x1496 <_ZN7TwoWire15endTransmissionEv>
     d34:	81 11       	cpse	r24, r1
     d36:	14 c0       	rjmp	.+40     	; 0xd60 <_ZN9DS3232RTC7readRTCEhPhh+0x5e>
     d38:	41 2f       	mov	r20, r17
     d3a:	68 e6       	ldi	r22, 0x68	; 104
     d3c:	80 e3       	ldi	r24, 0x30	; 48
     d3e:	92 e0       	ldi	r25, 0x02	; 2
     d40:	0e 94 45 0a 	call	0x148a	; 0x148a <_ZN7TwoWire11requestFromEhh>
     d44:	f0 2e       	mov	r15, r16
     d46:	c0 2f       	mov	r28, r16
     d48:	de 2d       	mov	r29, r14
     d4a:	8c 2f       	mov	r24, r28
     d4c:	8f 19       	sub	r24, r15
     d4e:	81 17       	cp	r24, r17
     d50:	30 f4       	brcc	.+12     	; 0xd5e <_ZN9DS3232RTC7readRTCEhPhh+0x5c>
     d52:	80 e3       	ldi	r24, 0x30	; 48
     d54:	92 e0       	ldi	r25, 0x02	; 2
     d56:	0e 94 25 09 	call	0x124a	; 0x124a <_ZN7TwoWire4readEv>
     d5a:	89 93       	st	Y+, r24
     d5c:	f6 cf       	rjmp	.-20     	; 0xd4a <_ZN9DS3232RTC7readRTCEhPhh+0x48>
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	df 91       	pop	r29
     d62:	cf 91       	pop	r28
     d64:	1f 91       	pop	r17
     d66:	0f 91       	pop	r16
     d68:	ff 90       	pop	r15
     d6a:	ef 90       	pop	r14
     d6c:	08 95       	ret

00000d6e <_ZN9DS3232RTC7readRTCEh>:
     d6e:	cf 93       	push	r28
     d70:	df 93       	push	r29
     d72:	1f 92       	push	r1
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
     d78:	21 e0       	ldi	r18, 0x01	; 1
     d7a:	ae 01       	movw	r20, r28
     d7c:	4f 5f       	subi	r20, 0xFF	; 255
     d7e:	5f 4f       	sbci	r21, 0xFF	; 255
     d80:	0e 94 81 06 	call	0xd02	; 0xd02 <_ZN9DS3232RTC7readRTCEhPhh>
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	0f 90       	pop	r0
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	08 95       	ret

00000d8e <_ZN9DS3232RTC14alarmInterruptEhb>:
/*----------------------------------------------------------------------*
 * Enable or disable an alarm "interrupt" which asserts the INT pin     *
 * on the RTC.                                                          *
 *----------------------------------------------------------------------*/
void DS3232RTC::alarmInterrupt(byte alarmNumber, bool interruptEnabled)
{
     d8e:	ff 92       	push	r15
     d90:	0f 93       	push	r16
     d92:	1f 93       	push	r17
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
     d98:	1f 92       	push	r1
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
     d9e:	8c 01       	movw	r16, r24
     da0:	f6 2e       	mov	r15, r22
    uint8_t controlReg, mask;
    
    controlReg = readRTC(RTC_CONTROL);
     da2:	6e e0       	ldi	r22, 0x0E	; 14
     da4:	49 83       	std	Y+1, r20	; 0x01
     da6:	0e 94 b7 06 	call	0xd6e	; 0xd6e <_ZN9DS3232RTC7readRTCEh>
    mask = _BV(A1IE) << (alarmNumber - 1);
     daa:	fa 94       	dec	r15
     dac:	21 e0       	ldi	r18, 0x01	; 1
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	01 c0       	rjmp	.+2      	; 0xdb4 <_ZN9DS3232RTC14alarmInterruptEhb+0x26>
     db2:	22 0f       	add	r18, r18
     db4:	fa 94       	dec	r15
     db6:	ea f7       	brpl	.-6      	; 0xdb2 <_ZN9DS3232RTC14alarmInterruptEhb+0x24>
    if (interruptEnabled)
     db8:	49 81       	ldd	r20, Y+1	; 0x01
     dba:	44 23       	and	r20, r20
     dbc:	19 f0       	breq	.+6      	; 0xdc4 <_ZN9DS3232RTC14alarmInterruptEhb+0x36>
        controlReg |= mask;
     dbe:	48 2f       	mov	r20, r24
     dc0:	42 2b       	or	r20, r18
     dc2:	03 c0       	rjmp	.+6      	; 0xdca <_ZN9DS3232RTC14alarmInterruptEhb+0x3c>
    else
        controlReg &= ~mask;
     dc4:	20 95       	com	r18
     dc6:	48 2f       	mov	r20, r24
     dc8:	42 23       	and	r20, r18
    writeRTC(RTC_CONTROL, controlReg); 
     dca:	6e e0       	ldi	r22, 0x0E	; 14
     dcc:	c8 01       	movw	r24, r16
}
     dce:	0f 90       	pop	r0
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	1f 91       	pop	r17
     dd6:	0f 91       	pop	r16
     dd8:	ff 90       	pop	r15
    mask = _BV(A1IE) << (alarmNumber - 1);
    if (interruptEnabled)
        controlReg |= mask;
    else
        controlReg &= ~mask;
    writeRTC(RTC_CONTROL, controlReg); 
     dda:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <_ZN9DS3232RTC8writeRTCEhh>

00000dde <_ZN9DS3232RTC5alarmEh>:
/*----------------------------------------------------------------------*
 * Returns true or false depending on whether the given alarm has been  *
 * triggered, and resets the alarm flag bit.                            *
 *----------------------------------------------------------------------*/
bool DS3232RTC::alarm(byte alarmNumber)
{
     dde:	0f 93       	push	r16
     de0:	1f 93       	push	r17
     de2:	cf 93       	push	r28
     de4:	8c 01       	movw	r16, r24
     de6:	c6 2f       	mov	r28, r22
    uint8_t statusReg, mask;
    
    statusReg = readRTC(RTC_STATUS);
     de8:	6f e0       	ldi	r22, 0x0F	; 15
     dea:	0e 94 b7 06 	call	0xd6e	; 0xd6e <_ZN9DS3232RTC7readRTCEh>
    mask = _BV(A1F) << (alarmNumber - 1);
     dee:	c1 50       	subi	r28, 0x01	; 1
     df0:	21 e0       	ldi	r18, 0x01	; 1
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	01 c0       	rjmp	.+2      	; 0xdf8 <_ZN9DS3232RTC5alarmEh+0x1a>
     df6:	22 0f       	add	r18, r18
     df8:	ca 95       	dec	r28
     dfa:	ea f7       	brpl	.-6      	; 0xdf6 <_ZN9DS3232RTC5alarmEh+0x18>
    if (statusReg & mask) {
     dfc:	98 2f       	mov	r25, r24
     dfe:	92 23       	and	r25, r18
     e00:	49 f0       	breq	.+18     	; 0xe14 <_ZN9DS3232RTC5alarmEh+0x36>
        statusReg &= ~mask;
     e02:	20 95       	com	r18
     e04:	48 2f       	mov	r20, r24
     e06:	42 23       	and	r20, r18
        writeRTC(RTC_STATUS, statusReg);
     e08:	6f e0       	ldi	r22, 0x0F	; 15
     e0a:	c8 01       	movw	r24, r16
     e0c:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN9DS3232RTC8writeRTCEhh>
        return true;
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	01 c0       	rjmp	.+2      	; 0xe16 <_ZN9DS3232RTC5alarmEh+0x38>
    }
    else {
        return false;
     e14:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     e16:	cf 91       	pop	r28
     e18:	1f 91       	pop	r17
     e1a:	0f 91       	pop	r16
     e1c:	08 95       	ret

00000e1e <_ZN9DS3232RTC10squareWaveE14SQWAVE_FREQS_t>:
/*----------------------------------------------------------------------*
 * Enable or disable the square wave output.                            *
 * Use a value from the SQWAVE_FREQS_t enumeration for the parameter.   *
 *----------------------------------------------------------------------*/
void DS3232RTC::squareWave(SQWAVE_FREQS_t freq)
{
     e1e:	0f 93       	push	r16
     e20:	1f 93       	push	r17
     e22:	cf 93       	push	r28
     e24:	8c 01       	movw	r16, r24
     e26:	c6 2f       	mov	r28, r22
    uint8_t controlReg;

    controlReg = readRTC(RTC_CONTROL);
     e28:	6e e0       	ldi	r22, 0x0E	; 14
     e2a:	0e 94 b7 06 	call	0xd6e	; 0xd6e <_ZN9DS3232RTC7readRTCEh>
    if (freq >= SQWAVE_NONE) {
        controlReg |= _BV(INTCN);
     e2e:	48 2f       	mov	r20, r24
void DS3232RTC::squareWave(SQWAVE_FREQS_t freq)
{
    uint8_t controlReg;

    controlReg = readRTC(RTC_CONTROL);
    if (freq >= SQWAVE_NONE) {
     e30:	c4 30       	cpi	r28, 0x04	; 4
     e32:	10 f0       	brcs	.+4      	; 0xe38 <_ZN9DS3232RTC10squareWaveE14SQWAVE_FREQS_t+0x1a>
        controlReg |= _BV(INTCN);
     e34:	44 60       	ori	r20, 0x04	; 4
     e36:	06 c0       	rjmp	.+12     	; 0xe44 <_ZN9DS3232RTC10squareWaveE14SQWAVE_FREQS_t+0x26>
    }
    else {
        controlReg = (controlReg & 0xE3) | (freq << RS1);
     e38:	43 7e       	andi	r20, 0xE3	; 227
     e3a:	88 e0       	ldi	r24, 0x08	; 8
     e3c:	c8 9f       	mul	r28, r24
     e3e:	b0 01       	movw	r22, r0
     e40:	11 24       	eor	r1, r1
     e42:	46 2b       	or	r20, r22
    }
    writeRTC(RTC_CONTROL, controlReg);
     e44:	6e e0       	ldi	r22, 0x0E	; 14
     e46:	c8 01       	movw	r24, r16
}
     e48:	cf 91       	pop	r28
     e4a:	1f 91       	pop	r17
     e4c:	0f 91       	pop	r16
        controlReg |= _BV(INTCN);
    }
    else {
        controlReg = (controlReg & 0xE3) | (freq << RS1);
    }
    writeRTC(RTC_CONTROL, controlReg);
     e4e:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <_ZN9DS3232RTC8writeRTCEhh>

00000e52 <_Z13monthShortStrh>:
}

char* monthShortStr(uint8_t month)
{
   for (int i=0; i < dt_SHORT_STR_LEN; i++)      
      buffer[i] = pgm_read_byte(&(monthShortNames_P[i+ (month*dt_SHORT_STR_LEN)]));  
     e52:	23 e0       	ldi	r18, 0x03	; 3
     e54:	82 9f       	mul	r24, r18
     e56:	c0 01       	movw	r24, r0
     e58:	11 24       	eor	r1, r1
     e5a:	ab e1       	ldi	r26, 0x1B	; 27
     e5c:	b2 e0       	ldi	r27, 0x02	; 2
    return buffer;
}

char* monthShortStr(uint8_t month)
{
   for (int i=0; i < dt_SHORT_STR_LEN; i++)      
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	f9 01       	movw	r30, r18
     e64:	e8 0f       	add	r30, r24
     e66:	f9 1f       	adc	r31, r25
     e68:	e8 59       	subi	r30, 0x98	; 152
     e6a:	ff 4f       	sbci	r31, 0xFF	; 255
      buffer[i] = pgm_read_byte(&(monthShortNames_P[i+ (month*dt_SHORT_STR_LEN)]));  
     e6c:	e4 91       	lpm	r30, Z
     e6e:	ed 93       	st	X+, r30
    return buffer;
}

char* monthShortStr(uint8_t month)
{
   for (int i=0; i < dt_SHORT_STR_LEN; i++)      
     e70:	2f 5f       	subi	r18, 0xFF	; 255
     e72:	3f 4f       	sbci	r19, 0xFF	; 255
     e74:	23 30       	cpi	r18, 0x03	; 3
     e76:	31 05       	cpc	r19, r1
     e78:	a1 f7       	brne	.-24     	; 0xe62 <_Z13monthShortStrh+0x10>
      buffer[i] = pgm_read_byte(&(monthShortNames_P[i+ (month*dt_SHORT_STR_LEN)]));  
   buffer[dt_SHORT_STR_LEN] = 0;
     e7a:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <_ZL6buffer+0x3>
   return buffer;
}
     e7e:	8b e1       	ldi	r24, 0x1B	; 27
     e80:	92 e0       	ldi	r25, 0x02	; 2
     e82:	08 95       	ret

00000e84 <_Z9breakTimemR12tmElements_t>:
}

int weekday(time_t t) {
  refreshCache(t);
  return tm.Wday;
}
     e84:	6f 92       	push	r6
     e86:	7f 92       	push	r7
     e88:	8f 92       	push	r8
     e8a:	9f 92       	push	r9
     e8c:	af 92       	push	r10
     e8e:	bf 92       	push	r11
     e90:	cf 92       	push	r12
     e92:	df 92       	push	r13
     e94:	ef 92       	push	r14
     e96:	ff 92       	push	r15
     e98:	0f 93       	push	r16
     e9a:	1f 93       	push	r17
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
     ea0:	ea 01       	movw	r28, r20
     ea2:	2c e3       	ldi	r18, 0x3C	; 60
     ea4:	c2 2e       	mov	r12, r18
     ea6:	d1 2c       	mov	r13, r1
     ea8:	e1 2c       	mov	r14, r1
     eaa:	f1 2c       	mov	r15, r1
     eac:	a7 01       	movw	r20, r14
     eae:	96 01       	movw	r18, r12
     eb0:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__udivmodsi4>
     eb4:	68 83       	st	Y, r22
     eb6:	ca 01       	movw	r24, r20
     eb8:	b9 01       	movw	r22, r18
     eba:	a7 01       	movw	r20, r14
     ebc:	96 01       	movw	r18, r12
     ebe:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__udivmodsi4>
     ec2:	69 83       	std	Y+1, r22	; 0x01
     ec4:	ca 01       	movw	r24, r20
     ec6:	b9 01       	movw	r22, r18
     ec8:	28 e1       	ldi	r18, 0x18	; 24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	40 e0       	ldi	r20, 0x00	; 0
     ece:	50 e0       	ldi	r21, 0x00	; 0
     ed0:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__udivmodsi4>
     ed4:	69 01       	movw	r12, r18
     ed6:	7a 01       	movw	r14, r20
     ed8:	6a 83       	std	Y+2, r22	; 0x02
     eda:	ca 01       	movw	r24, r20
     edc:	b9 01       	movw	r22, r18
     ede:	6c 5f       	subi	r22, 0xFC	; 252
     ee0:	7f 4f       	sbci	r23, 0xFF	; 255
     ee2:	8f 4f       	sbci	r24, 0xFF	; 255
     ee4:	9f 4f       	sbci	r25, 0xFF	; 255
     ee6:	27 e0       	ldi	r18, 0x07	; 7
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	40 e0       	ldi	r20, 0x00	; 0
     eec:	50 e0       	ldi	r21, 0x00	; 0
     eee:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__udivmodsi4>
     ef2:	6f 5f       	subi	r22, 0xFF	; 255
     ef4:	6b 83       	std	Y+3, r22	; 0x03
     ef6:	81 2c       	mov	r8, r1
     ef8:	91 2c       	mov	r9, r1
     efa:	54 01       	movw	r10, r8
     efc:	40 e0       	ldi	r20, 0x00	; 0
     efe:	34 e6       	ldi	r19, 0x64	; 100
     f00:	63 2e       	mov	r6, r19
     f02:	71 2c       	mov	r7, r1
     f04:	00 e9       	ldi	r16, 0x90	; 144
     f06:	11 e0       	ldi	r17, 0x01	; 1
     f08:	24 2f       	mov	r18, r20
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	2e 54       	subi	r18, 0x4E	; 78
     f0e:	38 4f       	sbci	r19, 0xF8	; 248
     f10:	f9 01       	movw	r30, r18
     f12:	e3 70       	andi	r30, 0x03	; 3
     f14:	ff 27       	eor	r31, r31
     f16:	30 97       	sbiw	r30, 0x00	; 0
     f18:	89 f4       	brne	.+34     	; 0xf3c <_Z9breakTimemR12tmElements_t+0xb8>
     f1a:	c9 01       	movw	r24, r18
     f1c:	b3 01       	movw	r22, r6
     f1e:	0e 94 cd 0c 	call	0x199a	; 0x199a <__divmodhi4>
     f22:	89 2b       	or	r24, r25
     f24:	31 f4       	brne	.+12     	; 0xf32 <_Z9breakTimemR12tmElements_t+0xae>
     f26:	c9 01       	movw	r24, r18
     f28:	b8 01       	movw	r22, r16
     f2a:	0e 94 cd 0c 	call	0x199a	; 0x199a <__divmodhi4>
     f2e:	89 2b       	or	r24, r25
     f30:	29 f4       	brne	.+10     	; 0xf3c <_Z9breakTimemR12tmElements_t+0xb8>
     f32:	8e e6       	ldi	r24, 0x6E	; 110
     f34:	91 e0       	ldi	r25, 0x01	; 1
     f36:	a0 e0       	ldi	r26, 0x00	; 0
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	04 c0       	rjmp	.+8      	; 0xf44 <_Z9breakTimemR12tmElements_t+0xc0>
     f3c:	8d e6       	ldi	r24, 0x6D	; 109
     f3e:	91 e0       	ldi	r25, 0x01	; 1
     f40:	a0 e0       	ldi	r26, 0x00	; 0
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	88 0e       	add	r8, r24
     f46:	99 1e       	adc	r9, r25
     f48:	aa 1e       	adc	r10, r26
     f4a:	bb 1e       	adc	r11, r27
     f4c:	d5 01       	movw	r26, r10
     f4e:	c4 01       	movw	r24, r8
     f50:	aa 27       	eor	r26, r26
     f52:	bb 27       	eor	r27, r27
     f54:	c8 16       	cp	r12, r24
     f56:	d9 06       	cpc	r13, r25
     f58:	ea 06       	cpc	r14, r26
     f5a:	fb 06       	cpc	r15, r27
     f5c:	10 f0       	brcs	.+4      	; 0xf62 <_Z9breakTimemR12tmElements_t+0xde>
     f5e:	4f 5f       	subi	r20, 0xFF	; 255
     f60:	d3 cf       	rjmp	.-90     	; 0xf08 <_Z9breakTimemR12tmElements_t+0x84>
     f62:	4e 83       	std	Y+6, r20	; 0x06
     f64:	30 97       	sbiw	r30, 0x00	; 0
     f66:	99 f4       	brne	.+38     	; 0xf8e <_Z9breakTimemR12tmElements_t+0x10a>
     f68:	c9 01       	movw	r24, r18
     f6a:	64 e6       	ldi	r22, 0x64	; 100
     f6c:	70 e0       	ldi	r23, 0x00	; 0
     f6e:	0e 94 cd 0c 	call	0x199a	; 0x199a <__divmodhi4>
     f72:	89 2b       	or	r24, r25
     f74:	39 f4       	brne	.+14     	; 0xf84 <_Z9breakTimemR12tmElements_t+0x100>
     f76:	c9 01       	movw	r24, r18
     f78:	60 e9       	ldi	r22, 0x90	; 144
     f7a:	71 e0       	ldi	r23, 0x01	; 1
     f7c:	0e 94 cd 0c 	call	0x199a	; 0x199a <__divmodhi4>
     f80:	89 2b       	or	r24, r25
     f82:	29 f4       	brne	.+10     	; 0xf8e <_Z9breakTimemR12tmElements_t+0x10a>
     f84:	8e e6       	ldi	r24, 0x6E	; 110
     f86:	91 e0       	ldi	r25, 0x01	; 1
     f88:	a0 e0       	ldi	r26, 0x00	; 0
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	04 c0       	rjmp	.+8      	; 0xf96 <_Z9breakTimemR12tmElements_t+0x112>
     f8e:	8d e6       	ldi	r24, 0x6D	; 109
     f90:	91 e0       	ldi	r25, 0x01	; 1
     f92:	a0 e0       	ldi	r26, 0x00	; 0
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	88 1a       	sub	r8, r24
     f98:	99 0a       	sbc	r9, r25
     f9a:	aa 0a       	sbc	r10, r26
     f9c:	bb 0a       	sbc	r11, r27
     f9e:	c8 18       	sub	r12, r8
     fa0:	d9 08       	sbc	r13, r9
     fa2:	ea 08       	sbc	r14, r10
     fa4:	fb 08       	sbc	r15, r11
     fa6:	c9 01       	movw	r24, r18
     fa8:	64 e6       	ldi	r22, 0x64	; 100
     faa:	70 e0       	ldi	r23, 0x00	; 0
     fac:	0e 94 cd 0c 	call	0x199a	; 0x199a <__divmodhi4>
     fb0:	8c 01       	movw	r16, r24
     fb2:	c9 01       	movw	r24, r18
     fb4:	60 e9       	ldi	r22, 0x90	; 144
     fb6:	71 e0       	ldi	r23, 0x01	; 1
     fb8:	0e 94 cd 0c 	call	0x199a	; 0x199a <__divmodhi4>
     fbc:	a5 e5       	ldi	r26, 0x55	; 85
     fbe:	b1 e0       	ldi	r27, 0x01	; 1
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	21 30       	cpi	r18, 0x01	; 1
     fc4:	41 f4       	brne	.+16     	; 0xfd6 <_Z9breakTimemR12tmElements_t+0x152>
     fc6:	30 97       	sbiw	r30, 0x00	; 0
     fc8:	51 f4       	brne	.+20     	; 0xfde <_Z9breakTimemR12tmElements_t+0x15a>
     fca:	01 15       	cp	r16, r1
     fcc:	11 05       	cpc	r17, r1
     fce:	29 f4       	brne	.+10     	; 0xfda <_Z9breakTimemR12tmElements_t+0x156>
     fd0:	00 97       	sbiw	r24, 0x00	; 0
     fd2:	29 f4       	brne	.+10     	; 0xfde <_Z9breakTimemR12tmElements_t+0x15a>
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <_Z9breakTimemR12tmElements_t+0x156>
     fd6:	4c 91       	ld	r20, X
     fd8:	03 c0       	rjmp	.+6      	; 0xfe0 <_Z9breakTimemR12tmElements_t+0x15c>
     fda:	4d e1       	ldi	r20, 0x1D	; 29
     fdc:	01 c0       	rjmp	.+2      	; 0xfe0 <_Z9breakTimemR12tmElements_t+0x15c>
     fde:	4c e1       	ldi	r20, 0x1C	; 28
     fe0:	50 e0       	ldi	r21, 0x00	; 0
     fe2:	60 e0       	ldi	r22, 0x00	; 0
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	c4 16       	cp	r12, r20
     fe8:	d5 06       	cpc	r13, r21
     fea:	e6 06       	cpc	r14, r22
     fec:	f7 06       	cpc	r15, r23
     fee:	40 f0       	brcs	.+16     	; 0x1000 <_Z9breakTimemR12tmElements_t+0x17c>
     ff0:	c4 1a       	sub	r12, r20
     ff2:	d5 0a       	sbc	r13, r21
     ff4:	e6 0a       	sbc	r14, r22
     ff6:	f7 0a       	sbc	r15, r23
     ff8:	2f 5f       	subi	r18, 0xFF	; 255
     ffa:	11 96       	adiw	r26, 0x01	; 1
     ffc:	2c 30       	cpi	r18, 0x0C	; 12
     ffe:	09 f7       	brne	.-62     	; 0xfc2 <_Z9breakTimemR12tmElements_t+0x13e>
    1000:	2f 5f       	subi	r18, 0xFF	; 255
    1002:	2d 83       	std	Y+5, r18	; 0x05
    1004:	c3 94       	inc	r12
    1006:	cc 82       	std	Y+4, r12	; 0x04
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	1f 91       	pop	r17
    100e:	0f 91       	pop	r16
    1010:	ff 90       	pop	r15
    1012:	ef 90       	pop	r14
    1014:	df 90       	pop	r13
    1016:	cf 90       	pop	r12
    1018:	bf 90       	pop	r11
    101a:	af 90       	pop	r10
    101c:	9f 90       	pop	r9
    101e:	8f 90       	pop	r8
    1020:	7f 90       	pop	r7
    1022:	6f 90       	pop	r6
    1024:	08 95       	ret

00001026 <_Z12refreshCachem>:
    1026:	cf 92       	push	r12
    1028:	df 92       	push	r13
    102a:	ef 92       	push	r14
    102c:	ff 92       	push	r15
    102e:	c0 90 25 02 	lds	r12, 0x0225	; 0x800225 <_ZL9cacheTime>
    1032:	d0 90 26 02 	lds	r13, 0x0226	; 0x800226 <_ZL9cacheTime+0x1>
    1036:	e0 90 27 02 	lds	r14, 0x0227	; 0x800227 <_ZL9cacheTime+0x2>
    103a:	f0 90 28 02 	lds	r15, 0x0228	; 0x800228 <_ZL9cacheTime+0x3>
    103e:	6c 15       	cp	r22, r12
    1040:	7d 05       	cpc	r23, r13
    1042:	8e 05       	cpc	r24, r14
    1044:	9f 05       	cpc	r25, r15
    1046:	71 f0       	breq	.+28     	; 0x1064 <_Z12refreshCachem+0x3e>
    1048:	6b 01       	movw	r12, r22
    104a:	7c 01       	movw	r14, r24
    104c:	49 e2       	ldi	r20, 0x29	; 41
    104e:	52 e0       	ldi	r21, 0x02	; 2
    1050:	0e 94 42 07 	call	0xe84	; 0xe84 <_Z9breakTimemR12tmElements_t>
    1054:	c0 92 25 02 	sts	0x0225, r12	; 0x800225 <_ZL9cacheTime>
    1058:	d0 92 26 02 	sts	0x0226, r13	; 0x800226 <_ZL9cacheTime+0x1>
    105c:	e0 92 27 02 	sts	0x0227, r14	; 0x800227 <_ZL9cacheTime+0x2>
    1060:	f0 92 28 02 	sts	0x0228, r15	; 0x800228 <_ZL9cacheTime+0x3>
    1064:	ff 90       	pop	r15
    1066:	ef 90       	pop	r14
    1068:	df 90       	pop	r13
    106a:	cf 90       	pop	r12
    106c:	08 95       	ret

0000106e <_Z4hourm>:
    106e:	0e 94 13 08 	call	0x1026	; 0x1026 <_Z12refreshCachem>
    1072:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <_ZL2tm+0x2>
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	08 95       	ret

0000107a <_Z6minutem>:
    107a:	0e 94 13 08 	call	0x1026	; 0x1026 <_Z12refreshCachem>
    107e:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <_ZL2tm+0x1>
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	08 95       	ret

00001086 <_Z6secondm>:
    1086:	0e 94 13 08 	call	0x1026	; 0x1026 <_Z12refreshCachem>
    108a:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <_ZL2tm>
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	08 95       	ret

00001092 <_Z3daym>:
    1092:	0e 94 13 08 	call	0x1026	; 0x1026 <_Z12refreshCachem>
    1096:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <_ZL2tm+0x4>
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	08 95       	ret

0000109e <_Z5monthm>:
int month(){
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
  refreshCache(t);
    109e:	0e 94 13 08 	call	0x1026	; 0x1026 <_Z12refreshCachem>
  return tm.Month;
    10a2:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <_ZL2tm+0x5>
}
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	08 95       	ret

000010aa <_Z4yearm>:
int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
    10aa:	0e 94 13 08 	call	0x1026	; 0x1026 <_Z12refreshCachem>
  return tmYearToCalendar(tm.Year);
    10ae:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <_ZL2tm+0x6>
    10b2:	90 e0       	ldi	r25, 0x00	; 0
}
    10b4:	8e 54       	subi	r24, 0x4E	; 78
    10b6:	98 4f       	sbci	r25, 0xF8	; 248
    10b8:	08 95       	ret

000010ba <_Z8makeTimeR12tmElements_t>:
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
}

time_t makeTime(tmElements_t &tm){   
    10ba:	6f 92       	push	r6
    10bc:	7f 92       	push	r7
    10be:	8f 92       	push	r8
    10c0:	9f 92       	push	r9
    10c2:	af 92       	push	r10
    10c4:	bf 92       	push	r11
    10c6:	cf 92       	push	r12
    10c8:	df 92       	push	r13
    10ca:	ef 92       	push	r14
    10cc:	ff 92       	push	r15
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	ec 01       	movw	r28, r24
  
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
    10d8:	ee 81       	ldd	r30, Y+6	; 0x06
    10da:	ae 2f       	mov	r26, r30
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	20 e8       	ldi	r18, 0x80	; 128
    10e0:	33 e3       	ldi	r19, 0x33	; 51
    10e2:	41 ee       	ldi	r20, 0xE1	; 225
    10e4:	51 e0       	ldi	r21, 0x01	; 1
    10e6:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__muluhisi3>
    10ea:	4b 01       	movw	r8, r22
    10ec:	5c 01       	movw	r10, r24
  for (i = 0; i < tm.Year; i++) {
    10ee:	22 eb       	ldi	r18, 0xB2	; 178
    10f0:	37 e0       	ldi	r19, 0x07	; 7
    10f2:	fd 01       	movw	r30, r26
    if (LEAP_YEAR(i)) {
    10f4:	04 e6       	ldi	r16, 0x64	; 100
    10f6:	10 e0       	ldi	r17, 0x00	; 0
    10f8:	80 e9       	ldi	r24, 0x90	; 144
    10fa:	e8 2e       	mov	r14, r24
    10fc:	ff 24       	eor	r15, r15
    10fe:	f3 94       	inc	r15
    1100:	c9 01       	movw	r24, r18
    1102:	82 5b       	subi	r24, 0xB2	; 178
    1104:	97 40       	sbci	r25, 0x07	; 7
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    1106:	8e 17       	cp	r24, r30
    1108:	9f 07       	cpc	r25, r31
    110a:	dc f4       	brge	.+54     	; 0x1142 <_Z8makeTimeR12tmElements_t+0x88>
    if (LEAP_YEAR(i)) {
    110c:	c9 01       	movw	r24, r18
    110e:	83 70       	andi	r24, 0x03	; 3
    1110:	99 27       	eor	r25, r25
    1112:	89 2b       	or	r24, r25
    1114:	99 f4       	brne	.+38     	; 0x113c <_Z8makeTimeR12tmElements_t+0x82>
    1116:	c9 01       	movw	r24, r18
    1118:	b8 01       	movw	r22, r16
    111a:	0e 94 cd 0c 	call	0x199a	; 0x199a <__divmodhi4>
    111e:	89 2b       	or	r24, r25
    1120:	31 f4       	brne	.+12     	; 0x112e <_Z8makeTimeR12tmElements_t+0x74>
    1122:	c9 01       	movw	r24, r18
    1124:	b7 01       	movw	r22, r14
    1126:	0e 94 cd 0c 	call	0x199a	; 0x199a <__divmodhi4>
    112a:	89 2b       	or	r24, r25
    112c:	39 f4       	brne	.+14     	; 0x113c <_Z8makeTimeR12tmElements_t+0x82>
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    112e:	80 e8       	ldi	r24, 0x80	; 128
    1130:	88 0e       	add	r8, r24
    1132:	81 e5       	ldi	r24, 0x51	; 81
    1134:	98 1e       	adc	r9, r24
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	a8 1e       	adc	r10, r24
    113a:	b1 1c       	adc	r11, r1
    113c:	2f 5f       	subi	r18, 0xFF	; 255
    113e:	3f 4f       	sbci	r19, 0xFF	; 255
    1140:	df cf       	rjmp	.-66     	; 0x1100 <_Z8makeTimeR12tmElements_t+0x46>
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    1142:	6d 80       	ldd	r6, Y+5	; 0x05
    1144:	71 2c       	mov	r7, r1
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    1146:	ee 54       	subi	r30, 0x4E	; 78
    1148:	f8 4f       	sbci	r31, 0xF8	; 248
    114a:	cf 01       	movw	r24, r30
    114c:	64 e6       	ldi	r22, 0x64	; 100
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	0e 94 cd 0c 	call	0x199a	; 0x199a <__divmodhi4>
    1154:	7c 01       	movw	r14, r24
    1156:	cf 01       	movw	r24, r30
    1158:	60 e9       	ldi	r22, 0x90	; 144
    115a:	71 e0       	ldi	r23, 0x01	; 1
    115c:	0e 94 cd 0c 	call	0x199a	; 0x199a <__divmodhi4>
    1160:	6c 01       	movw	r12, r24
    1162:	01 e0       	ldi	r16, 0x01	; 1
    1164:	10 e0       	ldi	r17, 0x00	; 0
    1166:	e3 70       	andi	r30, 0x03	; 3
    1168:	ff 27       	eor	r31, r31
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    116a:	06 15       	cp	r16, r6
    116c:	17 05       	cpc	r17, r7
    116e:	2c f5       	brge	.+74     	; 0x11ba <_Z8makeTimeR12tmElements_t+0x100>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    1170:	02 30       	cpi	r16, 0x02	; 2
    1172:	11 05       	cpc	r17, r1
    1174:	81 f4       	brne	.+32     	; 0x1196 <_Z8makeTimeR12tmElements_t+0xdc>
    1176:	30 97       	sbiw	r30, 0x00	; 0
    1178:	71 f4       	brne	.+28     	; 0x1196 <_Z8makeTimeR12tmElements_t+0xdc>
    117a:	e1 14       	cp	r14, r1
    117c:	f1 04       	cpc	r15, r1
    117e:	19 f4       	brne	.+6      	; 0x1186 <_Z8makeTimeR12tmElements_t+0xcc>
    1180:	c1 14       	cp	r12, r1
    1182:	d1 04       	cpc	r13, r1
    1184:	41 f4       	brne	.+16     	; 0x1196 <_Z8makeTimeR12tmElements_t+0xdc>
      seconds += SECS_PER_DAY * 29;
    1186:	80 e8       	ldi	r24, 0x80	; 128
    1188:	88 0e       	add	r8, r24
    118a:	8b e3       	ldi	r24, 0x3B	; 59
    118c:	98 1e       	adc	r9, r24
    118e:	86 e2       	ldi	r24, 0x26	; 38
    1190:	a8 1e       	adc	r10, r24
    1192:	b1 1c       	adc	r11, r1
    1194:	0f c0       	rjmp	.+30     	; 0x11b4 <_Z8makeTimeR12tmElements_t+0xfa>
    1196:	d8 01       	movw	r26, r16
    1198:	ac 5a       	subi	r26, 0xAC	; 172
    119a:	be 4f       	sbci	r27, 0xFE	; 254
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    119c:	ac 91       	ld	r26, X
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	20 e8       	ldi	r18, 0x80	; 128
    11a2:	31 e5       	ldi	r19, 0x51	; 81
    11a4:	41 e0       	ldi	r20, 0x01	; 1
    11a6:	50 e0       	ldi	r21, 0x00	; 0
    11a8:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__muluhisi3>
    11ac:	86 0e       	add	r8, r22
    11ae:	97 1e       	adc	r9, r23
    11b0:	a8 1e       	adc	r10, r24
    11b2:	b9 1e       	adc	r11, r25
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    11b4:	0f 5f       	subi	r16, 0xFF	; 255
    11b6:	1f 4f       	sbci	r17, 0xFF	; 255
    11b8:	d8 cf       	rjmp	.-80     	; 0x116a <_Z8makeTimeR12tmElements_t+0xb0>
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    }
  }
  seconds+= (tm.Day-1) * SECS_PER_DAY;
  seconds+= tm.Hour * SECS_PER_HOUR;
  seconds+= tm.Minute * SECS_PER_MIN;
    11ba:	49 81       	ldd	r20, Y+1	; 0x01
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    }
  }
  seconds+= (tm.Day-1) * SECS_PER_DAY;
  seconds+= tm.Hour * SECS_PER_HOUR;
    11bc:	2a 81       	ldd	r18, Y+2	; 0x02
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	a0 e1       	ldi	r26, 0x10	; 16
    11c2:	be e0       	ldi	r27, 0x0E	; 14
    11c4:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__umulhisi3>
    11c8:	6b 01       	movw	r12, r22
    11ca:	7c 01       	movw	r14, r24
  seconds+= tm.Minute * SECS_PER_MIN;
    11cc:	24 2f       	mov	r18, r20
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	ac e3       	ldi	r26, 0x3C	; 60
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__umulhisi3>
    11d8:	dc 01       	movw	r26, r24
    11da:	cb 01       	movw	r24, r22
    11dc:	8c 0d       	add	r24, r12
    11de:	9d 1d       	adc	r25, r13
    11e0:	ae 1d       	adc	r26, r14
    11e2:	bf 1d       	adc	r27, r15
  seconds+= tm.Second;
    11e4:	28 81       	ld	r18, Y
    11e6:	6c 01       	movw	r12, r24
    11e8:	7d 01       	movw	r14, r26
    11ea:	c2 0e       	add	r12, r18
    11ec:	d1 1c       	adc	r13, r1
    11ee:	e1 1c       	adc	r14, r1
    11f0:	f1 1c       	adc	r15, r1
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    }
  }
  seconds+= (tm.Day-1) * SECS_PER_DAY;
    11f2:	ac 81       	ldd	r26, Y+4	; 0x04
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	11 97       	sbiw	r26, 0x01	; 1
    11f8:	20 e8       	ldi	r18, 0x80	; 128
    11fa:	31 e5       	ldi	r19, 0x51	; 81
    11fc:	41 e0       	ldi	r20, 0x01	; 1
    11fe:	50 e0       	ldi	r21, 0x00	; 0
    1200:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__mulshisi3>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	8c 0d       	add	r24, r12
    120a:	9d 1d       	adc	r25, r13
    120c:	ae 1d       	adc	r26, r14
    120e:	bf 1d       	adc	r27, r15
  seconds+= tm.Hour * SECS_PER_HOUR;
  seconds+= tm.Minute * SECS_PER_MIN;
  seconds+= tm.Second;
    1210:	bc 01       	movw	r22, r24
    1212:	cd 01       	movw	r24, r26
    1214:	68 0d       	add	r22, r8
    1216:	79 1d       	adc	r23, r9
    1218:	8a 1d       	adc	r24, r10
    121a:	9b 1d       	adc	r25, r11
  return (time_t)seconds; 
}
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	1f 91       	pop	r17
    1222:	0f 91       	pop	r16
    1224:	ff 90       	pop	r15
    1226:	ef 90       	pop	r14
    1228:	df 90       	pop	r13
    122a:	cf 90       	pop	r12
    122c:	bf 90       	pop	r11
    122e:	af 90       	pop	r10
    1230:	9f 90       	pop	r9
    1232:	8f 90       	pop	r8
    1234:	7f 90       	pop	r7
    1236:	6f 90       	pop	r6
    1238:	08 95       	ret

0000123a <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    123a:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <_ZN7TwoWire14rxBufferLengthE>
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	20 91 61 02 	lds	r18, 0x0261	; 0x800261 <_ZN7TwoWire13rxBufferIndexE>
    1244:	82 1b       	sub	r24, r18
    1246:	91 09       	sbc	r25, r1
    1248:	08 95       	ret

0000124a <_ZN7TwoWire4readEv>:
    124a:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <_ZN7TwoWire13rxBufferIndexE>
    124e:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <_ZN7TwoWire14rxBufferLengthE>
    1252:	98 17       	cp	r25, r24
    1254:	50 f4       	brcc	.+20     	; 0x126a <_ZN7TwoWire4readEv+0x20>
    1256:	e9 2f       	mov	r30, r25
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	ee 59       	subi	r30, 0x9E	; 158
    125c:	fd 4f       	sbci	r31, 0xFD	; 253
    125e:	20 81       	ld	r18, Z
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	9f 5f       	subi	r25, 0xFF	; 255
    1264:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <_ZN7TwoWire13rxBufferIndexE>
    1268:	02 c0       	rjmp	.+4      	; 0x126e <_ZN7TwoWire4readEv+0x24>
    126a:	2f ef       	ldi	r18, 0xFF	; 255
    126c:	3f ef       	ldi	r19, 0xFF	; 255
    126e:	c9 01       	movw	r24, r18
    1270:	08 95       	ret

00001272 <_ZN7TwoWire4peekEv>:
    1272:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <_ZN7TwoWire13rxBufferIndexE>
    1276:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <_ZN7TwoWire14rxBufferLengthE>
    127a:	e8 17       	cp	r30, r24
    127c:	30 f4       	brcc	.+12     	; 0x128a <_ZN7TwoWire4peekEv+0x18>
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	ee 59       	subi	r30, 0x9E	; 158
    1282:	fd 4f       	sbci	r31, 0xFD	; 253
    1284:	80 81       	ld	r24, Z
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	08 95       	ret
    128a:	8f ef       	ldi	r24, 0xFF	; 255
    128c:	9f ef       	ldi	r25, 0xFF	; 255
    128e:	08 95       	ret

00001290 <_ZN7TwoWire5flushEv>:
    1290:	08 95       	ret

00001292 <_ZN7TwoWire5writeEPKhj>:
    1292:	cf 92       	push	r12
    1294:	df 92       	push	r13
    1296:	ef 92       	push	r14
    1298:	ff 92       	push	r15
    129a:	0f 93       	push	r16
    129c:	1f 93       	push	r17
    129e:	cf 93       	push	r28
    12a0:	df 93       	push	r29
    12a2:	7c 01       	movw	r14, r24
    12a4:	26 2f       	mov	r18, r22
    12a6:	97 2f       	mov	r25, r23
    12a8:	8a 01       	movw	r16, r20
    12aa:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <_ZN7TwoWire12transmittingE>
    12ae:	88 23       	and	r24, r24
    12b0:	91 f0       	breq	.+36     	; 0x12d6 <_ZN7TwoWire5writeEPKhj+0x44>
    12b2:	c6 2f       	mov	r28, r22
    12b4:	d7 2f       	mov	r29, r23
    12b6:	6e 01       	movw	r12, r28
    12b8:	c4 0e       	add	r12, r20
    12ba:	d5 1e       	adc	r13, r21
    12bc:	cc 15       	cp	r28, r12
    12be:	dd 05       	cpc	r29, r13
    12c0:	71 f0       	breq	.+28     	; 0x12de <_ZN7TwoWire5writeEPKhj+0x4c>
    12c2:	69 91       	ld	r22, Y+
    12c4:	d7 01       	movw	r26, r14
    12c6:	ed 91       	ld	r30, X+
    12c8:	fc 91       	ld	r31, X
    12ca:	01 90       	ld	r0, Z+
    12cc:	f0 81       	ld	r31, Z
    12ce:	e0 2d       	mov	r30, r0
    12d0:	c7 01       	movw	r24, r14
    12d2:	09 95       	icall
    12d4:	f3 cf       	rjmp	.-26     	; 0x12bc <_ZN7TwoWire5writeEPKhj+0x2a>
    12d6:	64 2f       	mov	r22, r20
    12d8:	82 2f       	mov	r24, r18
    12da:	0e 94 0f 0b 	call	0x161e	; 0x161e <twi_transmit>
    12de:	c8 01       	movw	r24, r16
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	1f 91       	pop	r17
    12e6:	0f 91       	pop	r16
    12e8:	ff 90       	pop	r15
    12ea:	ef 90       	pop	r14
    12ec:	df 90       	pop	r13
    12ee:	cf 90       	pop	r12
    12f0:	08 95       	ret

000012f2 <_ZN7TwoWire5writeEh>:
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	1f 92       	push	r1
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	69 83       	std	Y+1, r22	; 0x01
    12fe:	20 91 3c 02 	lds	r18, 0x023C	; 0x80023c <_ZN7TwoWire12transmittingE>
    1302:	22 23       	and	r18, r18
    1304:	d1 f0       	breq	.+52     	; 0x133a <_ZN7TwoWire5writeEh+0x48>
    1306:	20 91 3d 02 	lds	r18, 0x023D	; 0x80023d <_ZN7TwoWire14txBufferLengthE>
    130a:	20 32       	cpi	r18, 0x20	; 32
    130c:	40 f0       	brcs	.+16     	; 0x131e <_ZN7TwoWire5writeEh+0x2c>
    130e:	21 e0       	ldi	r18, 0x01	; 1
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	fc 01       	movw	r30, r24
    1314:	33 83       	std	Z+3, r19	; 0x03
    1316:	22 83       	std	Z+2, r18	; 0x02
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	15 c0       	rjmp	.+42     	; 0x1348 <_ZN7TwoWire5writeEh+0x56>
    131e:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <_ZN7TwoWire13txBufferIndexE>
    1322:	e8 2f       	mov	r30, r24
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	e1 5c       	subi	r30, 0xC1	; 193
    1328:	fd 4f       	sbci	r31, 0xFD	; 253
    132a:	99 81       	ldd	r25, Y+1	; 0x01
    132c:	90 83       	st	Z, r25
    132e:	8f 5f       	subi	r24, 0xFF	; 255
    1330:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <_ZN7TwoWire13txBufferIndexE>
    1334:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <_ZN7TwoWire14txBufferLengthE>
    1338:	05 c0       	rjmp	.+10     	; 0x1344 <_ZN7TwoWire5writeEh+0x52>
    133a:	61 e0       	ldi	r22, 0x01	; 1
    133c:	ce 01       	movw	r24, r28
    133e:	01 96       	adiw	r24, 0x01	; 1
    1340:	0e 94 0f 0b 	call	0x161e	; 0x161e <twi_transmit>
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	0f 90       	pop	r0
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	08 95       	ret

00001350 <_ZN7TwoWireC1Ev>:
    1350:	fc 01       	movw	r30, r24
    1352:	13 82       	std	Z+3, r1	; 0x03
    1354:	12 82       	std	Z+2, r1	; 0x02
    1356:	88 ee       	ldi	r24, 0xE8	; 232
    1358:	93 e0       	ldi	r25, 0x03	; 3
    135a:	a0 e0       	ldi	r26, 0x00	; 0
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	84 83       	std	Z+4, r24	; 0x04
    1360:	95 83       	std	Z+5, r25	; 0x05
    1362:	a6 83       	std	Z+6, r26	; 0x06
    1364:	b7 83       	std	Z+7, r27	; 0x07
    1366:	85 e6       	ldi	r24, 0x65	; 101
    1368:	91 e0       	ldi	r25, 0x01	; 1
    136a:	91 83       	std	Z+1, r25	; 0x01
    136c:	80 83       	st	Z, r24
    136e:	08 95       	ret

00001370 <_ZN7TwoWire5beginEv>:
    1370:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <_ZN7TwoWire13rxBufferIndexE>
    1374:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <_ZN7TwoWire14rxBufferLengthE>
    1378:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <_ZN7TwoWire13txBufferIndexE>
    137c:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <_ZN7TwoWire14txBufferLengthE>
    1380:	0c 94 53 0a 	jmp	0x14a6	; 0x14a6 <twi_init>

00001384 <_ZN7TwoWire17beginTransmissionEh>:
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <_ZN7TwoWire12transmittingE>
    138a:	60 93 5f 02 	sts	0x025F, r22	; 0x80025f <_ZN7TwoWire9txAddressE>
    138e:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <_ZN7TwoWire13txBufferIndexE>
    1392:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <_ZN7TwoWire14txBufferLengthE>
    1396:	08 95       	ret

00001398 <_ZN7TwoWire17beginTransmissionEi>:
    1398:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <_ZN7TwoWire17beginTransmissionEh>

0000139c <_ZN7TwoWire15endTransmissionEh>:
    139c:	0f 93       	push	r16
    139e:	06 2f       	mov	r16, r22
    13a0:	21 e0       	ldi	r18, 0x01	; 1
    13a2:	40 91 3d 02 	lds	r20, 0x023D	; 0x80023d <_ZN7TwoWire14txBufferLengthE>
    13a6:	6f e3       	ldi	r22, 0x3F	; 63
    13a8:	72 e0       	ldi	r23, 0x02	; 2
    13aa:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <_ZN7TwoWire9txAddressE>
    13ae:	0e 94 b9 0a 	call	0x1572	; 0x1572 <twi_writeTo>
    13b2:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <_ZN7TwoWire13txBufferIndexE>
    13b6:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <_ZN7TwoWire14txBufferLengthE>
    13ba:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <_ZN7TwoWire12transmittingE>
    13be:	0f 91       	pop	r16
    13c0:	08 95       	ret

000013c2 <_ZN7TwoWire11requestFromEhhmhh>:
    13c2:	4f 92       	push	r4
    13c4:	5f 92       	push	r5
    13c6:	6f 92       	push	r6
    13c8:	7f 92       	push	r7
    13ca:	af 92       	push	r10
    13cc:	bf 92       	push	r11
    13ce:	cf 92       	push	r12
    13d0:	ef 92       	push	r14
    13d2:	ff 92       	push	r15
    13d4:	0f 93       	push	r16
    13d6:	1f 93       	push	r17
    13d8:	cf 93       	push	r28
    13da:	df 93       	push	r29
    13dc:	5c 01       	movw	r10, r24
    13de:	f6 2e       	mov	r15, r22
    13e0:	d4 2f       	mov	r29, r20
    13e2:	28 01       	movw	r4, r16
    13e4:	39 01       	movw	r6, r18
    13e6:	ee 20       	and	r14, r14
    13e8:	21 f1       	breq	.+72     	; 0x1432 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    13ea:	0e 94 c2 09 	call	0x1384	; 0x1384 <_ZN7TwoWire17beginTransmissionEh>
    13ee:	ce 2d       	mov	r28, r14
    13f0:	c4 30       	cpi	r28, 0x04	; 4
    13f2:	08 f0       	brcs	.+2      	; 0x13f6 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    13f4:	c3 e0       	ldi	r28, 0x03	; 3
    13f6:	c1 50       	subi	r28, 0x01	; 1
    13f8:	c0 f0       	brcs	.+48     	; 0x142a <_ZN7TwoWire11requestFromEhhmhh+0x68>
    13fa:	d5 01       	movw	r26, r10
    13fc:	ed 91       	ld	r30, X+
    13fe:	fc 91       	ld	r31, X
    1400:	b8 e0       	ldi	r27, 0x08	; 8
    1402:	cb 9f       	mul	r28, r27
    1404:	c0 01       	movw	r24, r0
    1406:	11 24       	eor	r1, r1
    1408:	a3 01       	movw	r20, r6
    140a:	92 01       	movw	r18, r4
    140c:	04 c0       	rjmp	.+8      	; 0x1416 <_ZN7TwoWire11requestFromEhhmhh+0x54>
    140e:	56 95       	lsr	r21
    1410:	47 95       	ror	r20
    1412:	37 95       	ror	r19
    1414:	27 95       	ror	r18
    1416:	8a 95       	dec	r24
    1418:	d2 f7       	brpl	.-12     	; 0x140e <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    141a:	ca 01       	movw	r24, r20
    141c:	b9 01       	movw	r22, r18
    141e:	01 90       	ld	r0, Z+
    1420:	f0 81       	ld	r31, Z
    1422:	e0 2d       	mov	r30, r0
    1424:	c5 01       	movw	r24, r10
    1426:	09 95       	icall
    1428:	e6 cf       	rjmp	.-52     	; 0x13f6 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    142a:	60 e0       	ldi	r22, 0x00	; 0
    142c:	c5 01       	movw	r24, r10
    142e:	0e 94 ce 09 	call	0x139c	; 0x139c <_ZN7TwoWire15endTransmissionEh>
    1432:	4d 2f       	mov	r20, r29
    1434:	d1 32       	cpi	r29, 0x21	; 33
    1436:	08 f0       	brcs	.+2      	; 0x143a <_ZN7TwoWire11requestFromEhhmhh+0x78>
    1438:	40 e2       	ldi	r20, 0x20	; 32
    143a:	2c 2d       	mov	r18, r12
    143c:	62 e6       	ldi	r22, 0x62	; 98
    143e:	72 e0       	ldi	r23, 0x02	; 2
    1440:	8f 2d       	mov	r24, r15
    1442:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <twi_readFrom>
    1446:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <_ZN7TwoWire13rxBufferIndexE>
    144a:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <_ZN7TwoWire14rxBufferLengthE>
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	1f 91       	pop	r17
    1454:	0f 91       	pop	r16
    1456:	ff 90       	pop	r15
    1458:	ef 90       	pop	r14
    145a:	cf 90       	pop	r12
    145c:	bf 90       	pop	r11
    145e:	af 90       	pop	r10
    1460:	7f 90       	pop	r7
    1462:	6f 90       	pop	r6
    1464:	5f 90       	pop	r5
    1466:	4f 90       	pop	r4
    1468:	08 95       	ret

0000146a <_ZN7TwoWire11requestFromEhhh>:
    146a:	cf 92       	push	r12
    146c:	ef 92       	push	r14
    146e:	0f 93       	push	r16
    1470:	1f 93       	push	r17
    1472:	c2 2e       	mov	r12, r18
    1474:	e1 2c       	mov	r14, r1
    1476:	00 e0       	ldi	r16, 0x00	; 0
    1478:	10 e0       	ldi	r17, 0x00	; 0
    147a:	98 01       	movw	r18, r16
    147c:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <_ZN7TwoWire11requestFromEhhmhh>
    1480:	1f 91       	pop	r17
    1482:	0f 91       	pop	r16
    1484:	ef 90       	pop	r14
    1486:	cf 90       	pop	r12
    1488:	08 95       	ret

0000148a <_ZN7TwoWire11requestFromEhh>:
    148a:	21 e0       	ldi	r18, 0x01	; 1
    148c:	0c 94 35 0a 	jmp	0x146a	; 0x146a <_ZN7TwoWire11requestFromEhhh>

00001490 <_ZN7TwoWire11requestFromEii>:
    1490:	21 e0       	ldi	r18, 0x01	; 1
    1492:	0c 94 35 0a 	jmp	0x146a	; 0x146a <_ZN7TwoWire11requestFromEhhh>

00001496 <_ZN7TwoWire15endTransmissionEv>:
    1496:	61 e0       	ldi	r22, 0x01	; 1
    1498:	0c 94 ce 09 	jmp	0x139c	; 0x139c <_ZN7TwoWire15endTransmissionEh>

0000149c <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    149c:	80 e3       	ldi	r24, 0x30	; 48
    149e:	92 e0       	ldi	r25, 0x02	; 2
    14a0:	0c 94 a8 09 	jmp	0x1350	; 0x1350 <_ZN7TwoWireC1Ev>

000014a4 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    14a4:	08 95       	ret

000014a6 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    14a6:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <twi_state>
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <twi_sendStop>
    14b0:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <twi_inRepStart>
    14b4:	61 e0       	ldi	r22, 0x01	; 1
    14b6:	82 e1       	ldi	r24, 0x12	; 18
    14b8:	0e 94 9d 0c 	call	0x193a	; 0x193a <digitalWrite>
    14bc:	61 e0       	ldi	r22, 0x01	; 1
    14be:	83 e1       	ldi	r24, 0x13	; 19
    14c0:	0e 94 9d 0c 	call	0x193a	; 0x193a <digitalWrite>
    14c4:	e9 eb       	ldi	r30, 0xB9	; 185
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	8e 7f       	andi	r24, 0xFE	; 254
    14cc:	80 83       	st	Z, r24
    14ce:	80 81       	ld	r24, Z
    14d0:	8d 7f       	andi	r24, 0xFD	; 253
    14d2:	80 83       	st	Z, r24
    14d4:	88 e4       	ldi	r24, 0x48	; 72
    14d6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    14da:	85 e4       	ldi	r24, 0x45	; 69
    14dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    14e0:	08 95       	ret

000014e2 <twi_readFrom>:
    14e2:	41 32       	cpi	r20, 0x21	; 33
    14e4:	08 f0       	brcs	.+2      	; 0x14e8 <twi_readFrom+0x6>
    14e6:	43 c0       	rjmp	.+134    	; 0x156e <twi_readFrom+0x8c>
    14e8:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <twi_state>
    14ec:	91 11       	cpse	r25, r1
    14ee:	fc cf       	rjmp	.-8      	; 0x14e8 <twi_readFrom+0x6>
    14f0:	91 e0       	ldi	r25, 0x01	; 1
    14f2:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <twi_state>
    14f6:	20 93 ed 02 	sts	0x02ED, r18	; 0x8002ed <twi_sendStop>
    14fa:	2f ef       	ldi	r18, 0xFF	; 255
    14fc:	20 93 82 02 	sts	0x0282, r18	; 0x800282 <twi_error>
    1500:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <twi_masterBufferIndex>
    1504:	24 0f       	add	r18, r20
    1506:	20 93 c6 02 	sts	0x02C6, r18	; 0x8002c6 <twi_masterBufferLength>
    150a:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <twi_slarw>
    150e:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <twi_slarw>
    1512:	88 0f       	add	r24, r24
    1514:	89 2b       	or	r24, r25
    1516:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <twi_slarw>
    151a:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <twi_inRepStart>
    151e:	81 30       	cpi	r24, 0x01	; 1
    1520:	61 f4       	brne	.+24     	; 0x153a <twi_readFrom+0x58>
    1522:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <twi_inRepStart>
    1526:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <twi_slarw>
    152a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    152e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1532:	83 fd       	sbrc	r24, 3
    1534:	f8 cf       	rjmp	.-16     	; 0x1526 <twi_readFrom+0x44>
    1536:	85 ec       	ldi	r24, 0xC5	; 197
    1538:	01 c0       	rjmp	.+2      	; 0x153c <twi_readFrom+0x5a>
    153a:	85 ee       	ldi	r24, 0xE5	; 229
    153c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1540:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <twi_state>
    1544:	81 30       	cpi	r24, 0x01	; 1
    1546:	e1 f3       	breq	.-8      	; 0x1540 <twi_readFrom+0x5e>
    1548:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <twi_masterBufferIndex>
    154c:	84 17       	cp	r24, r20
    154e:	10 f4       	brcc	.+4      	; 0x1554 <twi_readFrom+0x72>
    1550:	40 91 c7 02 	lds	r20, 0x02C7	; 0x8002c7 <twi_masterBufferIndex>
    1554:	28 ec       	ldi	r18, 0xC8	; 200
    1556:	32 e0       	ldi	r19, 0x02	; 2
    1558:	fb 01       	movw	r30, r22
    155a:	d9 01       	movw	r26, r18
    155c:	8a 2f       	mov	r24, r26
    155e:	82 1b       	sub	r24, r18
    1560:	84 17       	cp	r24, r20
    1562:	18 f4       	brcc	.+6      	; 0x156a <twi_readFrom+0x88>
    1564:	8d 91       	ld	r24, X+
    1566:	81 93       	st	Z+, r24
    1568:	f9 cf       	rjmp	.-14     	; 0x155c <twi_readFrom+0x7a>
    156a:	84 2f       	mov	r24, r20
    156c:	08 95       	ret
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	08 95       	ret

00001572 <twi_writeTo>:
    1572:	0f 93       	push	r16
    1574:	41 32       	cpi	r20, 0x21	; 33
    1576:	08 f0       	brcs	.+2      	; 0x157a <twi_writeTo+0x8>
    1578:	4a c0       	rjmp	.+148    	; 0x160e <twi_writeTo+0x9c>
    157a:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <twi_state>
    157e:	91 11       	cpse	r25, r1
    1580:	fc cf       	rjmp	.-8      	; 0x157a <twi_writeTo+0x8>
    1582:	32 e0       	ldi	r19, 0x02	; 2
    1584:	30 93 ef 02 	sts	0x02EF, r19	; 0x8002ef <twi_state>
    1588:	00 93 ed 02 	sts	0x02ED, r16	; 0x8002ed <twi_sendStop>
    158c:	3f ef       	ldi	r19, 0xFF	; 255
    158e:	30 93 82 02 	sts	0x0282, r19	; 0x800282 <twi_error>
    1592:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <twi_masterBufferIndex>
    1596:	40 93 c6 02 	sts	0x02C6, r20	; 0x8002c6 <twi_masterBufferLength>
    159a:	fb 01       	movw	r30, r22
    159c:	68 ec       	ldi	r22, 0xC8	; 200
    159e:	72 e0       	ldi	r23, 0x02	; 2
    15a0:	db 01       	movw	r26, r22
    15a2:	3a 2f       	mov	r19, r26
    15a4:	36 1b       	sub	r19, r22
    15a6:	34 17       	cp	r19, r20
    15a8:	18 f4       	brcc	.+6      	; 0x15b0 <twi_writeTo+0x3e>
    15aa:	31 91       	ld	r19, Z+
    15ac:	3d 93       	st	X+, r19
    15ae:	f9 cf       	rjmp	.-14     	; 0x15a2 <twi_writeTo+0x30>
    15b0:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <twi_slarw>
    15b4:	30 91 ee 02 	lds	r19, 0x02EE	; 0x8002ee <twi_slarw>
    15b8:	88 0f       	add	r24, r24
    15ba:	83 2b       	or	r24, r19
    15bc:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <twi_slarw>
    15c0:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <twi_inRepStart>
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	61 f4       	brne	.+24     	; 0x15e0 <twi_writeTo+0x6e>
    15c8:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <twi_inRepStart>
    15cc:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <twi_slarw>
    15d0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    15d4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    15d8:	83 fd       	sbrc	r24, 3
    15da:	f8 cf       	rjmp	.-16     	; 0x15cc <twi_writeTo+0x5a>
    15dc:	85 ec       	ldi	r24, 0xC5	; 197
    15de:	01 c0       	rjmp	.+2      	; 0x15e2 <twi_writeTo+0x70>
    15e0:	85 ee       	ldi	r24, 0xE5	; 229
    15e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    15e6:	22 23       	and	r18, r18
    15e8:	21 f0       	breq	.+8      	; 0x15f2 <twi_writeTo+0x80>
    15ea:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <twi_state>
    15ee:	82 30       	cpi	r24, 0x02	; 2
    15f0:	d1 f3       	breq	.-12     	; 0x15e6 <twi_writeTo+0x74>
    15f2:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <twi_error>
    15f6:	8f 3f       	cpi	r24, 0xFF	; 255
    15f8:	79 f0       	breq	.+30     	; 0x1618 <twi_writeTo+0xa6>
    15fa:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <twi_error>
    15fe:	80 32       	cpi	r24, 0x20	; 32
    1600:	41 f0       	breq	.+16     	; 0x1612 <twi_writeTo+0xa0>
    1602:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <twi_error>
    1606:	80 33       	cpi	r24, 0x30	; 48
    1608:	31 f0       	breq	.+12     	; 0x1616 <twi_writeTo+0xa4>
    160a:	94 e0       	ldi	r25, 0x04	; 4
    160c:	05 c0       	rjmp	.+10     	; 0x1618 <twi_writeTo+0xa6>
    160e:	91 e0       	ldi	r25, 0x01	; 1
    1610:	03 c0       	rjmp	.+6      	; 0x1618 <twi_writeTo+0xa6>
    1612:	92 e0       	ldi	r25, 0x02	; 2
    1614:	01 c0       	rjmp	.+2      	; 0x1618 <twi_writeTo+0xa6>
    1616:	93 e0       	ldi	r25, 0x03	; 3
    1618:	89 2f       	mov	r24, r25
    161a:	0f 91       	pop	r16
    161c:	08 95       	ret

0000161e <twi_transmit>:
    161e:	40 91 a4 02 	lds	r20, 0x02A4	; 0x8002a4 <twi_txBufferLength>
    1622:	26 2f       	mov	r18, r22
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	24 0f       	add	r18, r20
    1628:	31 1d       	adc	r19, r1
    162a:	21 32       	cpi	r18, 0x21	; 33
    162c:	31 05       	cpc	r19, r1
    162e:	dc f4       	brge	.+54     	; 0x1666 <twi_transmit+0x48>
    1630:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <twi_state>
    1634:	24 30       	cpi	r18, 0x04	; 4
    1636:	c9 f4       	brne	.+50     	; 0x166a <twi_transmit+0x4c>
    1638:	fc 01       	movw	r30, r24
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	86 17       	cp	r24, r22
    1640:	58 f4       	brcc	.+22     	; 0x1658 <twi_transmit+0x3a>
    1642:	30 91 a4 02 	lds	r19, 0x02A4	; 0x8002a4 <twi_txBufferLength>
    1646:	21 91       	ld	r18, Z+
    1648:	dc 01       	movw	r26, r24
    164a:	aa 55       	subi	r26, 0x5A	; 90
    164c:	bd 4f       	sbci	r27, 0xFD	; 253
    164e:	a3 0f       	add	r26, r19
    1650:	b1 1d       	adc	r27, r1
    1652:	2c 93       	st	X, r18
    1654:	01 96       	adiw	r24, 0x01	; 1
    1656:	f3 cf       	rjmp	.-26     	; 0x163e <twi_transmit+0x20>
    1658:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <twi_txBufferLength>
    165c:	68 0f       	add	r22, r24
    165e:	60 93 a4 02 	sts	0x02A4, r22	; 0x8002a4 <twi_txBufferLength>
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	08 95       	ret
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	08 95       	ret
    166a:	82 e0       	ldi	r24, 0x02	; 2
    166c:	08 95       	ret

0000166e <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    166e:	85 ed       	ldi	r24, 0xD5	; 213
    1670:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1674:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1678:	84 fd       	sbrc	r24, 4
    167a:	fc cf       	rjmp	.-8      	; 0x1674 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    167c:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <twi_state>
    1680:	08 95       	ret

00001682 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1682:	85 ec       	ldi	r24, 0xC5	; 197
    1684:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    1688:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <twi_state>
    168c:	08 95       	ret

0000168e <__vector_24>:
}

ISR(TWI_vect)
{
    168e:	1f 92       	push	r1
    1690:	0f 92       	push	r0
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	0f 92       	push	r0
    1696:	11 24       	eor	r1, r1
    1698:	2f 93       	push	r18
    169a:	3f 93       	push	r19
    169c:	4f 93       	push	r20
    169e:	5f 93       	push	r21
    16a0:	6f 93       	push	r22
    16a2:	7f 93       	push	r23
    16a4:	8f 93       	push	r24
    16a6:	9f 93       	push	r25
    16a8:	af 93       	push	r26
    16aa:	bf 93       	push	r27
    16ac:	ef 93       	push	r30
    16ae:	ff 93       	push	r31
  switch(TW_STATUS){
    16b0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    16b4:	88 7f       	andi	r24, 0xF8	; 248
    16b6:	80 36       	cpi	r24, 0x60	; 96
    16b8:	09 f4       	brne	.+2      	; 0x16bc <__vector_24+0x2e>
    16ba:	9e c0       	rjmp	.+316    	; 0x17f8 <__vector_24+0x16a>
    16bc:	78 f5       	brcc	.+94     	; 0x171c <__vector_24+0x8e>
    16be:	88 32       	cpi	r24, 0x28	; 40
    16c0:	09 f4       	brne	.+2      	; 0x16c4 <__vector_24+0x36>
    16c2:	5d c0       	rjmp	.+186    	; 0x177e <__vector_24+0xf0>
    16c4:	90 f4       	brcc	.+36     	; 0x16ea <__vector_24+0x5c>
    16c6:	80 31       	cpi	r24, 0x10	; 16
    16c8:	09 f4       	brne	.+2      	; 0x16cc <__vector_24+0x3e>
    16ca:	56 c0       	rjmp	.+172    	; 0x1778 <__vector_24+0xea>
    16cc:	38 f4       	brcc	.+14     	; 0x16dc <__vector_24+0x4e>
    16ce:	88 23       	and	r24, r24
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <__vector_24+0x46>
    16d2:	f5 c0       	rjmp	.+490    	; 0x18be <__vector_24+0x230>
    16d4:	88 30       	cpi	r24, 0x08	; 8
    16d6:	09 f4       	brne	.+2      	; 0x16da <__vector_24+0x4c>
    16d8:	4f c0       	rjmp	.+158    	; 0x1778 <__vector_24+0xea>
    16da:	f5 c0       	rjmp	.+490    	; 0x18c6 <__vector_24+0x238>
    16dc:	88 31       	cpi	r24, 0x18	; 24
    16de:	09 f4       	brne	.+2      	; 0x16e2 <__vector_24+0x54>
    16e0:	4e c0       	rjmp	.+156    	; 0x177e <__vector_24+0xf0>
    16e2:	80 32       	cpi	r24, 0x20	; 32
    16e4:	09 f4       	brne	.+2      	; 0x16e8 <__vector_24+0x5a>
    16e6:	5f c0       	rjmp	.+190    	; 0x17a6 <__vector_24+0x118>
    16e8:	ee c0       	rjmp	.+476    	; 0x18c6 <__vector_24+0x238>
    16ea:	80 34       	cpi	r24, 0x40	; 64
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <__vector_24+0x62>
    16ee:	6a c0       	rjmp	.+212    	; 0x17c4 <__vector_24+0x136>
    16f0:	58 f4       	brcc	.+22     	; 0x1708 <__vector_24+0x7a>
    16f2:	80 33       	cpi	r24, 0x30	; 48
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <__vector_24+0x6a>
    16f6:	57 c0       	rjmp	.+174    	; 0x17a6 <__vector_24+0x118>
    16f8:	88 33       	cpi	r24, 0x38	; 56
    16fa:	09 f0       	breq	.+2      	; 0x16fe <__vector_24+0x70>
    16fc:	e4 c0       	rjmp	.+456    	; 0x18c6 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    16fe:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <twi_error>
      twi_releaseBus();
    1702:	0e 94 41 0b 	call	0x1682	; 0x1682 <twi_releaseBus>
      break;
    1706:	df c0       	rjmp	.+446    	; 0x18c6 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1708:	80 35       	cpi	r24, 0x50	; 80
    170a:	09 f4       	brne	.+2      	; 0x170e <__vector_24+0x80>
    170c:	4f c0       	rjmp	.+158    	; 0x17ac <__vector_24+0x11e>
    170e:	88 35       	cpi	r24, 0x58	; 88
    1710:	09 f4       	brne	.+2      	; 0x1714 <__vector_24+0x86>
    1712:	5d c0       	rjmp	.+186    	; 0x17ce <__vector_24+0x140>
    1714:	88 34       	cpi	r24, 0x48	; 72
    1716:	09 f0       	breq	.+2      	; 0x171a <__vector_24+0x8c>
    1718:	d6 c0       	rjmp	.+428    	; 0x18c6 <__vector_24+0x238>
    171a:	d3 c0       	rjmp	.+422    	; 0x18c2 <__vector_24+0x234>
    171c:	88 39       	cpi	r24, 0x98	; 152
    171e:	09 f4       	brne	.+2      	; 0x1722 <__vector_24+0x94>
    1720:	c4 c0       	rjmp	.+392    	; 0x18aa <__vector_24+0x21c>
    1722:	a8 f4       	brcc	.+42     	; 0x174e <__vector_24+0xc0>
    1724:	88 37       	cpi	r24, 0x78	; 120
    1726:	09 f4       	brne	.+2      	; 0x172a <__vector_24+0x9c>
    1728:	67 c0       	rjmp	.+206    	; 0x17f8 <__vector_24+0x16a>
    172a:	38 f4       	brcc	.+14     	; 0x173a <__vector_24+0xac>
    172c:	88 36       	cpi	r24, 0x68	; 104
    172e:	09 f4       	brne	.+2      	; 0x1732 <__vector_24+0xa4>
    1730:	63 c0       	rjmp	.+198    	; 0x17f8 <__vector_24+0x16a>
    1732:	80 37       	cpi	r24, 0x70	; 112
    1734:	09 f4       	brne	.+2      	; 0x1738 <__vector_24+0xaa>
    1736:	60 c0       	rjmp	.+192    	; 0x17f8 <__vector_24+0x16a>
    1738:	c6 c0       	rjmp	.+396    	; 0x18c6 <__vector_24+0x238>
    173a:	88 38       	cpi	r24, 0x88	; 136
    173c:	09 f4       	brne	.+2      	; 0x1740 <__vector_24+0xb2>
    173e:	b5 c0       	rjmp	.+362    	; 0x18aa <__vector_24+0x21c>
    1740:	80 39       	cpi	r24, 0x90	; 144
    1742:	09 f4       	brne	.+2      	; 0x1746 <__vector_24+0xb8>
    1744:	5f c0       	rjmp	.+190    	; 0x1804 <__vector_24+0x176>
    1746:	80 38       	cpi	r24, 0x80	; 128
    1748:	09 f0       	breq	.+2      	; 0x174c <__vector_24+0xbe>
    174a:	bd c0       	rjmp	.+378    	; 0x18c6 <__vector_24+0x238>
    174c:	5b c0       	rjmp	.+182    	; 0x1804 <__vector_24+0x176>
    174e:	80 3b       	cpi	r24, 0xB0	; 176
    1750:	09 f4       	brne	.+2      	; 0x1754 <__vector_24+0xc6>
    1752:	83 c0       	rjmp	.+262    	; 0x185a <__vector_24+0x1cc>
    1754:	38 f4       	brcc	.+14     	; 0x1764 <__vector_24+0xd6>
    1756:	80 3a       	cpi	r24, 0xA0	; 160
    1758:	09 f4       	brne	.+2      	; 0x175c <__vector_24+0xce>
    175a:	66 c0       	rjmp	.+204    	; 0x1828 <__vector_24+0x19a>
    175c:	88 3a       	cpi	r24, 0xA8	; 168
    175e:	09 f4       	brne	.+2      	; 0x1762 <__vector_24+0xd4>
    1760:	7c c0       	rjmp	.+248    	; 0x185a <__vector_24+0x1cc>
    1762:	b1 c0       	rjmp	.+354    	; 0x18c6 <__vector_24+0x238>
    1764:	80 3c       	cpi	r24, 0xC0	; 192
    1766:	09 f4       	brne	.+2      	; 0x176a <__vector_24+0xdc>
    1768:	a4 c0       	rjmp	.+328    	; 0x18b2 <__vector_24+0x224>
    176a:	88 3c       	cpi	r24, 0xC8	; 200
    176c:	09 f4       	brne	.+2      	; 0x1770 <__vector_24+0xe2>
    176e:	a1 c0       	rjmp	.+322    	; 0x18b2 <__vector_24+0x224>
    1770:	88 3b       	cpi	r24, 0xB8	; 184
    1772:	09 f4       	brne	.+2      	; 0x1776 <__vector_24+0xe8>
    1774:	87 c0       	rjmp	.+270    	; 0x1884 <__vector_24+0x1f6>
    1776:	a7 c0       	rjmp	.+334    	; 0x18c6 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1778:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <twi_slarw>
    177c:	10 c0       	rjmp	.+32     	; 0x179e <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    177e:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <twi_masterBufferIndex>
    1782:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <twi_masterBufferLength>
    1786:	98 17       	cp	r25, r24
    1788:	70 f5       	brcc	.+92     	; 0x17e6 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    178a:	e0 91 c7 02 	lds	r30, 0x02C7	; 0x8002c7 <twi_masterBufferIndex>
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	8e 0f       	add	r24, r30
    1792:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <twi_masterBufferIndex>
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	e8 53       	subi	r30, 0x38	; 56
    179a:	fd 4f       	sbci	r31, 0xFD	; 253
    179c:	80 81       	ld	r24, Z
    179e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    17a2:	85 ec       	ldi	r24, 0xC5	; 197
    17a4:	83 c0       	rjmp	.+262    	; 0x18ac <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    17a6:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <twi_error>
    17aa:	8b c0       	rjmp	.+278    	; 0x18c2 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    17ac:	e0 91 c7 02 	lds	r30, 0x02C7	; 0x8002c7 <twi_masterBufferIndex>
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	8e 0f       	add	r24, r30
    17b4:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <twi_masterBufferIndex>
    17b8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	e8 53       	subi	r30, 0x38	; 56
    17c0:	fd 4f       	sbci	r31, 0xFD	; 253
    17c2:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    17c4:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <twi_masterBufferIndex>
    17c8:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <twi_masterBufferLength>
    17cc:	6b c0       	rjmp	.+214    	; 0x18a4 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    17ce:	e0 91 c7 02 	lds	r30, 0x02C7	; 0x8002c7 <twi_masterBufferIndex>
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	8e 0f       	add	r24, r30
    17d6:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <twi_masterBufferIndex>
    17da:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	e8 53       	subi	r30, 0x38	; 56
    17e2:	fd 4f       	sbci	r31, 0xFD	; 253
    17e4:	80 83       	st	Z, r24
	if (twi_sendStop)
    17e6:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <twi_sendStop>
    17ea:	81 11       	cpse	r24, r1
    17ec:	6a c0       	rjmp	.+212    	; 0x18c2 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    17f4:	84 ea       	ldi	r24, 0xA4	; 164
    17f6:	5e c0       	rjmp	.+188    	; 0x18b4 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    17f8:	83 e0       	ldi	r24, 0x03	; 3
    17fa:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    17fe:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <twi_rxBufferIndex>
    1802:	cf cf       	rjmp	.-98     	; 0x17a2 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1804:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <twi_rxBufferIndex>
    1808:	80 32       	cpi	r24, 0x20	; 32
    180a:	08 f0       	brcs	.+2      	; 0x180e <__vector_24+0x180>
    180c:	4e c0       	rjmp	.+156    	; 0x18aa <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    180e:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <twi_rxBufferIndex>
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	8e 0f       	add	r24, r30
    1816:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <twi_rxBufferIndex>
    181a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	ec 57       	subi	r30, 0x7C	; 124
    1822:	fd 4f       	sbci	r31, 0xFD	; 253
    1824:	80 83       	st	Z, r24
    1826:	bd cf       	rjmp	.-134    	; 0x17a2 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1828:	0e 94 41 0b 	call	0x1682	; 0x1682 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    182c:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <twi_rxBufferIndex>
    1830:	80 32       	cpi	r24, 0x20	; 32
    1832:	30 f4       	brcc	.+12     	; 0x1840 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1834:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <twi_rxBufferIndex>
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	ec 57       	subi	r30, 0x7C	; 124
    183c:	fd 4f       	sbci	r31, 0xFD	; 253
    183e:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1840:	60 91 83 02 	lds	r22, 0x0283	; 0x800283 <twi_rxBufferIndex>
    1844:	70 e0       	ldi	r23, 0x00	; 0
    1846:	e0 91 e8 02 	lds	r30, 0x02E8	; 0x8002e8 <twi_onSlaveReceive>
    184a:	f0 91 e9 02 	lds	r31, 0x02E9	; 0x8002e9 <twi_onSlaveReceive+0x1>
    184e:	84 e8       	ldi	r24, 0x84	; 132
    1850:	92 e0       	ldi	r25, 0x02	; 2
    1852:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1854:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <twi_rxBufferIndex>
      break;
    1858:	36 c0       	rjmp	.+108    	; 0x18c6 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    185a:	84 e0       	ldi	r24, 0x04	; 4
    185c:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1860:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1864:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1868:	e0 91 ea 02 	lds	r30, 0x02EA	; 0x8002ea <twi_onSlaveTransmit>
    186c:	f0 91 eb 02 	lds	r31, 0x02EB	; 0x8002eb <twi_onSlaveTransmit+0x1>
    1870:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1872:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <twi_txBufferLength>
    1876:	81 11       	cpse	r24, r1
    1878:	05 c0       	rjmp	.+10     	; 0x1884 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    1880:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1884:	e0 91 a5 02 	lds	r30, 0x02A5	; 0x8002a5 <twi_txBufferIndex>
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	8e 0f       	add	r24, r30
    188c:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <twi_txBufferIndex>
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	ea 55       	subi	r30, 0x5A	; 90
    1894:	fd 4f       	sbci	r31, 0xFD	; 253
    1896:	80 81       	ld	r24, Z
    1898:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    189c:	90 91 a5 02 	lds	r25, 0x02A5	; 0x8002a5 <twi_txBufferIndex>
    18a0:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <twi_txBufferLength>
    18a4:	98 17       	cp	r25, r24
    18a6:	08 f4       	brcc	.+2      	; 0x18aa <__vector_24+0x21c>
    18a8:	7c cf       	rjmp	.-264    	; 0x17a2 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    18aa:	85 e8       	ldi	r24, 0x85	; 133
    18ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    18b0:	0a c0       	rjmp	.+20     	; 0x18c6 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    18b2:	85 ec       	ldi	r24, 0xC5	; 197
    18b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    18b8:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <twi_state>
      break;
    18bc:	04 c0       	rjmp	.+8      	; 0x18c6 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    18be:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <twi_error>
      twi_stop();
    18c2:	0e 94 37 0b 	call	0x166e	; 0x166e <twi_stop>
      break;
  }
}
    18c6:	ff 91       	pop	r31
    18c8:	ef 91       	pop	r30
    18ca:	bf 91       	pop	r27
    18cc:	af 91       	pop	r26
    18ce:	9f 91       	pop	r25
    18d0:	8f 91       	pop	r24
    18d2:	7f 91       	pop	r23
    18d4:	6f 91       	pop	r22
    18d6:	5f 91       	pop	r21
    18d8:	4f 91       	pop	r20
    18da:	3f 91       	pop	r19
    18dc:	2f 91       	pop	r18
    18de:	0f 90       	pop	r0
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	0f 90       	pop	r0
    18e4:	1f 90       	pop	r1
    18e6:	18 95       	reti

000018e8 <turnOffPWM>:
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
    18e8:	83 30       	cpi	r24, 0x03	; 3
    18ea:	81 f0       	breq	.+32     	; 0x190c <turnOffPWM+0x24>
    18ec:	28 f4       	brcc	.+10     	; 0x18f8 <turnOffPWM+0x10>
    18ee:	81 30       	cpi	r24, 0x01	; 1
    18f0:	99 f0       	breq	.+38     	; 0x1918 <turnOffPWM+0x30>
    18f2:	82 30       	cpi	r24, 0x02	; 2
    18f4:	a1 f0       	breq	.+40     	; 0x191e <turnOffPWM+0x36>
    18f6:	08 95       	ret
    18f8:	87 30       	cpi	r24, 0x07	; 7
    18fa:	a9 f0       	breq	.+42     	; 0x1926 <turnOffPWM+0x3e>
    18fc:	88 30       	cpi	r24, 0x08	; 8
    18fe:	b9 f0       	breq	.+46     	; 0x192e <turnOffPWM+0x46>
    1900:	84 30       	cpi	r24, 0x04	; 4
    1902:	d1 f4       	brne	.+52     	; 0x1938 <turnOffPWM+0x50>
    1904:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1908:	8f 7d       	andi	r24, 0xDF	; 223
    190a:	03 c0       	rjmp	.+6      	; 0x1912 <turnOffPWM+0x2a>
    190c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1910:	8f 77       	andi	r24, 0x7F	; 127
    1912:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1916:	08 95       	ret
    1918:	84 b5       	in	r24, 0x24	; 36
    191a:	8f 77       	andi	r24, 0x7F	; 127
    191c:	02 c0       	rjmp	.+4      	; 0x1922 <turnOffPWM+0x3a>
    191e:	84 b5       	in	r24, 0x24	; 36
    1920:	8f 7d       	andi	r24, 0xDF	; 223
    1922:	84 bd       	out	0x24, r24	; 36
    1924:	08 95       	ret
    1926:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    192a:	8f 77       	andi	r24, 0x7F	; 127
    192c:	03 c0       	rjmp	.+6      	; 0x1934 <turnOffPWM+0x4c>
    192e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1932:	8f 7d       	andi	r24, 0xDF	; 223
    1934:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1938:	08 95       	ret

0000193a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    193a:	1f 93       	push	r17
    193c:	cf 93       	push	r28
    193e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	f9 01       	movw	r30, r18
    1946:	e0 57       	subi	r30, 0x70	; 112
    1948:	ff 4f       	sbci	r31, 0xFF	; 255
    194a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    194c:	f9 01       	movw	r30, r18
    194e:	ec 55       	subi	r30, 0x5C	; 92
    1950:	ff 4f       	sbci	r31, 0xFF	; 255
    1952:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1954:	f9 01       	movw	r30, r18
    1956:	e8 54       	subi	r30, 0x48	; 72
    1958:	ff 4f       	sbci	r31, 0xFF	; 255
    195a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    195c:	cc 23       	and	r28, r28
    195e:	c9 f0       	breq	.+50     	; 0x1992 <digitalWrite+0x58>
    1960:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1962:	81 11       	cpse	r24, r1
    1964:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <turnOffPWM>

	out = portOutputRegister(port);
    1968:	ec 2f       	mov	r30, r28
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	ee 0f       	add	r30, r30
    196e:	ff 1f       	adc	r31, r31
    1970:	e4 53       	subi	r30, 0x34	; 52
    1972:	ff 4f       	sbci	r31, 0xFF	; 255
    1974:	a5 91       	lpm	r26, Z+
    1976:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1978:	8f b7       	in	r24, 0x3f	; 63
	cli();
    197a:	f8 94       	cli

	if (val == LOW) {
    197c:	11 11       	cpse	r17, r1
    197e:	05 c0       	rjmp	.+10     	; 0x198a <digitalWrite+0x50>
		*out &= ~bit;
    1980:	9c 91       	ld	r25, X
    1982:	ed 2f       	mov	r30, r29
    1984:	e0 95       	com	r30
    1986:	e9 23       	and	r30, r25
    1988:	02 c0       	rjmp	.+4      	; 0x198e <digitalWrite+0x54>
	} else {
		*out |= bit;
    198a:	ec 91       	ld	r30, X
    198c:	ed 2b       	or	r30, r29
    198e:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    1990:	8f bf       	out	0x3f, r24	; 63
}
    1992:	df 91       	pop	r29
    1994:	cf 91       	pop	r28
    1996:	1f 91       	pop	r17
    1998:	08 95       	ret

0000199a <__divmodhi4>:
    199a:	97 fb       	bst	r25, 7
    199c:	07 2e       	mov	r0, r23
    199e:	16 f4       	brtc	.+4      	; 0x19a4 <__divmodhi4+0xa>
    19a0:	00 94       	com	r0
    19a2:	07 d0       	rcall	.+14     	; 0x19b2 <__divmodhi4_neg1>
    19a4:	77 fd       	sbrc	r23, 7
    19a6:	09 d0       	rcall	.+18     	; 0x19ba <__divmodhi4_neg2>
    19a8:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__udivmodhi4>
    19ac:	07 fc       	sbrc	r0, 7
    19ae:	05 d0       	rcall	.+10     	; 0x19ba <__divmodhi4_neg2>
    19b0:	3e f4       	brtc	.+14     	; 0x19c0 <__divmodhi4_exit>

000019b2 <__divmodhi4_neg1>:
    19b2:	90 95       	com	r25
    19b4:	81 95       	neg	r24
    19b6:	9f 4f       	sbci	r25, 0xFF	; 255
    19b8:	08 95       	ret

000019ba <__divmodhi4_neg2>:
    19ba:	70 95       	com	r23
    19bc:	61 95       	neg	r22
    19be:	7f 4f       	sbci	r23, 0xFF	; 255

000019c0 <__divmodhi4_exit>:
    19c0:	08 95       	ret

000019c2 <__udivmodsi4>:
    19c2:	a1 e2       	ldi	r26, 0x21	; 33
    19c4:	1a 2e       	mov	r1, r26
    19c6:	aa 1b       	sub	r26, r26
    19c8:	bb 1b       	sub	r27, r27
    19ca:	fd 01       	movw	r30, r26
    19cc:	0d c0       	rjmp	.+26     	; 0x19e8 <__udivmodsi4_ep>

000019ce <__udivmodsi4_loop>:
    19ce:	aa 1f       	adc	r26, r26
    19d0:	bb 1f       	adc	r27, r27
    19d2:	ee 1f       	adc	r30, r30
    19d4:	ff 1f       	adc	r31, r31
    19d6:	a2 17       	cp	r26, r18
    19d8:	b3 07       	cpc	r27, r19
    19da:	e4 07       	cpc	r30, r20
    19dc:	f5 07       	cpc	r31, r21
    19de:	20 f0       	brcs	.+8      	; 0x19e8 <__udivmodsi4_ep>
    19e0:	a2 1b       	sub	r26, r18
    19e2:	b3 0b       	sbc	r27, r19
    19e4:	e4 0b       	sbc	r30, r20
    19e6:	f5 0b       	sbc	r31, r21

000019e8 <__udivmodsi4_ep>:
    19e8:	66 1f       	adc	r22, r22
    19ea:	77 1f       	adc	r23, r23
    19ec:	88 1f       	adc	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	1a 94       	dec	r1
    19f2:	69 f7       	brne	.-38     	; 0x19ce <__udivmodsi4_loop>
    19f4:	60 95       	com	r22
    19f6:	70 95       	com	r23
    19f8:	80 95       	com	r24
    19fa:	90 95       	com	r25
    19fc:	9b 01       	movw	r18, r22
    19fe:	ac 01       	movw	r20, r24
    1a00:	bd 01       	movw	r22, r26
    1a02:	cf 01       	movw	r24, r30
    1a04:	08 95       	ret

00001a06 <__umulhisi3>:
    1a06:	a2 9f       	mul	r26, r18
    1a08:	b0 01       	movw	r22, r0
    1a0a:	b3 9f       	mul	r27, r19
    1a0c:	c0 01       	movw	r24, r0
    1a0e:	a3 9f       	mul	r26, r19
    1a10:	70 0d       	add	r23, r0
    1a12:	81 1d       	adc	r24, r1
    1a14:	11 24       	eor	r1, r1
    1a16:	91 1d       	adc	r25, r1
    1a18:	b2 9f       	mul	r27, r18
    1a1a:	70 0d       	add	r23, r0
    1a1c:	81 1d       	adc	r24, r1
    1a1e:	11 24       	eor	r1, r1
    1a20:	91 1d       	adc	r25, r1
    1a22:	08 95       	ret

00001a24 <__muluhisi3>:
    1a24:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__umulhisi3>
    1a28:	a5 9f       	mul	r26, r21
    1a2a:	90 0d       	add	r25, r0
    1a2c:	b4 9f       	mul	r27, r20
    1a2e:	90 0d       	add	r25, r0
    1a30:	a4 9f       	mul	r26, r20
    1a32:	80 0d       	add	r24, r0
    1a34:	91 1d       	adc	r25, r1
    1a36:	11 24       	eor	r1, r1
    1a38:	08 95       	ret

00001a3a <__mulshisi3>:
    1a3a:	b7 ff       	sbrs	r27, 7
    1a3c:	0c 94 12 0d 	jmp	0x1a24	; 0x1a24 <__muluhisi3>

00001a40 <__mulohisi3>:
    1a40:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__muluhisi3>
    1a44:	82 1b       	sub	r24, r18
    1a46:	93 0b       	sbc	r25, r19
    1a48:	08 95       	ret

00001a4a <__udivmodhi4>:
    1a4a:	aa 1b       	sub	r26, r26
    1a4c:	bb 1b       	sub	r27, r27
    1a4e:	51 e1       	ldi	r21, 0x11	; 17
    1a50:	07 c0       	rjmp	.+14     	; 0x1a60 <__udivmodhi4_ep>

00001a52 <__udivmodhi4_loop>:
    1a52:	aa 1f       	adc	r26, r26
    1a54:	bb 1f       	adc	r27, r27
    1a56:	a6 17       	cp	r26, r22
    1a58:	b7 07       	cpc	r27, r23
    1a5a:	10 f0       	brcs	.+4      	; 0x1a60 <__udivmodhi4_ep>
    1a5c:	a6 1b       	sub	r26, r22
    1a5e:	b7 0b       	sbc	r27, r23

00001a60 <__udivmodhi4_ep>:
    1a60:	88 1f       	adc	r24, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	5a 95       	dec	r21
    1a66:	a9 f7       	brne	.-22     	; 0x1a52 <__udivmodhi4_loop>
    1a68:	80 95       	com	r24
    1a6a:	90 95       	com	r25
    1a6c:	bc 01       	movw	r22, r24
    1a6e:	cd 01       	movw	r24, r26
    1a70:	08 95       	ret

00001a72 <__tablejump2__>:
    1a72:	ee 0f       	add	r30, r30
    1a74:	ff 1f       	adc	r31, r31
    1a76:	05 90       	lpm	r0, Z+
    1a78:	f4 91       	lpm	r31, Z
    1a7a:	e0 2d       	mov	r30, r0
    1a7c:	09 94       	ijmp

00001a7e <_exit>:
    1a7e:	f8 94       	cli

00001a80 <__stop_program>:
    1a80:	ff cf       	rjmp	.-2      	; 0x1a80 <__stop_program>
