
ArduSketch3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000086  00800100  000021f4  00002288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001a7  00800186  00800186  0000230e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000230e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002340  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007e0  00000000  00000000  00002380  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000104d1  00000000  00000000  00002b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000302f  00000000  00000000  00013031  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004354  00000000  00000000  00016060  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000176c  00000000  00000000  0001a3b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003b91  00000000  00000000  0001bb20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008240  00000000  00000000  0001f6b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007b8  00000000  00000000  000278f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__ctors_end>
       4:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__vector_1>
       8:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__vector_2>
       c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      10:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      14:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      18:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      1c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      20:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      24:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      28:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      2c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      30:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      34:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      38:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      3c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      40:	0c 94 b8 06 	jmp	0xd70	; 0xd70 <__vector_16>
      44:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      48:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__vector_18>
      4c:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__vector_19>
      50:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      54:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      58:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      5c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      60:	0c 94 51 0f 	jmp	0x1ea2	; 0x1ea2 <__vector_24>
      64:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <_ZL17monthShortNames_P>:
      b8:	45 72 72 4a 61 6e 46 65 62 4d 61 72 41 70 72 4d     ErrJanFebMarAprM
      c8:	61 79 4a 75 6e 4a 75 6c 41 75 67 53 65 70 4f 63     ayJunJulAugSepOc
      d8:	74 4e 6f 76 44 65 63 00                             tNovDec.

000000e0 <__ctors_start>:
      e0:	84 03       	fmuls	r16, r20
      e2:	2b 05       	cpc	r18, r11
      e4:	45 08       	sbc	r4, r5
      e6:	58 0e       	add	r5, r24

000000e8 <__ctors_end>:
      e8:	11 24       	eor	r1, r1
      ea:	1f be       	out	0x3f, r1	; 63
      ec:	cf ef       	ldi	r28, 0xFF	; 255
      ee:	d8 e0       	ldi	r29, 0x08	; 8
      f0:	de bf       	out	0x3e, r29	; 62
      f2:	cd bf       	out	0x3d, r28	; 61

000000f4 <__do_copy_data>:
      f4:	11 e0       	ldi	r17, 0x01	; 1
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b1 e0       	ldi	r27, 0x01	; 1
      fa:	e4 ef       	ldi	r30, 0xF4	; 244
      fc:	f1 e2       	ldi	r31, 0x21	; 33
      fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x10>
     100:	05 90       	lpm	r0, Z+
     102:	0d 92       	st	X+, r0
     104:	a6 38       	cpi	r26, 0x86	; 134
     106:	b1 07       	cpc	r27, r17
     108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0xc>

0000010a <__do_clear_bss>:
     10a:	23 e0       	ldi	r18, 0x03	; 3
     10c:	a6 e8       	ldi	r26, 0x86	; 134
     10e:	b1 e0       	ldi	r27, 0x01	; 1
     110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
     112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
     114:	ad 32       	cpi	r26, 0x2D	; 45
     116:	b2 07       	cpc	r27, r18
     118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>

0000011a <__do_global_ctors>:
     11a:	10 e0       	ldi	r17, 0x00	; 0
     11c:	c4 e7       	ldi	r28, 0x74	; 116
     11e:	d0 e0       	ldi	r29, 0x00	; 0
     120:	04 c0       	rjmp	.+8      	; 0x12a <__do_global_ctors+0x10>
     122:	21 97       	sbiw	r28, 0x01	; 1
     124:	fe 01       	movw	r30, r28
     126:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <__tablejump2__>
     12a:	c0 37       	cpi	r28, 0x70	; 112
     12c:	d1 07       	cpc	r29, r17
     12e:	c9 f7       	brne	.-14     	; 0x122 <__do_global_ctors+0x8>
     130:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <main>
     134:	0c 94 f8 10 	jmp	0x21f0	; 0x21f0 <_exit>

00000138 <__bad_interrupt>:
     138:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000013c <_Z8alarmIsrv>:
		eeprom_write_byte((uint8_t *)alarm2_addr+i, u.byte_array[0+i]);
	}
}


liftRelayArray::liftRelayArray()
     13c:	81 e0       	ldi	r24, 0x01	; 1
     13e:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <alarmIsrWasCalled>
     142:	08 95       	ret

00000144 <_ZlsR5PrintRK6_BASED>:
     144:	cf 93       	push	r28
     146:	df 93       	push	r29
     148:	ec 01       	movw	r28, r24
     14a:	fb 01       	movw	r30, r22
     14c:	24 81       	ldd	r18, Z+4	; 0x04
     14e:	35 81       	ldd	r19, Z+5	; 0x05
     150:	40 81       	ld	r20, Z
     152:	51 81       	ldd	r21, Z+1	; 0x01
     154:	62 81       	ldd	r22, Z+2	; 0x02
     156:	73 81       	ldd	r23, Z+3	; 0x03
     158:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN5Print5printEli>
     15c:	ce 01       	movw	r24, r28
     15e:	df 91       	pop	r29
     160:	cf 91       	pop	r28
     162:	08 95       	ret

00000164 <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t>:
     164:	ef 92       	push	r14
     166:	ff 92       	push	r15
     168:	0f 93       	push	r16
     16a:	1f 93       	push	r17
     16c:	cf 93       	push	r28
     16e:	df 93       	push	r29
     170:	cd b7       	in	r28, 0x3d	; 61
     172:	de b7       	in	r29, 0x3e	; 62
     174:	27 97       	sbiw	r28, 0x07	; 7
     176:	0f b6       	in	r0, 0x3f	; 63
     178:	f8 94       	cli
     17a:	de bf       	out	0x3e, r29	; 62
     17c:	0f be       	out	0x3f, r0	; 63
     17e:	cd bf       	out	0x3d, r28	; 61
     180:	5e 83       	std	Y+6, r21	; 0x06
     182:	f2 2e       	mov	r15, r18
     184:	e4 2e       	mov	r14, r20
     186:	89 e0       	ldi	r24, 0x09	; 9
     188:	84 17       	cp	r24, r20
     18a:	18 f4       	brcc	.+6      	; 0x192 <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0x2e>
     18c:	6e e4       	ldi	r22, 0x4E	; 78
     18e:	71 e0       	ldi	r23, 0x01	; 1
     190:	02 c0       	rjmp	.+4      	; 0x196 <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0x32>
     192:	65 e0       	ldi	r22, 0x05	; 5
     194:	71 e0       	ldi	r23, 0x01	; 1
     196:	80 eb       	ldi	r24, 0xB0	; 176
     198:	91 e0       	ldi	r25, 0x01	; 1
     19a:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZN5Print5printEPKc>
     19e:	4a e0       	ldi	r20, 0x0A	; 10
     1a0:	50 e0       	ldi	r21, 0x00	; 0
     1a2:	6e 2d       	mov	r22, r14
     1a4:	80 eb       	ldi	r24, 0xB0	; 176
     1a6:	91 e0       	ldi	r25, 0x01	; 1
     1a8:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN5Print5printEhi>
     1ac:	60 e2       	ldi	r22, 0x20	; 32
     1ae:	80 eb       	ldi	r24, 0xB0	; 176
     1b0:	91 e0       	ldi	r25, 0x01	; 1
     1b2:	0e 94 99 05 	call	0xb32	; 0xb32 <_ZN5Print5printEc>
     1b6:	8e 81       	ldd	r24, Y+6	; 0x06
     1b8:	0e 94 1a 0b 	call	0x1634	; 0x1634 <_Z13monthShortStrh>
     1bc:	bc 01       	movw	r22, r24
     1be:	80 eb       	ldi	r24, 0xB0	; 176
     1c0:	91 e0       	ldi	r25, 0x01	; 1
     1c2:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZN5Print5printEPKc>
     1c6:	60 e2       	ldi	r22, 0x20	; 32
     1c8:	80 eb       	ldi	r24, 0xB0	; 176
     1ca:	91 e0       	ldi	r25, 0x01	; 1
     1cc:	0e 94 99 05 	call	0xb32	; 0xb32 <_ZN5Print5printEc>
     1d0:	89 e0       	ldi	r24, 0x09	; 9
     1d2:	8f 15       	cp	r24, r15
     1d4:	18 f4       	brcc	.+6      	; 0x1dc <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0x78>
     1d6:	6e e4       	ldi	r22, 0x4E	; 78
     1d8:	71 e0       	ldi	r23, 0x01	; 1
     1da:	02 c0       	rjmp	.+4      	; 0x1e0 <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0x7c>
     1dc:	65 e0       	ldi	r22, 0x05	; 5
     1de:	71 e0       	ldi	r23, 0x01	; 1
     1e0:	80 eb       	ldi	r24, 0xB0	; 176
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZN5Print5printEPKc>
     1e8:	4a e0       	ldi	r20, 0x0A	; 10
     1ea:	50 e0       	ldi	r21, 0x00	; 0
     1ec:	6f 2d       	mov	r22, r15
     1ee:	80 eb       	ldi	r24, 0xB0	; 176
     1f0:	91 e0       	ldi	r25, 0x01	; 1
     1f2:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN5Print5printEhi>
     1f6:	6a e3       	ldi	r22, 0x3A	; 58
     1f8:	80 eb       	ldi	r24, 0xB0	; 176
     1fa:	91 e0       	ldi	r25, 0x01	; 1
     1fc:	0e 94 99 05 	call	0xb32	; 0xb32 <_ZN5Print5printEc>
     200:	1a 30       	cpi	r17, 0x0A	; 10
     202:	18 f0       	brcs	.+6      	; 0x20a <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0xa6>
     204:	6e e4       	ldi	r22, 0x4E	; 78
     206:	71 e0       	ldi	r23, 0x01	; 1
     208:	02 c0       	rjmp	.+4      	; 0x20e <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0xaa>
     20a:	65 e0       	ldi	r22, 0x05	; 5
     20c:	71 e0       	ldi	r23, 0x01	; 1
     20e:	80 eb       	ldi	r24, 0xB0	; 176
     210:	91 e0       	ldi	r25, 0x01	; 1
     212:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZN5Print5printEPKc>
     216:	4a e0       	ldi	r20, 0x0A	; 10
     218:	50 e0       	ldi	r21, 0x00	; 0
     21a:	61 2f       	mov	r22, r17
     21c:	80 eb       	ldi	r24, 0xB0	; 176
     21e:	91 e0       	ldi	r25, 0x01	; 1
     220:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN5Print5printEhi>
     224:	6a e3       	ldi	r22, 0x3A	; 58
     226:	80 eb       	ldi	r24, 0xB0	; 176
     228:	91 e0       	ldi	r25, 0x01	; 1
     22a:	0e 94 99 05 	call	0xb32	; 0xb32 <_ZN5Print5printEc>
     22e:	0a 30       	cpi	r16, 0x0A	; 10
     230:	18 f0       	brcs	.+6      	; 0x238 <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0xd4>
     232:	6e e4       	ldi	r22, 0x4E	; 78
     234:	71 e0       	ldi	r23, 0x01	; 1
     236:	02 c0       	rjmp	.+4      	; 0x23c <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t+0xd8>
     238:	65 e0       	ldi	r22, 0x05	; 5
     23a:	71 e0       	ldi	r23, 0x01	; 1
     23c:	80 eb       	ldi	r24, 0xB0	; 176
     23e:	91 e0       	ldi	r25, 0x01	; 1
     240:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZN5Print5printEPKc>
     244:	4a e0       	ldi	r20, 0x0A	; 10
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	60 2f       	mov	r22, r16
     24a:	80 eb       	ldi	r24, 0xB0	; 176
     24c:	91 e0       	ldi	r25, 0x01	; 1
     24e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN5Print5printEhi>
     252:	80 eb       	ldi	r24, 0xB0	; 176
     254:	91 e0       	ldi	r25, 0x01	; 1
     256:	27 96       	adiw	r28, 0x07	; 7
     258:	0f b6       	in	r0, 0x3f	; 63
     25a:	f8 94       	cli
     25c:	de bf       	out	0x3e, r29	; 62
     25e:	0f be       	out	0x3f, r0	; 63
     260:	cd bf       	out	0x3d, r28	; 61
     262:	df 91       	pop	r29
     264:	cf 91       	pop	r28
     266:	1f 91       	pop	r17
     268:	0f 91       	pop	r16
     26a:	ff 90       	pop	r15
     26c:	ef 90       	pop	r14
     26e:	0c 94 a0 05 	jmp	0xb40	; 0xb40 <_ZN5Print7printlnEv>

00000272 <_ZN23Human_Machine_Interface13printDateTimeEm>:
     272:	cf 92       	push	r12
     274:	df 92       	push	r13
     276:	ef 92       	push	r14
     278:	ff 92       	push	r15
     27a:	0f 93       	push	r16
     27c:	1f 93       	push	r17
     27e:	cf 93       	push	r28
     280:	df 93       	push	r29
     282:	00 d0       	rcall	.+0      	; 0x284 <_ZN23Human_Machine_Interface13printDateTimeEm+0x12>
     284:	00 d0       	rcall	.+0      	; 0x286 <_ZN23Human_Machine_Interface13printDateTimeEm+0x14>
     286:	00 d0       	rcall	.+0      	; 0x288 <_ZN23Human_Machine_Interface13printDateTimeEm+0x16>
     288:	cd b7       	in	r28, 0x3d	; 61
     28a:	de b7       	in	r29, 0x3e	; 62
     28c:	6a 01       	movw	r12, r20
     28e:	7b 01       	movw	r14, r22
     290:	cb 01       	movw	r24, r22
     292:	ba 01       	movw	r22, r20
     294:	0e 94 4e 0c 	call	0x189c	; 0x189c <_Z3daym>
     298:	09 2e       	mov	r0, r25
     29a:	00 0c       	add	r0, r0
     29c:	aa 0b       	sbc	r26, r26
     29e:	bb 0b       	sbc	r27, r27
     2a0:	89 83       	std	Y+1, r24	; 0x01
     2a2:	9a 83       	std	Y+2, r25	; 0x02
     2a4:	ab 83       	std	Y+3, r26	; 0x03
     2a6:	bc 83       	std	Y+4, r27	; 0x04
     2a8:	8a e0       	ldi	r24, 0x0A	; 10
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	9e 83       	std	Y+6, r25	; 0x06
     2ae:	8d 83       	std	Y+5, r24	; 0x05
     2b0:	c7 01       	movw	r24, r14
     2b2:	b6 01       	movw	r22, r12
     2b4:	0e 94 4e 0c 	call	0x189c	; 0x189c <_Z3daym>
     2b8:	0a 97       	sbiw	r24, 0x0a	; 10
     2ba:	1c f0       	brlt	.+6      	; 0x2c2 <_ZN23Human_Machine_Interface13printDateTimeEm+0x50>
     2bc:	6e e4       	ldi	r22, 0x4E	; 78
     2be:	71 e0       	ldi	r23, 0x01	; 1
     2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <_ZN23Human_Machine_Interface13printDateTimeEm+0x54>
     2c2:	65 e0       	ldi	r22, 0x05	; 5
     2c4:	71 e0       	ldi	r23, 0x01	; 1
     2c6:	80 eb       	ldi	r24, 0xB0	; 176
     2c8:	91 e0       	ldi	r25, 0x01	; 1
     2ca:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZN5Print5printEPKc>
     2ce:	be 01       	movw	r22, r28
     2d0:	6f 5f       	subi	r22, 0xFF	; 255
     2d2:	7f 4f       	sbci	r23, 0xFF	; 255
     2d4:	80 eb       	ldi	r24, 0xB0	; 176
     2d6:	91 e0       	ldi	r25, 0x01	; 1
     2d8:	0e 94 a2 00 	call	0x144	; 0x144 <_ZlsR5PrintRK6_BASED>
     2dc:	60 e2       	ldi	r22, 0x20	; 32
     2de:	0e 94 99 05 	call	0xb32	; 0xb32 <_ZN5Print5printEc>
     2e2:	c7 01       	movw	r24, r14
     2e4:	b6 01       	movw	r22, r12
     2e6:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_Z4yearm>
     2ea:	09 2e       	mov	r0, r25
     2ec:	00 0c       	add	r0, r0
     2ee:	aa 0b       	sbc	r26, r26
     2f0:	bb 0b       	sbc	r27, r27
     2f2:	89 83       	std	Y+1, r24	; 0x01
     2f4:	9a 83       	std	Y+2, r25	; 0x02
     2f6:	ab 83       	std	Y+3, r26	; 0x03
     2f8:	bc 83       	std	Y+4, r27	; 0x04
     2fa:	0a e0       	ldi	r16, 0x0A	; 10
     2fc:	10 e0       	ldi	r17, 0x00	; 0
     2fe:	1e 83       	std	Y+6, r17	; 0x06
     300:	0d 83       	std	Y+5, r16	; 0x05
     302:	c7 01       	movw	r24, r14
     304:	b6 01       	movw	r22, r12
     306:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <_Z5monthm>
     30a:	0e 94 1a 0b 	call	0x1634	; 0x1634 <_Z13monthShortStrh>
     30e:	bc 01       	movw	r22, r24
     310:	80 eb       	ldi	r24, 0xB0	; 176
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZN5Print5printEPKc>
     318:	67 e1       	ldi	r22, 0x17	; 23
     31a:	71 e0       	ldi	r23, 0x01	; 1
     31c:	80 eb       	ldi	r24, 0xB0	; 176
     31e:	91 e0       	ldi	r25, 0x01	; 1
     320:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZN5Print5printEPKc>
     324:	be 01       	movw	r22, r28
     326:	6f 5f       	subi	r22, 0xFF	; 255
     328:	7f 4f       	sbci	r23, 0xFF	; 255
     32a:	80 eb       	ldi	r24, 0xB0	; 176
     32c:	91 e0       	ldi	r25, 0x01	; 1
     32e:	0e 94 a2 00 	call	0x144	; 0x144 <_ZlsR5PrintRK6_BASED>
     332:	60 e2       	ldi	r22, 0x20	; 32
     334:	0e 94 99 05 	call	0xb32	; 0xb32 <_ZN5Print5printEc>
     338:	c7 01       	movw	r24, r14
     33a:	b6 01       	movw	r22, r12
     33c:	0e 94 3c 0c 	call	0x1878	; 0x1878 <_Z4hourm>
     340:	09 2e       	mov	r0, r25
     342:	00 0c       	add	r0, r0
     344:	aa 0b       	sbc	r26, r26
     346:	bb 0b       	sbc	r27, r27
     348:	89 83       	std	Y+1, r24	; 0x01
     34a:	9a 83       	std	Y+2, r25	; 0x02
     34c:	ab 83       	std	Y+3, r26	; 0x03
     34e:	bc 83       	std	Y+4, r27	; 0x04
     350:	1e 83       	std	Y+6, r17	; 0x06
     352:	0d 83       	std	Y+5, r16	; 0x05
     354:	c7 01       	movw	r24, r14
     356:	b6 01       	movw	r22, r12
     358:	0e 94 3c 0c 	call	0x1878	; 0x1878 <_Z4hourm>
     35c:	0a 97       	sbiw	r24, 0x0a	; 10
     35e:	1c f0       	brlt	.+6      	; 0x366 <_ZN23Human_Machine_Interface13printDateTimeEm+0xf4>
     360:	6e e4       	ldi	r22, 0x4E	; 78
     362:	71 e0       	ldi	r23, 0x01	; 1
     364:	02 c0       	rjmp	.+4      	; 0x36a <_ZN23Human_Machine_Interface13printDateTimeEm+0xf8>
     366:	65 e0       	ldi	r22, 0x05	; 5
     368:	71 e0       	ldi	r23, 0x01	; 1
     36a:	80 eb       	ldi	r24, 0xB0	; 176
     36c:	91 e0       	ldi	r25, 0x01	; 1
     36e:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZN5Print5printEPKc>
     372:	be 01       	movw	r22, r28
     374:	6f 5f       	subi	r22, 0xFF	; 255
     376:	7f 4f       	sbci	r23, 0xFF	; 255
     378:	80 eb       	ldi	r24, 0xB0	; 176
     37a:	91 e0       	ldi	r25, 0x01	; 1
     37c:	0e 94 a2 00 	call	0x144	; 0x144 <_ZlsR5PrintRK6_BASED>
     380:	6a e3       	ldi	r22, 0x3A	; 58
     382:	0e 94 99 05 	call	0xb32	; 0xb32 <_ZN5Print5printEc>
     386:	c7 01       	movw	r24, r14
     388:	b6 01       	movw	r22, r12
     38a:	0e 94 42 0c 	call	0x1884	; 0x1884 <_Z6minutem>
     38e:	09 2e       	mov	r0, r25
     390:	00 0c       	add	r0, r0
     392:	aa 0b       	sbc	r26, r26
     394:	bb 0b       	sbc	r27, r27
     396:	89 83       	std	Y+1, r24	; 0x01
     398:	9a 83       	std	Y+2, r25	; 0x02
     39a:	ab 83       	std	Y+3, r26	; 0x03
     39c:	bc 83       	std	Y+4, r27	; 0x04
     39e:	8a e0       	ldi	r24, 0x0A	; 10
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	9e 83       	std	Y+6, r25	; 0x06
     3a4:	8d 83       	std	Y+5, r24	; 0x05
     3a6:	c7 01       	movw	r24, r14
     3a8:	b6 01       	movw	r22, r12
     3aa:	0e 94 42 0c 	call	0x1884	; 0x1884 <_Z6minutem>
     3ae:	0a 97       	sbiw	r24, 0x0a	; 10
     3b0:	1c f0       	brlt	.+6      	; 0x3b8 <_ZN23Human_Machine_Interface13printDateTimeEm+0x146>
     3b2:	6e e4       	ldi	r22, 0x4E	; 78
     3b4:	71 e0       	ldi	r23, 0x01	; 1
     3b6:	02 c0       	rjmp	.+4      	; 0x3bc <_ZN23Human_Machine_Interface13printDateTimeEm+0x14a>
     3b8:	65 e0       	ldi	r22, 0x05	; 5
     3ba:	71 e0       	ldi	r23, 0x01	; 1
     3bc:	80 eb       	ldi	r24, 0xB0	; 176
     3be:	91 e0       	ldi	r25, 0x01	; 1
     3c0:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZN5Print5printEPKc>
     3c4:	be 01       	movw	r22, r28
     3c6:	6f 5f       	subi	r22, 0xFF	; 255
     3c8:	7f 4f       	sbci	r23, 0xFF	; 255
     3ca:	80 eb       	ldi	r24, 0xB0	; 176
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	0e 94 a2 00 	call	0x144	; 0x144 <_ZlsR5PrintRK6_BASED>
     3d2:	6a e3       	ldi	r22, 0x3A	; 58
     3d4:	0e 94 99 05 	call	0xb32	; 0xb32 <_ZN5Print5printEc>
     3d8:	c7 01       	movw	r24, r14
     3da:	b6 01       	movw	r22, r12
     3dc:	0e 94 48 0c 	call	0x1890	; 0x1890 <_Z6secondm>
     3e0:	09 2e       	mov	r0, r25
     3e2:	00 0c       	add	r0, r0
     3e4:	aa 0b       	sbc	r26, r26
     3e6:	bb 0b       	sbc	r27, r27
     3e8:	89 83       	std	Y+1, r24	; 0x01
     3ea:	9a 83       	std	Y+2, r25	; 0x02
     3ec:	ab 83       	std	Y+3, r26	; 0x03
     3ee:	bc 83       	std	Y+4, r27	; 0x04
     3f0:	8a e0       	ldi	r24, 0x0A	; 10
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	9e 83       	std	Y+6, r25	; 0x06
     3f6:	8d 83       	std	Y+5, r24	; 0x05
     3f8:	c7 01       	movw	r24, r14
     3fa:	b6 01       	movw	r22, r12
     3fc:	0e 94 48 0c 	call	0x1890	; 0x1890 <_Z6secondm>
     400:	0a 97       	sbiw	r24, 0x0a	; 10
     402:	1c f0       	brlt	.+6      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     404:	6e e4       	ldi	r22, 0x4E	; 78
     406:	71 e0       	ldi	r23, 0x01	; 1
     408:	02 c0       	rjmp	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40a:	65 e0       	ldi	r22, 0x05	; 5
     40c:	71 e0       	ldi	r23, 0x01	; 1
     40e:	80 eb       	ldi	r24, 0xB0	; 176
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZN5Print5printEPKc>
     416:	be 01       	movw	r22, r28
     418:	6f 5f       	subi	r22, 0xFF	; 255
     41a:	7f 4f       	sbci	r23, 0xFF	; 255
     41c:	80 eb       	ldi	r24, 0xB0	; 176
     41e:	91 e0       	ldi	r25, 0x01	; 1
     420:	0e 94 a2 00 	call	0x144	; 0x144 <_ZlsR5PrintRK6_BASED>
     424:	26 96       	adiw	r28, 0x06	; 6
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	f8 94       	cli
     42a:	de bf       	out	0x3e, r29	; 62
     42c:	0f be       	out	0x3f, r0	; 63
     42e:	cd bf       	out	0x3d, r28	; 61
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	1f 91       	pop	r17
     436:	0f 91       	pop	r16
     438:	ff 90       	pop	r15
     43a:	ef 90       	pop	r14
     43c:	df 90       	pop	r13
     43e:	cf 90       	pop	r12
     440:	08 95       	ret

00000442 <_ZN23Human_Machine_Interface8ConvTotmEm>:
     442:	9f 92       	push	r9
     444:	af 92       	push	r10
     446:	bf 92       	push	r11
     448:	cf 92       	push	r12
     44a:	df 92       	push	r13
     44c:	ef 92       	push	r14
     44e:	ff 92       	push	r15
     450:	0f 93       	push	r16
     452:	1f 93       	push	r17
     454:	cf 93       	push	r28
     456:	df 93       	push	r29
     458:	cd b7       	in	r28, 0x3d	; 61
     45a:	de b7       	in	r29, 0x3e	; 62
     45c:	27 97       	sbiw	r28, 0x07	; 7
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	f8 94       	cli
     462:	de bf       	out	0x3e, r29	; 62
     464:	0f be       	out	0x3f, r0	; 63
     466:	cd bf       	out	0x3d, r28	; 61
     468:	6a 01       	movw	r12, r20
     46a:	7b 01       	movw	r14, r22
     46c:	cb 01       	movw	r24, r22
     46e:	ba 01       	movw	r22, r20
     470:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_Z4yearm>
     474:	18 2f       	mov	r17, r24
     476:	c7 01       	movw	r24, r14
     478:	b6 01       	movw	r22, r12
     47a:	0e 94 4e 0c 	call	0x189c	; 0x189c <_Z3daym>
     47e:	b8 2e       	mov	r11, r24
     480:	c7 01       	movw	r24, r14
     482:	b6 01       	movw	r22, r12
     484:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <_Z5monthm>
     488:	08 2f       	mov	r16, r24
     48a:	c7 01       	movw	r24, r14
     48c:	b6 01       	movw	r22, r12
     48e:	0e 94 3c 0c 	call	0x1878	; 0x1878 <_Z4hourm>
     492:	a8 2e       	mov	r10, r24
     494:	c7 01       	movw	r24, r14
     496:	b6 01       	movw	r22, r12
     498:	0e 94 42 0c 	call	0x1884	; 0x1884 <_Z6minutem>
     49c:	98 2e       	mov	r9, r24
     49e:	c7 01       	movw	r24, r14
     4a0:	b6 01       	movw	r22, r12
     4a2:	0e 94 48 0c 	call	0x1890	; 0x1890 <_Z6secondm>
     4a6:	5c 81       	ldd	r21, Y+4	; 0x04
     4a8:	28 2f       	mov	r18, r24
     4aa:	39 2d       	mov	r19, r9
     4ac:	4a 2d       	mov	r20, r10
     4ae:	6b 2d       	mov	r22, r11
     4b0:	70 2f       	mov	r23, r16
     4b2:	81 2f       	mov	r24, r17
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	27 96       	adiw	r28, 0x07	; 7
     4b8:	0f b6       	in	r0, 0x3f	; 63
     4ba:	f8 94       	cli
     4bc:	de bf       	out	0x3e, r29	; 62
     4be:	0f be       	out	0x3f, r0	; 63
     4c0:	cd bf       	out	0x3d, r28	; 61
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	1f 91       	pop	r17
     4c8:	0f 91       	pop	r16
     4ca:	ff 90       	pop	r15
     4cc:	ef 90       	pop	r14
     4ce:	df 90       	pop	r13
     4d0:	cf 90       	pop	r12
     4d2:	bf 90       	pop	r11
     4d4:	af 90       	pop	r10
     4d6:	9f 90       	pop	r9
     4d8:	08 95       	ret

000004da <_ZN16DS3231RTC_Alarms11init_alarmsEv>:
     4da:	ef 92       	push	r14
     4dc:	ff 92       	push	r15
     4de:	0f 93       	push	r16
     4e0:	1f 93       	push	r17
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	ec 01       	movw	r28, r24
     4e8:	52 98       	cbi	0x0a, 2	; 10
     4ea:	5a 9a       	sbi	0x0b, 2	; 11
     4ec:	42 e0       	ldi	r20, 0x02	; 2
     4ee:	50 e0       	ldi	r21, 0x00	; 0
     4f0:	6e e9       	ldi	r22, 0x9E	; 158
     4f2:	70 e0       	ldi	r23, 0x00	; 0
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	0e 94 4a 06 	call	0xc94	; 0xc94 <attachInterrupt>
     4fa:	64 e0       	ldi	r22, 0x04	; 4
     4fc:	86 e5       	ldi	r24, 0x56	; 86
     4fe:	92 e0       	ldi	r25, 0x02	; 2
     500:	0e 94 83 09 	call	0x1306	; 0x1306 <_ZN9DS3232RTC10squareWaveE14SQWAVE_FREQS_t>
     504:	61 e0       	ldi	r22, 0x01	; 1
     506:	86 e5       	ldi	r24, 0x56	; 86
     508:	92 e0       	ldi	r25, 0x02	; 2
     50a:	0e 94 63 09 	call	0x12c6	; 0x12c6 <_ZN9DS3232RTC5alarmEh>
     50e:	41 e0       	ldi	r20, 0x01	; 1
     510:	61 e0       	ldi	r22, 0x01	; 1
     512:	86 e5       	ldi	r24, 0x56	; 86
     514:	92 e0       	ldi	r25, 0x02	; 2
     516:	0e 94 42 09 	call	0x1284	; 0x1284 <_ZN9DS3232RTC14alarmInterruptEhb>
     51a:	62 e0       	ldi	r22, 0x02	; 2
     51c:	86 e5       	ldi	r24, 0x56	; 86
     51e:	92 e0       	ldi	r25, 0x02	; 2
     520:	0e 94 63 09 	call	0x12c6	; 0x12c6 <_ZN9DS3232RTC5alarmEh>
     524:	41 e0       	ldi	r20, 0x01	; 1
     526:	62 e0       	ldi	r22, 0x02	; 2
     528:	86 e5       	ldi	r24, 0x56	; 86
     52a:	92 e0       	ldi	r25, 0x02	; 2
     52c:	0e 94 42 09 	call	0x1284	; 0x1284 <_ZN9DS3232RTC14alarmInterruptEhb>
     530:	00 91 ae 01 	lds	r16, 0x01AE	; 0x8001ae <alarm1_addr>
     534:	10 e0       	ldi	r17, 0x00	; 0
     536:	7e 01       	movw	r14, r28
     538:	87 e0       	ldi	r24, 0x07	; 7
     53a:	e8 0e       	add	r14, r24
     53c:	f1 1c       	adc	r15, r1
     53e:	0c 1b       	sub	r16, r28
     540:	1d 0b       	sbc	r17, r29
     542:	c8 01       	movw	r24, r16
     544:	8c 0f       	add	r24, r28
     546:	9d 1f       	adc	r25, r29
     548:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <eeprom_read_byte>
     54c:	89 93       	st	Y+, r24
     54e:	ce 15       	cp	r28, r14
     550:	df 05       	cpc	r29, r15
     552:	b9 f7       	brne	.-18     	; 0x542 <_ZN16DS3231RTC_Alarms11init_alarmsEv+0x68>
     554:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__data_start>
     558:	10 e0       	ldi	r17, 0x00	; 0
     55a:	c0 e0       	ldi	r28, 0x00	; 0
     55c:	d0 e0       	ldi	r29, 0x00	; 0
     55e:	ce 01       	movw	r24, r28
     560:	80 0f       	add	r24, r16
     562:	91 1f       	adc	r25, r17
     564:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <eeprom_read_byte>
     568:	f7 01       	movw	r30, r14
     56a:	81 93       	st	Z+, r24
     56c:	7f 01       	movw	r14, r30
     56e:	21 96       	adiw	r28, 0x01	; 1
     570:	c7 30       	cpi	r28, 0x07	; 7
     572:	d1 05       	cpc	r29, r1
     574:	a1 f7       	brne	.-24     	; 0x55e <_ZN16DS3231RTC_Alarms11init_alarmsEv+0x84>
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	1f 91       	pop	r17
     57c:	0f 91       	pop	r16
     57e:	ff 90       	pop	r15
     580:	ef 90       	pop	r14
     582:	08 95       	ret

00000584 <_ZN16DS3231RTC_Alarms11alarm_CheckEPh>:
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
     588:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <alarmIsrWasCalled>
     58c:	88 23       	and	r24, r24
     58e:	b1 f0       	breq	.+44     	; 0x5bc <_ZN16DS3231RTC_Alarms11alarm_CheckEPh+0x38>
     590:	eb 01       	movw	r28, r22
     592:	61 e0       	ldi	r22, 0x01	; 1
     594:	86 e5       	ldi	r24, 0x56	; 86
     596:	92 e0       	ldi	r25, 0x02	; 2
     598:	0e 94 63 09 	call	0x12c6	; 0x12c6 <_ZN9DS3232RTC5alarmEh>
     59c:	88 23       	and	r24, r24
     59e:	11 f0       	breq	.+4      	; 0x5a4 <_ZN16DS3231RTC_Alarms11alarm_CheckEPh+0x20>
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	08 c0       	rjmp	.+16     	; 0x5b4 <_ZN16DS3231RTC_Alarms11alarm_CheckEPh+0x30>
     5a4:	62 e0       	ldi	r22, 0x02	; 2
     5a6:	86 e5       	ldi	r24, 0x56	; 86
     5a8:	92 e0       	ldi	r25, 0x02	; 2
     5aa:	0e 94 63 09 	call	0x12c6	; 0x12c6 <_ZN9DS3232RTC5alarmEh>
     5ae:	88 23       	and	r24, r24
     5b0:	11 f0       	breq	.+4      	; 0x5b6 <_ZN16DS3231RTC_Alarms11alarm_CheckEPh+0x32>
     5b2:	82 e0       	ldi	r24, 0x02	; 2
     5b4:	88 83       	st	Y, r24
     5b6:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <alarmIsrWasCalled>
     5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <_ZN16DS3231RTC_Alarms11alarm_CheckEPh+0x3c>
     5bc:	fb 01       	movw	r30, r22
     5be:	10 82       	st	Z, r1
     5c0:	df 91       	pop	r29
     5c2:	cf 91       	pop	r28
     5c4:	08 95       	ret

000005c6 <_ZN14liftRelayArray14relayArrayInitEv>:
}

void liftRelayArray::relayArrayInit(void)
{
	// Initialize Buttons
	DDRC |= (1 << ARControl1) | (1 << ARControl2) | (1 << ARControl3);		// Marks pins as output.
     5c6:	87 b1       	in	r24, 0x07	; 7
     5c8:	8e 60       	ori	r24, 0x0E	; 14
     5ca:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1 << ARControl1) & ~(1 << ARControl2) & ~(1 << ARControl3);	// Puts pins into off state.
     5cc:	88 b1       	in	r24, 0x08	; 8
     5ce:	81 7f       	andi	r24, 0xF1	; 241
     5d0:	88 b9       	out	0x08, r24	; 8
     5d2:	08 95       	ret

000005d4 <_ZN14liftRelayArray17relayArrayCommandEh>:
	*/
}

void liftRelayArray::relayArrayCommand(uint8_t cmd)
{
	switch (cmd)
     5d4:	61 30       	cpi	r22, 0x01	; 1
     5d6:	29 f0       	breq	.+10     	; 0x5e2 <_ZN14liftRelayArray17relayArrayCommandEh+0xe>
     5d8:	62 30       	cpi	r22, 0x02	; 2
     5da:	39 f4       	brne	.+14     	; 0x5ea <_ZN14liftRelayArray17relayArrayCommandEh+0x16>
			PORTC |= (1 << ARControl1);
			PORTC &= ~(1 << ARControl2);
			PORTC |= (1 << ARControl3);
		break;
		case liftCCW:
			PORTC |= (1 << ARControl1);
     5dc:	43 9a       	sbi	0x08, 3	; 8
			PORTC |= (1 << ARControl2);
     5de:	42 9a       	sbi	0x08, 2	; 8
     5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <_ZN14liftRelayArray17relayArrayCommandEh+0x12>
void liftRelayArray::relayArrayCommand(uint8_t cmd)
{
	switch (cmd)
	{
		case liftCW:
			PORTC |= (1 << ARControl1);
     5e2:	43 9a       	sbi	0x08, 3	; 8
			PORTC &= ~(1 << ARControl2);
     5e4:	42 98       	cbi	0x08, 2	; 8
			PORTC |= (1 << ARControl3);
		break;
		case liftCCW:
			PORTC |= (1 << ARControl1);
			PORTC |= (1 << ARControl2);
			PORTC |= (1 << ARControl3);
     5e6:	41 9a       	sbi	0x08, 1	; 8
		break;
     5e8:	08 95       	ret
		default:	// default, aka. liftSTOP
			PORTC &= ~(1 << ARControl1);
     5ea:	43 98       	cbi	0x08, 3	; 8
			PORTC &= ~(1 << ARControl2);
     5ec:	42 98       	cbi	0x08, 2	; 8
			PORTC &= ~(1 << ARControl3);
     5ee:	41 98       	cbi	0x08, 1	; 8
     5f0:	08 95       	ret

000005f2 <main>:
  */
LiquidCrystal lcd(13, 12, 8, 9, 10, 11);


int main(void)
{
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	cd b7       	in	r28, 0x3d	; 61
     5f8:	de b7       	in	r29, 0x3e	; 62
     5fa:	28 97       	sbiw	r28, 0x08	; 8
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	f8 94       	cli
     600:	de bf       	out	0x3e, r29	; 62
     602:	0f be       	out	0x3f, r0	; 63
     604:	cd bf       	out	0x3d, r28	; 61
	init();						// Initializes the Arduino Core.
     606:	0e 94 6e 07 	call	0xedc	; 0xedc <init>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     60a:	26 e0       	ldi	r18, 0x06	; 6
     60c:	40 e8       	ldi	r20, 0x80	; 128
     60e:	55 e2       	ldi	r21, 0x25	; 37
     610:	60 e0       	ldi	r22, 0x00	; 0
     612:	70 e0       	ldi	r23, 0x00	; 0
     614:	80 eb       	ldi	r24, 0xB0	; 176
     616:	91 e0       	ldi	r25, 0x01	; 1
     618:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(9600);			// Start the serial communication at 9600 a baud rate.
	lcd.begin(16, 2);			// Start LCD.
     61c:	20 e0       	ldi	r18, 0x00	; 0
     61e:	42 e0       	ldi	r20, 0x02	; 2
     620:	60 e1       	ldi	r22, 0x10	; 16
     622:	86 e8       	ldi	r24, 0x86	; 134
     624:	91 e0       	ldi	r25, 0x01	; 1
     626:	0e 94 4f 0a 	call	0x149e	; 0x149e <_ZN13LiquidCrystal5beginEhhh>
	RTC_alarm.init_alarms();	// Start the alarms.
     62a:	8f e9       	ldi	r24, 0x9F	; 159
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	0e 94 6d 02 	call	0x4da	; 0x4da <_ZN16DS3231RTC_Alarms11init_alarmsEv>
	relayArray.relayArrayInit();
     632:	8e e9       	ldi	r24, 0x9E	; 158
     634:	91 e0       	ldi	r25, 0x01	; 1
     636:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN14liftRelayArray14relayArrayInitEv>
	
	// Local Variables:
	uint8_t alarm_stat = 0;
     63a:	18 86       	std	Y+8, r1	; 0x08
#define STREAMING_LIBRARY_VERSION 5

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     63c:	67 e0       	ldi	r22, 0x07	; 7
     63e:	71 e0       	ldi	r23, 0x01	; 1
     640:	80 eb       	ldi	r24, 0xB0	; 176
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZN5Print5printEPKc>
	
	
	// print he current time:
	Serial << "Current time is: ";
	HMI.printDateTime(RTC.get());
     648:	0e 94 db 08 	call	0x11b6	; 0x11b6 <_ZN9DS3232RTC3getEv>
     64c:	ab 01       	movw	r20, r22
     64e:	bc 01       	movw	r22, r24
     650:	8d ea       	ldi	r24, 0xAD	; 173
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	0e 94 39 01 	call	0x272	; 0x272 <_ZN23Human_Machine_Interface13printDateTimeEm>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
     658:	80 eb       	ldi	r24, 0xB0	; 176
     65a:	91 e0       	ldi	r25, 0x01	; 1
     65c:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN5Print7printlnEv>
#define STREAMING_LIBRARY_VERSION 5

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     660:	69 e1       	ldi	r22, 0x19	; 25
     662:	71 e0       	ldi	r23, 0x01	; 1
     664:	86 e8       	ldi	r24, 0x86	; 134
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZN5Print5printEPKc>
	Serial << endl;
	lcd << "Test";
	
	HMI.printDateTime(HMI.ConvTotm(RTC.get()));
     66c:	0e 94 db 08 	call	0x11b6	; 0x11b6 <_ZN9DS3232RTC3getEv>
     670:	ab 01       	movw	r20, r22
     672:	bc 01       	movw	r22, r24
     674:	8d ea       	ldi	r24, 0xAD	; 173
     676:	91 e0       	ldi	r25, 0x01	; 1
     678:	0e 94 21 02 	call	0x442	; 0x442 <_ZN23Human_Machine_Interface8ConvTotmEm>
     67c:	89 01       	movw	r16, r18
     67e:	9a 01       	movw	r18, r20
     680:	ab 01       	movw	r20, r22
     682:	68 2f       	mov	r22, r24
     684:	8d ea       	ldi	r24, 0xAD	; 173
     686:	91 e0       	ldi	r25, 0x01	; 1
     688:	0e 94 b2 00 	call	0x164	; 0x164 <_ZN23Human_Machine_Interface13printDateTimeE12tmElements_t>
	
	while (1)
	{
		RTC_alarm.alarm_Check(&alarm_stat);	// get the alarm status.
     68c:	be 01       	movw	r22, r28
     68e:	68 5f       	subi	r22, 0xF8	; 248
     690:	7f 4f       	sbci	r23, 0xFF	; 255
     692:	8f e9       	ldi	r24, 0x9F	; 159
     694:	91 e0       	ldi	r25, 0x01	; 1
     696:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN16DS3231RTC_Alarms11alarm_CheckEPh>
		
		switch(alarm_stat)					// switch statement to decide what should happen if alarm has happened.
     69a:	88 85       	ldd	r24, Y+8	; 0x08
     69c:	81 30       	cpi	r24, 0x01	; 1
     69e:	b1 f0       	breq	.+44     	; 0x6cc <main+0xda>
     6a0:	82 30       	cpi	r24, 0x02	; 2
     6a2:	59 f5       	brne	.+86     	; 0x6fa <main+0x108>
				Serial << " --> Alarm 1!" << endl;
				relayArray.relayArrayCommand(liftCW);
			break;
			
			case 2:							// alarm1:
				HMI.printDateTime( RTC.get() );
     6a4:	0e 94 db 08 	call	0x11b6	; 0x11b6 <_ZN9DS3232RTC3getEv>
     6a8:	ab 01       	movw	r20, r22
     6aa:	bc 01       	movw	r22, r24
     6ac:	8d ea       	ldi	r24, 0xAD	; 173
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	0e 94 39 01 	call	0x272	; 0x272 <_ZN23Human_Machine_Interface13printDateTimeEm>
     6b4:	6c e2       	ldi	r22, 0x2C	; 44
     6b6:	71 e0       	ldi	r23, 0x01	; 1
     6b8:	80 eb       	ldi	r24, 0xB0	; 176
     6ba:	91 e0       	ldi	r25, 0x01	; 1
     6bc:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZN5Print5printEPKc>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
     6c0:	80 eb       	ldi	r24, 0xB0	; 176
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN5Print7printlnEv>
				Serial << " --> Alarm 2!" << endl;
				relayArray.relayArrayCommand(liftCCW);
     6c8:	62 e0       	ldi	r22, 0x02	; 2
     6ca:	13 c0       	rjmp	.+38     	; 0x6f2 <main+0x100>
		RTC_alarm.alarm_Check(&alarm_stat);	// get the alarm status.
		
		switch(alarm_stat)					// switch statement to decide what should happen if alarm has happened.
		{
			case 1:							// alarm1:
				HMI.printDateTime( RTC.get() );
     6cc:	0e 94 db 08 	call	0x11b6	; 0x11b6 <_ZN9DS3232RTC3getEv>
     6d0:	ab 01       	movw	r20, r22
     6d2:	bc 01       	movw	r22, r24
     6d4:	8d ea       	ldi	r24, 0xAD	; 173
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	0e 94 39 01 	call	0x272	; 0x272 <_ZN23Human_Machine_Interface13printDateTimeEm>
#define STREAMING_LIBRARY_VERSION 5

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     6dc:	6e e1       	ldi	r22, 0x1E	; 30
     6de:	71 e0       	ldi	r23, 0x01	; 1
     6e0:	80 eb       	ldi	r24, 0xB0	; 176
     6e2:	91 e0       	ldi	r25, 0x01	; 1
     6e4:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZN5Print5printEPKc>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
     6e8:	80 eb       	ldi	r24, 0xB0	; 176
     6ea:	91 e0       	ldi	r25, 0x01	; 1
     6ec:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN5Print7printlnEv>
				Serial << " --> Alarm 1!" << endl;
				relayArray.relayArrayCommand(liftCW);
     6f0:	61 e0       	ldi	r22, 0x01	; 1
			break;
			
			case 2:							// alarm1:
				HMI.printDateTime( RTC.get() );
				Serial << " --> Alarm 2!" << endl;
				relayArray.relayArrayCommand(liftCCW);
     6f2:	8e e9       	ldi	r24, 0x9E	; 158
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_ZN14liftRelayArray17relayArrayCommandEh>
				
			default:						// if there was no alarm:
				
			break;
		}
		delay(100);	// small delay
     6fa:	64 e6       	ldi	r22, 0x64	; 100
     6fc:	70 e0       	ldi	r23, 0x00	; 0
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	0e 94 27 07 	call	0xe4e	; 0xe4e <delay>
	Serial << endl;
	lcd << "Test";
	
	HMI.printDateTime(HMI.ConvTotm(RTC.get()));
	
	while (1)
     706:	c2 cf       	rjmp	.-124    	; 0x68c <main+0x9a>

00000708 <_GLOBAL__sub_I_alarmIsrWasCalled>:
				
			break;
		}
		delay(100);	// small delay
	}
}
     708:	cf 92       	push	r12
     70a:	ef 92       	push	r14
     70c:	0f 93       	push	r16



Human_Machine_Interface::Human_Machine_Interface()
{
	UIstate = 0;
     70e:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <HMI>
}


DS3231RTC_Alarms::DS3231RTC_Alarms()
{
	alarm1_time.long_time = 0;
     712:	ef e9       	ldi	r30, 0x9F	; 159
     714:	f1 e0       	ldi	r31, 0x01	; 1
     716:	10 82       	st	Z, r1
     718:	11 82       	std	Z+1, r1	; 0x01
     71a:	12 82       	std	Z+2, r1	; 0x02
     71c:	13 82       	std	Z+3, r1	; 0x03
	alarm2_time.long_time = 0;
     71e:	17 82       	std	Z+7, r1	; 0x07
     720:	10 86       	std	Z+8, r1	; 0x08
     722:	11 86       	std	Z+9, r1	; 0x09
     724:	12 86       	std	Z+10, r1	; 0x0a
  * LCD VSS pin to ground
  * LCD VCC pin to 5V
  * 10K resistor: Mounted
  * ends to +5V and ground
  */
LiquidCrystal lcd(13, 12, 8, 9, 10, 11);
     726:	8b e0       	ldi	r24, 0x0B	; 11
     728:	c8 2e       	mov	r12, r24
     72a:	9a e0       	ldi	r25, 0x0A	; 10
     72c:	e9 2e       	mov	r14, r25
     72e:	09 e0       	ldi	r16, 0x09	; 9
     730:	28 e0       	ldi	r18, 0x08	; 8
     732:	4c e0       	ldi	r20, 0x0C	; 12
     734:	6d e0       	ldi	r22, 0x0D	; 13
     736:	86 e8       	ldi	r24, 0x86	; 134
     738:	91 e0       	ldi	r25, 0x01	; 1
     73a:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <_ZN13LiquidCrystalC1Ehhhhhh>
				
			break;
		}
		delay(100);	// small delay
	}
}
     73e:	0f 91       	pop	r16
     740:	ef 90       	pop	r14
     742:	cf 90       	pop	r12
     744:	08 95       	ret

00000746 <_ZN14HardwareSerial9availableEv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     746:	fc 01       	movw	r30, r24
     748:	91 8d       	ldd	r25, Z+25	; 0x19
     74a:	22 8d       	ldd	r18, Z+26	; 0x1a
     74c:	89 2f       	mov	r24, r25
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	80 5c       	subi	r24, 0xC0	; 192
     752:	9f 4f       	sbci	r25, 0xFF	; 255
     754:	82 1b       	sub	r24, r18
     756:	91 09       	sbc	r25, r1
     758:	8f 73       	andi	r24, 0x3F	; 63
     75a:	99 27       	eor	r25, r25
     75c:	08 95       	ret

0000075e <_ZN14HardwareSerial4peekEv>:
     75e:	fc 01       	movw	r30, r24
     760:	91 8d       	ldd	r25, Z+25	; 0x19
     762:	82 8d       	ldd	r24, Z+26	; 0x1a
     764:	98 17       	cp	r25, r24
     766:	31 f0       	breq	.+12     	; 0x774 <_ZN14HardwareSerial4peekEv+0x16>
     768:	82 8d       	ldd	r24, Z+26	; 0x1a
     76a:	e8 0f       	add	r30, r24
     76c:	f1 1d       	adc	r31, r1
     76e:	85 8d       	ldd	r24, Z+29	; 0x1d
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	08 95       	ret
     774:	8f ef       	ldi	r24, 0xFF	; 255
     776:	9f ef       	ldi	r25, 0xFF	; 255
     778:	08 95       	ret

0000077a <_ZN14HardwareSerial4readEv>:
     77a:	fc 01       	movw	r30, r24
     77c:	91 8d       	ldd	r25, Z+25	; 0x19
     77e:	82 8d       	ldd	r24, Z+26	; 0x1a
     780:	98 17       	cp	r25, r24
     782:	61 f0       	breq	.+24     	; 0x79c <_ZN14HardwareSerial4readEv+0x22>
     784:	82 8d       	ldd	r24, Z+26	; 0x1a
     786:	df 01       	movw	r26, r30
     788:	a8 0f       	add	r26, r24
     78a:	b1 1d       	adc	r27, r1
     78c:	5d 96       	adiw	r26, 0x1d	; 29
     78e:	8c 91       	ld	r24, X
     790:	92 8d       	ldd	r25, Z+26	; 0x1a
     792:	9f 5f       	subi	r25, 0xFF	; 255
     794:	9f 73       	andi	r25, 0x3F	; 63
     796:	92 8f       	std	Z+26, r25	; 0x1a
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	08 95       	ret
     79c:	8f ef       	ldi	r24, 0xFF	; 255
     79e:	9f ef       	ldi	r25, 0xFF	; 255
     7a0:	08 95       	ret

000007a2 <_ZN14HardwareSerial17availableForWriteEv>:
     7a2:	fc 01       	movw	r30, r24
     7a4:	53 8d       	ldd	r21, Z+27	; 0x1b
     7a6:	44 8d       	ldd	r20, Z+28	; 0x1c
     7a8:	25 2f       	mov	r18, r21
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	84 2f       	mov	r24, r20
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	82 1b       	sub	r24, r18
     7b2:	93 0b       	sbc	r25, r19
     7b4:	54 17       	cp	r21, r20
     7b6:	10 f0       	brcs	.+4      	; 0x7bc <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     7b8:	cf 96       	adiw	r24, 0x3f	; 63
     7ba:	08 95       	ret
     7bc:	01 97       	sbiw	r24, 0x01	; 1
     7be:	08 95       	ret

000007c0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     7c0:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     7c2:	84 8d       	ldd	r24, Z+28	; 0x1c
     7c4:	df 01       	movw	r26, r30
     7c6:	a8 0f       	add	r26, r24
     7c8:	b1 1d       	adc	r27, r1
     7ca:	a3 5a       	subi	r26, 0xA3	; 163
     7cc:	bf 4f       	sbci	r27, 0xFF	; 255
     7ce:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     7d0:	84 8d       	ldd	r24, Z+28	; 0x1c
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	01 96       	adiw	r24, 0x01	; 1
     7d6:	8f 73       	andi	r24, 0x3F	; 63
     7d8:	99 27       	eor	r25, r25
     7da:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     7dc:	a6 89       	ldd	r26, Z+22	; 0x16
     7de:	b7 89       	ldd	r27, Z+23	; 0x17
     7e0:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     7e2:	a0 89       	ldd	r26, Z+16	; 0x10
     7e4:	b1 89       	ldd	r27, Z+17	; 0x11
     7e6:	8c 91       	ld	r24, X
     7e8:	80 64       	ori	r24, 0x40	; 64
     7ea:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     7ec:	93 8d       	ldd	r25, Z+27	; 0x1b
     7ee:	84 8d       	ldd	r24, Z+28	; 0x1c
     7f0:	98 13       	cpse	r25, r24
     7f2:	06 c0       	rjmp	.+12     	; 0x800 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     7f4:	02 88       	ldd	r0, Z+18	; 0x12
     7f6:	f3 89       	ldd	r31, Z+19	; 0x13
     7f8:	e0 2d       	mov	r30, r0
     7fa:	80 81       	ld	r24, Z
     7fc:	8f 7d       	andi	r24, 0xDF	; 223
     7fe:	80 83       	st	Z, r24
     800:	08 95       	ret

00000802 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     802:	ef 92       	push	r14
     804:	ff 92       	push	r15
     806:	0f 93       	push	r16
     808:	1f 93       	push	r17
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	ec 01       	movw	r28, r24
  _written = true;
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     814:	9b 8d       	ldd	r25, Y+27	; 0x1b
     816:	8c 8d       	ldd	r24, Y+28	; 0x1c
     818:	98 13       	cpse	r25, r24
     81a:	05 c0       	rjmp	.+10     	; 0x826 <_ZN14HardwareSerial5writeEh+0x24>
     81c:	e8 89       	ldd	r30, Y+16	; 0x10
     81e:	f9 89       	ldd	r31, Y+17	; 0x11
     820:	80 81       	ld	r24, Z
     822:	85 fd       	sbrc	r24, 5
     824:	24 c0       	rjmp	.+72     	; 0x86e <_ZN14HardwareSerial5writeEh+0x6c>
     826:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     828:	0b 8d       	ldd	r16, Y+27	; 0x1b
     82a:	10 e0       	ldi	r17, 0x00	; 0
     82c:	0f 5f       	subi	r16, 0xFF	; 255
     82e:	1f 4f       	sbci	r17, 0xFF	; 255
     830:	0f 73       	andi	r16, 0x3F	; 63
     832:	11 27       	eor	r17, r17
     834:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     836:	8c 8d       	ldd	r24, Y+28	; 0x1c
     838:	e8 12       	cpse	r14, r24
     83a:	0c c0       	rjmp	.+24     	; 0x854 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     83c:	0f b6       	in	r0, 0x3f	; 63
     83e:	07 fc       	sbrc	r0, 7
     840:	fa cf       	rjmp	.-12     	; 0x836 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     842:	e8 89       	ldd	r30, Y+16	; 0x10
     844:	f9 89       	ldd	r31, Y+17	; 0x11
     846:	80 81       	ld	r24, Z
     848:	85 ff       	sbrs	r24, 5
     84a:	f5 cf       	rjmp	.-22     	; 0x836 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     84c:	ce 01       	movw	r24, r28
     84e:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     852:	f1 cf       	rjmp	.-30     	; 0x836 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     854:	8b 8d       	ldd	r24, Y+27	; 0x1b
     856:	fe 01       	movw	r30, r28
     858:	e8 0f       	add	r30, r24
     85a:	f1 1d       	adc	r31, r1
     85c:	e3 5a       	subi	r30, 0xA3	; 163
     85e:	ff 4f       	sbci	r31, 0xFF	; 255
     860:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     862:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     864:	ea 89       	ldd	r30, Y+18	; 0x12
     866:	fb 89       	ldd	r31, Y+19	; 0x13
     868:	80 81       	ld	r24, Z
     86a:	80 62       	ori	r24, 0x20	; 32
     86c:	07 c0       	rjmp	.+14     	; 0x87c <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     86e:	ee 89       	ldd	r30, Y+22	; 0x16
     870:	ff 89       	ldd	r31, Y+23	; 0x17
     872:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     874:	e8 89       	ldd	r30, Y+16	; 0x10
     876:	f9 89       	ldd	r31, Y+17	; 0x11
     878:	80 81       	ld	r24, Z
     87a:	80 64       	ori	r24, 0x40	; 64
     87c:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	1f 91       	pop	r17
     888:	0f 91       	pop	r16
     88a:	ff 90       	pop	r15
     88c:	ef 90       	pop	r14
     88e:	08 95       	ret

00000890 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     896:	88 8d       	ldd	r24, Y+24	; 0x18
     898:	88 23       	and	r24, r24
     89a:	c9 f0       	breq	.+50     	; 0x8ce <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     89c:	ea 89       	ldd	r30, Y+18	; 0x12
     89e:	fb 89       	ldd	r31, Y+19	; 0x13
     8a0:	80 81       	ld	r24, Z
     8a2:	85 fd       	sbrc	r24, 5
     8a4:	05 c0       	rjmp	.+10     	; 0x8b0 <_ZN14HardwareSerial5flushEv+0x20>
     8a6:	a8 89       	ldd	r26, Y+16	; 0x10
     8a8:	b9 89       	ldd	r27, Y+17	; 0x11
     8aa:	8c 91       	ld	r24, X
     8ac:	86 fd       	sbrc	r24, 6
     8ae:	0f c0       	rjmp	.+30     	; 0x8ce <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	07 fc       	sbrc	r0, 7
     8b4:	f5 cf       	rjmp	.-22     	; 0x8a0 <_ZN14HardwareSerial5flushEv+0x10>
     8b6:	80 81       	ld	r24, Z
     8b8:	85 ff       	sbrs	r24, 5
     8ba:	f2 cf       	rjmp	.-28     	; 0x8a0 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     8bc:	a8 89       	ldd	r26, Y+16	; 0x10
     8be:	b9 89       	ldd	r27, Y+17	; 0x11
     8c0:	8c 91       	ld	r24, X
     8c2:	85 ff       	sbrs	r24, 5
     8c4:	ed cf       	rjmp	.-38     	; 0x8a0 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     8c6:	ce 01       	movw	r24, r28
     8c8:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     8cc:	e7 cf       	rjmp	.-50     	; 0x89c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	08 95       	ret

000008d4 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     8d4:	cf 92       	push	r12
     8d6:	df 92       	push	r13
     8d8:	ef 92       	push	r14
     8da:	ff 92       	push	r15
     8dc:	1f 93       	push	r17
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	ec 01       	movw	r28, r24
     8e4:	6a 01       	movw	r12, r20
     8e6:	7b 01       	movw	r14, r22
     8e8:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     8ea:	e8 89       	ldd	r30, Y+16	; 0x10
     8ec:	f9 89       	ldd	r31, Y+17	; 0x11
     8ee:	82 e0       	ldi	r24, 0x02	; 2
     8f0:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     8f2:	41 15       	cp	r20, r1
     8f4:	51 4e       	sbci	r21, 0xE1	; 225
     8f6:	61 05       	cpc	r22, r1
     8f8:	71 05       	cpc	r23, r1
     8fa:	b1 f0       	breq	.+44     	; 0x928 <__stack+0x29>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     8fc:	60 e0       	ldi	r22, 0x00	; 0
     8fe:	79 e0       	ldi	r23, 0x09	; 9
     900:	8d e3       	ldi	r24, 0x3D	; 61
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	a7 01       	movw	r20, r14
     906:	96 01       	movw	r18, r12
     908:	0e 94 92 10 	call	0x2124	; 0x2124 <__udivmodsi4>
     90c:	da 01       	movw	r26, r20
     90e:	c9 01       	movw	r24, r18
     910:	01 97       	sbiw	r24, 0x01	; 1
     912:	a1 09       	sbc	r26, r1
     914:	b1 09       	sbc	r27, r1
     916:	b6 95       	lsr	r27
     918:	a7 95       	ror	r26
     91a:	97 95       	ror	r25
     91c:	87 95       	ror	r24
     91e:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     920:	21 15       	cp	r18, r1
     922:	80 e1       	ldi	r24, 0x10	; 16
     924:	38 07       	cpc	r19, r24
     926:	a8 f0       	brcs	.+42     	; 0x952 <__stack+0x53>
  {
    *_ucsra = 0;
     928:	e8 89       	ldd	r30, Y+16	; 0x10
     92a:	f9 89       	ldd	r31, Y+17	; 0x11
     92c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     92e:	60 e8       	ldi	r22, 0x80	; 128
     930:	74 e8       	ldi	r23, 0x84	; 132
     932:	8e e1       	ldi	r24, 0x1E	; 30
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	a7 01       	movw	r20, r14
     938:	96 01       	movw	r18, r12
     93a:	0e 94 92 10 	call	0x2124	; 0x2124 <__udivmodsi4>
     93e:	da 01       	movw	r26, r20
     940:	c9 01       	movw	r24, r18
     942:	01 97       	sbiw	r24, 0x01	; 1
     944:	a1 09       	sbc	r26, r1
     946:	b1 09       	sbc	r27, r1
     948:	b6 95       	lsr	r27
     94a:	a7 95       	ror	r26
     94c:	97 95       	ror	r25
     94e:	87 95       	ror	r24
     950:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     952:	ec 85       	ldd	r30, Y+12	; 0x0c
     954:	fd 85       	ldd	r31, Y+13	; 0x0d
     956:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     958:	ee 85       	ldd	r30, Y+14	; 0x0e
     95a:	ff 85       	ldd	r31, Y+15	; 0x0f
     95c:	20 83       	st	Z, r18

  _written = false;
     95e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     960:	ec 89       	ldd	r30, Y+20	; 0x14
     962:	fd 89       	ldd	r31, Y+21	; 0x15
     964:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     966:	ea 89       	ldd	r30, Y+18	; 0x12
     968:	fb 89       	ldd	r31, Y+19	; 0x13
     96a:	80 81       	ld	r24, Z
     96c:	80 61       	ori	r24, 0x10	; 16
     96e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     970:	ea 89       	ldd	r30, Y+18	; 0x12
     972:	fb 89       	ldd	r31, Y+19	; 0x13
     974:	80 81       	ld	r24, Z
     976:	88 60       	ori	r24, 0x08	; 8
     978:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     97a:	ea 89       	ldd	r30, Y+18	; 0x12
     97c:	fb 89       	ldd	r31, Y+19	; 0x13
     97e:	80 81       	ld	r24, Z
     980:	80 68       	ori	r24, 0x80	; 128
     982:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     984:	ea 89       	ldd	r30, Y+18	; 0x12
     986:	fb 89       	ldd	r31, Y+19	; 0x13
     988:	80 81       	ld	r24, Z
     98a:	8f 7d       	andi	r24, 0xDF	; 223
     98c:	80 83       	st	Z, r24
}
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	1f 91       	pop	r17
     994:	ff 90       	pop	r15
     996:	ef 90       	pop	r14
     998:	df 90       	pop	r13
     99a:	cf 90       	pop	r12
     99c:	08 95       	ret

0000099e <_ZN5Print17availableForWriteEv>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	08 95       	ret

000009a4 <_ZN5Print5flushEv>:
     9a4:	08 95       	ret

000009a6 <__vector_18>:
     9a6:	1f 92       	push	r1
     9a8:	0f 92       	push	r0
     9aa:	0f b6       	in	r0, 0x3f	; 63
     9ac:	0f 92       	push	r0
     9ae:	11 24       	eor	r1, r1
     9b0:	2f 93       	push	r18
     9b2:	8f 93       	push	r24
     9b4:	9f 93       	push	r25
     9b6:	ef 93       	push	r30
     9b8:	ff 93       	push	r31
     9ba:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <Serial+0x10>
     9be:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <Serial+0x11>
     9c2:	80 81       	ld	r24, Z
     9c4:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <Serial+0x16>
     9c8:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <Serial+0x17>
     9cc:	82 fd       	sbrc	r24, 2
     9ce:	12 c0       	rjmp	.+36     	; 0x9f4 <__vector_18+0x4e>
     9d0:	90 81       	ld	r25, Z
     9d2:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <Serial+0x19>
     9d6:	8f 5f       	subi	r24, 0xFF	; 255
     9d8:	8f 73       	andi	r24, 0x3F	; 63
     9da:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <Serial+0x1a>
     9de:	82 17       	cp	r24, r18
     9e0:	51 f0       	breq	.+20     	; 0x9f6 <__vector_18+0x50>
     9e2:	e0 91 c9 01 	lds	r30, 0x01C9	; 0x8001c9 <Serial+0x19>
     9e6:	f0 e0       	ldi	r31, 0x00	; 0
     9e8:	e0 55       	subi	r30, 0x50	; 80
     9ea:	fe 4f       	sbci	r31, 0xFE	; 254
     9ec:	95 8f       	std	Z+29, r25	; 0x1d
     9ee:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <Serial+0x19>
     9f2:	01 c0       	rjmp	.+2      	; 0x9f6 <__vector_18+0x50>
     9f4:	80 81       	ld	r24, Z
     9f6:	ff 91       	pop	r31
     9f8:	ef 91       	pop	r30
     9fa:	9f 91       	pop	r25
     9fc:	8f 91       	pop	r24
     9fe:	2f 91       	pop	r18
     a00:	0f 90       	pop	r0
     a02:	0f be       	out	0x3f, r0	; 63
     a04:	0f 90       	pop	r0
     a06:	1f 90       	pop	r1
     a08:	18 95       	reti

00000a0a <__vector_19>:
     a0a:	1f 92       	push	r1
     a0c:	0f 92       	push	r0
     a0e:	0f b6       	in	r0, 0x3f	; 63
     a10:	0f 92       	push	r0
     a12:	11 24       	eor	r1, r1
     a14:	2f 93       	push	r18
     a16:	3f 93       	push	r19
     a18:	4f 93       	push	r20
     a1a:	5f 93       	push	r21
     a1c:	6f 93       	push	r22
     a1e:	7f 93       	push	r23
     a20:	8f 93       	push	r24
     a22:	9f 93       	push	r25
     a24:	af 93       	push	r26
     a26:	bf 93       	push	r27
     a28:	ef 93       	push	r30
     a2a:	ff 93       	push	r31
     a2c:	80 eb       	ldi	r24, 0xB0	; 176
     a2e:	91 e0       	ldi	r25, 0x01	; 1
     a30:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     a34:	ff 91       	pop	r31
     a36:	ef 91       	pop	r30
     a38:	bf 91       	pop	r27
     a3a:	af 91       	pop	r26
     a3c:	9f 91       	pop	r25
     a3e:	8f 91       	pop	r24
     a40:	7f 91       	pop	r23
     a42:	6f 91       	pop	r22
     a44:	5f 91       	pop	r21
     a46:	4f 91       	pop	r20
     a48:	3f 91       	pop	r19
     a4a:	2f 91       	pop	r18
     a4c:	0f 90       	pop	r0
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	0f 90       	pop	r0
     a52:	1f 90       	pop	r1
     a54:	18 95       	reti

00000a56 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     a56:	e0 eb       	ldi	r30, 0xB0	; 176
     a58:	f1 e0       	ldi	r31, 0x01	; 1
     a5a:	13 82       	std	Z+3, r1	; 0x03
     a5c:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     a5e:	88 ee       	ldi	r24, 0xE8	; 232
     a60:	93 e0       	ldi	r25, 0x03	; 3
     a62:	a0 e0       	ldi	r26, 0x00	; 0
     a64:	b0 e0       	ldi	r27, 0x00	; 0
     a66:	84 83       	std	Z+4, r24	; 0x04
     a68:	95 83       	std	Z+5, r25	; 0x05
     a6a:	a6 83       	std	Z+6, r26	; 0x06
     a6c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     a6e:	8e e3       	ldi	r24, 0x3E	; 62
     a70:	91 e0       	ldi	r25, 0x01	; 1
     a72:	91 83       	std	Z+1, r25	; 0x01
     a74:	80 83       	st	Z, r24
     a76:	85 ec       	ldi	r24, 0xC5	; 197
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	95 87       	std	Z+13, r25	; 0x0d
     a7c:	84 87       	std	Z+12, r24	; 0x0c
     a7e:	84 ec       	ldi	r24, 0xC4	; 196
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	97 87       	std	Z+15, r25	; 0x0f
     a84:	86 87       	std	Z+14, r24	; 0x0e
     a86:	80 ec       	ldi	r24, 0xC0	; 192
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	91 8b       	std	Z+17, r25	; 0x11
     a8c:	80 8b       	std	Z+16, r24	; 0x10
     a8e:	81 ec       	ldi	r24, 0xC1	; 193
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	93 8b       	std	Z+19, r25	; 0x13
     a94:	82 8b       	std	Z+18, r24	; 0x12
     a96:	82 ec       	ldi	r24, 0xC2	; 194
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	95 8b       	std	Z+21, r25	; 0x15
     a9c:	84 8b       	std	Z+20, r24	; 0x14
     a9e:	86 ec       	ldi	r24, 0xC6	; 198
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	97 8b       	std	Z+23, r25	; 0x17
     aa4:	86 8b       	std	Z+22, r24	; 0x16
     aa6:	11 8e       	std	Z+25, r1	; 0x19
     aa8:	12 8e       	std	Z+26, r1	; 0x1a
     aaa:	13 8e       	std	Z+27, r1	; 0x1b
     aac:	14 8e       	std	Z+28, r1	; 0x1c
     aae:	08 95       	ret

00000ab0 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     ab0:	cf 92       	push	r12
     ab2:	df 92       	push	r13
     ab4:	ef 92       	push	r14
     ab6:	ff 92       	push	r15
     ab8:	0f 93       	push	r16
     aba:	1f 93       	push	r17
     abc:	cf 93       	push	r28
     abe:	df 93       	push	r29
     ac0:	6c 01       	movw	r12, r24
     ac2:	7a 01       	movw	r14, r20
     ac4:	8b 01       	movw	r16, r22
     ac6:	c0 e0       	ldi	r28, 0x00	; 0
     ac8:	d0 e0       	ldi	r29, 0x00	; 0
     aca:	ce 15       	cp	r28, r14
     acc:	df 05       	cpc	r29, r15
     ace:	81 f0       	breq	.+32     	; 0xaf0 <_ZN5Print5writeEPKhj+0x40>
     ad0:	d8 01       	movw	r26, r16
     ad2:	6d 91       	ld	r22, X+
     ad4:	8d 01       	movw	r16, r26
     ad6:	d6 01       	movw	r26, r12
     ad8:	ed 91       	ld	r30, X+
     ada:	fc 91       	ld	r31, X
     adc:	01 90       	ld	r0, Z+
     ade:	f0 81       	ld	r31, Z
     ae0:	e0 2d       	mov	r30, r0
     ae2:	c6 01       	movw	r24, r12
     ae4:	09 95       	icall
     ae6:	89 2b       	or	r24, r25
     ae8:	11 f0       	breq	.+4      	; 0xaee <_ZN5Print5writeEPKhj+0x3e>
     aea:	21 96       	adiw	r28, 0x01	; 1
     aec:	ee cf       	rjmp	.-36     	; 0xaca <_ZN5Print5writeEPKhj+0x1a>
     aee:	7e 01       	movw	r14, r28
     af0:	c7 01       	movw	r24, r14
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	1f 91       	pop	r17
     af8:	0f 91       	pop	r16
     afa:	ff 90       	pop	r15
     afc:	ef 90       	pop	r14
     afe:	df 90       	pop	r13
     b00:	cf 90       	pop	r12
     b02:	08 95       	ret

00000b04 <_ZN5Print5writeEPKc>:
     b04:	61 15       	cp	r22, r1
     b06:	71 05       	cpc	r23, r1
     b08:	79 f0       	breq	.+30     	; 0xb28 <_ZN5Print5writeEPKc+0x24>
     b0a:	fb 01       	movw	r30, r22
     b0c:	01 90       	ld	r0, Z+
     b0e:	00 20       	and	r0, r0
     b10:	e9 f7       	brne	.-6      	; 0xb0c <_ZN5Print5writeEPKc+0x8>
     b12:	31 97       	sbiw	r30, 0x01	; 1
     b14:	af 01       	movw	r20, r30
     b16:	46 1b       	sub	r20, r22
     b18:	57 0b       	sbc	r21, r23
     b1a:	dc 01       	movw	r26, r24
     b1c:	ed 91       	ld	r30, X+
     b1e:	fc 91       	ld	r31, X
     b20:	02 80       	ldd	r0, Z+2	; 0x02
     b22:	f3 81       	ldd	r31, Z+3	; 0x03
     b24:	e0 2d       	mov	r30, r0
     b26:	09 94       	ijmp
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	08 95       	ret

00000b2e <_ZN5Print5printEPKc>:
     b2e:	0c 94 82 05 	jmp	0xb04	; 0xb04 <_ZN5Print5writeEPKc>

00000b32 <_ZN5Print5printEc>:
     b32:	dc 01       	movw	r26, r24
     b34:	ed 91       	ld	r30, X+
     b36:	fc 91       	ld	r31, X
     b38:	01 90       	ld	r0, Z+
     b3a:	f0 81       	ld	r31, Z
     b3c:	e0 2d       	mov	r30, r0
     b3e:	09 94       	ijmp

00000b40 <_ZN5Print7printlnEv>:
     b40:	6c e4       	ldi	r22, 0x4C	; 76
     b42:	71 e0       	ldi	r23, 0x01	; 1
     b44:	0c 94 82 05 	jmp	0xb04	; 0xb04 <_ZN5Print5writeEPKc>

00000b48 <_ZN5Print11printNumberEmh>:
     b48:	8f 92       	push	r8
     b4a:	9f 92       	push	r9
     b4c:	af 92       	push	r10
     b4e:	bf 92       	push	r11
     b50:	ef 92       	push	r14
     b52:	ff 92       	push	r15
     b54:	0f 93       	push	r16
     b56:	1f 93       	push	r17
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	cd b7       	in	r28, 0x3d	; 61
     b5e:	de b7       	in	r29, 0x3e	; 62
     b60:	a1 97       	sbiw	r28, 0x21	; 33
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	f8 94       	cli
     b66:	de bf       	out	0x3e, r29	; 62
     b68:	0f be       	out	0x3f, r0	; 63
     b6a:	cd bf       	out	0x3d, r28	; 61
     b6c:	7c 01       	movw	r14, r24
     b6e:	fa 01       	movw	r30, r20
     b70:	cb 01       	movw	r24, r22
     b72:	19 a2       	std	Y+33, r1	; 0x21
     b74:	22 30       	cpi	r18, 0x02	; 2
     b76:	08 f4       	brcc	.+2      	; 0xb7a <_ZN5Print11printNumberEmh+0x32>
     b78:	2a e0       	ldi	r18, 0x0A	; 10
     b7a:	8e 01       	movw	r16, r28
     b7c:	0f 5d       	subi	r16, 0xDF	; 223
     b7e:	1f 4f       	sbci	r17, 0xFF	; 255
     b80:	82 2e       	mov	r8, r18
     b82:	91 2c       	mov	r9, r1
     b84:	a1 2c       	mov	r10, r1
     b86:	b1 2c       	mov	r11, r1
     b88:	bf 01       	movw	r22, r30
     b8a:	a5 01       	movw	r20, r10
     b8c:	94 01       	movw	r18, r8
     b8e:	0e 94 92 10 	call	0x2124	; 0x2124 <__udivmodsi4>
     b92:	f9 01       	movw	r30, r18
     b94:	ca 01       	movw	r24, r20
     b96:	01 50       	subi	r16, 0x01	; 1
     b98:	11 09       	sbc	r17, r1
     b9a:	6a 30       	cpi	r22, 0x0A	; 10
     b9c:	10 f4       	brcc	.+4      	; 0xba2 <_ZN5Print11printNumberEmh+0x5a>
     b9e:	60 5d       	subi	r22, 0xD0	; 208
     ba0:	01 c0       	rjmp	.+2      	; 0xba4 <_ZN5Print11printNumberEmh+0x5c>
     ba2:	69 5c       	subi	r22, 0xC9	; 201
     ba4:	d8 01       	movw	r26, r16
     ba6:	6c 93       	st	X, r22
     ba8:	23 2b       	or	r18, r19
     baa:	24 2b       	or	r18, r20
     bac:	25 2b       	or	r18, r21
     bae:	61 f7       	brne	.-40     	; 0xb88 <_ZN5Print11printNumberEmh+0x40>
     bb0:	b8 01       	movw	r22, r16
     bb2:	c7 01       	movw	r24, r14
     bb4:	0e 94 82 05 	call	0xb04	; 0xb04 <_ZN5Print5writeEPKc>
     bb8:	a1 96       	adiw	r28, 0x21	; 33
     bba:	0f b6       	in	r0, 0x3f	; 63
     bbc:	f8 94       	cli
     bbe:	de bf       	out	0x3e, r29	; 62
     bc0:	0f be       	out	0x3f, r0	; 63
     bc2:	cd bf       	out	0x3d, r28	; 61
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	1f 91       	pop	r17
     bca:	0f 91       	pop	r16
     bcc:	ff 90       	pop	r15
     bce:	ef 90       	pop	r14
     bd0:	bf 90       	pop	r11
     bd2:	af 90       	pop	r10
     bd4:	9f 90       	pop	r9
     bd6:	8f 90       	pop	r8
     bd8:	08 95       	ret

00000bda <_ZN5Print5printEmi>:
     bda:	21 15       	cp	r18, r1
     bdc:	31 05       	cpc	r19, r1
     bde:	41 f4       	brne	.+16     	; 0xbf0 <_ZN5Print5printEmi+0x16>
     be0:	dc 01       	movw	r26, r24
     be2:	ed 91       	ld	r30, X+
     be4:	fc 91       	ld	r31, X
     be6:	01 90       	ld	r0, Z+
     be8:	f0 81       	ld	r31, Z
     bea:	e0 2d       	mov	r30, r0
     bec:	64 2f       	mov	r22, r20
     bee:	09 94       	ijmp
     bf0:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <_ZN5Print11printNumberEmh>

00000bf4 <_ZN5Print5printEhi>:
     bf4:	9a 01       	movw	r18, r20
     bf6:	46 2f       	mov	r20, r22
     bf8:	50 e0       	ldi	r21, 0x00	; 0
     bfa:	60 e0       	ldi	r22, 0x00	; 0
     bfc:	70 e0       	ldi	r23, 0x00	; 0
     bfe:	0c 94 ed 05 	jmp	0xbda	; 0xbda <_ZN5Print5printEmi>

00000c02 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     c02:	cf 92       	push	r12
     c04:	df 92       	push	r13
     c06:	ef 92       	push	r14
     c08:	ff 92       	push	r15
     c0a:	0f 93       	push	r16
     c0c:	1f 93       	push	r17
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
  if (base == 0) {
     c12:	21 15       	cp	r18, r1
     c14:	31 05       	cpc	r19, r1
     c16:	81 f4       	brne	.+32     	; 0xc38 <_ZN5Print5printEli+0x36>
    return write(n);
     c18:	dc 01       	movw	r26, r24
     c1a:	ed 91       	ld	r30, X+
     c1c:	fc 91       	ld	r31, X
     c1e:	01 90       	ld	r0, Z+
     c20:	f0 81       	ld	r31, Z
     c22:	e0 2d       	mov	r30, r0
     c24:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     c26:	df 91       	pop	r29
     c28:	cf 91       	pop	r28
     c2a:	1f 91       	pop	r17
     c2c:	0f 91       	pop	r16
     c2e:	ff 90       	pop	r15
     c30:	ef 90       	pop	r14
     c32:	df 90       	pop	r13
     c34:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     c36:	09 94       	ijmp
  } else if (base == 10) {
     c38:	2a 30       	cpi	r18, 0x0A	; 10
     c3a:	31 05       	cpc	r19, r1
     c3c:	01 f5       	brne	.+64     	; 0xc7e <_ZN5Print5printEli+0x7c>
    if (n < 0) {
     c3e:	77 ff       	sbrs	r23, 7
     c40:	1d c0       	rjmp	.+58     	; 0xc7c <_ZN5Print5printEli+0x7a>
     c42:	6a 01       	movw	r12, r20
     c44:	7b 01       	movw	r14, r22
     c46:	ec 01       	movw	r28, r24
      int t = print('-');
     c48:	6d e2       	ldi	r22, 0x2D	; 45
     c4a:	0e 94 99 05 	call	0xb32	; 0xb32 <_ZN5Print5printEc>
     c4e:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
     c50:	44 27       	eor	r20, r20
     c52:	55 27       	eor	r21, r21
     c54:	ba 01       	movw	r22, r20
     c56:	4c 19       	sub	r20, r12
     c58:	5d 09       	sbc	r21, r13
     c5a:	6e 09       	sbc	r22, r14
     c5c:	7f 09       	sbc	r23, r15
     c5e:	2a e0       	ldi	r18, 0x0A	; 10
     c60:	ce 01       	movw	r24, r28
     c62:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN5Print11printNumberEmh>
     c66:	80 0f       	add	r24, r16
     c68:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	1f 91       	pop	r17
     c70:	0f 91       	pop	r16
     c72:	ff 90       	pop	r15
     c74:	ef 90       	pop	r14
     c76:	df 90       	pop	r13
     c78:	cf 90       	pop	r12
     c7a:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     c7c:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
     c7e:	df 91       	pop	r29
     c80:	cf 91       	pop	r28
     c82:	1f 91       	pop	r17
     c84:	0f 91       	pop	r16
     c86:	ff 90       	pop	r15
     c88:	ef 90       	pop	r14
     c8a:	df 90       	pop	r13
     c8c:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     c8e:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <_ZN5Print11printNumberEmh>

00000c92 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
     c92:	08 95       	ret

00000c94 <attachInterrupt>:
     c94:	82 30       	cpi	r24, 0x02	; 2
     c96:	e8 f4       	brcc	.+58     	; 0xcd2 <attachInterrupt+0x3e>
     c98:	e8 2f       	mov	r30, r24
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	ee 0f       	add	r30, r30
     c9e:	ff 1f       	adc	r31, r31
     ca0:	ef 5f       	subi	r30, 0xFF	; 255
     ca2:	fe 4f       	sbci	r31, 0xFE	; 254
     ca4:	71 83       	std	Z+1, r23	; 0x01
     ca6:	60 83       	st	Z, r22
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	41 f0       	breq	.+16     	; 0xcbc <attachInterrupt+0x28>
     cac:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     cb0:	8c 7f       	andi	r24, 0xFC	; 252
     cb2:	48 2b       	or	r20, r24
     cb4:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     cb8:	e8 9a       	sbi	0x1d, 0	; 29
     cba:	08 95       	ret
     cbc:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     cc0:	83 7f       	andi	r24, 0xF3	; 243
     cc2:	44 0f       	add	r20, r20
     cc4:	55 1f       	adc	r21, r21
     cc6:	44 0f       	add	r20, r20
     cc8:	55 1f       	adc	r21, r21
     cca:	48 2b       	or	r20, r24
     ccc:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     cd0:	e9 9a       	sbi	0x1d, 1	; 29
     cd2:	08 95       	ret

00000cd4 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
     cd4:	1f 92       	push	r1
     cd6:	0f 92       	push	r0
     cd8:	0f b6       	in	r0, 0x3f	; 63
     cda:	0f 92       	push	r0
     cdc:	11 24       	eor	r1, r1
     cde:	2f 93       	push	r18
     ce0:	3f 93       	push	r19
     ce2:	4f 93       	push	r20
     ce4:	5f 93       	push	r21
     ce6:	6f 93       	push	r22
     ce8:	7f 93       	push	r23
     cea:	8f 93       	push	r24
     cec:	9f 93       	push	r25
     cee:	af 93       	push	r26
     cf0:	bf 93       	push	r27
     cf2:	ef 93       	push	r30
     cf4:	ff 93       	push	r31
     cf6:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <intFunc>
     cfa:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <intFunc+0x1>
     cfe:	09 95       	icall
     d00:	ff 91       	pop	r31
     d02:	ef 91       	pop	r30
     d04:	bf 91       	pop	r27
     d06:	af 91       	pop	r26
     d08:	9f 91       	pop	r25
     d0a:	8f 91       	pop	r24
     d0c:	7f 91       	pop	r23
     d0e:	6f 91       	pop	r22
     d10:	5f 91       	pop	r21
     d12:	4f 91       	pop	r20
     d14:	3f 91       	pop	r19
     d16:	2f 91       	pop	r18
     d18:	0f 90       	pop	r0
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	0f 90       	pop	r0
     d1e:	1f 90       	pop	r1
     d20:	18 95       	reti

00000d22 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
     d22:	1f 92       	push	r1
     d24:	0f 92       	push	r0
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	0f 92       	push	r0
     d2a:	11 24       	eor	r1, r1
     d2c:	2f 93       	push	r18
     d2e:	3f 93       	push	r19
     d30:	4f 93       	push	r20
     d32:	5f 93       	push	r21
     d34:	6f 93       	push	r22
     d36:	7f 93       	push	r23
     d38:	8f 93       	push	r24
     d3a:	9f 93       	push	r25
     d3c:	af 93       	push	r26
     d3e:	bf 93       	push	r27
     d40:	ef 93       	push	r30
     d42:	ff 93       	push	r31
     d44:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <intFunc+0x2>
     d48:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <intFunc+0x3>
     d4c:	09 95       	icall
     d4e:	ff 91       	pop	r31
     d50:	ef 91       	pop	r30
     d52:	bf 91       	pop	r27
     d54:	af 91       	pop	r26
     d56:	9f 91       	pop	r25
     d58:	8f 91       	pop	r24
     d5a:	7f 91       	pop	r23
     d5c:	6f 91       	pop	r22
     d5e:	5f 91       	pop	r21
     d60:	4f 91       	pop	r20
     d62:	3f 91       	pop	r19
     d64:	2f 91       	pop	r18
     d66:	0f 90       	pop	r0
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	0f 90       	pop	r0
     d6c:	1f 90       	pop	r1
     d6e:	18 95       	reti

00000d70 <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
     d70:	1f 92       	push	r1
     d72:	0f 92       	push	r0
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	0f 92       	push	r0
     d78:	11 24       	eor	r1, r1
     d7a:	2f 93       	push	r18
     d7c:	3f 93       	push	r19
     d7e:	8f 93       	push	r24
     d80:	9f 93       	push	r25
     d82:	af 93       	push	r26
     d84:	bf 93       	push	r27
     d86:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <timer0_millis>
     d8a:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <timer0_millis+0x1>
     d8e:	a0 91 50 02 	lds	r26, 0x0250	; 0x800250 <timer0_millis+0x2>
     d92:	b0 91 51 02 	lds	r27, 0x0251	; 0x800251 <timer0_millis+0x3>
     d96:	30 91 4d 02 	lds	r19, 0x024D	; 0x80024d <timer0_fract>
     d9a:	23 e0       	ldi	r18, 0x03	; 3
     d9c:	23 0f       	add	r18, r19
     d9e:	2d 37       	cpi	r18, 0x7D	; 125
     da0:	20 f4       	brcc	.+8      	; 0xdaa <__vector_16+0x3a>
     da2:	01 96       	adiw	r24, 0x01	; 1
     da4:	a1 1d       	adc	r26, r1
     da6:	b1 1d       	adc	r27, r1
     da8:	05 c0       	rjmp	.+10     	; 0xdb4 <__vector_16+0x44>
     daa:	26 e8       	ldi	r18, 0x86	; 134
     dac:	23 0f       	add	r18, r19
     dae:	02 96       	adiw	r24, 0x02	; 2
     db0:	a1 1d       	adc	r26, r1
     db2:	b1 1d       	adc	r27, r1
     db4:	20 93 4d 02 	sts	0x024D, r18	; 0x80024d <timer0_fract>
     db8:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <timer0_millis>
     dbc:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <timer0_millis+0x1>
     dc0:	a0 93 50 02 	sts	0x0250, r26	; 0x800250 <timer0_millis+0x2>
     dc4:	b0 93 51 02 	sts	0x0251, r27	; 0x800251 <timer0_millis+0x3>
     dc8:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <timer0_overflow_count>
     dcc:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <timer0_overflow_count+0x1>
     dd0:	a0 91 54 02 	lds	r26, 0x0254	; 0x800254 <timer0_overflow_count+0x2>
     dd4:	b0 91 55 02 	lds	r27, 0x0255	; 0x800255 <timer0_overflow_count+0x3>
     dd8:	01 96       	adiw	r24, 0x01	; 1
     dda:	a1 1d       	adc	r26, r1
     ddc:	b1 1d       	adc	r27, r1
     dde:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <timer0_overflow_count>
     de2:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <timer0_overflow_count+0x1>
     de6:	a0 93 54 02 	sts	0x0254, r26	; 0x800254 <timer0_overflow_count+0x2>
     dea:	b0 93 55 02 	sts	0x0255, r27	; 0x800255 <timer0_overflow_count+0x3>
     dee:	bf 91       	pop	r27
     df0:	af 91       	pop	r26
     df2:	9f 91       	pop	r25
     df4:	8f 91       	pop	r24
     df6:	3f 91       	pop	r19
     df8:	2f 91       	pop	r18
     dfa:	0f 90       	pop	r0
     dfc:	0f be       	out	0x3f, r0	; 63
     dfe:	0f 90       	pop	r0
     e00:	1f 90       	pop	r1
     e02:	18 95       	reti

00000e04 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     e04:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     e06:	f8 94       	cli
	m = timer0_overflow_count;
     e08:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <timer0_overflow_count>
     e0c:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <timer0_overflow_count+0x1>
     e10:	a0 91 54 02 	lds	r26, 0x0254	; 0x800254 <timer0_overflow_count+0x2>
     e14:	b0 91 55 02 	lds	r27, 0x0255	; 0x800255 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     e18:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     e1a:	a8 9b       	sbis	0x15, 0	; 21
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <micros+0x24>
     e1e:	2f 3f       	cpi	r18, 0xFF	; 255
     e20:	19 f0       	breq	.+6      	; 0xe28 <micros+0x24>
		m++;
     e22:	01 96       	adiw	r24, 0x01	; 1
     e24:	a1 1d       	adc	r26, r1
     e26:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     e28:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     e2a:	ba 2f       	mov	r27, r26
     e2c:	a9 2f       	mov	r26, r25
     e2e:	98 2f       	mov	r25, r24
     e30:	88 27       	eor	r24, r24
     e32:	82 0f       	add	r24, r18
     e34:	91 1d       	adc	r25, r1
     e36:	a1 1d       	adc	r26, r1
     e38:	b1 1d       	adc	r27, r1
     e3a:	bc 01       	movw	r22, r24
     e3c:	cd 01       	movw	r24, r26
     e3e:	42 e0       	ldi	r20, 0x02	; 2
     e40:	66 0f       	add	r22, r22
     e42:	77 1f       	adc	r23, r23
     e44:	88 1f       	adc	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	4a 95       	dec	r20
     e4a:	d1 f7       	brne	.-12     	; 0xe40 <micros+0x3c>
}
     e4c:	08 95       	ret

00000e4e <delay>:

void delay(unsigned long ms)
{
     e4e:	8f 92       	push	r8
     e50:	9f 92       	push	r9
     e52:	af 92       	push	r10
     e54:	bf 92       	push	r11
     e56:	cf 92       	push	r12
     e58:	df 92       	push	r13
     e5a:	ef 92       	push	r14
     e5c:	ff 92       	push	r15
     e5e:	6b 01       	movw	r12, r22
     e60:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     e62:	0e 94 02 07 	call	0xe04	; 0xe04 <micros>
     e66:	4b 01       	movw	r8, r22
     e68:	5c 01       	movw	r10, r24

	while (ms > 0) {
     e6a:	c1 14       	cp	r12, r1
     e6c:	d1 04       	cpc	r13, r1
     e6e:	e1 04       	cpc	r14, r1
     e70:	f1 04       	cpc	r15, r1
     e72:	01 f1       	breq	.+64     	; 0xeb4 <delay+0x66>
		yield();
     e74:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
     e78:	0e 94 02 07 	call	0xe04	; 0xe04 <micros>
     e7c:	dc 01       	movw	r26, r24
     e7e:	cb 01       	movw	r24, r22
     e80:	88 19       	sub	r24, r8
     e82:	99 09       	sbc	r25, r9
     e84:	aa 09       	sbc	r26, r10
     e86:	bb 09       	sbc	r27, r11
     e88:	88 3e       	cpi	r24, 0xE8	; 232
     e8a:	93 40       	sbci	r25, 0x03	; 3
     e8c:	a1 05       	cpc	r26, r1
     e8e:	b1 05       	cpc	r27, r1
     e90:	60 f3       	brcs	.-40     	; 0xe6a <delay+0x1c>
			ms--;
     e92:	21 e0       	ldi	r18, 0x01	; 1
     e94:	c2 1a       	sub	r12, r18
     e96:	d1 08       	sbc	r13, r1
     e98:	e1 08       	sbc	r14, r1
     e9a:	f1 08       	sbc	r15, r1
			start += 1000;
     e9c:	88 ee       	ldi	r24, 0xE8	; 232
     e9e:	88 0e       	add	r8, r24
     ea0:	83 e0       	ldi	r24, 0x03	; 3
     ea2:	98 1e       	adc	r9, r24
     ea4:	a1 1c       	adc	r10, r1
     ea6:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     ea8:	c1 14       	cp	r12, r1
     eaa:	d1 04       	cpc	r13, r1
     eac:	e1 04       	cpc	r14, r1
     eae:	f1 04       	cpc	r15, r1
     eb0:	19 f7       	brne	.-58     	; 0xe78 <delay+0x2a>
     eb2:	db cf       	rjmp	.-74     	; 0xe6a <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
     eb4:	ff 90       	pop	r15
     eb6:	ef 90       	pop	r14
     eb8:	df 90       	pop	r13
     eba:	cf 90       	pop	r12
     ebc:	bf 90       	pop	r11
     ebe:	af 90       	pop	r10
     ec0:	9f 90       	pop	r9
     ec2:	8f 90       	pop	r8
     ec4:	08 95       	ret

00000ec6 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     ec6:	82 30       	cpi	r24, 0x02	; 2
     ec8:	91 05       	cpc	r25, r1
     eca:	38 f0       	brcs	.+14     	; 0xeda <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     ecc:	88 0f       	add	r24, r24
     ece:	99 1f       	adc	r25, r25
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     ed4:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	f1 f7       	brne	.-4      	; 0xed6 <delayMicroseconds+0x10>
     eda:	08 95       	ret

00000edc <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     edc:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     ede:	84 b5       	in	r24, 0x24	; 36
     ee0:	82 60       	ori	r24, 0x02	; 2
     ee2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     ee4:	84 b5       	in	r24, 0x24	; 36
     ee6:	81 60       	ori	r24, 0x01	; 1
     ee8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     eea:	85 b5       	in	r24, 0x25	; 37
     eec:	82 60       	ori	r24, 0x02	; 2
     eee:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     ef0:	85 b5       	in	r24, 0x25	; 37
     ef2:	81 60       	ori	r24, 0x01	; 1
     ef4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     ef6:	ee e6       	ldi	r30, 0x6E	; 110
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	81 60       	ori	r24, 0x01	; 1
     efe:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     f00:	e1 e8       	ldi	r30, 0x81	; 129
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     f06:	80 81       	ld	r24, Z
     f08:	82 60       	ori	r24, 0x02	; 2
     f0a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     f0c:	80 81       	ld	r24, Z
     f0e:	81 60       	ori	r24, 0x01	; 1
     f10:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     f12:	e0 e8       	ldi	r30, 0x80	; 128
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	81 60       	ori	r24, 0x01	; 1
     f1a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     f1c:	e1 eb       	ldi	r30, 0xB1	; 177
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	84 60       	ori	r24, 0x04	; 4
     f24:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     f26:	e0 eb       	ldi	r30, 0xB0	; 176
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	81 60       	ori	r24, 0x01	; 1
     f2e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     f30:	ea e7       	ldi	r30, 0x7A	; 122
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	84 60       	ori	r24, 0x04	; 4
     f38:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     f3a:	80 81       	ld	r24, Z
     f3c:	82 60       	ori	r24, 0x02	; 2
     f3e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     f40:	80 81       	ld	r24, Z
     f42:	81 60       	ori	r24, 0x01	; 1
     f44:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     f46:	80 81       	ld	r24, Z
     f48:	80 68       	ori	r24, 0x80	; 128
     f4a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     f4c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     f50:	08 95       	ret

00000f52 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     f52:	83 30       	cpi	r24, 0x03	; 3
     f54:	81 f0       	breq	.+32     	; 0xf76 <turnOffPWM+0x24>
     f56:	28 f4       	brcc	.+10     	; 0xf62 <turnOffPWM+0x10>
     f58:	81 30       	cpi	r24, 0x01	; 1
     f5a:	99 f0       	breq	.+38     	; 0xf82 <turnOffPWM+0x30>
     f5c:	82 30       	cpi	r24, 0x02	; 2
     f5e:	a1 f0       	breq	.+40     	; 0xf88 <turnOffPWM+0x36>
     f60:	08 95       	ret
     f62:	87 30       	cpi	r24, 0x07	; 7
     f64:	a9 f0       	breq	.+42     	; 0xf90 <turnOffPWM+0x3e>
     f66:	88 30       	cpi	r24, 0x08	; 8
     f68:	b9 f0       	breq	.+46     	; 0xf98 <turnOffPWM+0x46>
     f6a:	84 30       	cpi	r24, 0x04	; 4
     f6c:	d1 f4       	brne	.+52     	; 0xfa2 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     f6e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     f72:	8f 7d       	andi	r24, 0xDF	; 223
     f74:	03 c0       	rjmp	.+6      	; 0xf7c <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     f76:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     f7a:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     f7c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     f80:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     f82:	84 b5       	in	r24, 0x24	; 36
     f84:	8f 77       	andi	r24, 0x7F	; 127
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     f88:	84 b5       	in	r24, 0x24	; 36
     f8a:	8f 7d       	andi	r24, 0xDF	; 223
     f8c:	84 bd       	out	0x24, r24	; 36
     f8e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     f90:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     f94:	8f 77       	andi	r24, 0x7F	; 127
     f96:	03 c0       	rjmp	.+6      	; 0xf9e <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     f98:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     f9c:	8f 7d       	andi	r24, 0xDF	; 223
     f9e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     fa2:	08 95       	ret

00000fa4 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     fa4:	cf 93       	push	r28
     fa6:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	fc 01       	movw	r30, r24
     fac:	e4 58       	subi	r30, 0x84	; 132
     fae:	ff 4f       	sbci	r31, 0xFF	; 255
     fb0:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     fb2:	fc 01       	movw	r30, r24
     fb4:	e0 57       	subi	r30, 0x70	; 112
     fb6:	ff 4f       	sbci	r31, 0xFF	; 255
     fb8:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     fba:	88 23       	and	r24, r24
     fbc:	61 f1       	breq	.+88     	; 0x1016 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	fc 01       	movw	r30, r24
     fc6:	e2 55       	subi	r30, 0x52	; 82
     fc8:	ff 4f       	sbci	r31, 0xFF	; 255
     fca:	c5 91       	lpm	r28, Z+
     fcc:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     fce:	fc 01       	movw	r30, r24
     fd0:	ec 55       	subi	r30, 0x5C	; 92
     fd2:	ff 4f       	sbci	r31, 0xFF	; 255
     fd4:	a5 91       	lpm	r26, Z+
     fd6:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     fd8:	61 11       	cpse	r22, r1
     fda:	09 c0       	rjmp	.+18     	; 0xfee <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     fdc:	9f b7       	in	r25, 0x3f	; 63
                cli();
     fde:	f8 94       	cli
		*reg &= ~bit;
     fe0:	88 81       	ld	r24, Y
     fe2:	20 95       	com	r18
     fe4:	82 23       	and	r24, r18
     fe6:	88 83       	st	Y, r24
		*out &= ~bit;
     fe8:	ec 91       	ld	r30, X
     fea:	2e 23       	and	r18, r30
     fec:	0b c0       	rjmp	.+22     	; 0x1004 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     fee:	62 30       	cpi	r22, 0x02	; 2
     ff0:	61 f4       	brne	.+24     	; 0x100a <pinMode+0x66>
		uint8_t oldSREG = SREG;
     ff2:	9f b7       	in	r25, 0x3f	; 63
                cli();
     ff4:	f8 94       	cli
		*reg &= ~bit;
     ff6:	88 81       	ld	r24, Y
     ff8:	32 2f       	mov	r19, r18
     ffa:	30 95       	com	r19
     ffc:	83 23       	and	r24, r19
     ffe:	88 83       	st	Y, r24
		*out |= bit;
    1000:	ec 91       	ld	r30, X
    1002:	2e 2b       	or	r18, r30
    1004:	2c 93       	st	X, r18
		SREG = oldSREG;
    1006:	9f bf       	out	0x3f, r25	; 63
    1008:	06 c0       	rjmp	.+12     	; 0x1016 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    100a:	8f b7       	in	r24, 0x3f	; 63
                cli();
    100c:	f8 94       	cli
		*reg |= bit;
    100e:	e8 81       	ld	r30, Y
    1010:	2e 2b       	or	r18, r30
    1012:	28 83       	st	Y, r18
		SREG = oldSREG;
    1014:	8f bf       	out	0x3f, r24	; 63
	}
}
    1016:	df 91       	pop	r29
    1018:	cf 91       	pop	r28
    101a:	08 95       	ret

0000101c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    101c:	1f 93       	push	r17
    101e:	cf 93       	push	r28
    1020:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	f9 01       	movw	r30, r18
    1028:	e8 59       	subi	r30, 0x98	; 152
    102a:	ff 4f       	sbci	r31, 0xFF	; 255
    102c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    102e:	f9 01       	movw	r30, r18
    1030:	e4 58       	subi	r30, 0x84	; 132
    1032:	ff 4f       	sbci	r31, 0xFF	; 255
    1034:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1036:	f9 01       	movw	r30, r18
    1038:	e0 57       	subi	r30, 0x70	; 112
    103a:	ff 4f       	sbci	r31, 0xFF	; 255
    103c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    103e:	cc 23       	and	r28, r28
    1040:	c1 f0       	breq	.+48     	; 0x1072 <digitalWrite+0x56>
    1042:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1044:	81 11       	cpse	r24, r1
    1046:	0e 94 a9 07 	call	0xf52	; 0xf52 <turnOffPWM>

	out = portOutputRegister(port);
    104a:	ec 2f       	mov	r30, r28
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	ee 0f       	add	r30, r30
    1050:	ff 1f       	adc	r31, r31
    1052:	ec 55       	subi	r30, 0x5C	; 92
    1054:	ff 4f       	sbci	r31, 0xFF	; 255
    1056:	a5 91       	lpm	r26, Z+
    1058:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    105a:	9f b7       	in	r25, 0x3f	; 63
	cli();
    105c:	f8 94       	cli

	if (val == LOW) {
    105e:	11 11       	cpse	r17, r1
    1060:	04 c0       	rjmp	.+8      	; 0x106a <digitalWrite+0x4e>
		*out &= ~bit;
    1062:	8c 91       	ld	r24, X
    1064:	d0 95       	com	r29
    1066:	d8 23       	and	r29, r24
    1068:	02 c0       	rjmp	.+4      	; 0x106e <digitalWrite+0x52>
	} else {
		*out |= bit;
    106a:	ec 91       	ld	r30, X
    106c:	de 2b       	or	r29, r30
    106e:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1070:	9f bf       	out	0x3f, r25	; 63
}
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	1f 91       	pop	r17
    1078:	08 95       	ret

0000107a <_ZN9DS3232RTC7bcd2decEh>:
{
    tmElements_t tm;

    breakTime(t, tm);
    return ( write(tm) );
}
    107a:	98 2f       	mov	r25, r24
    107c:	92 95       	swap	r25
    107e:	9f 70       	andi	r25, 0x0F	; 15
    1080:	2a ef       	ldi	r18, 0xFA	; 250
    1082:	92 9f       	mul	r25, r18
    1084:	80 0d       	add	r24, r0
    1086:	11 24       	eor	r1, r1
    1088:	08 95       	ret

0000108a <_GLOBAL__sub_I__ZN9DS3232RTC7errCodeE>:
    108a:	8d e6       	ldi	r24, 0x6D	; 109
    108c:	92 e0       	ldi	r25, 0x02	; 2
    108e:	0c 94 c2 0d 	jmp	0x1b84	; 0x1b84 <_ZN7TwoWire5beginEv>

00001092 <_ZN9DS3232RTC8writeRTCEhPhh>:
    1092:	ff 92       	push	r15
    1094:	0f 93       	push	r16
    1096:	1f 93       	push	r17
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	c6 2f       	mov	r28, r22
    109e:	f4 2e       	mov	r15, r20
    10a0:	05 2f       	mov	r16, r21
    10a2:	12 2f       	mov	r17, r18
    10a4:	68 e6       	ldi	r22, 0x68	; 104
    10a6:	70 e0       	ldi	r23, 0x00	; 0
    10a8:	8d e6       	ldi	r24, 0x6D	; 109
    10aa:	92 e0       	ldi	r25, 0x02	; 2
    10ac:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <_ZN7TwoWire17beginTransmissionEi>
    10b0:	6c 2f       	mov	r22, r28
    10b2:	8d e6       	ldi	r24, 0x6D	; 109
    10b4:	92 e0       	ldi	r25, 0x02	; 2
    10b6:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <_ZN7TwoWire5writeEh>
    10ba:	cf 2d       	mov	r28, r15
    10bc:	d0 2f       	mov	r29, r16
    10be:	ce 01       	movw	r24, r28
    10c0:	81 0f       	add	r24, r17
    10c2:	91 1d       	adc	r25, r1
    10c4:	8c 01       	movw	r16, r24
    10c6:	c0 17       	cp	r28, r16
    10c8:	d1 07       	cpc	r29, r17
    10ca:	31 f0       	breq	.+12     	; 0x10d8 <_ZN9DS3232RTC8writeRTCEhPhh+0x46>
    10cc:	69 91       	ld	r22, Y+
    10ce:	8d e6       	ldi	r24, 0x6D	; 109
    10d0:	92 e0       	ldi	r25, 0x02	; 2
    10d2:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <_ZN7TwoWire5writeEh>
    10d6:	f7 cf       	rjmp	.-18     	; 0x10c6 <_ZN9DS3232RTC8writeRTCEhPhh+0x34>
    10d8:	8d e6       	ldi	r24, 0x6D	; 109
    10da:	92 e0       	ldi	r25, 0x02	; 2
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	1f 91       	pop	r17
    10e2:	0f 91       	pop	r16
    10e4:	ff 90       	pop	r15
    10e6:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <_ZN7TwoWire15endTransmissionEv>

000010ea <_ZN9DS3232RTC8writeRTCEhh>:
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	1f 92       	push	r1
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	49 83       	std	Y+1, r20	; 0x01
    10f6:	21 e0       	ldi	r18, 0x01	; 1
    10f8:	ae 01       	movw	r20, r28
    10fa:	4f 5f       	subi	r20, 0xFF	; 255
    10fc:	5f 4f       	sbci	r21, 0xFF	; 255
    10fe:	0e 94 49 08 	call	0x1092	; 0x1092 <_ZN9DS3232RTC8writeRTCEhPhh>
    1102:	0f 90       	pop	r0
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	08 95       	ret

0000110a <_ZN9DS3232RTC4readER12tmElements_t>:
    110a:	cf 93       	push	r28
    110c:	df 93       	push	r29
    110e:	ec 01       	movw	r28, r24
    1110:	68 e6       	ldi	r22, 0x68	; 104
    1112:	70 e0       	ldi	r23, 0x00	; 0
    1114:	8d e6       	ldi	r24, 0x6D	; 109
    1116:	92 e0       	ldi	r25, 0x02	; 2
    1118:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <_ZN7TwoWire17beginTransmissionEi>
    111c:	60 e0       	ldi	r22, 0x00	; 0
    111e:	8d e6       	ldi	r24, 0x6D	; 109
    1120:	92 e0       	ldi	r25, 0x02	; 2
    1122:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <_ZN7TwoWire5writeEh>
    1126:	8d e6       	ldi	r24, 0x6D	; 109
    1128:	92 e0       	ldi	r25, 0x02	; 2
    112a:	0e 94 55 0e 	call	0x1caa	; 0x1caa <_ZN7TwoWire15endTransmissionEv>
    112e:	88 23       	and	r24, r24
    1130:	19 f0       	breq	.+6      	; 0x1138 <_ZN9DS3232RTC4readER12tmElements_t+0x2e>
    1132:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <_ZN9DS3232RTC7errCodeE>
    1136:	3c c0       	rjmp	.+120    	; 0x11b0 <_ZN9DS3232RTC4readER12tmElements_t+0xa6>
    1138:	47 e0       	ldi	r20, 0x07	; 7
    113a:	50 e0       	ldi	r21, 0x00	; 0
    113c:	68 e6       	ldi	r22, 0x68	; 104
    113e:	70 e0       	ldi	r23, 0x00	; 0
    1140:	8d e6       	ldi	r24, 0x6D	; 109
    1142:	92 e0       	ldi	r25, 0x02	; 2
    1144:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <_ZN7TwoWire11requestFromEii>
    1148:	8d e6       	ldi	r24, 0x6D	; 109
    114a:	92 e0       	ldi	r25, 0x02	; 2
    114c:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <_ZN7TwoWire4readEv>
    1150:	8f 77       	andi	r24, 0x7F	; 127
    1152:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN9DS3232RTC7bcd2decEh>
    1156:	88 83       	st	Y, r24
    1158:	8d e6       	ldi	r24, 0x6D	; 109
    115a:	92 e0       	ldi	r25, 0x02	; 2
    115c:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <_ZN7TwoWire4readEv>
    1160:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN9DS3232RTC7bcd2decEh>
    1164:	89 83       	std	Y+1, r24	; 0x01
    1166:	8d e6       	ldi	r24, 0x6D	; 109
    1168:	92 e0       	ldi	r25, 0x02	; 2
    116a:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <_ZN7TwoWire4readEv>
    116e:	8f 7b       	andi	r24, 0xBF	; 191
    1170:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN9DS3232RTC7bcd2decEh>
    1174:	8a 83       	std	Y+2, r24	; 0x02
    1176:	8d e6       	ldi	r24, 0x6D	; 109
    1178:	92 e0       	ldi	r25, 0x02	; 2
    117a:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <_ZN7TwoWire4readEv>
    117e:	8b 83       	std	Y+3, r24	; 0x03
    1180:	8d e6       	ldi	r24, 0x6D	; 109
    1182:	92 e0       	ldi	r25, 0x02	; 2
    1184:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <_ZN7TwoWire4readEv>
    1188:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN9DS3232RTC7bcd2decEh>
    118c:	8c 83       	std	Y+4, r24	; 0x04
    118e:	8d e6       	ldi	r24, 0x6D	; 109
    1190:	92 e0       	ldi	r25, 0x02	; 2
    1192:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <_ZN7TwoWire4readEv>
    1196:	8f 77       	andi	r24, 0x7F	; 127
    1198:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN9DS3232RTC7bcd2decEh>
    119c:	8d 83       	std	Y+5, r24	; 0x05
    119e:	8d e6       	ldi	r24, 0x6D	; 109
    11a0:	92 e0       	ldi	r25, 0x02	; 2
    11a2:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <_ZN7TwoWire4readEv>
    11a6:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN9DS3232RTC7bcd2decEh>
    11aa:	82 5e       	subi	r24, 0xE2	; 226
    11ac:	8e 83       	std	Y+6, r24	; 0x06
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	df 91       	pop	r29
    11b2:	cf 91       	pop	r28
    11b4:	08 95       	ret

000011b6 <_ZN9DS3232RTC3getEv>:
    11b6:	cf 93       	push	r28
    11b8:	df 93       	push	r29
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	27 97       	sbiw	r28, 0x07	; 7
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	f8 94       	cli
    11c4:	de bf       	out	0x3e, r29	; 62
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	cd bf       	out	0x3d, r28	; 61
    11ca:	ce 01       	movw	r24, r28
    11cc:	01 96       	adiw	r24, 0x01	; 1
    11ce:	0e 94 85 08 	call	0x110a	; 0x110a <_ZN9DS3232RTC4readER12tmElements_t>
    11d2:	81 11       	cpse	r24, r1
    11d4:	05 c0       	rjmp	.+10     	; 0x11e0 <_ZN9DS3232RTC3getEv+0x2a>
    11d6:	ce 01       	movw	r24, r28
    11d8:	01 96       	adiw	r24, 0x01	; 1
    11da:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <_Z8makeTimeR12tmElements_t>
    11de:	03 c0       	rjmp	.+6      	; 0x11e6 <_ZN9DS3232RTC3getEv+0x30>
    11e0:	60 e0       	ldi	r22, 0x00	; 0
    11e2:	70 e0       	ldi	r23, 0x00	; 0
    11e4:	cb 01       	movw	r24, r22
    11e6:	27 96       	adiw	r28, 0x07	; 7
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	f8 94       	cli
    11ec:	de bf       	out	0x3e, r29	; 62
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	cd bf       	out	0x3d, r28	; 61
    11f2:	df 91       	pop	r29
    11f4:	cf 91       	pop	r28
    11f6:	08 95       	ret

000011f8 <_ZN9DS3232RTC7readRTCEhPhh>:
    11f8:	ff 92       	push	r15
    11fa:	0f 93       	push	r16
    11fc:	1f 93       	push	r17
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
    1202:	c6 2f       	mov	r28, r22
    1204:	f4 2e       	mov	r15, r20
    1206:	05 2f       	mov	r16, r21
    1208:	12 2f       	mov	r17, r18
    120a:	68 e6       	ldi	r22, 0x68	; 104
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	8d e6       	ldi	r24, 0x6D	; 109
    1210:	92 e0       	ldi	r25, 0x02	; 2
    1212:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <_ZN7TwoWire17beginTransmissionEi>
    1216:	6c 2f       	mov	r22, r28
    1218:	8d e6       	ldi	r24, 0x6D	; 109
    121a:	92 e0       	ldi	r25, 0x02	; 2
    121c:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <_ZN7TwoWire5writeEh>
    1220:	8d e6       	ldi	r24, 0x6D	; 109
    1222:	92 e0       	ldi	r25, 0x02	; 2
    1224:	0e 94 55 0e 	call	0x1caa	; 0x1caa <_ZN7TwoWire15endTransmissionEv>
    1228:	81 11       	cpse	r24, r1
    122a:	16 c0       	rjmp	.+44     	; 0x1258 <_ZN9DS3232RTC7readRTCEhPhh+0x60>
    122c:	41 2f       	mov	r20, r17
    122e:	68 e6       	ldi	r22, 0x68	; 104
    1230:	8d e6       	ldi	r24, 0x6D	; 109
    1232:	92 e0       	ldi	r25, 0x02	; 2
    1234:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <_ZN7TwoWire11requestFromEhh>
    1238:	cf 2d       	mov	r28, r15
    123a:	d0 2f       	mov	r29, r16
    123c:	ce 01       	movw	r24, r28
    123e:	81 0f       	add	r24, r17
    1240:	91 1d       	adc	r25, r1
    1242:	8c 01       	movw	r16, r24
    1244:	c0 17       	cp	r28, r16
    1246:	d1 07       	cpc	r29, r17
    1248:	31 f0       	breq	.+12     	; 0x1256 <_ZN9DS3232RTC7readRTCEhPhh+0x5e>
    124a:	8d e6       	ldi	r24, 0x6D	; 109
    124c:	92 e0       	ldi	r25, 0x02	; 2
    124e:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <_ZN7TwoWire4readEv>
    1252:	89 93       	st	Y+, r24
    1254:	f7 cf       	rjmp	.-18     	; 0x1244 <_ZN9DS3232RTC7readRTCEhPhh+0x4c>
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	1f 91       	pop	r17
    125e:	0f 91       	pop	r16
    1260:	ff 90       	pop	r15
    1262:	08 95       	ret

00001264 <_ZN9DS3232RTC7readRTCEh>:
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
    1268:	1f 92       	push	r1
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	21 e0       	ldi	r18, 0x01	; 1
    1270:	ae 01       	movw	r20, r28
    1272:	4f 5f       	subi	r20, 0xFF	; 255
    1274:	5f 4f       	sbci	r21, 0xFF	; 255
    1276:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <_ZN9DS3232RTC7readRTCEhPhh>
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	0f 90       	pop	r0
    127e:	df 91       	pop	r29
    1280:	cf 91       	pop	r28
    1282:	08 95       	ret

00001284 <_ZN9DS3232RTC14alarmInterruptEhb>:
/*----------------------------------------------------------------------*
 * Enable or disable an alarm "interrupt" which asserts the INT pin     *
 * on the RTC.                                                          *
 *----------------------------------------------------------------------*/
void DS3232RTC::alarmInterrupt(byte alarmNumber, bool interruptEnabled)
{
    1284:	0f 93       	push	r16
    1286:	1f 93       	push	r17
    1288:	cf 93       	push	r28
    128a:	df 93       	push	r29
    128c:	8c 01       	movw	r16, r24
    128e:	c6 2f       	mov	r28, r22
    1290:	d4 2f       	mov	r29, r20
    uint8_t controlReg, mask;
    
    controlReg = readRTC(RTC_CONTROL);
    1292:	6e e0       	ldi	r22, 0x0E	; 14
    1294:	0e 94 32 09 	call	0x1264	; 0x1264 <_ZN9DS3232RTC7readRTCEh>
    mask = _BV(A1IE) << (alarmNumber - 1);
    1298:	c1 50       	subi	r28, 0x01	; 1
    129a:	21 e0       	ldi	r18, 0x01	; 1
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	01 c0       	rjmp	.+2      	; 0x12a2 <_ZN9DS3232RTC14alarmInterruptEhb+0x1e>
    12a0:	22 0f       	add	r18, r18
    12a2:	ca 95       	dec	r28
    12a4:	ea f7       	brpl	.-6      	; 0x12a0 <_ZN9DS3232RTC14alarmInterruptEhb+0x1c>
    if (interruptEnabled)
    12a6:	dd 23       	and	r29, r29
    12a8:	19 f0       	breq	.+6      	; 0x12b0 <_ZN9DS3232RTC14alarmInterruptEhb+0x2c>
        controlReg |= mask;
    12aa:	48 2f       	mov	r20, r24
    12ac:	42 2b       	or	r20, r18
    12ae:	03 c0       	rjmp	.+6      	; 0x12b6 <_ZN9DS3232RTC14alarmInterruptEhb+0x32>
    else
        controlReg &= ~mask;
    12b0:	20 95       	com	r18
    12b2:	42 2f       	mov	r20, r18
    12b4:	48 23       	and	r20, r24
    writeRTC(RTC_CONTROL, controlReg); 
    12b6:	6e e0       	ldi	r22, 0x0E	; 14
    12b8:	c8 01       	movw	r24, r16
}
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	1f 91       	pop	r17
    12c0:	0f 91       	pop	r16
    mask = _BV(A1IE) << (alarmNumber - 1);
    if (interruptEnabled)
        controlReg |= mask;
    else
        controlReg &= ~mask;
    writeRTC(RTC_CONTROL, controlReg); 
    12c2:	0c 94 75 08 	jmp	0x10ea	; 0x10ea <_ZN9DS3232RTC8writeRTCEhh>

000012c6 <_ZN9DS3232RTC5alarmEh>:
/*----------------------------------------------------------------------*
 * Returns true or false depending on whether the given alarm has been  *
 * triggered, and resets the alarm flag bit.                            *
 *----------------------------------------------------------------------*/
bool DS3232RTC::alarm(byte alarmNumber)
{
    12c6:	0f 93       	push	r16
    12c8:	1f 93       	push	r17
    12ca:	cf 93       	push	r28
    12cc:	8c 01       	movw	r16, r24
    12ce:	c6 2f       	mov	r28, r22
    uint8_t statusReg, mask;
    
    statusReg = readRTC(RTC_STATUS);
    12d0:	6f e0       	ldi	r22, 0x0F	; 15
    12d2:	0e 94 32 09 	call	0x1264	; 0x1264 <_ZN9DS3232RTC7readRTCEh>
    mask = _BV(A1F) << (alarmNumber - 1);
    12d6:	c1 50       	subi	r28, 0x01	; 1
    12d8:	21 e0       	ldi	r18, 0x01	; 1
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	01 c0       	rjmp	.+2      	; 0x12e0 <_ZN9DS3232RTC5alarmEh+0x1a>
    12de:	22 0f       	add	r18, r18
    12e0:	ca 95       	dec	r28
    12e2:	ea f7       	brpl	.-6      	; 0x12de <_ZN9DS3232RTC5alarmEh+0x18>
    if (statusReg & mask) {
    12e4:	98 2f       	mov	r25, r24
    12e6:	92 23       	and	r25, r18
    12e8:	49 f0       	breq	.+18     	; 0x12fc <_ZN9DS3232RTC5alarmEh+0x36>
        statusReg &= ~mask;
    12ea:	20 95       	com	r18
    12ec:	42 2f       	mov	r20, r18
    12ee:	48 23       	and	r20, r24
        writeRTC(RTC_STATUS, statusReg);
    12f0:	6f e0       	ldi	r22, 0x0F	; 15
    12f2:	c8 01       	movw	r24, r16
    12f4:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN9DS3232RTC8writeRTCEhh>
        return true;
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	01 c0       	rjmp	.+2      	; 0x12fe <_ZN9DS3232RTC5alarmEh+0x38>
    }
    else {
        return false;
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    12fe:	cf 91       	pop	r28
    1300:	1f 91       	pop	r17
    1302:	0f 91       	pop	r16
    1304:	08 95       	ret

00001306 <_ZN9DS3232RTC10squareWaveE14SQWAVE_FREQS_t>:
/*----------------------------------------------------------------------*
 * Enable or disable the square wave output.                            *
 * Use a value from the SQWAVE_FREQS_t enumeration for the parameter.   *
 *----------------------------------------------------------------------*/
void DS3232RTC::squareWave(SQWAVE_FREQS_t freq)
{
    1306:	0f 93       	push	r16
    1308:	1f 93       	push	r17
    130a:	cf 93       	push	r28
    130c:	8c 01       	movw	r16, r24
    130e:	c6 2f       	mov	r28, r22
    uint8_t controlReg;

    controlReg = readRTC(RTC_CONTROL);
    1310:	6e e0       	ldi	r22, 0x0E	; 14
    1312:	0e 94 32 09 	call	0x1264	; 0x1264 <_ZN9DS3232RTC7readRTCEh>
    if (freq >= SQWAVE_NONE) {
        controlReg |= _BV(INTCN);
    1316:	48 2f       	mov	r20, r24
void DS3232RTC::squareWave(SQWAVE_FREQS_t freq)
{
    uint8_t controlReg;

    controlReg = readRTC(RTC_CONTROL);
    if (freq >= SQWAVE_NONE) {
    1318:	c4 30       	cpi	r28, 0x04	; 4
    131a:	10 f0       	brcs	.+4      	; 0x1320 <_ZN9DS3232RTC10squareWaveE14SQWAVE_FREQS_t+0x1a>
        controlReg |= _BV(INTCN);
    131c:	44 60       	ori	r20, 0x04	; 4
    131e:	06 c0       	rjmp	.+12     	; 0x132c <_ZN9DS3232RTC10squareWaveE14SQWAVE_FREQS_t+0x26>
    }
    else {
        controlReg = (controlReg & 0xE3) | (freq << RS1);
    1320:	43 7e       	andi	r20, 0xE3	; 227
    1322:	88 e0       	ldi	r24, 0x08	; 8
    1324:	c8 9f       	mul	r28, r24
    1326:	b0 01       	movw	r22, r0
    1328:	11 24       	eor	r1, r1
    132a:	46 2b       	or	r20, r22
    }
    writeRTC(RTC_CONTROL, controlReg);
    132c:	6e e0       	ldi	r22, 0x0E	; 14
    132e:	c8 01       	movw	r24, r16
}
    1330:	cf 91       	pop	r28
    1332:	1f 91       	pop	r17
    1334:	0f 91       	pop	r16
        controlReg |= _BV(INTCN);
    }
    else {
        controlReg = (controlReg & 0xE3) | (freq << RS1);
    }
    writeRTC(RTC_CONTROL, controlReg);
    1336:	0c 94 75 08 	jmp	0x10ea	; 0x10ea <_ZN9DS3232RTC8writeRTCEhh>

0000133a <_ZN13LiquidCrystal11pulseEnableEv>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
    133a:	cf 93       	push	r28
    133c:	df 93       	push	r29
    133e:	ec 01       	movw	r28, r24
    1340:	60 e0       	ldi	r22, 0x00	; 0
    1342:	8e 81       	ldd	r24, Y+6	; 0x06
    1344:	0e 94 0e 08 	call	0x101c	; 0x101c <digitalWrite>
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	0e 94 63 07 	call	0xec6	; 0xec6 <delayMicroseconds>
    1350:	61 e0       	ldi	r22, 0x01	; 1
    1352:	8e 81       	ldd	r24, Y+6	; 0x06
    1354:	0e 94 0e 08 	call	0x101c	; 0x101c <digitalWrite>
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	0e 94 63 07 	call	0xec6	; 0xec6 <delayMicroseconds>
    1360:	60 e0       	ldi	r22, 0x00	; 0
    1362:	8e 81       	ldd	r24, Y+6	; 0x06
    1364:	0e 94 0e 08 	call	0x101c	; 0x101c <digitalWrite>
    1368:	84 e6       	ldi	r24, 0x64	; 100
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	df 91       	pop	r29
    136e:	cf 91       	pop	r28
    1370:	0c 94 63 07 	jmp	0xec6	; 0xec6 <delayMicroseconds>

00001374 <_ZN13LiquidCrystal10write4bitsEh>:
    1374:	cf 92       	push	r12
    1376:	df 92       	push	r13
    1378:	ef 92       	push	r14
    137a:	ff 92       	push	r15
    137c:	0f 93       	push	r16
    137e:	1f 93       	push	r17
    1380:	cf 93       	push	r28
    1382:	df 93       	push	r29
    1384:	6c 01       	movw	r12, r24
    1386:	7c 01       	movw	r14, r24
    1388:	87 e0       	ldi	r24, 0x07	; 7
    138a:	e8 0e       	add	r14, r24
    138c:	f1 1c       	adc	r15, r1
    138e:	c0 e0       	ldi	r28, 0x00	; 0
    1390:	d0 e0       	ldi	r29, 0x00	; 0
    1392:	06 2f       	mov	r16, r22
    1394:	10 e0       	ldi	r17, 0x00	; 0
    1396:	b8 01       	movw	r22, r16
    1398:	0c 2e       	mov	r0, r28
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <_ZN13LiquidCrystal10write4bitsEh+0x2c>
    139c:	75 95       	asr	r23
    139e:	67 95       	ror	r22
    13a0:	0a 94       	dec	r0
    13a2:	e2 f7       	brpl	.-8      	; 0x139c <_ZN13LiquidCrystal10write4bitsEh+0x28>
    13a4:	61 70       	andi	r22, 0x01	; 1
    13a6:	f7 01       	movw	r30, r14
    13a8:	81 91       	ld	r24, Z+
    13aa:	7f 01       	movw	r14, r30
    13ac:	0e 94 0e 08 	call	0x101c	; 0x101c <digitalWrite>
    13b0:	21 96       	adiw	r28, 0x01	; 1
    13b2:	c4 30       	cpi	r28, 0x04	; 4
    13b4:	d1 05       	cpc	r29, r1
    13b6:	79 f7       	brne	.-34     	; 0x1396 <_ZN13LiquidCrystal10write4bitsEh+0x22>
    13b8:	c6 01       	movw	r24, r12
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	1f 91       	pop	r17
    13c0:	0f 91       	pop	r16
    13c2:	ff 90       	pop	r15
    13c4:	ef 90       	pop	r14
    13c6:	df 90       	pop	r13
    13c8:	cf 90       	pop	r12
    13ca:	0c 94 9d 09 	jmp	0x133a	; 0x133a <_ZN13LiquidCrystal11pulseEnableEv>

000013ce <_ZN13LiquidCrystal10write8bitsEh>:
    13ce:	cf 92       	push	r12
    13d0:	df 92       	push	r13
    13d2:	ef 92       	push	r14
    13d4:	ff 92       	push	r15
    13d6:	0f 93       	push	r16
    13d8:	1f 93       	push	r17
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
    13de:	6c 01       	movw	r12, r24
    13e0:	7c 01       	movw	r14, r24
    13e2:	87 e0       	ldi	r24, 0x07	; 7
    13e4:	e8 0e       	add	r14, r24
    13e6:	f1 1c       	adc	r15, r1
    13e8:	c0 e0       	ldi	r28, 0x00	; 0
    13ea:	d0 e0       	ldi	r29, 0x00	; 0
    13ec:	06 2f       	mov	r16, r22
    13ee:	10 e0       	ldi	r17, 0x00	; 0
    13f0:	b8 01       	movw	r22, r16
    13f2:	0c 2e       	mov	r0, r28
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <_ZN13LiquidCrystal10write8bitsEh+0x2c>
    13f6:	75 95       	asr	r23
    13f8:	67 95       	ror	r22
    13fa:	0a 94       	dec	r0
    13fc:	e2 f7       	brpl	.-8      	; 0x13f6 <_ZN13LiquidCrystal10write8bitsEh+0x28>
    13fe:	61 70       	andi	r22, 0x01	; 1
    1400:	f7 01       	movw	r30, r14
    1402:	81 91       	ld	r24, Z+
    1404:	7f 01       	movw	r14, r30
    1406:	0e 94 0e 08 	call	0x101c	; 0x101c <digitalWrite>
    140a:	21 96       	adiw	r28, 0x01	; 1
    140c:	c8 30       	cpi	r28, 0x08	; 8
    140e:	d1 05       	cpc	r29, r1
    1410:	79 f7       	brne	.-34     	; 0x13f0 <_ZN13LiquidCrystal10write8bitsEh+0x22>
    1412:	c6 01       	movw	r24, r12
    1414:	df 91       	pop	r29
    1416:	cf 91       	pop	r28
    1418:	1f 91       	pop	r17
    141a:	0f 91       	pop	r16
    141c:	ff 90       	pop	r15
    141e:	ef 90       	pop	r14
    1420:	df 90       	pop	r13
    1422:	cf 90       	pop	r12
    1424:	0c 94 9d 09 	jmp	0x133a	; 0x133a <_ZN13LiquidCrystal11pulseEnableEv>

00001428 <_ZN13LiquidCrystal4sendEhh>:
    1428:	1f 93       	push	r17
    142a:	cf 93       	push	r28
    142c:	df 93       	push	r29
    142e:	ec 01       	movw	r28, r24
    1430:	16 2f       	mov	r17, r22
    1432:	64 2f       	mov	r22, r20
    1434:	8c 81       	ldd	r24, Y+4	; 0x04
    1436:	0e 94 0e 08 	call	0x101c	; 0x101c <digitalWrite>
    143a:	8d 81       	ldd	r24, Y+5	; 0x05
    143c:	8f 3f       	cpi	r24, 0xFF	; 255
    143e:	19 f0       	breq	.+6      	; 0x1446 <_ZN13LiquidCrystal4sendEhh+0x1e>
    1440:	60 e0       	ldi	r22, 0x00	; 0
    1442:	0e 94 0e 08 	call	0x101c	; 0x101c <digitalWrite>
    1446:	8f 85       	ldd	r24, Y+15	; 0x0f
    1448:	61 2f       	mov	r22, r17
    144a:	84 ff       	sbrs	r24, 4
    144c:	06 c0       	rjmp	.+12     	; 0x145a <_ZN13LiquidCrystal4sendEhh+0x32>
    144e:	ce 01       	movw	r24, r28
    1450:	df 91       	pop	r29
    1452:	cf 91       	pop	r28
    1454:	1f 91       	pop	r17
    1456:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <_ZN13LiquidCrystal10write8bitsEh>
    145a:	70 e0       	ldi	r23, 0x00	; 0
    145c:	84 e0       	ldi	r24, 0x04	; 4
    145e:	75 95       	asr	r23
    1460:	67 95       	ror	r22
    1462:	8a 95       	dec	r24
    1464:	e1 f7       	brne	.-8      	; 0x145e <_ZN13LiquidCrystal4sendEhh+0x36>
    1466:	ce 01       	movw	r24, r28
    1468:	0e 94 ba 09 	call	0x1374	; 0x1374 <_ZN13LiquidCrystal10write4bitsEh>
    146c:	61 2f       	mov	r22, r17
    146e:	ce 01       	movw	r24, r28
    1470:	df 91       	pop	r29
    1472:	cf 91       	pop	r28
    1474:	1f 91       	pop	r17
    1476:	0c 94 ba 09 	jmp	0x1374	; 0x1374 <_ZN13LiquidCrystal10write4bitsEh>

0000147a <_ZN13LiquidCrystal7commandEh>:
    147a:	40 e0       	ldi	r20, 0x00	; 0
    147c:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <_ZN13LiquidCrystal4sendEhh>

00001480 <_ZN13LiquidCrystal5clearEv>:
    1480:	61 e0       	ldi	r22, 0x01	; 1
    1482:	0e 94 3d 0a 	call	0x147a	; 0x147a <_ZN13LiquidCrystal7commandEh>
    1486:	80 ed       	ldi	r24, 0xD0	; 208
    1488:	97 e0       	ldi	r25, 0x07	; 7
    148a:	0c 94 63 07 	jmp	0xec6	; 0xec6 <delayMicroseconds>

0000148e <_ZN13LiquidCrystal7displayEv>:
    148e:	fc 01       	movw	r30, r24
    1490:	60 89       	ldd	r22, Z+16	; 0x10
    1492:	26 2f       	mov	r18, r22
    1494:	24 60       	ori	r18, 0x04	; 4
    1496:	20 8b       	std	Z+16, r18	; 0x10
    1498:	6c 60       	ori	r22, 0x0C	; 12
    149a:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <_ZN13LiquidCrystal7commandEh>

0000149e <_ZN13LiquidCrystal5beginEhhh>:
    149e:	ef 92       	push	r14
    14a0:	ff 92       	push	r15
    14a2:	0f 93       	push	r16
    14a4:	1f 93       	push	r17
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	ec 01       	movw	r28, r24
    14ac:	42 30       	cpi	r20, 0x02	; 2
    14ae:	18 f0       	brcs	.+6      	; 0x14b6 <_ZN13LiquidCrystal5beginEhhh+0x18>
    14b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    14b2:	88 60       	ori	r24, 0x08	; 8
    14b4:	8f 87       	std	Y+15, r24	; 0x0f
    14b6:	4b 8b       	std	Y+19, r20	; 0x13
    14b8:	1c 8a       	std	Y+20, r1	; 0x14
    14ba:	80 e4       	ldi	r24, 0x40	; 64
    14bc:	8d 8b       	std	Y+21, r24	; 0x15
    14be:	6e 8b       	std	Y+22, r22	; 0x16
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	60 5c       	subi	r22, 0xC0	; 192
    14c4:	7f 4f       	sbci	r23, 0xFF	; 255
    14c6:	6f 8b       	std	Y+23, r22	; 0x17
    14c8:	22 23       	and	r18, r18
    14ca:	29 f0       	breq	.+10     	; 0x14d6 <_ZN13LiquidCrystal5beginEhhh+0x38>
    14cc:	41 30       	cpi	r20, 0x01	; 1
    14ce:	19 f4       	brne	.+6      	; 0x14d6 <_ZN13LiquidCrystal5beginEhhh+0x38>
    14d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    14d2:	84 60       	ori	r24, 0x04	; 4
    14d4:	8f 87       	std	Y+15, r24	; 0x0f
    14d6:	61 e0       	ldi	r22, 0x01	; 1
    14d8:	8c 81       	ldd	r24, Y+4	; 0x04
    14da:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <pinMode>
    14de:	8d 81       	ldd	r24, Y+5	; 0x05
    14e0:	8f 3f       	cpi	r24, 0xFF	; 255
    14e2:	19 f0       	breq	.+6      	; 0x14ea <_ZN13LiquidCrystal5beginEhhh+0x4c>
    14e4:	61 e0       	ldi	r22, 0x01	; 1
    14e6:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <pinMode>
    14ea:	61 e0       	ldi	r22, 0x01	; 1
    14ec:	8e 81       	ldd	r24, Y+6	; 0x06
    14ee:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <pinMode>
    14f2:	7e 01       	movw	r14, r28
    14f4:	87 e0       	ldi	r24, 0x07	; 7
    14f6:	e8 0e       	add	r14, r24
    14f8:	f1 1c       	adc	r15, r1
    14fa:	00 e0       	ldi	r16, 0x00	; 0
    14fc:	10 e0       	ldi	r17, 0x00	; 0
    14fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1500:	84 fd       	sbrc	r24, 4
    1502:	03 c0       	rjmp	.+6      	; 0x150a <_ZN13LiquidCrystal5beginEhhh+0x6c>
    1504:	84 e0       	ldi	r24, 0x04	; 4
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	02 c0       	rjmp	.+4      	; 0x150e <_ZN13LiquidCrystal5beginEhhh+0x70>
    150a:	88 e0       	ldi	r24, 0x08	; 8
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	08 17       	cp	r16, r24
    1510:	19 07       	cpc	r17, r25
    1512:	4c f4       	brge	.+18     	; 0x1526 <_ZN13LiquidCrystal5beginEhhh+0x88>
    1514:	61 e0       	ldi	r22, 0x01	; 1
    1516:	f7 01       	movw	r30, r14
    1518:	81 91       	ld	r24, Z+
    151a:	7f 01       	movw	r14, r30
    151c:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <pinMode>
    1520:	0f 5f       	subi	r16, 0xFF	; 255
    1522:	1f 4f       	sbci	r17, 0xFF	; 255
    1524:	ec cf       	rjmp	.-40     	; 0x14fe <_ZN13LiquidCrystal5beginEhhh+0x60>
    1526:	80 e5       	ldi	r24, 0x50	; 80
    1528:	93 ec       	ldi	r25, 0xC3	; 195
    152a:	0e 94 63 07 	call	0xec6	; 0xec6 <delayMicroseconds>
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	8c 81       	ldd	r24, Y+4	; 0x04
    1532:	0e 94 0e 08 	call	0x101c	; 0x101c <digitalWrite>
    1536:	60 e0       	ldi	r22, 0x00	; 0
    1538:	8e 81       	ldd	r24, Y+6	; 0x06
    153a:	0e 94 0e 08 	call	0x101c	; 0x101c <digitalWrite>
    153e:	8d 81       	ldd	r24, Y+5	; 0x05
    1540:	8f 3f       	cpi	r24, 0xFF	; 255
    1542:	19 f0       	breq	.+6      	; 0x154a <_ZN13LiquidCrystal5beginEhhh+0xac>
    1544:	60 e0       	ldi	r22, 0x00	; 0
    1546:	0e 94 0e 08 	call	0x101c	; 0x101c <digitalWrite>
    154a:	6f 85       	ldd	r22, Y+15	; 0x0f
    154c:	64 fd       	sbrc	r22, 4
    154e:	1d c0       	rjmp	.+58     	; 0x158a <_ZN13LiquidCrystal5beginEhhh+0xec>
    1550:	63 e0       	ldi	r22, 0x03	; 3
    1552:	ce 01       	movw	r24, r28
    1554:	0e 94 ba 09 	call	0x1374	; 0x1374 <_ZN13LiquidCrystal10write4bitsEh>
    1558:	84 e9       	ldi	r24, 0x94	; 148
    155a:	91 e1       	ldi	r25, 0x11	; 17
    155c:	0e 94 63 07 	call	0xec6	; 0xec6 <delayMicroseconds>
    1560:	63 e0       	ldi	r22, 0x03	; 3
    1562:	ce 01       	movw	r24, r28
    1564:	0e 94 ba 09 	call	0x1374	; 0x1374 <_ZN13LiquidCrystal10write4bitsEh>
    1568:	84 e9       	ldi	r24, 0x94	; 148
    156a:	91 e1       	ldi	r25, 0x11	; 17
    156c:	0e 94 63 07 	call	0xec6	; 0xec6 <delayMicroseconds>
    1570:	63 e0       	ldi	r22, 0x03	; 3
    1572:	ce 01       	movw	r24, r28
    1574:	0e 94 ba 09 	call	0x1374	; 0x1374 <_ZN13LiquidCrystal10write4bitsEh>
    1578:	86 e9       	ldi	r24, 0x96	; 150
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	0e 94 63 07 	call	0xec6	; 0xec6 <delayMicroseconds>
    1580:	62 e0       	ldi	r22, 0x02	; 2
    1582:	ce 01       	movw	r24, r28
    1584:	0e 94 ba 09 	call	0x1374	; 0x1374 <_ZN13LiquidCrystal10write4bitsEh>
    1588:	16 c0       	rjmp	.+44     	; 0x15b6 <_ZN13LiquidCrystal5beginEhhh+0x118>
    158a:	60 62       	ori	r22, 0x20	; 32
    158c:	ce 01       	movw	r24, r28
    158e:	0e 94 3d 0a 	call	0x147a	; 0x147a <_ZN13LiquidCrystal7commandEh>
    1592:	84 e9       	ldi	r24, 0x94	; 148
    1594:	91 e1       	ldi	r25, 0x11	; 17
    1596:	0e 94 63 07 	call	0xec6	; 0xec6 <delayMicroseconds>
    159a:	6f 85       	ldd	r22, Y+15	; 0x0f
    159c:	60 62       	ori	r22, 0x20	; 32
    159e:	ce 01       	movw	r24, r28
    15a0:	0e 94 3d 0a 	call	0x147a	; 0x147a <_ZN13LiquidCrystal7commandEh>
    15a4:	86 e9       	ldi	r24, 0x96	; 150
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	0e 94 63 07 	call	0xec6	; 0xec6 <delayMicroseconds>
    15ac:	6f 85       	ldd	r22, Y+15	; 0x0f
    15ae:	60 62       	ori	r22, 0x20	; 32
    15b0:	ce 01       	movw	r24, r28
    15b2:	0e 94 3d 0a 	call	0x147a	; 0x147a <_ZN13LiquidCrystal7commandEh>
    15b6:	6f 85       	ldd	r22, Y+15	; 0x0f
    15b8:	60 62       	ori	r22, 0x20	; 32
    15ba:	ce 01       	movw	r24, r28
    15bc:	0e 94 3d 0a 	call	0x147a	; 0x147a <_ZN13LiquidCrystal7commandEh>
    15c0:	84 e0       	ldi	r24, 0x04	; 4
    15c2:	88 8b       	std	Y+16, r24	; 0x10
    15c4:	ce 01       	movw	r24, r28
    15c6:	0e 94 47 0a 	call	0x148e	; 0x148e <_ZN13LiquidCrystal7displayEv>
    15ca:	ce 01       	movw	r24, r28
    15cc:	0e 94 40 0a 	call	0x1480	; 0x1480 <_ZN13LiquidCrystal5clearEv>
    15d0:	82 e0       	ldi	r24, 0x02	; 2
    15d2:	89 8b       	std	Y+17, r24	; 0x11
    15d4:	66 e0       	ldi	r22, 0x06	; 6
    15d6:	ce 01       	movw	r24, r28
    15d8:	df 91       	pop	r29
    15da:	cf 91       	pop	r28
    15dc:	1f 91       	pop	r17
    15de:	0f 91       	pop	r16
    15e0:	ff 90       	pop	r15
    15e2:	ef 90       	pop	r14
    15e4:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <_ZN13LiquidCrystal7commandEh>

000015e8 <_ZN13LiquidCrystalC1Ehhhhhh>:
    15e8:	cf 92       	push	r12
    15ea:	ef 92       	push	r14
    15ec:	0f 93       	push	r16
    15ee:	fc 01       	movw	r30, r24
    15f0:	13 82       	std	Z+3, r1	; 0x03
    15f2:	12 82       	std	Z+2, r1	; 0x02
    15f4:	8f e5       	ldi	r24, 0x5F	; 95
    15f6:	91 e0       	ldi	r25, 0x01	; 1
    15f8:	91 83       	std	Z+1, r25	; 0x01
    15fa:	80 83       	st	Z, r24
    15fc:	64 83       	std	Z+4, r22	; 0x04
    15fe:	8f ef       	ldi	r24, 0xFF	; 255
    1600:	85 83       	std	Z+5, r24	; 0x05
    1602:	46 83       	std	Z+6, r20	; 0x06
    1604:	27 83       	std	Z+7, r18	; 0x07
    1606:	00 87       	std	Z+8, r16	; 0x08
    1608:	e1 86       	std	Z+9, r14	; 0x09
    160a:	c2 86       	std	Z+10, r12	; 0x0a
    160c:	13 86       	std	Z+11, r1	; 0x0b
    160e:	14 86       	std	Z+12, r1	; 0x0c
    1610:	15 86       	std	Z+13, r1	; 0x0d
    1612:	16 86       	std	Z+14, r1	; 0x0e
    1614:	17 86       	std	Z+15, r1	; 0x0f
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	41 e0       	ldi	r20, 0x01	; 1
    161a:	60 e1       	ldi	r22, 0x10	; 16
    161c:	cf 01       	movw	r24, r30
    161e:	0f 91       	pop	r16
    1620:	ef 90       	pop	r14
    1622:	cf 90       	pop	r12
    1624:	0c 94 4f 0a 	jmp	0x149e	; 0x149e <_ZN13LiquidCrystal5beginEhhh>

00001628 <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
    1628:	41 e0       	ldi	r20, 0x01	; 1
    162a:	0e 94 14 0a 	call	0x1428	; 0x1428 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	08 95       	ret

00001634 <_Z13monthShortStrh>:
}

char* monthShortStr(uint8_t month)
{
   for (int i=0; i < dt_SHORT_STR_LEN; i++)      
      buffer[i] = pgm_read_byte(&(monthShortNames_P[i+ (month*dt_SHORT_STR_LEN)]));  
    1634:	23 e0       	ldi	r18, 0x03	; 3
    1636:	82 9f       	mul	r24, r18
    1638:	c0 01       	movw	r24, r0
    163a:	11 24       	eor	r1, r1
    163c:	a8 e5       	ldi	r26, 0x58	; 88
    163e:	b2 e0       	ldi	r27, 0x02	; 2
    return buffer;
}

char* monthShortStr(uint8_t month)
{
   for (int i=0; i < dt_SHORT_STR_LEN; i++)      
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e0       	ldi	r19, 0x00	; 0
      buffer[i] = pgm_read_byte(&(monthShortNames_P[i+ (month*dt_SHORT_STR_LEN)]));  
    1644:	fc 01       	movw	r30, r24
    1646:	e2 0f       	add	r30, r18
    1648:	f3 1f       	adc	r31, r19
    164a:	e8 54       	subi	r30, 0x48	; 72
    164c:	ff 4f       	sbci	r31, 0xFF	; 255
    164e:	e4 91       	lpm	r30, Z
    1650:	ed 93       	st	X+, r30
    return buffer;
}

char* monthShortStr(uint8_t month)
{
   for (int i=0; i < dt_SHORT_STR_LEN; i++)      
    1652:	2f 5f       	subi	r18, 0xFF	; 255
    1654:	3f 4f       	sbci	r19, 0xFF	; 255
    1656:	23 30       	cpi	r18, 0x03	; 3
    1658:	31 05       	cpc	r19, r1
    165a:	a1 f7       	brne	.-24     	; 0x1644 <_Z13monthShortStrh+0x10>
      buffer[i] = pgm_read_byte(&(monthShortNames_P[i+ (month*dt_SHORT_STR_LEN)]));  
   buffer[dt_SHORT_STR_LEN] = 0;
    165c:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <_ZL6buffer+0x3>
   return buffer;
}
    1660:	88 e5       	ldi	r24, 0x58	; 88
    1662:	92 e0       	ldi	r25, 0x02	; 2
    1664:	08 95       	ret

00001666 <_Z9breakTimemR12tmElements_t>:
}

int weekday(time_t t) {
  refreshCache(t);
  return tm.Wday;
}
    1666:	6f 92       	push	r6
    1668:	7f 92       	push	r7
    166a:	8f 92       	push	r8
    166c:	9f 92       	push	r9
    166e:	af 92       	push	r10
    1670:	bf 92       	push	r11
    1672:	cf 92       	push	r12
    1674:	df 92       	push	r13
    1676:	ef 92       	push	r14
    1678:	ff 92       	push	r15
    167a:	0f 93       	push	r16
    167c:	1f 93       	push	r17
    167e:	cf 93       	push	r28
    1680:	df 93       	push	r29
    1682:	6b 01       	movw	r12, r22
    1684:	7c 01       	movw	r14, r24
    1686:	ea 01       	movw	r28, r20
    1688:	8c e3       	ldi	r24, 0x3C	; 60
    168a:	88 2e       	mov	r8, r24
    168c:	91 2c       	mov	r9, r1
    168e:	a1 2c       	mov	r10, r1
    1690:	b1 2c       	mov	r11, r1
    1692:	c7 01       	movw	r24, r14
    1694:	b6 01       	movw	r22, r12
    1696:	a5 01       	movw	r20, r10
    1698:	94 01       	movw	r18, r8
    169a:	0e 94 92 10 	call	0x2124	; 0x2124 <__udivmodsi4>
    169e:	68 83       	st	Y, r22
    16a0:	ca 01       	movw	r24, r20
    16a2:	b9 01       	movw	r22, r18
    16a4:	a5 01       	movw	r20, r10
    16a6:	94 01       	movw	r18, r8
    16a8:	0e 94 92 10 	call	0x2124	; 0x2124 <__udivmodsi4>
    16ac:	69 83       	std	Y+1, r22	; 0x01
    16ae:	c7 01       	movw	r24, r14
    16b0:	b6 01       	movw	r22, r12
    16b2:	20 e1       	ldi	r18, 0x10	; 16
    16b4:	3e e0       	ldi	r19, 0x0E	; 14
    16b6:	40 e0       	ldi	r20, 0x00	; 0
    16b8:	50 e0       	ldi	r21, 0x00	; 0
    16ba:	0e 94 92 10 	call	0x2124	; 0x2124 <__udivmodsi4>
    16be:	ca 01       	movw	r24, r20
    16c0:	b9 01       	movw	r22, r18
    16c2:	28 e1       	ldi	r18, 0x18	; 24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	40 e0       	ldi	r20, 0x00	; 0
    16c8:	50 e0       	ldi	r21, 0x00	; 0
    16ca:	0e 94 92 10 	call	0x2124	; 0x2124 <__udivmodsi4>
    16ce:	6a 83       	std	Y+2, r22	; 0x02
    16d0:	c7 01       	movw	r24, r14
    16d2:	b6 01       	movw	r22, r12
    16d4:	20 e8       	ldi	r18, 0x80	; 128
    16d6:	31 e5       	ldi	r19, 0x51	; 81
    16d8:	41 e0       	ldi	r20, 0x01	; 1
    16da:	50 e0       	ldi	r21, 0x00	; 0
    16dc:	0e 94 92 10 	call	0x2124	; 0x2124 <__udivmodsi4>
    16e0:	69 01       	movw	r12, r18
    16e2:	7a 01       	movw	r14, r20
    16e4:	ca 01       	movw	r24, r20
    16e6:	b9 01       	movw	r22, r18
    16e8:	6c 5f       	subi	r22, 0xFC	; 252
    16ea:	7f 4f       	sbci	r23, 0xFF	; 255
    16ec:	8f 4f       	sbci	r24, 0xFF	; 255
    16ee:	9f 4f       	sbci	r25, 0xFF	; 255
    16f0:	27 e0       	ldi	r18, 0x07	; 7
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	40 e0       	ldi	r20, 0x00	; 0
    16f6:	50 e0       	ldi	r21, 0x00	; 0
    16f8:	0e 94 92 10 	call	0x2124	; 0x2124 <__udivmodsi4>
    16fc:	6f 5f       	subi	r22, 0xFF	; 255
    16fe:	6b 83       	std	Y+3, r22	; 0x03
    1700:	81 2c       	mov	r8, r1
    1702:	91 2c       	mov	r9, r1
    1704:	54 01       	movw	r10, r8
    1706:	40 e0       	ldi	r20, 0x00	; 0
    1708:	94 e6       	ldi	r25, 0x64	; 100
    170a:	69 2e       	mov	r6, r25
    170c:	71 2c       	mov	r7, r1
    170e:	00 e9       	ldi	r16, 0x90	; 144
    1710:	11 e0       	ldi	r17, 0x01	; 1
    1712:	24 2f       	mov	r18, r20
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	2e 54       	subi	r18, 0x4E	; 78
    1718:	38 4f       	sbci	r19, 0xF8	; 248
    171a:	f9 01       	movw	r30, r18
    171c:	e3 70       	andi	r30, 0x03	; 3
    171e:	ff 27       	eor	r31, r31
    1720:	30 97       	sbiw	r30, 0x00	; 0
    1722:	89 f4       	brne	.+34     	; 0x1746 <_Z9breakTimemR12tmElements_t+0xe0>
    1724:	c9 01       	movw	r24, r18
    1726:	b3 01       	movw	r22, r6
    1728:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__divmodhi4>
    172c:	89 2b       	or	r24, r25
    172e:	31 f4       	brne	.+12     	; 0x173c <_Z9breakTimemR12tmElements_t+0xd6>
    1730:	c9 01       	movw	r24, r18
    1732:	b8 01       	movw	r22, r16
    1734:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__divmodhi4>
    1738:	89 2b       	or	r24, r25
    173a:	29 f4       	brne	.+10     	; 0x1746 <_Z9breakTimemR12tmElements_t+0xe0>
    173c:	8e e6       	ldi	r24, 0x6E	; 110
    173e:	91 e0       	ldi	r25, 0x01	; 1
    1740:	a0 e0       	ldi	r26, 0x00	; 0
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	04 c0       	rjmp	.+8      	; 0x174e <_Z9breakTimemR12tmElements_t+0xe8>
    1746:	8d e6       	ldi	r24, 0x6D	; 109
    1748:	91 e0       	ldi	r25, 0x01	; 1
    174a:	a0 e0       	ldi	r26, 0x00	; 0
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	88 0e       	add	r8, r24
    1750:	99 1e       	adc	r9, r25
    1752:	aa 1e       	adc	r10, r26
    1754:	bb 1e       	adc	r11, r27
    1756:	d5 01       	movw	r26, r10
    1758:	c4 01       	movw	r24, r8
    175a:	aa 27       	eor	r26, r26
    175c:	bb 27       	eor	r27, r27
    175e:	c8 16       	cp	r12, r24
    1760:	d9 06       	cpc	r13, r25
    1762:	ea 06       	cpc	r14, r26
    1764:	fb 06       	cpc	r15, r27
    1766:	10 f0       	brcs	.+4      	; 0x176c <_Z9breakTimemR12tmElements_t+0x106>
    1768:	4f 5f       	subi	r20, 0xFF	; 255
    176a:	d3 cf       	rjmp	.-90     	; 0x1712 <_Z9breakTimemR12tmElements_t+0xac>
    176c:	4e 83       	std	Y+6, r20	; 0x06
    176e:	30 97       	sbiw	r30, 0x00	; 0
    1770:	99 f4       	brne	.+38     	; 0x1798 <_Z9breakTimemR12tmElements_t+0x132>
    1772:	c9 01       	movw	r24, r18
    1774:	64 e6       	ldi	r22, 0x64	; 100
    1776:	70 e0       	ldi	r23, 0x00	; 0
    1778:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__divmodhi4>
    177c:	89 2b       	or	r24, r25
    177e:	39 f4       	brne	.+14     	; 0x178e <_Z9breakTimemR12tmElements_t+0x128>
    1780:	c9 01       	movw	r24, r18
    1782:	60 e9       	ldi	r22, 0x90	; 144
    1784:	71 e0       	ldi	r23, 0x01	; 1
    1786:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__divmodhi4>
    178a:	89 2b       	or	r24, r25
    178c:	29 f4       	brne	.+10     	; 0x1798 <_Z9breakTimemR12tmElements_t+0x132>
    178e:	8e e6       	ldi	r24, 0x6E	; 110
    1790:	91 e0       	ldi	r25, 0x01	; 1
    1792:	a0 e0       	ldi	r26, 0x00	; 0
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	04 c0       	rjmp	.+8      	; 0x17a0 <_Z9breakTimemR12tmElements_t+0x13a>
    1798:	8d e6       	ldi	r24, 0x6D	; 109
    179a:	91 e0       	ldi	r25, 0x01	; 1
    179c:	a0 e0       	ldi	r26, 0x00	; 0
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	88 1a       	sub	r8, r24
    17a2:	99 0a       	sbc	r9, r25
    17a4:	aa 0a       	sbc	r10, r26
    17a6:	bb 0a       	sbc	r11, r27
    17a8:	c8 18       	sub	r12, r8
    17aa:	d9 08       	sbc	r13, r9
    17ac:	ea 08       	sbc	r14, r10
    17ae:	fb 08       	sbc	r15, r11
    17b0:	c9 01       	movw	r24, r18
    17b2:	64 e6       	ldi	r22, 0x64	; 100
    17b4:	70 e0       	ldi	r23, 0x00	; 0
    17b6:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__divmodhi4>
    17ba:	8c 01       	movw	r16, r24
    17bc:	c9 01       	movw	r24, r18
    17be:	60 e9       	ldi	r22, 0x90	; 144
    17c0:	71 e0       	ldi	r23, 0x01	; 1
    17c2:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__divmodhi4>
    17c6:	a7 e6       	ldi	r26, 0x67	; 103
    17c8:	b1 e0       	ldi	r27, 0x01	; 1
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	21 30       	cpi	r18, 0x01	; 1
    17ce:	41 f4       	brne	.+16     	; 0x17e0 <_Z9breakTimemR12tmElements_t+0x17a>
    17d0:	30 97       	sbiw	r30, 0x00	; 0
    17d2:	51 f4       	brne	.+20     	; 0x17e8 <_Z9breakTimemR12tmElements_t+0x182>
    17d4:	01 15       	cp	r16, r1
    17d6:	11 05       	cpc	r17, r1
    17d8:	29 f4       	brne	.+10     	; 0x17e4 <_Z9breakTimemR12tmElements_t+0x17e>
    17da:	00 97       	sbiw	r24, 0x00	; 0
    17dc:	29 f4       	brne	.+10     	; 0x17e8 <_Z9breakTimemR12tmElements_t+0x182>
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <_Z9breakTimemR12tmElements_t+0x17e>
    17e0:	4c 91       	ld	r20, X
    17e2:	03 c0       	rjmp	.+6      	; 0x17ea <_Z9breakTimemR12tmElements_t+0x184>
    17e4:	4d e1       	ldi	r20, 0x1D	; 29
    17e6:	01 c0       	rjmp	.+2      	; 0x17ea <_Z9breakTimemR12tmElements_t+0x184>
    17e8:	4c e1       	ldi	r20, 0x1C	; 28
    17ea:	50 e0       	ldi	r21, 0x00	; 0
    17ec:	60 e0       	ldi	r22, 0x00	; 0
    17ee:	70 e0       	ldi	r23, 0x00	; 0
    17f0:	c4 16       	cp	r12, r20
    17f2:	d5 06       	cpc	r13, r21
    17f4:	e6 06       	cpc	r14, r22
    17f6:	f7 06       	cpc	r15, r23
    17f8:	40 f0       	brcs	.+16     	; 0x180a <_Z9breakTimemR12tmElements_t+0x1a4>
    17fa:	c4 1a       	sub	r12, r20
    17fc:	d5 0a       	sbc	r13, r21
    17fe:	e6 0a       	sbc	r14, r22
    1800:	f7 0a       	sbc	r15, r23
    1802:	2f 5f       	subi	r18, 0xFF	; 255
    1804:	11 96       	adiw	r26, 0x01	; 1
    1806:	2c 30       	cpi	r18, 0x0C	; 12
    1808:	09 f7       	brne	.-62     	; 0x17cc <_Z9breakTimemR12tmElements_t+0x166>
    180a:	2f 5f       	subi	r18, 0xFF	; 255
    180c:	2d 83       	std	Y+5, r18	; 0x05
    180e:	c3 94       	inc	r12
    1810:	cc 82       	std	Y+4, r12	; 0x04
    1812:	df 91       	pop	r29
    1814:	cf 91       	pop	r28
    1816:	1f 91       	pop	r17
    1818:	0f 91       	pop	r16
    181a:	ff 90       	pop	r15
    181c:	ef 90       	pop	r14
    181e:	df 90       	pop	r13
    1820:	cf 90       	pop	r12
    1822:	bf 90       	pop	r11
    1824:	af 90       	pop	r10
    1826:	9f 90       	pop	r9
    1828:	8f 90       	pop	r8
    182a:	7f 90       	pop	r7
    182c:	6f 90       	pop	r6
    182e:	08 95       	ret

00001830 <_Z12refreshCachem>:
    1830:	cf 92       	push	r12
    1832:	df 92       	push	r13
    1834:	ef 92       	push	r14
    1836:	ff 92       	push	r15
    1838:	c0 90 62 02 	lds	r12, 0x0262	; 0x800262 <_ZL9cacheTime>
    183c:	d0 90 63 02 	lds	r13, 0x0263	; 0x800263 <_ZL9cacheTime+0x1>
    1840:	e0 90 64 02 	lds	r14, 0x0264	; 0x800264 <_ZL9cacheTime+0x2>
    1844:	f0 90 65 02 	lds	r15, 0x0265	; 0x800265 <_ZL9cacheTime+0x3>
    1848:	c6 16       	cp	r12, r22
    184a:	d7 06       	cpc	r13, r23
    184c:	e8 06       	cpc	r14, r24
    184e:	f9 06       	cpc	r15, r25
    1850:	71 f0       	breq	.+28     	; 0x186e <_Z12refreshCachem+0x3e>
    1852:	6b 01       	movw	r12, r22
    1854:	7c 01       	movw	r14, r24
    1856:	46 e6       	ldi	r20, 0x66	; 102
    1858:	52 e0       	ldi	r21, 0x02	; 2
    185a:	0e 94 33 0b 	call	0x1666	; 0x1666 <_Z9breakTimemR12tmElements_t>
    185e:	c0 92 62 02 	sts	0x0262, r12	; 0x800262 <_ZL9cacheTime>
    1862:	d0 92 63 02 	sts	0x0263, r13	; 0x800263 <_ZL9cacheTime+0x1>
    1866:	e0 92 64 02 	sts	0x0264, r14	; 0x800264 <_ZL9cacheTime+0x2>
    186a:	f0 92 65 02 	sts	0x0265, r15	; 0x800265 <_ZL9cacheTime+0x3>
    186e:	ff 90       	pop	r15
    1870:	ef 90       	pop	r14
    1872:	df 90       	pop	r13
    1874:	cf 90       	pop	r12
    1876:	08 95       	ret

00001878 <_Z4hourm>:
    1878:	0e 94 18 0c 	call	0x1830	; 0x1830 <_Z12refreshCachem>
    187c:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <_ZL2tm+0x2>
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	08 95       	ret

00001884 <_Z6minutem>:
    1884:	0e 94 18 0c 	call	0x1830	; 0x1830 <_Z12refreshCachem>
    1888:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <_ZL2tm+0x1>
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	08 95       	ret

00001890 <_Z6secondm>:
    1890:	0e 94 18 0c 	call	0x1830	; 0x1830 <_Z12refreshCachem>
    1894:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <_ZL2tm>
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	08 95       	ret

0000189c <_Z3daym>:
    189c:	0e 94 18 0c 	call	0x1830	; 0x1830 <_Z12refreshCachem>
    18a0:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <_ZL2tm+0x4>
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	08 95       	ret

000018a8 <_Z5monthm>:
int month(){
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
  refreshCache(t);
    18a8:	0e 94 18 0c 	call	0x1830	; 0x1830 <_Z12refreshCachem>
  return tm.Month;
    18ac:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <_ZL2tm+0x5>
}
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	08 95       	ret

000018b4 <_Z4yearm>:
int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
    18b4:	0e 94 18 0c 	call	0x1830	; 0x1830 <_Z12refreshCachem>
  return tmYearToCalendar(tm.Year);
    18b8:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <_ZL2tm+0x6>
    18bc:	90 e0       	ldi	r25, 0x00	; 0
}
    18be:	8e 54       	subi	r24, 0x4E	; 78
    18c0:	98 4f       	sbci	r25, 0xF8	; 248
    18c2:	08 95       	ret

000018c4 <_Z8makeTimeR12tmElements_t>:
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
}

time_t makeTime(tmElements_t &tm){   
    18c4:	4f 92       	push	r4
    18c6:	5f 92       	push	r5
    18c8:	6f 92       	push	r6
    18ca:	7f 92       	push	r7
    18cc:	8f 92       	push	r8
    18ce:	9f 92       	push	r9
    18d0:	af 92       	push	r10
    18d2:	bf 92       	push	r11
    18d4:	cf 92       	push	r12
    18d6:	df 92       	push	r13
    18d8:	ef 92       	push	r14
    18da:	ff 92       	push	r15
    18dc:	0f 93       	push	r16
    18de:	1f 93       	push	r17
    18e0:	cf 93       	push	r28
    18e2:	df 93       	push	r29
    18e4:	fc 01       	movw	r30, r24
  
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
    18e6:	16 81       	ldd	r17, Z+6	; 0x06
    18e8:	a1 2f       	mov	r26, r17
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	20 e8       	ldi	r18, 0x80	; 128
    18ee:	33 e3       	ldi	r19, 0x33	; 51
    18f0:	41 ee       	ldi	r20, 0xE1	; 225
    18f2:	51 e0       	ldi	r21, 0x01	; 1
    18f4:	0e 94 c3 10 	call	0x2186	; 0x2186 <__muluhisi3>
    18f8:	4b 01       	movw	r8, r22
    18fa:	5c 01       	movw	r10, r24
    18fc:	c2 eb       	ldi	r28, 0xB2	; 178
    18fe:	d7 e0       	ldi	r29, 0x07	; 7
  for (i = 0; i < tm.Year; i++) {
    1900:	9d 01       	movw	r18, r26
    if (LEAP_YEAR(i)) {
    1902:	04 e6       	ldi	r16, 0x64	; 100
    1904:	10 e0       	ldi	r17, 0x00	; 0
    1906:	80 e9       	ldi	r24, 0x90	; 144
    1908:	e8 2e       	mov	r14, r24
    190a:	ff 24       	eor	r15, r15
    190c:	f3 94       	inc	r15
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    190e:	ce 01       	movw	r24, r28
    1910:	82 5b       	subi	r24, 0xB2	; 178
    1912:	97 40       	sbci	r25, 0x07	; 7
    1914:	82 17       	cp	r24, r18
    1916:	93 07       	cpc	r25, r19
    1918:	d4 f4       	brge	.+52     	; 0x194e <_Z8makeTimeR12tmElements_t+0x8a>
    if (LEAP_YEAR(i)) {
    191a:	ce 01       	movw	r24, r28
    191c:	83 70       	andi	r24, 0x03	; 3
    191e:	99 27       	eor	r25, r25
    1920:	89 2b       	or	r24, r25
    1922:	99 f4       	brne	.+38     	; 0x194a <_Z8makeTimeR12tmElements_t+0x86>
    1924:	ce 01       	movw	r24, r28
    1926:	b8 01       	movw	r22, r16
    1928:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__divmodhi4>
    192c:	89 2b       	or	r24, r25
    192e:	31 f4       	brne	.+12     	; 0x193c <_Z8makeTimeR12tmElements_t+0x78>
    1930:	ce 01       	movw	r24, r28
    1932:	b7 01       	movw	r22, r14
    1934:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__divmodhi4>
    1938:	89 2b       	or	r24, r25
    193a:	39 f4       	brne	.+14     	; 0x194a <_Z8makeTimeR12tmElements_t+0x86>
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    193c:	80 e8       	ldi	r24, 0x80	; 128
    193e:	88 0e       	add	r8, r24
    1940:	81 e5       	ldi	r24, 0x51	; 81
    1942:	98 1e       	adc	r9, r24
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	a8 1e       	adc	r10, r24
    1948:	b1 1c       	adc	r11, r1
    194a:	21 96       	adiw	r28, 0x01	; 1
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    194c:	e0 cf       	rjmp	.-64     	; 0x190e <_Z8makeTimeR12tmElements_t+0x4a>
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    194e:	45 80       	ldd	r4, Z+5	; 0x05
    1950:	51 2c       	mov	r5, r1
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    1952:	2e 54       	subi	r18, 0x4E	; 78
    1954:	38 4f       	sbci	r19, 0xF8	; 248
    1956:	c9 01       	movw	r24, r18
    1958:	64 e6       	ldi	r22, 0x64	; 100
    195a:	70 e0       	ldi	r23, 0x00	; 0
    195c:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__divmodhi4>
    1960:	7c 01       	movw	r14, r24
    1962:	c9 01       	movw	r24, r18
    1964:	60 e9       	ldi	r22, 0x90	; 144
    1966:	71 e0       	ldi	r23, 0x01	; 1
    1968:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__divmodhi4>
    196c:	6c 01       	movw	r12, r24
    196e:	07 e6       	ldi	r16, 0x67	; 103
    1970:	11 e0       	ldi	r17, 0x01	; 1
    1972:	c1 e0       	ldi	r28, 0x01	; 1
    1974:	d0 e0       	ldi	r29, 0x00	; 0
    1976:	39 01       	movw	r6, r18
    1978:	a3 e0       	ldi	r26, 0x03	; 3
    197a:	6a 22       	and	r6, r26
    197c:	77 24       	eor	r7, r7
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    197e:	c4 15       	cp	r28, r4
    1980:	d5 05       	cpc	r29, r5
    1982:	34 f5       	brge	.+76     	; 0x19d0 <_Z8makeTimeR12tmElements_t+0x10c>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    1984:	c2 30       	cpi	r28, 0x02	; 2
    1986:	d1 05       	cpc	r29, r1
    1988:	89 f4       	brne	.+34     	; 0x19ac <_Z8makeTimeR12tmElements_t+0xe8>
    198a:	61 14       	cp	r6, r1
    198c:	71 04       	cpc	r7, r1
    198e:	71 f4       	brne	.+28     	; 0x19ac <_Z8makeTimeR12tmElements_t+0xe8>
    1990:	e1 14       	cp	r14, r1
    1992:	f1 04       	cpc	r15, r1
    1994:	19 f4       	brne	.+6      	; 0x199c <_Z8makeTimeR12tmElements_t+0xd8>
    1996:	c1 14       	cp	r12, r1
    1998:	d1 04       	cpc	r13, r1
    199a:	41 f4       	brne	.+16     	; 0x19ac <_Z8makeTimeR12tmElements_t+0xe8>
      seconds += SECS_PER_DAY * 29;
    199c:	b0 e8       	ldi	r27, 0x80	; 128
    199e:	8b 0e       	add	r8, r27
    19a0:	bb e3       	ldi	r27, 0x3B	; 59
    19a2:	9b 1e       	adc	r9, r27
    19a4:	b6 e2       	ldi	r27, 0x26	; 38
    19a6:	ab 1e       	adc	r10, r27
    19a8:	b1 1c       	adc	r11, r1
    19aa:	0e c0       	rjmp	.+28     	; 0x19c8 <_Z8makeTimeR12tmElements_t+0x104>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    19ac:	d8 01       	movw	r26, r16
    19ae:	8c 91       	ld	r24, X
    19b0:	a8 2f       	mov	r26, r24
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	20 e8       	ldi	r18, 0x80	; 128
    19b6:	31 e5       	ldi	r19, 0x51	; 81
    19b8:	41 e0       	ldi	r20, 0x01	; 1
    19ba:	50 e0       	ldi	r21, 0x00	; 0
    19bc:	0e 94 c3 10 	call	0x2186	; 0x2186 <__muluhisi3>
    19c0:	86 0e       	add	r8, r22
    19c2:	97 1e       	adc	r9, r23
    19c4:	a8 1e       	adc	r10, r24
    19c6:	b9 1e       	adc	r11, r25
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    19c8:	21 96       	adiw	r28, 0x01	; 1
    19ca:	0f 5f       	subi	r16, 0xFF	; 255
    19cc:	1f 4f       	sbci	r17, 0xFF	; 255
    19ce:	d7 cf       	rjmp	.-82     	; 0x197e <_Z8makeTimeR12tmElements_t+0xba>
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    }
  }
  seconds+= (tm.Day-1) * SECS_PER_DAY;
  seconds+= tm.Hour * SECS_PER_HOUR;
  seconds+= tm.Minute * SECS_PER_MIN;
    19d0:	41 81       	ldd	r20, Z+1	; 0x01
  seconds+= tm.Second;
  return (time_t)seconds; 
    19d2:	22 81       	ldd	r18, Z+2	; 0x02
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	a0 e1       	ldi	r26, 0x10	; 16
    19d8:	be e0       	ldi	r27, 0x0E	; 14
    19da:	0e 94 b4 10 	call	0x2168	; 0x2168 <__umulhisi3>
    19de:	6b 01       	movw	r12, r22
    19e0:	7c 01       	movw	r14, r24
    19e2:	24 2f       	mov	r18, r20
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	ac e3       	ldi	r26, 0x3C	; 60
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	0e 94 b4 10 	call	0x2168	; 0x2168 <__umulhisi3>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	8c 0d       	add	r24, r12
    19f4:	9d 1d       	adc	r25, r13
    19f6:	ae 1d       	adc	r26, r14
    19f8:	bf 1d       	adc	r27, r15
    19fa:	20 81       	ld	r18, Z
    19fc:	6c 01       	movw	r12, r24
    19fe:	7d 01       	movw	r14, r26
    1a00:	c2 0e       	add	r12, r18
    1a02:	d1 1c       	adc	r13, r1
    1a04:	e1 1c       	adc	r14, r1
    1a06:	f1 1c       	adc	r15, r1
    1a08:	a4 81       	ldd	r26, Z+4	; 0x04
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	11 97       	sbiw	r26, 0x01	; 1
    1a0e:	20 e8       	ldi	r18, 0x80	; 128
    1a10:	31 e5       	ldi	r19, 0x51	; 81
    1a12:	41 e0       	ldi	r20, 0x01	; 1
    1a14:	50 e0       	ldi	r21, 0x00	; 0
    1a16:	0e 94 ce 10 	call	0x219c	; 0x219c <__mulshisi3>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	8c 0d       	add	r24, r12
    1a20:	9d 1d       	adc	r25, r13
    1a22:	ae 1d       	adc	r26, r14
    1a24:	bf 1d       	adc	r27, r15
    1a26:	bc 01       	movw	r22, r24
    1a28:	cd 01       	movw	r24, r26
    1a2a:	68 0d       	add	r22, r8
    1a2c:	79 1d       	adc	r23, r9
    1a2e:	8a 1d       	adc	r24, r10
    1a30:	9b 1d       	adc	r25, r11
}
    1a32:	df 91       	pop	r29
    1a34:	cf 91       	pop	r28
    1a36:	1f 91       	pop	r17
    1a38:	0f 91       	pop	r16
    1a3a:	ff 90       	pop	r15
    1a3c:	ef 90       	pop	r14
    1a3e:	df 90       	pop	r13
    1a40:	cf 90       	pop	r12
    1a42:	bf 90       	pop	r11
    1a44:	af 90       	pop	r10
    1a46:	9f 90       	pop	r9
    1a48:	8f 90       	pop	r8
    1a4a:	7f 90       	pop	r7
    1a4c:	6f 90       	pop	r6
    1a4e:	5f 90       	pop	r5
    1a50:	4f 90       	pop	r4
    1a52:	08 95       	ret

00001a54 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1a54:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <_ZN7TwoWire14rxBufferLengthE>
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	20 91 9e 02 	lds	r18, 0x029E	; 0x80029e <_ZN7TwoWire13rxBufferIndexE>
    1a5e:	82 1b       	sub	r24, r18
    1a60:	91 09       	sbc	r25, r1
    1a62:	08 95       	ret

00001a64 <_ZN7TwoWire4readEv>:
    1a64:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <_ZN7TwoWire13rxBufferIndexE>
    1a68:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <_ZN7TwoWire14rxBufferLengthE>
    1a6c:	98 17       	cp	r25, r24
    1a6e:	50 f4       	brcc	.+20     	; 0x1a84 <_ZN7TwoWire4readEv+0x20>
    1a70:	e9 2f       	mov	r30, r25
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	e1 56       	subi	r30, 0x61	; 97
    1a76:	fd 4f       	sbci	r31, 0xFD	; 253
    1a78:	20 81       	ld	r18, Z
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	9f 5f       	subi	r25, 0xFF	; 255
    1a7e:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <_ZN7TwoWire13rxBufferIndexE>
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <_ZN7TwoWire4readEv+0x24>
    1a84:	2f ef       	ldi	r18, 0xFF	; 255
    1a86:	3f ef       	ldi	r19, 0xFF	; 255
    1a88:	c9 01       	movw	r24, r18
    1a8a:	08 95       	ret

00001a8c <_ZN7TwoWire4peekEv>:
    1a8c:	e0 91 9e 02 	lds	r30, 0x029E	; 0x80029e <_ZN7TwoWire13rxBufferIndexE>
    1a90:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <_ZN7TwoWire14rxBufferLengthE>
    1a94:	e8 17       	cp	r30, r24
    1a96:	30 f4       	brcc	.+12     	; 0x1aa4 <_ZN7TwoWire4peekEv+0x18>
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	e1 56       	subi	r30, 0x61	; 97
    1a9c:	fd 4f       	sbci	r31, 0xFD	; 253
    1a9e:	80 81       	ld	r24, Z
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	08 95       	ret
    1aa4:	8f ef       	ldi	r24, 0xFF	; 255
    1aa6:	9f ef       	ldi	r25, 0xFF	; 255
    1aa8:	08 95       	ret

00001aaa <_ZN7TwoWire5flushEv>:
    1aaa:	08 95       	ret

00001aac <_ZN7TwoWire5writeEPKhj>:
    1aac:	cf 92       	push	r12
    1aae:	df 92       	push	r13
    1ab0:	ef 92       	push	r14
    1ab2:	ff 92       	push	r15
    1ab4:	0f 93       	push	r16
    1ab6:	1f 93       	push	r17
    1ab8:	cf 93       	push	r28
    1aba:	df 93       	push	r29
    1abc:	7c 01       	movw	r14, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	8a 01       	movw	r16, r20
    1ac2:	20 91 79 02 	lds	r18, 0x0279	; 0x800279 <_ZN7TwoWire12transmittingE>
    1ac6:	22 23       	and	r18, r18
    1ac8:	89 f0       	breq	.+34     	; 0x1aec <_ZN7TwoWire5writeEPKhj+0x40>
    1aca:	eb 01       	movw	r28, r22
    1acc:	6b 01       	movw	r12, r22
    1ace:	c4 0e       	add	r12, r20
    1ad0:	d5 1e       	adc	r13, r21
    1ad2:	cc 15       	cp	r28, r12
    1ad4:	dd 05       	cpc	r29, r13
    1ad6:	69 f0       	breq	.+26     	; 0x1af2 <_ZN7TwoWire5writeEPKhj+0x46>
    1ad8:	69 91       	ld	r22, Y+
    1ada:	d7 01       	movw	r26, r14
    1adc:	ed 91       	ld	r30, X+
    1ade:	fc 91       	ld	r31, X
    1ae0:	01 90       	ld	r0, Z+
    1ae2:	f0 81       	ld	r31, Z
    1ae4:	e0 2d       	mov	r30, r0
    1ae6:	c7 01       	movw	r24, r14
    1ae8:	09 95       	icall
    1aea:	f3 cf       	rjmp	.-26     	; 0x1ad2 <_ZN7TwoWire5writeEPKhj+0x26>
    1aec:	64 2f       	mov	r22, r20
    1aee:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <twi_transmit>
    1af2:	c8 01       	movw	r24, r16
    1af4:	df 91       	pop	r29
    1af6:	cf 91       	pop	r28
    1af8:	1f 91       	pop	r17
    1afa:	0f 91       	pop	r16
    1afc:	ff 90       	pop	r15
    1afe:	ef 90       	pop	r14
    1b00:	df 90       	pop	r13
    1b02:	cf 90       	pop	r12
    1b04:	08 95       	ret

00001b06 <_ZN7TwoWire5writeEh>:
    1b06:	cf 93       	push	r28
    1b08:	df 93       	push	r29
    1b0a:	1f 92       	push	r1
    1b0c:	cd b7       	in	r28, 0x3d	; 61
    1b0e:	de b7       	in	r29, 0x3e	; 62
    1b10:	69 83       	std	Y+1, r22	; 0x01
    1b12:	20 91 79 02 	lds	r18, 0x0279	; 0x800279 <_ZN7TwoWire12transmittingE>
    1b16:	22 23       	and	r18, r18
    1b18:	d1 f0       	breq	.+52     	; 0x1b4e <_ZN7TwoWire5writeEh+0x48>
    1b1a:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <_ZN7TwoWire14txBufferLengthE>
    1b1e:	20 32       	cpi	r18, 0x20	; 32
    1b20:	40 f0       	brcs	.+16     	; 0x1b32 <_ZN7TwoWire5writeEh+0x2c>
    1b22:	21 e0       	ldi	r18, 0x01	; 1
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	fc 01       	movw	r30, r24
    1b28:	33 83       	std	Z+3, r19	; 0x03
    1b2a:	22 83       	std	Z+2, r18	; 0x02
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	15 c0       	rjmp	.+42     	; 0x1b5c <_ZN7TwoWire5writeEh+0x56>
    1b32:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <_ZN7TwoWire13txBufferIndexE>
    1b36:	e8 2f       	mov	r30, r24
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	e4 58       	subi	r30, 0x84	; 132
    1b3c:	fd 4f       	sbci	r31, 0xFD	; 253
    1b3e:	99 81       	ldd	r25, Y+1	; 0x01
    1b40:	90 83       	st	Z, r25
    1b42:	8f 5f       	subi	r24, 0xFF	; 255
    1b44:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <_ZN7TwoWire13txBufferIndexE>
    1b48:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <_ZN7TwoWire14txBufferLengthE>
    1b4c:	05 c0       	rjmp	.+10     	; 0x1b58 <_ZN7TwoWire5writeEh+0x52>
    1b4e:	61 e0       	ldi	r22, 0x01	; 1
    1b50:	ce 01       	movw	r24, r28
    1b52:	01 96       	adiw	r24, 0x01	; 1
    1b54:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <twi_transmit>
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	0f 90       	pop	r0
    1b5e:	df 91       	pop	r29
    1b60:	cf 91       	pop	r28
    1b62:	08 95       	ret

00001b64 <_ZN7TwoWireC1Ev>:
    1b64:	fc 01       	movw	r30, r24
    1b66:	13 82       	std	Z+3, r1	; 0x03
    1b68:	12 82       	std	Z+2, r1	; 0x02
    1b6a:	88 ee       	ldi	r24, 0xE8	; 232
    1b6c:	93 e0       	ldi	r25, 0x03	; 3
    1b6e:	a0 e0       	ldi	r26, 0x00	; 0
    1b70:	b0 e0       	ldi	r27, 0x00	; 0
    1b72:	84 83       	std	Z+4, r24	; 0x04
    1b74:	95 83       	std	Z+5, r25	; 0x05
    1b76:	a6 83       	std	Z+6, r26	; 0x06
    1b78:	b7 83       	std	Z+7, r27	; 0x07
    1b7a:	87 e7       	ldi	r24, 0x77	; 119
    1b7c:	91 e0       	ldi	r25, 0x01	; 1
    1b7e:	91 83       	std	Z+1, r25	; 0x01
    1b80:	80 83       	st	Z, r24
    1b82:	08 95       	ret

00001b84 <_ZN7TwoWire5beginEv>:
    1b84:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <_ZN7TwoWire13rxBufferIndexE>
    1b88:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <_ZN7TwoWire14rxBufferLengthE>
    1b8c:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <_ZN7TwoWire13txBufferIndexE>
    1b90:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <_ZN7TwoWire14txBufferLengthE>
    1b94:	0c 94 5d 0e 	jmp	0x1cba	; 0x1cba <twi_init>

00001b98 <_ZN7TwoWire17beginTransmissionEh>:
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <_ZN7TwoWire12transmittingE>
    1b9e:	60 93 9c 02 	sts	0x029C, r22	; 0x80029c <_ZN7TwoWire9txAddressE>
    1ba2:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <_ZN7TwoWire13txBufferIndexE>
    1ba6:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <_ZN7TwoWire14txBufferLengthE>
    1baa:	08 95       	ret

00001bac <_ZN7TwoWire17beginTransmissionEi>:
    1bac:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <_ZN7TwoWire17beginTransmissionEh>

00001bb0 <_ZN7TwoWire15endTransmissionEh>:
    1bb0:	0f 93       	push	r16
    1bb2:	06 2f       	mov	r16, r22
    1bb4:	21 e0       	ldi	r18, 0x01	; 1
    1bb6:	40 91 7a 02 	lds	r20, 0x027A	; 0x80027a <_ZN7TwoWire14txBufferLengthE>
    1bba:	6c e7       	ldi	r22, 0x7C	; 124
    1bbc:	72 e0       	ldi	r23, 0x02	; 2
    1bbe:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <_ZN7TwoWire9txAddressE>
    1bc2:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <twi_writeTo>
    1bc6:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <_ZN7TwoWire13txBufferIndexE>
    1bca:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <_ZN7TwoWire14txBufferLengthE>
    1bce:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <_ZN7TwoWire12transmittingE>
    1bd2:	0f 91       	pop	r16
    1bd4:	08 95       	ret

00001bd6 <_ZN7TwoWire11requestFromEhhmhh>:
    1bd6:	4f 92       	push	r4
    1bd8:	5f 92       	push	r5
    1bda:	6f 92       	push	r6
    1bdc:	7f 92       	push	r7
    1bde:	af 92       	push	r10
    1be0:	bf 92       	push	r11
    1be2:	cf 92       	push	r12
    1be4:	ef 92       	push	r14
    1be6:	ff 92       	push	r15
    1be8:	0f 93       	push	r16
    1bea:	1f 93       	push	r17
    1bec:	cf 93       	push	r28
    1bee:	df 93       	push	r29
    1bf0:	5c 01       	movw	r10, r24
    1bf2:	f6 2e       	mov	r15, r22
    1bf4:	d4 2f       	mov	r29, r20
    1bf6:	28 01       	movw	r4, r16
    1bf8:	39 01       	movw	r6, r18
    1bfa:	ee 20       	and	r14, r14
    1bfc:	21 f1       	breq	.+72     	; 0x1c46 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    1bfe:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_ZN7TwoWire17beginTransmissionEh>
    1c02:	ce 2d       	mov	r28, r14
    1c04:	c4 30       	cpi	r28, 0x04	; 4
    1c06:	08 f0       	brcs	.+2      	; 0x1c0a <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1c08:	c3 e0       	ldi	r28, 0x03	; 3
    1c0a:	c1 50       	subi	r28, 0x01	; 1
    1c0c:	c0 f0       	brcs	.+48     	; 0x1c3e <_ZN7TwoWire11requestFromEhhmhh+0x68>
    1c0e:	28 e0       	ldi	r18, 0x08	; 8
    1c10:	c2 9f       	mul	r28, r18
    1c12:	c0 01       	movw	r24, r0
    1c14:	11 24       	eor	r1, r1
    1c16:	a3 01       	movw	r20, r6
    1c18:	92 01       	movw	r18, r4
    1c1a:	04 c0       	rjmp	.+8      	; 0x1c24 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    1c1c:	56 95       	lsr	r21
    1c1e:	47 95       	ror	r20
    1c20:	37 95       	ror	r19
    1c22:	27 95       	ror	r18
    1c24:	8a 95       	dec	r24
    1c26:	d2 f7       	brpl	.-12     	; 0x1c1c <_ZN7TwoWire11requestFromEhhmhh+0x46>
    1c28:	ca 01       	movw	r24, r20
    1c2a:	b9 01       	movw	r22, r18
    1c2c:	d5 01       	movw	r26, r10
    1c2e:	ed 91       	ld	r30, X+
    1c30:	fc 91       	ld	r31, X
    1c32:	01 90       	ld	r0, Z+
    1c34:	f0 81       	ld	r31, Z
    1c36:	e0 2d       	mov	r30, r0
    1c38:	c5 01       	movw	r24, r10
    1c3a:	09 95       	icall
    1c3c:	e6 cf       	rjmp	.-52     	; 0x1c0a <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1c3e:	60 e0       	ldi	r22, 0x00	; 0
    1c40:	c5 01       	movw	r24, r10
    1c42:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <_ZN7TwoWire15endTransmissionEh>
    1c46:	4d 2f       	mov	r20, r29
    1c48:	d1 32       	cpi	r29, 0x21	; 33
    1c4a:	08 f0       	brcs	.+2      	; 0x1c4e <_ZN7TwoWire11requestFromEhhmhh+0x78>
    1c4c:	40 e2       	ldi	r20, 0x20	; 32
    1c4e:	2c 2d       	mov	r18, r12
    1c50:	6f e9       	ldi	r22, 0x9F	; 159
    1c52:	72 e0       	ldi	r23, 0x02	; 2
    1c54:	8f 2d       	mov	r24, r15
    1c56:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <twi_readFrom>
    1c5a:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <_ZN7TwoWire13rxBufferIndexE>
    1c5e:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <_ZN7TwoWire14rxBufferLengthE>
    1c62:	df 91       	pop	r29
    1c64:	cf 91       	pop	r28
    1c66:	1f 91       	pop	r17
    1c68:	0f 91       	pop	r16
    1c6a:	ff 90       	pop	r15
    1c6c:	ef 90       	pop	r14
    1c6e:	cf 90       	pop	r12
    1c70:	bf 90       	pop	r11
    1c72:	af 90       	pop	r10
    1c74:	7f 90       	pop	r7
    1c76:	6f 90       	pop	r6
    1c78:	5f 90       	pop	r5
    1c7a:	4f 90       	pop	r4
    1c7c:	08 95       	ret

00001c7e <_ZN7TwoWire11requestFromEhhh>:
    1c7e:	cf 92       	push	r12
    1c80:	ef 92       	push	r14
    1c82:	0f 93       	push	r16
    1c84:	1f 93       	push	r17
    1c86:	c2 2e       	mov	r12, r18
    1c88:	e1 2c       	mov	r14, r1
    1c8a:	00 e0       	ldi	r16, 0x00	; 0
    1c8c:	10 e0       	ldi	r17, 0x00	; 0
    1c8e:	98 01       	movw	r18, r16
    1c90:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <_ZN7TwoWire11requestFromEhhmhh>
    1c94:	1f 91       	pop	r17
    1c96:	0f 91       	pop	r16
    1c98:	ef 90       	pop	r14
    1c9a:	cf 90       	pop	r12
    1c9c:	08 95       	ret

00001c9e <_ZN7TwoWire11requestFromEhh>:
    1c9e:	21 e0       	ldi	r18, 0x01	; 1
    1ca0:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <_ZN7TwoWire11requestFromEhhh>

00001ca4 <_ZN7TwoWire11requestFromEii>:
    1ca4:	21 e0       	ldi	r18, 0x01	; 1
    1ca6:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <_ZN7TwoWire11requestFromEhhh>

00001caa <_ZN7TwoWire15endTransmissionEv>:
    1caa:	61 e0       	ldi	r22, 0x01	; 1
    1cac:	0c 94 d8 0d 	jmp	0x1bb0	; 0x1bb0 <_ZN7TwoWire15endTransmissionEh>

00001cb0 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1cb0:	8d e6       	ldi	r24, 0x6D	; 109
    1cb2:	92 e0       	ldi	r25, 0x02	; 2
    1cb4:	0c 94 b2 0d 	jmp	0x1b64	; 0x1b64 <_ZN7TwoWireC1Ev>

00001cb8 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1cb8:	08 95       	ret

00001cba <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1cba:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <twi_state>
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <twi_sendStop>
    1cc4:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <twi_inRepStart>
    1cc8:	61 e0       	ldi	r22, 0x01	; 1
    1cca:	82 e1       	ldi	r24, 0x12	; 18
    1ccc:	0e 94 0e 08 	call	0x101c	; 0x101c <digitalWrite>
    1cd0:	61 e0       	ldi	r22, 0x01	; 1
    1cd2:	83 e1       	ldi	r24, 0x13	; 19
    1cd4:	0e 94 0e 08 	call	0x101c	; 0x101c <digitalWrite>
    1cd8:	e9 eb       	ldi	r30, 0xB9	; 185
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	8e 7f       	andi	r24, 0xFE	; 254
    1ce0:	80 83       	st	Z, r24
    1ce2:	80 81       	ld	r24, Z
    1ce4:	8d 7f       	andi	r24, 0xFD	; 253
    1ce6:	80 83       	st	Z, r24
    1ce8:	88 e4       	ldi	r24, 0x48	; 72
    1cea:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1cee:	85 e4       	ldi	r24, 0x45	; 69
    1cf0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1cf4:	08 95       	ret

00001cf6 <twi_readFrom>:
    1cf6:	41 32       	cpi	r20, 0x21	; 33
    1cf8:	08 f0       	brcs	.+2      	; 0x1cfc <twi_readFrom+0x6>
    1cfa:	43 c0       	rjmp	.+134    	; 0x1d82 <twi_readFrom+0x8c>
    1cfc:	90 91 2c 03 	lds	r25, 0x032C	; 0x80032c <twi_state>
    1d00:	91 11       	cpse	r25, r1
    1d02:	fc cf       	rjmp	.-8      	; 0x1cfc <twi_readFrom+0x6>
    1d04:	91 e0       	ldi	r25, 0x01	; 1
    1d06:	90 93 2c 03 	sts	0x032C, r25	; 0x80032c <twi_state>
    1d0a:	20 93 2a 03 	sts	0x032A, r18	; 0x80032a <twi_sendStop>
    1d0e:	2f ef       	ldi	r18, 0xFF	; 255
    1d10:	20 93 bf 02 	sts	0x02BF, r18	; 0x8002bf <twi_error>
    1d14:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <twi_masterBufferIndex>
    1d18:	24 0f       	add	r18, r20
    1d1a:	20 93 03 03 	sts	0x0303, r18	; 0x800303 <twi_masterBufferLength>
    1d1e:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <twi_slarw>
    1d22:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <twi_slarw>
    1d26:	88 0f       	add	r24, r24
    1d28:	89 2b       	or	r24, r25
    1d2a:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <twi_slarw>
    1d2e:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <twi_inRepStart>
    1d32:	81 30       	cpi	r24, 0x01	; 1
    1d34:	61 f4       	brne	.+24     	; 0x1d4e <twi_readFrom+0x58>
    1d36:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <twi_inRepStart>
    1d3a:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <twi_slarw>
    1d3e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1d42:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1d46:	83 fd       	sbrc	r24, 3
    1d48:	f8 cf       	rjmp	.-16     	; 0x1d3a <twi_readFrom+0x44>
    1d4a:	85 ec       	ldi	r24, 0xC5	; 197
    1d4c:	01 c0       	rjmp	.+2      	; 0x1d50 <twi_readFrom+0x5a>
    1d4e:	85 ee       	ldi	r24, 0xE5	; 229
    1d50:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1d54:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <twi_state>
    1d58:	81 30       	cpi	r24, 0x01	; 1
    1d5a:	e1 f3       	breq	.-8      	; 0x1d54 <twi_readFrom+0x5e>
    1d5c:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <twi_masterBufferIndex>
    1d60:	84 17       	cp	r24, r20
    1d62:	10 f4       	brcc	.+4      	; 0x1d68 <twi_readFrom+0x72>
    1d64:	40 91 04 03 	lds	r20, 0x0304	; 0x800304 <twi_masterBufferIndex>
    1d68:	a5 e0       	ldi	r26, 0x05	; 5
    1d6a:	b3 e0       	ldi	r27, 0x03	; 3
    1d6c:	96 2f       	mov	r25, r22
    1d6e:	fb 01       	movw	r30, r22
    1d70:	8e 2f       	mov	r24, r30
    1d72:	89 1b       	sub	r24, r25
    1d74:	84 17       	cp	r24, r20
    1d76:	18 f4       	brcc	.+6      	; 0x1d7e <twi_readFrom+0x88>
    1d78:	8d 91       	ld	r24, X+
    1d7a:	81 93       	st	Z+, r24
    1d7c:	f9 cf       	rjmp	.-14     	; 0x1d70 <twi_readFrom+0x7a>
    1d7e:	84 2f       	mov	r24, r20
    1d80:	08 95       	ret
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	08 95       	ret

00001d86 <twi_writeTo>:
    1d86:	0f 93       	push	r16
    1d88:	41 32       	cpi	r20, 0x21	; 33
    1d8a:	08 f0       	brcs	.+2      	; 0x1d8e <twi_writeTo+0x8>
    1d8c:	4a c0       	rjmp	.+148    	; 0x1e22 <twi_writeTo+0x9c>
    1d8e:	90 91 2c 03 	lds	r25, 0x032C	; 0x80032c <twi_state>
    1d92:	91 11       	cpse	r25, r1
    1d94:	fc cf       	rjmp	.-8      	; 0x1d8e <twi_writeTo+0x8>
    1d96:	32 e0       	ldi	r19, 0x02	; 2
    1d98:	30 93 2c 03 	sts	0x032C, r19	; 0x80032c <twi_state>
    1d9c:	00 93 2a 03 	sts	0x032A, r16	; 0x80032a <twi_sendStop>
    1da0:	3f ef       	ldi	r19, 0xFF	; 255
    1da2:	30 93 bf 02 	sts	0x02BF, r19	; 0x8002bf <twi_error>
    1da6:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <twi_masterBufferIndex>
    1daa:	40 93 03 03 	sts	0x0303, r20	; 0x800303 <twi_masterBufferLength>
    1dae:	56 2f       	mov	r21, r22
    1db0:	a5 e0       	ldi	r26, 0x05	; 5
    1db2:	b3 e0       	ldi	r27, 0x03	; 3
    1db4:	fb 01       	movw	r30, r22
    1db6:	3e 2f       	mov	r19, r30
    1db8:	35 1b       	sub	r19, r21
    1dba:	34 17       	cp	r19, r20
    1dbc:	18 f4       	brcc	.+6      	; 0x1dc4 <twi_writeTo+0x3e>
    1dbe:	31 91       	ld	r19, Z+
    1dc0:	3d 93       	st	X+, r19
    1dc2:	f9 cf       	rjmp	.-14     	; 0x1db6 <twi_writeTo+0x30>
    1dc4:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <twi_slarw>
    1dc8:	30 91 2b 03 	lds	r19, 0x032B	; 0x80032b <twi_slarw>
    1dcc:	88 0f       	add	r24, r24
    1dce:	83 2b       	or	r24, r19
    1dd0:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <twi_slarw>
    1dd4:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <twi_inRepStart>
    1dd8:	81 30       	cpi	r24, 0x01	; 1
    1dda:	61 f4       	brne	.+24     	; 0x1df4 <twi_writeTo+0x6e>
    1ddc:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <twi_inRepStart>
    1de0:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <twi_slarw>
    1de4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1de8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1dec:	83 fd       	sbrc	r24, 3
    1dee:	f8 cf       	rjmp	.-16     	; 0x1de0 <twi_writeTo+0x5a>
    1df0:	85 ec       	ldi	r24, 0xC5	; 197
    1df2:	01 c0       	rjmp	.+2      	; 0x1df6 <twi_writeTo+0x70>
    1df4:	85 ee       	ldi	r24, 0xE5	; 229
    1df6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1dfa:	22 23       	and	r18, r18
    1dfc:	21 f0       	breq	.+8      	; 0x1e06 <twi_writeTo+0x80>
    1dfe:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <twi_state>
    1e02:	82 30       	cpi	r24, 0x02	; 2
    1e04:	d1 f3       	breq	.-12     	; 0x1dfa <twi_writeTo+0x74>
    1e06:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <twi_error>
    1e0a:	8f 3f       	cpi	r24, 0xFF	; 255
    1e0c:	79 f0       	breq	.+30     	; 0x1e2c <twi_writeTo+0xa6>
    1e0e:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <twi_error>
    1e12:	80 32       	cpi	r24, 0x20	; 32
    1e14:	41 f0       	breq	.+16     	; 0x1e26 <twi_writeTo+0xa0>
    1e16:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <twi_error>
    1e1a:	80 33       	cpi	r24, 0x30	; 48
    1e1c:	31 f0       	breq	.+12     	; 0x1e2a <twi_writeTo+0xa4>
    1e1e:	94 e0       	ldi	r25, 0x04	; 4
    1e20:	05 c0       	rjmp	.+10     	; 0x1e2c <twi_writeTo+0xa6>
    1e22:	91 e0       	ldi	r25, 0x01	; 1
    1e24:	03 c0       	rjmp	.+6      	; 0x1e2c <twi_writeTo+0xa6>
    1e26:	92 e0       	ldi	r25, 0x02	; 2
    1e28:	01 c0       	rjmp	.+2      	; 0x1e2c <twi_writeTo+0xa6>
    1e2a:	93 e0       	ldi	r25, 0x03	; 3
    1e2c:	89 2f       	mov	r24, r25
    1e2e:	0f 91       	pop	r16
    1e30:	08 95       	ret

00001e32 <twi_transmit>:
    1e32:	40 91 e1 02 	lds	r20, 0x02E1	; 0x8002e1 <twi_txBufferLength>
    1e36:	26 2f       	mov	r18, r22
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	24 0f       	add	r18, r20
    1e3c:	31 1d       	adc	r19, r1
    1e3e:	21 32       	cpi	r18, 0x21	; 33
    1e40:	31 05       	cpc	r19, r1
    1e42:	dc f4       	brge	.+54     	; 0x1e7a <twi_transmit+0x48>
    1e44:	20 91 2c 03 	lds	r18, 0x032C	; 0x80032c <twi_state>
    1e48:	24 30       	cpi	r18, 0x04	; 4
    1e4a:	c9 f4       	brne	.+50     	; 0x1e7e <twi_transmit+0x4c>
    1e4c:	fc 01       	movw	r30, r24
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	86 17       	cp	r24, r22
    1e54:	58 f4       	brcc	.+22     	; 0x1e6c <twi_transmit+0x3a>
    1e56:	30 91 e1 02 	lds	r19, 0x02E1	; 0x8002e1 <twi_txBufferLength>
    1e5a:	21 91       	ld	r18, Z+
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	ad 51       	subi	r26, 0x1D	; 29
    1e60:	bd 4f       	sbci	r27, 0xFD	; 253
    1e62:	a3 0f       	add	r26, r19
    1e64:	b1 1d       	adc	r27, r1
    1e66:	2c 93       	st	X, r18
    1e68:	01 96       	adiw	r24, 0x01	; 1
    1e6a:	f3 cf       	rjmp	.-26     	; 0x1e52 <twi_transmit+0x20>
    1e6c:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <twi_txBufferLength>
    1e70:	68 0f       	add	r22, r24
    1e72:	60 93 e1 02 	sts	0x02E1, r22	; 0x8002e1 <twi_txBufferLength>
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	08 95       	ret
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	08 95       	ret
    1e7e:	82 e0       	ldi	r24, 0x02	; 2
    1e80:	08 95       	ret

00001e82 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1e82:	85 ed       	ldi	r24, 0xD5	; 213
    1e84:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1e88:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1e8c:	84 fd       	sbrc	r24, 4
    1e8e:	fc cf       	rjmp	.-8      	; 0x1e88 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1e90:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <twi_state>
    1e94:	08 95       	ret

00001e96 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1e96:	85 ec       	ldi	r24, 0xC5	; 197
    1e98:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    1e9c:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <twi_state>
    1ea0:	08 95       	ret

00001ea2 <__vector_24>:
}

ISR(TWI_vect)
{
    1ea2:	1f 92       	push	r1
    1ea4:	0f 92       	push	r0
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	0f 92       	push	r0
    1eaa:	11 24       	eor	r1, r1
    1eac:	2f 93       	push	r18
    1eae:	3f 93       	push	r19
    1eb0:	4f 93       	push	r20
    1eb2:	5f 93       	push	r21
    1eb4:	6f 93       	push	r22
    1eb6:	7f 93       	push	r23
    1eb8:	8f 93       	push	r24
    1eba:	9f 93       	push	r25
    1ebc:	af 93       	push	r26
    1ebe:	bf 93       	push	r27
    1ec0:	ef 93       	push	r30
    1ec2:	ff 93       	push	r31
  switch(TW_STATUS){
    1ec4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1ec8:	88 7f       	andi	r24, 0xF8	; 248
    1eca:	80 36       	cpi	r24, 0x60	; 96
    1ecc:	09 f4       	brne	.+2      	; 0x1ed0 <__vector_24+0x2e>
    1ece:	9e c0       	rjmp	.+316    	; 0x200c <__vector_24+0x16a>
    1ed0:	78 f5       	brcc	.+94     	; 0x1f30 <__vector_24+0x8e>
    1ed2:	88 32       	cpi	r24, 0x28	; 40
    1ed4:	09 f4       	brne	.+2      	; 0x1ed8 <__vector_24+0x36>
    1ed6:	5d c0       	rjmp	.+186    	; 0x1f92 <__vector_24+0xf0>
    1ed8:	90 f4       	brcc	.+36     	; 0x1efe <__vector_24+0x5c>
    1eda:	80 31       	cpi	r24, 0x10	; 16
    1edc:	09 f4       	brne	.+2      	; 0x1ee0 <__vector_24+0x3e>
    1ede:	56 c0       	rjmp	.+172    	; 0x1f8c <__vector_24+0xea>
    1ee0:	38 f4       	brcc	.+14     	; 0x1ef0 <__vector_24+0x4e>
    1ee2:	88 23       	and	r24, r24
    1ee4:	09 f4       	brne	.+2      	; 0x1ee8 <__vector_24+0x46>
    1ee6:	f5 c0       	rjmp	.+490    	; 0x20d2 <__vector_24+0x230>
    1ee8:	88 30       	cpi	r24, 0x08	; 8
    1eea:	09 f4       	brne	.+2      	; 0x1eee <__vector_24+0x4c>
    1eec:	4f c0       	rjmp	.+158    	; 0x1f8c <__vector_24+0xea>
    1eee:	f5 c0       	rjmp	.+490    	; 0x20da <__vector_24+0x238>
    1ef0:	88 31       	cpi	r24, 0x18	; 24
    1ef2:	09 f4       	brne	.+2      	; 0x1ef6 <__vector_24+0x54>
    1ef4:	4e c0       	rjmp	.+156    	; 0x1f92 <__vector_24+0xf0>
    1ef6:	80 32       	cpi	r24, 0x20	; 32
    1ef8:	09 f4       	brne	.+2      	; 0x1efc <__vector_24+0x5a>
    1efa:	5f c0       	rjmp	.+190    	; 0x1fba <__vector_24+0x118>
    1efc:	ee c0       	rjmp	.+476    	; 0x20da <__vector_24+0x238>
    1efe:	80 34       	cpi	r24, 0x40	; 64
    1f00:	09 f4       	brne	.+2      	; 0x1f04 <__vector_24+0x62>
    1f02:	6a c0       	rjmp	.+212    	; 0x1fd8 <__vector_24+0x136>
    1f04:	58 f4       	brcc	.+22     	; 0x1f1c <__vector_24+0x7a>
    1f06:	80 33       	cpi	r24, 0x30	; 48
    1f08:	09 f4       	brne	.+2      	; 0x1f0c <__vector_24+0x6a>
    1f0a:	57 c0       	rjmp	.+174    	; 0x1fba <__vector_24+0x118>
    1f0c:	88 33       	cpi	r24, 0x38	; 56
    1f0e:	09 f0       	breq	.+2      	; 0x1f12 <__vector_24+0x70>
    1f10:	e4 c0       	rjmp	.+456    	; 0x20da <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1f12:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <twi_error>
      twi_releaseBus();
    1f16:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <twi_releaseBus>
      break;
    1f1a:	df c0       	rjmp	.+446    	; 0x20da <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1f1c:	80 35       	cpi	r24, 0x50	; 80
    1f1e:	09 f4       	brne	.+2      	; 0x1f22 <__vector_24+0x80>
    1f20:	4f c0       	rjmp	.+158    	; 0x1fc0 <__vector_24+0x11e>
    1f22:	88 35       	cpi	r24, 0x58	; 88
    1f24:	09 f4       	brne	.+2      	; 0x1f28 <__vector_24+0x86>
    1f26:	5d c0       	rjmp	.+186    	; 0x1fe2 <__vector_24+0x140>
    1f28:	88 34       	cpi	r24, 0x48	; 72
    1f2a:	09 f0       	breq	.+2      	; 0x1f2e <__vector_24+0x8c>
    1f2c:	d6 c0       	rjmp	.+428    	; 0x20da <__vector_24+0x238>
    1f2e:	d3 c0       	rjmp	.+422    	; 0x20d6 <__vector_24+0x234>
    1f30:	88 39       	cpi	r24, 0x98	; 152
    1f32:	09 f4       	brne	.+2      	; 0x1f36 <__vector_24+0x94>
    1f34:	c4 c0       	rjmp	.+392    	; 0x20be <__vector_24+0x21c>
    1f36:	a8 f4       	brcc	.+42     	; 0x1f62 <__vector_24+0xc0>
    1f38:	88 37       	cpi	r24, 0x78	; 120
    1f3a:	09 f4       	brne	.+2      	; 0x1f3e <__vector_24+0x9c>
    1f3c:	67 c0       	rjmp	.+206    	; 0x200c <__vector_24+0x16a>
    1f3e:	38 f4       	brcc	.+14     	; 0x1f4e <__vector_24+0xac>
    1f40:	88 36       	cpi	r24, 0x68	; 104
    1f42:	09 f4       	brne	.+2      	; 0x1f46 <__vector_24+0xa4>
    1f44:	63 c0       	rjmp	.+198    	; 0x200c <__vector_24+0x16a>
    1f46:	80 37       	cpi	r24, 0x70	; 112
    1f48:	09 f4       	brne	.+2      	; 0x1f4c <__vector_24+0xaa>
    1f4a:	60 c0       	rjmp	.+192    	; 0x200c <__vector_24+0x16a>
    1f4c:	c6 c0       	rjmp	.+396    	; 0x20da <__vector_24+0x238>
    1f4e:	88 38       	cpi	r24, 0x88	; 136
    1f50:	09 f4       	brne	.+2      	; 0x1f54 <__vector_24+0xb2>
    1f52:	b5 c0       	rjmp	.+362    	; 0x20be <__vector_24+0x21c>
    1f54:	80 39       	cpi	r24, 0x90	; 144
    1f56:	09 f4       	brne	.+2      	; 0x1f5a <__vector_24+0xb8>
    1f58:	5f c0       	rjmp	.+190    	; 0x2018 <__vector_24+0x176>
    1f5a:	80 38       	cpi	r24, 0x80	; 128
    1f5c:	09 f0       	breq	.+2      	; 0x1f60 <__vector_24+0xbe>
    1f5e:	bd c0       	rjmp	.+378    	; 0x20da <__vector_24+0x238>
    1f60:	5b c0       	rjmp	.+182    	; 0x2018 <__vector_24+0x176>
    1f62:	80 3b       	cpi	r24, 0xB0	; 176
    1f64:	09 f4       	brne	.+2      	; 0x1f68 <__vector_24+0xc6>
    1f66:	83 c0       	rjmp	.+262    	; 0x206e <__vector_24+0x1cc>
    1f68:	38 f4       	brcc	.+14     	; 0x1f78 <__vector_24+0xd6>
    1f6a:	80 3a       	cpi	r24, 0xA0	; 160
    1f6c:	09 f4       	brne	.+2      	; 0x1f70 <__vector_24+0xce>
    1f6e:	66 c0       	rjmp	.+204    	; 0x203c <__vector_24+0x19a>
    1f70:	88 3a       	cpi	r24, 0xA8	; 168
    1f72:	09 f4       	brne	.+2      	; 0x1f76 <__vector_24+0xd4>
    1f74:	7c c0       	rjmp	.+248    	; 0x206e <__vector_24+0x1cc>
    1f76:	b1 c0       	rjmp	.+354    	; 0x20da <__vector_24+0x238>
    1f78:	80 3c       	cpi	r24, 0xC0	; 192
    1f7a:	09 f4       	brne	.+2      	; 0x1f7e <__vector_24+0xdc>
    1f7c:	a4 c0       	rjmp	.+328    	; 0x20c6 <__vector_24+0x224>
    1f7e:	88 3c       	cpi	r24, 0xC8	; 200
    1f80:	09 f4       	brne	.+2      	; 0x1f84 <__vector_24+0xe2>
    1f82:	a1 c0       	rjmp	.+322    	; 0x20c6 <__vector_24+0x224>
    1f84:	88 3b       	cpi	r24, 0xB8	; 184
    1f86:	09 f4       	brne	.+2      	; 0x1f8a <__vector_24+0xe8>
    1f88:	87 c0       	rjmp	.+270    	; 0x2098 <__vector_24+0x1f6>
    1f8a:	a7 c0       	rjmp	.+334    	; 0x20da <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1f8c:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <twi_slarw>
    1f90:	10 c0       	rjmp	.+32     	; 0x1fb2 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1f92:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <twi_masterBufferIndex>
    1f96:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <twi_masterBufferLength>
    1f9a:	98 17       	cp	r25, r24
    1f9c:	70 f5       	brcc	.+92     	; 0x1ffa <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1f9e:	e0 91 04 03 	lds	r30, 0x0304	; 0x800304 <twi_masterBufferIndex>
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	8e 0f       	add	r24, r30
    1fa6:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <twi_masterBufferIndex>
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	eb 5f       	subi	r30, 0xFB	; 251
    1fae:	fc 4f       	sbci	r31, 0xFC	; 252
    1fb0:	80 81       	ld	r24, Z
    1fb2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1fb6:	85 ec       	ldi	r24, 0xC5	; 197
    1fb8:	83 c0       	rjmp	.+262    	; 0x20c0 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1fba:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <twi_error>
    1fbe:	8b c0       	rjmp	.+278    	; 0x20d6 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1fc0:	e0 91 04 03 	lds	r30, 0x0304	; 0x800304 <twi_masterBufferIndex>
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	8e 0f       	add	r24, r30
    1fc8:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <twi_masterBufferIndex>
    1fcc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	eb 5f       	subi	r30, 0xFB	; 251
    1fd4:	fc 4f       	sbci	r31, 0xFC	; 252
    1fd6:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1fd8:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <twi_masterBufferIndex>
    1fdc:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <twi_masterBufferLength>
    1fe0:	6b c0       	rjmp	.+214    	; 0x20b8 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1fe2:	e0 91 04 03 	lds	r30, 0x0304	; 0x800304 <twi_masterBufferIndex>
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	8e 0f       	add	r24, r30
    1fea:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <twi_masterBufferIndex>
    1fee:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	eb 5f       	subi	r30, 0xFB	; 251
    1ff6:	fc 4f       	sbci	r31, 0xFC	; 252
    1ff8:	80 83       	st	Z, r24
	if (twi_sendStop)
    1ffa:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <twi_sendStop>
    1ffe:	81 11       	cpse	r24, r1
    2000:	6a c0       	rjmp	.+212    	; 0x20d6 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2008:	84 ea       	ldi	r24, 0xA4	; 164
    200a:	5e c0       	rjmp	.+188    	; 0x20c8 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    200c:	83 e0       	ldi	r24, 0x03	; 3
    200e:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2012:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <twi_rxBufferIndex>
    2016:	cf cf       	rjmp	.-98     	; 0x1fb6 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2018:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <twi_rxBufferIndex>
    201c:	80 32       	cpi	r24, 0x20	; 32
    201e:	08 f0       	brcs	.+2      	; 0x2022 <__vector_24+0x180>
    2020:	4e c0       	rjmp	.+156    	; 0x20be <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2022:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <twi_rxBufferIndex>
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	8e 0f       	add	r24, r30
    202a:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <twi_rxBufferIndex>
    202e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	ef 53       	subi	r30, 0x3F	; 63
    2036:	fd 4f       	sbci	r31, 0xFD	; 253
    2038:	80 83       	st	Z, r24
    203a:	bd cf       	rjmp	.-134    	; 0x1fb6 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    203c:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2040:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <twi_rxBufferIndex>
    2044:	80 32       	cpi	r24, 0x20	; 32
    2046:	30 f4       	brcc	.+12     	; 0x2054 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2048:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <twi_rxBufferIndex>
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	ef 53       	subi	r30, 0x3F	; 63
    2050:	fd 4f       	sbci	r31, 0xFD	; 253
    2052:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2054:	60 91 c0 02 	lds	r22, 0x02C0	; 0x8002c0 <twi_rxBufferIndex>
    2058:	70 e0       	ldi	r23, 0x00	; 0
    205a:	e0 91 25 03 	lds	r30, 0x0325	; 0x800325 <twi_onSlaveReceive>
    205e:	f0 91 26 03 	lds	r31, 0x0326	; 0x800326 <twi_onSlaveReceive+0x1>
    2062:	81 ec       	ldi	r24, 0xC1	; 193
    2064:	92 e0       	ldi	r25, 0x02	; 2
    2066:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2068:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <twi_rxBufferIndex>
      break;
    206c:	36 c0       	rjmp	.+108    	; 0x20da <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    206e:	84 e0       	ldi	r24, 0x04	; 4
    2070:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2074:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2078:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    207c:	e0 91 27 03 	lds	r30, 0x0327	; 0x800327 <twi_onSlaveTransmit>
    2080:	f0 91 28 03 	lds	r31, 0x0328	; 0x800328 <twi_onSlaveTransmit+0x1>
    2084:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2086:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <twi_txBufferLength>
    208a:	81 11       	cpse	r24, r1
    208c:	05 c0       	rjmp	.+10     	; 0x2098 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2094:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2098:	e0 91 e2 02 	lds	r30, 0x02E2	; 0x8002e2 <twi_txBufferIndex>
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	8e 0f       	add	r24, r30
    20a0:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <twi_txBufferIndex>
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	ed 51       	subi	r30, 0x1D	; 29
    20a8:	fd 4f       	sbci	r31, 0xFD	; 253
    20aa:	80 81       	ld	r24, Z
    20ac:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    20b0:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <twi_txBufferIndex>
    20b4:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <twi_txBufferLength>
    20b8:	98 17       	cp	r25, r24
    20ba:	08 f4       	brcc	.+2      	; 0x20be <__vector_24+0x21c>
    20bc:	7c cf       	rjmp	.-264    	; 0x1fb6 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    20be:	85 e8       	ldi	r24, 0x85	; 133
    20c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    20c4:	0a c0       	rjmp	.+20     	; 0x20da <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    20c6:	85 ec       	ldi	r24, 0xC5	; 197
    20c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    20cc:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <twi_state>
      break;
    20d0:	04 c0       	rjmp	.+8      	; 0x20da <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    20d2:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <twi_error>
      twi_stop();
    20d6:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <twi_stop>
      break;
  }
}
    20da:	ff 91       	pop	r31
    20dc:	ef 91       	pop	r30
    20de:	bf 91       	pop	r27
    20e0:	af 91       	pop	r26
    20e2:	9f 91       	pop	r25
    20e4:	8f 91       	pop	r24
    20e6:	7f 91       	pop	r23
    20e8:	6f 91       	pop	r22
    20ea:	5f 91       	pop	r21
    20ec:	4f 91       	pop	r20
    20ee:	3f 91       	pop	r19
    20f0:	2f 91       	pop	r18
    20f2:	0f 90       	pop	r0
    20f4:	0f be       	out	0x3f, r0	; 63
    20f6:	0f 90       	pop	r0
    20f8:	1f 90       	pop	r1
    20fa:	18 95       	reti

000020fc <__divmodhi4>:
    20fc:	97 fb       	bst	r25, 7
    20fe:	07 2e       	mov	r0, r23
    2100:	16 f4       	brtc	.+4      	; 0x2106 <__divmodhi4+0xa>
    2102:	00 94       	com	r0
    2104:	07 d0       	rcall	.+14     	; 0x2114 <__divmodhi4_neg1>
    2106:	77 fd       	sbrc	r23, 7
    2108:	09 d0       	rcall	.+18     	; 0x211c <__divmodhi4_neg2>
    210a:	0e 94 d6 10 	call	0x21ac	; 0x21ac <__udivmodhi4>
    210e:	07 fc       	sbrc	r0, 7
    2110:	05 d0       	rcall	.+10     	; 0x211c <__divmodhi4_neg2>
    2112:	3e f4       	brtc	.+14     	; 0x2122 <__divmodhi4_exit>

00002114 <__divmodhi4_neg1>:
    2114:	90 95       	com	r25
    2116:	81 95       	neg	r24
    2118:	9f 4f       	sbci	r25, 0xFF	; 255
    211a:	08 95       	ret

0000211c <__divmodhi4_neg2>:
    211c:	70 95       	com	r23
    211e:	61 95       	neg	r22
    2120:	7f 4f       	sbci	r23, 0xFF	; 255

00002122 <__divmodhi4_exit>:
    2122:	08 95       	ret

00002124 <__udivmodsi4>:
    2124:	a1 e2       	ldi	r26, 0x21	; 33
    2126:	1a 2e       	mov	r1, r26
    2128:	aa 1b       	sub	r26, r26
    212a:	bb 1b       	sub	r27, r27
    212c:	fd 01       	movw	r30, r26
    212e:	0d c0       	rjmp	.+26     	; 0x214a <__udivmodsi4_ep>

00002130 <__udivmodsi4_loop>:
    2130:	aa 1f       	adc	r26, r26
    2132:	bb 1f       	adc	r27, r27
    2134:	ee 1f       	adc	r30, r30
    2136:	ff 1f       	adc	r31, r31
    2138:	a2 17       	cp	r26, r18
    213a:	b3 07       	cpc	r27, r19
    213c:	e4 07       	cpc	r30, r20
    213e:	f5 07       	cpc	r31, r21
    2140:	20 f0       	brcs	.+8      	; 0x214a <__udivmodsi4_ep>
    2142:	a2 1b       	sub	r26, r18
    2144:	b3 0b       	sbc	r27, r19
    2146:	e4 0b       	sbc	r30, r20
    2148:	f5 0b       	sbc	r31, r21

0000214a <__udivmodsi4_ep>:
    214a:	66 1f       	adc	r22, r22
    214c:	77 1f       	adc	r23, r23
    214e:	88 1f       	adc	r24, r24
    2150:	99 1f       	adc	r25, r25
    2152:	1a 94       	dec	r1
    2154:	69 f7       	brne	.-38     	; 0x2130 <__udivmodsi4_loop>
    2156:	60 95       	com	r22
    2158:	70 95       	com	r23
    215a:	80 95       	com	r24
    215c:	90 95       	com	r25
    215e:	9b 01       	movw	r18, r22
    2160:	ac 01       	movw	r20, r24
    2162:	bd 01       	movw	r22, r26
    2164:	cf 01       	movw	r24, r30
    2166:	08 95       	ret

00002168 <__umulhisi3>:
    2168:	a2 9f       	mul	r26, r18
    216a:	b0 01       	movw	r22, r0
    216c:	b3 9f       	mul	r27, r19
    216e:	c0 01       	movw	r24, r0
    2170:	a3 9f       	mul	r26, r19
    2172:	70 0d       	add	r23, r0
    2174:	81 1d       	adc	r24, r1
    2176:	11 24       	eor	r1, r1
    2178:	91 1d       	adc	r25, r1
    217a:	b2 9f       	mul	r27, r18
    217c:	70 0d       	add	r23, r0
    217e:	81 1d       	adc	r24, r1
    2180:	11 24       	eor	r1, r1
    2182:	91 1d       	adc	r25, r1
    2184:	08 95       	ret

00002186 <__muluhisi3>:
    2186:	0e 94 b4 10 	call	0x2168	; 0x2168 <__umulhisi3>
    218a:	a5 9f       	mul	r26, r21
    218c:	90 0d       	add	r25, r0
    218e:	b4 9f       	mul	r27, r20
    2190:	90 0d       	add	r25, r0
    2192:	a4 9f       	mul	r26, r20
    2194:	80 0d       	add	r24, r0
    2196:	91 1d       	adc	r25, r1
    2198:	11 24       	eor	r1, r1
    219a:	08 95       	ret

0000219c <__mulshisi3>:
    219c:	b7 ff       	sbrs	r27, 7
    219e:	0c 94 c3 10 	jmp	0x2186	; 0x2186 <__muluhisi3>

000021a2 <__mulohisi3>:
    21a2:	0e 94 c3 10 	call	0x2186	; 0x2186 <__muluhisi3>
    21a6:	82 1b       	sub	r24, r18
    21a8:	93 0b       	sbc	r25, r19
    21aa:	08 95       	ret

000021ac <__udivmodhi4>:
    21ac:	aa 1b       	sub	r26, r26
    21ae:	bb 1b       	sub	r27, r27
    21b0:	51 e1       	ldi	r21, 0x11	; 17
    21b2:	07 c0       	rjmp	.+14     	; 0x21c2 <__udivmodhi4_ep>

000021b4 <__udivmodhi4_loop>:
    21b4:	aa 1f       	adc	r26, r26
    21b6:	bb 1f       	adc	r27, r27
    21b8:	a6 17       	cp	r26, r22
    21ba:	b7 07       	cpc	r27, r23
    21bc:	10 f0       	brcs	.+4      	; 0x21c2 <__udivmodhi4_ep>
    21be:	a6 1b       	sub	r26, r22
    21c0:	b7 0b       	sbc	r27, r23

000021c2 <__udivmodhi4_ep>:
    21c2:	88 1f       	adc	r24, r24
    21c4:	99 1f       	adc	r25, r25
    21c6:	5a 95       	dec	r21
    21c8:	a9 f7       	brne	.-22     	; 0x21b4 <__udivmodhi4_loop>
    21ca:	80 95       	com	r24
    21cc:	90 95       	com	r25
    21ce:	bc 01       	movw	r22, r24
    21d0:	cd 01       	movw	r24, r26
    21d2:	08 95       	ret

000021d4 <__tablejump2__>:
    21d4:	ee 0f       	add	r30, r30
    21d6:	ff 1f       	adc	r31, r31
    21d8:	05 90       	lpm	r0, Z+
    21da:	f4 91       	lpm	r31, Z
    21dc:	e0 2d       	mov	r30, r0
    21de:	09 94       	ijmp

000021e0 <eeprom_read_byte>:
    21e0:	f9 99       	sbic	0x1f, 1	; 31
    21e2:	fe cf       	rjmp	.-4      	; 0x21e0 <eeprom_read_byte>
    21e4:	92 bd       	out	0x22, r25	; 34
    21e6:	81 bd       	out	0x21, r24	; 33
    21e8:	f8 9a       	sbi	0x1f, 0	; 31
    21ea:	99 27       	eor	r25, r25
    21ec:	80 b5       	in	r24, 0x20	; 32
    21ee:	08 95       	ret

000021f0 <_exit>:
    21f0:	f8 94       	cli

000021f2 <__stop_program>:
    21f2:	ff cf       	rjmp	.-2      	; 0x21f2 <__stop_program>
